// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: dev.hebei.camerax_android.MyPermissionsManager$MyPermissionsResultCallback
class MyPermissionsManager_MyPermissionsResultCallback extends jni.JObject {
  @override
  late final jni.JObjType<MyPermissionsManager_MyPermissionsResultCallback>
      $type = type;

  MyPermissionsManager_MyPermissionsResultCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'dev/hebei/camerax_android/MyPermissionsManager$MyPermissionsResultCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $MyPermissionsManager_MyPermissionsResultCallbackType();
  static final _id_onPermissionsResult = _class.instanceMethodId(
    r'onPermissionsResult',
    r'(Z)V',
  );

  static final _onPermissionsResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract void onPermissionsResult(boolean z)
  void onPermissionsResult(
    bool z,
  ) {
    _onPermissionsResult(reference.pointer,
            _id_onPermissionsResult as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MyPermissionsManager_MyPermissionsResultCallbackImpl>
      _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onPermissionsResult(Z)V') {
        _$impls[$p]!.onPermissionsResult(
          $a[0]
              .castTo(const jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MyPermissionsManager_MyPermissionsResultCallback.implement(
    $MyPermissionsManager_MyPermissionsResultCallbackImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MyPermissionsManager_MyPermissionsResultCallback.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'dev.hebei.camerax_android.MyPermissionsManager$MyPermissionsResultCallback',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MyPermissionsManager_MyPermissionsResultCallbackImpl {
  factory $MyPermissionsManager_MyPermissionsResultCallbackImpl({
    required void Function(bool z) onPermissionsResult,
  }) = _$MyPermissionsManager_MyPermissionsResultCallbackImpl;

  void onPermissionsResult(bool z);
}

class _$MyPermissionsManager_MyPermissionsResultCallbackImpl
    implements $MyPermissionsManager_MyPermissionsResultCallbackImpl {
  _$MyPermissionsManager_MyPermissionsResultCallbackImpl({
    required void Function(bool z) onPermissionsResult,
  }) : _onPermissionsResult = onPermissionsResult;

  final void Function(bool z) _onPermissionsResult;

  void onPermissionsResult(bool z) {
    return _onPermissionsResult(z);
  }
}

final class $MyPermissionsManager_MyPermissionsResultCallbackType
    extends jni.JObjType<MyPermissionsManager_MyPermissionsResultCallback> {
  const $MyPermissionsManager_MyPermissionsResultCallbackType();

  @override
  String get signature =>
      r'Ldev/hebei/camerax_android/MyPermissionsManager$MyPermissionsResultCallback;';

  @override
  MyPermissionsManager_MyPermissionsResultCallback fromReference(
          jni.JReference reference) =>
      MyPermissionsManager_MyPermissionsResultCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($MyPermissionsManager_MyPermissionsResultCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MyPermissionsManager_MyPermissionsResultCallbackType) &&
        other is $MyPermissionsManager_MyPermissionsResultCallbackType;
  }
}

/// from: dev.hebei.camerax_android.MyPermissionsManager
class MyPermissionsManager extends jni.JObject {
  @override
  late final jni.JObjType<MyPermissionsManager> $type = type;

  MyPermissionsManager.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'dev/hebei/camerax_android/MyPermissionsManager');

  /// The type which includes information such as the signature of this class.
  static const type = $MyPermissionsManagerType();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Ldev/hebei/camerax_android/MyPermissionsManager;',
  );

  /// from: static public final dev.hebei.camerax_android.MyPermissionsManager INSTANCE
  /// The returned object must be released after use, by calling the [release] method.
  static MyPermissionsManager get INSTANCE =>
      _id_INSTANCE.get(_class, const $MyPermissionsManagerType());

  static final _id_checkPermissions = _class.instanceMethodId(
    r'checkPermissions',
    r'([Ljava/lang/String;)Z',
  );

  static final _checkPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean checkPermissions(java.lang.String[] strings)
  bool checkPermissions(
    jni.JArray<jni.JString> strings,
  ) {
    return _checkPermissions(reference.pointer,
            _id_checkPermissions as jni.JMethodIDPtr, strings.reference.pointer)
        .boolean;
  }

  static final _id_requestPermissions = _class.instanceMethodId(
    r'requestPermissions',
    r'([Ljava/lang/String;Ldev/hebei/camerax_android/MyPermissionsManager$MyPermissionsResultCallback;)V',
  );

  static final _requestPermissions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void requestPermissions(java.lang.String[] strings, dev.hebei.camerax_android.MyPermissionsManager$MyPermissionsResultCallback myPermissionsResultCallback)
  void requestPermissions(
    jni.JArray<jni.JString> strings,
    MyPermissionsManager_MyPermissionsResultCallback
        myPermissionsResultCallback,
  ) {
    _requestPermissions(
            reference.pointer,
            _id_requestPermissions as jni.JMethodIDPtr,
            strings.reference.pointer,
            myPermissionsResultCallback.reference.pointer)
        .check();
  }
}

final class $MyPermissionsManagerType
    extends jni.JObjType<MyPermissionsManager> {
  const $MyPermissionsManagerType();

  @override
  String get signature => r'Ldev/hebei/camerax_android/MyPermissionsManager;';

  @override
  MyPermissionsManager fromReference(jni.JReference reference) =>
      MyPermissionsManager.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MyPermissionsManagerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MyPermissionsManagerType) &&
        other is $MyPermissionsManagerType;
  }
}
