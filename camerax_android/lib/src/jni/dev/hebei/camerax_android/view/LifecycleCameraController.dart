// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../android/content/Context.dart' as context$_;

import '../../../../androidx/lifecycle/LifecycleOwner.dart' as lifecycleowner$_;

import 'CameraController.dart' as cameracontroller$_;

/// from: `dev.hebei.camerax_android.view.LifecycleCameraController`
class LifecycleCameraController extends cameracontroller$_.CameraController {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LifecycleCameraController> $type;

  @jni$_.internal
  LifecycleCameraController.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/view/LifecycleCameraController');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $LifecycleCameraController$NullableType();
  static const type = $LifecycleCameraController$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LifecycleCameraController(
    context$_.Context context,
  ) {
    final _$context = context.reference;
    return LifecycleCameraController.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$context.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroidx/camera/view/LifecycleCameraController;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.camera.view.LifecycleCameraController lifecycleCameraController)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LifecycleCameraController.new$1(
    jni$_.JObject lifecycleCameraController,
  ) {
    final _$lifecycleCameraController = lifecycleCameraController.reference;
    return LifecycleCameraController.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$lifecycleCameraController.pointer)
        .reference);
  }

  static final _id_bindToLifecycle = _class.instanceMethodId(
    r'bindToLifecycle',
    r'(Landroidx/lifecycle/LifecycleOwner;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _bindToLifecycle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object bindToLifecycle(androidx.lifecycle.LifecycleOwner lifecycleOwner, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> bindToLifecycle(
    lifecycleowner$_.LifecycleOwner? lifecycleOwner,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$lifecycleOwner = lifecycleOwner?.reference ?? jni$_.jNullReference;
    _bindToLifecycle(
            reference.pointer,
            _id_bindToLifecycle as jni$_.JMethodIDPtr,
            _$lifecycleOwner.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_unbind = _class.instanceMethodId(
    r'unbind',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _unbind = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object unbind(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> unbind() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _unbind(reference.pointer, _id_unbind as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }
}

final class $LifecycleCameraController$NullableType
    extends jni$_.JObjType<LifecycleCameraController?> {
  @jni$_.internal
  const $LifecycleCameraController$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/view/LifecycleCameraController;';

  @jni$_.internal
  @core$_.override
  LifecycleCameraController? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : LifecycleCameraController.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      const cameracontroller$_.$CameraController$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LifecycleCameraController?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($LifecycleCameraController$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LifecycleCameraController$NullableType) &&
        other is $LifecycleCameraController$NullableType;
  }
}

final class $LifecycleCameraController$Type
    extends jni$_.JObjType<LifecycleCameraController> {
  @jni$_.internal
  const $LifecycleCameraController$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/view/LifecycleCameraController;';

  @jni$_.internal
  @core$_.override
  LifecycleCameraController fromReference(jni$_.JReference reference) =>
      LifecycleCameraController.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      const cameracontroller$_.$CameraController$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LifecycleCameraController?> get nullableType =>
      const $LifecycleCameraController$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($LifecycleCameraController$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LifecycleCameraController$Type) &&
        other is $LifecycleCameraController$Type;
  }
}
