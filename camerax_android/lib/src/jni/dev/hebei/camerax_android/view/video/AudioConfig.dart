// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `dev.hebei.camerax_android.view.video.AudioConfig$Companion`
class AudioConfig$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioConfig$Companion> $type;

  @jni$_.internal
  AudioConfig$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/view/video/AudioConfig$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AudioConfig$Companion$NullableType();
  static const type = $AudioConfig$Companion$Type();
  static final _id_create = _class.instanceMethodId(
    r'create',
    r'(Z)Ldev/hebei/camerax_android/view/video/AudioConfig;',
  );

  static final _create = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final dev.hebei.camerax_android.view.video.AudioConfig create(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  AudioConfig create(
    bool z,
  ) {
    return _create(
            reference.pointer, _id_create as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<AudioConfig>(const $AudioConfig$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioConfig$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return AudioConfig$Companion.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $AudioConfig$Companion$NullableType
    extends jni$_.JObjType<AudioConfig$Companion?> {
  @jni$_.internal
  const $AudioConfig$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/view/video/AudioConfig$Companion;';

  @jni$_.internal
  @core$_.override
  AudioConfig$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AudioConfig$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioConfig$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioConfig$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioConfig$Companion$NullableType) &&
        other is $AudioConfig$Companion$NullableType;
  }
}

final class $AudioConfig$Companion$Type
    extends jni$_.JObjType<AudioConfig$Companion> {
  @jni$_.internal
  const $AudioConfig$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/view/video/AudioConfig$Companion;';

  @jni$_.internal
  @core$_.override
  AudioConfig$Companion fromReference(jni$_.JReference reference) =>
      AudioConfig$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioConfig$Companion?> get nullableType =>
      const $AudioConfig$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioConfig$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioConfig$Companion$Type) &&
        other is $AudioConfig$Companion$Type;
  }
}

/// from: `dev.hebei.camerax_android.view.video.AudioConfig`
class AudioConfig extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioConfig> $type;

  @jni$_.internal
  AudioConfig.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/view/video/AudioConfig');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AudioConfig$NullableType();
  static const type = $AudioConfig$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Ldev/hebei/camerax_android/view/video/AudioConfig$Companion;',
  );

  /// from: `static public final dev.hebei.camerax_android.view.video.AudioConfig$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static AudioConfig$Companion? get Companion =>
      _id_Companion.get(_class, const $AudioConfig$Companion$NullableType());

  static final _id_new$ = _class.constructorId(
    r'(Landroidx/camera/view/video/AudioConfig;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.camera.view.video.AudioConfig audioConfig)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioConfig(
    jni$_.JObject audioConfig,
  ) {
    final _$audioConfig = audioConfig.reference;
    return AudioConfig.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$audioConfig.pointer)
        .reference);
  }

  static final _id_getAudioEnabled = _class.instanceMethodId(
    r'getAudioEnabled',
    r'()Z',
  );

  static final _getAudioEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean getAudioEnabled()`
  bool getAudioEnabled() {
    return _getAudioEnabled(
            reference.pointer, _id_getAudioEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }
}

final class $AudioConfig$NullableType extends jni$_.JObjType<AudioConfig?> {
  @jni$_.internal
  const $AudioConfig$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/view/video/AudioConfig;';

  @jni$_.internal
  @core$_.override
  AudioConfig? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : AudioConfig.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioConfig?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioConfig$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioConfig$NullableType) &&
        other is $AudioConfig$NullableType;
  }
}

final class $AudioConfig$Type extends jni$_.JObjType<AudioConfig> {
  @jni$_.internal
  const $AudioConfig$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/view/video/AudioConfig;';

  @jni$_.internal
  @core$_.override
  AudioConfig fromReference(jni$_.JReference reference) =>
      AudioConfig.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioConfig?> get nullableType =>
      const $AudioConfig$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioConfig$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioConfig$Type) &&
        other is $AudioConfig$Type;
  }
}
