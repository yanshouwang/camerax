// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../android/content/Context.dart' as context$_;

import 'CameraController.dart' as cameracontroller$_;

import 'LifecycleCameraController.dart' as lifecyclecameracontroller$_;

/// from: `dev.hebei.camerax_android.view.PreviewView$Factory`
class PreviewView$Factory extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PreviewView$Factory> $type;

  @jni$_.internal
  PreviewView$Factory.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/view/PreviewView$Factory');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PreviewView$Factory$NullableType();
  static const type = $PreviewView$Factory$Type();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Ldev/hebei/camerax_android/view/PreviewView$Factory;',
  );

  /// from: `static public final dev.hebei.camerax_android.view.PreviewView$Factory INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView$Factory? get INSTANCE =>
      _id_INSTANCE.get(_class, const $PreviewView$Factory$NullableType());

  static final _id_create = _class.instanceMethodId(
    r'create',
    r'(Landroid/content/Context;ILjava/lang/Object;)Lio/flutter/plugin/platform/PlatformView;',
  );

  static final _create = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public io.flutter.plugin.platform.PlatformView create(android.content.Context context, int i, java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject create(
    context$_.Context context,
    int i,
    jni$_.JObject? object,
  ) {
    final _$context = context.reference;
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _create(reference.pointer, _id_create as jni$_.JMethodIDPtr,
            _$context.pointer, i, _$object.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_addView = _class.instanceMethodId(
    r'addView',
    r'(ILdev/hebei/camerax_android/view/PreviewView;)V',
  );

  static final _addView = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addView(int i, dev.hebei.camerax_android.view.PreviewView previewView)`
  void addView(
    int i,
    PreviewView previewView,
  ) {
    final _$previewView = previewView.reference;
    _addView(reference.pointer, _id_addView as jni$_.JMethodIDPtr, i,
            _$previewView.pointer)
        .check();
  }

  static final _id_retrieveView = _class.instanceMethodId(
    r'retrieveView',
    r'(I)Ldev/hebei/camerax_android/view/PreviewView;',
  );

  static final _retrieveView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final dev.hebei.camerax_android.view.PreviewView retrieveView(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  PreviewView? retrieveView(
    int i,
  ) {
    return _retrieveView(
            reference.pointer, _id_retrieveView as jni$_.JMethodIDPtr, i)
        .object<PreviewView?>(const $PreviewView$NullableType());
  }

  static final _id_removeView = _class.instanceMethodId(
    r'removeView',
    r'(I)Ldev/hebei/camerax_android/view/PreviewView;',
  );

  static final _removeView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final dev.hebei.camerax_android.view.PreviewView removeView(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  PreviewView? removeView(
    int i,
  ) {
    return _removeView(
            reference.pointer, _id_removeView as jni$_.JMethodIDPtr, i)
        .object<PreviewView?>(const $PreviewView$NullableType());
  }
}

final class $PreviewView$Factory$NullableType
    extends jni$_.JObjType<PreviewView$Factory?> {
  @jni$_.internal
  const $PreviewView$Factory$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/view/PreviewView$Factory;';

  @jni$_.internal
  @core$_.override
  PreviewView$Factory? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PreviewView$Factory.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PreviewView$Factory?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PreviewView$Factory$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewView$Factory$NullableType) &&
        other is $PreviewView$Factory$NullableType;
  }
}

final class $PreviewView$Factory$Type
    extends jni$_.JObjType<PreviewView$Factory> {
  @jni$_.internal
  const $PreviewView$Factory$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/view/PreviewView$Factory;';

  @jni$_.internal
  @core$_.override
  PreviewView$Factory fromReference(jni$_.JReference reference) =>
      PreviewView$Factory.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PreviewView$Factory?> get nullableType =>
      const $PreviewView$Factory$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PreviewView$Factory$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewView$Factory$Type) &&
        other is $PreviewView$Factory$Type;
  }
}

/// from: `dev.hebei.camerax_android.view.PreviewView$ScaleType`
class PreviewView$ScaleType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PreviewView$ScaleType> $type;

  @jni$_.internal
  PreviewView$ScaleType.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/view/PreviewView$ScaleType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PreviewView$ScaleType$NullableType();
  static const type = $PreviewView$ScaleType$Type();
  static final _id_FILL_START = _class.staticFieldId(
    r'FILL_START',
    r'Ldev/hebei/camerax_android/view/PreviewView$ScaleType;',
  );

  /// from: `static public final dev.hebei.camerax_android.view.PreviewView$ScaleType FILL_START`
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView$ScaleType? get FILL_START =>
      _id_FILL_START.get(_class, const $PreviewView$ScaleType$NullableType());

  static final _id_FILL_CENTER = _class.staticFieldId(
    r'FILL_CENTER',
    r'Ldev/hebei/camerax_android/view/PreviewView$ScaleType;',
  );

  /// from: `static public final dev.hebei.camerax_android.view.PreviewView$ScaleType FILL_CENTER`
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView$ScaleType? get FILL_CENTER =>
      _id_FILL_CENTER.get(_class, const $PreviewView$ScaleType$NullableType());

  static final _id_FILL_END = _class.staticFieldId(
    r'FILL_END',
    r'Ldev/hebei/camerax_android/view/PreviewView$ScaleType;',
  );

  /// from: `static public final dev.hebei.camerax_android.view.PreviewView$ScaleType FILL_END`
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView$ScaleType? get FILL_END =>
      _id_FILL_END.get(_class, const $PreviewView$ScaleType$NullableType());

  static final _id_FIT_START = _class.staticFieldId(
    r'FIT_START',
    r'Ldev/hebei/camerax_android/view/PreviewView$ScaleType;',
  );

  /// from: `static public final dev.hebei.camerax_android.view.PreviewView$ScaleType FIT_START`
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView$ScaleType? get FIT_START =>
      _id_FIT_START.get(_class, const $PreviewView$ScaleType$NullableType());

  static final _id_FIT_CENTER = _class.staticFieldId(
    r'FIT_CENTER',
    r'Ldev/hebei/camerax_android/view/PreviewView$ScaleType;',
  );

  /// from: `static public final dev.hebei.camerax_android.view.PreviewView$ScaleType FIT_CENTER`
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView$ScaleType? get FIT_CENTER =>
      _id_FIT_CENTER.get(_class, const $PreviewView$ScaleType$NullableType());

  static final _id_FIT_END = _class.staticFieldId(
    r'FIT_END',
    r'Ldev/hebei/camerax_android/view/PreviewView$ScaleType;',
  );

  /// from: `static public final dev.hebei.camerax_android.view.PreviewView$ScaleType FIT_END`
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView$ScaleType? get FIT_END =>
      _id_FIT_END.get(_class, const $PreviewView$ScaleType$NullableType());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Ldev/hebei/camerax_android/view/PreviewView$ScaleType;',
  );

  static final _values = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public dev.hebei.camerax_android.view.PreviewView$ScaleType[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JArray<PreviewView$ScaleType?>? values() {
    return _values(_class.reference.pointer, _id_values as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<PreviewView$ScaleType?>?>(
            const jni$_.JArrayNullableType<PreviewView$ScaleType?>(
                $PreviewView$ScaleType$NullableType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Ldev/hebei/camerax_android/view/PreviewView$ScaleType;',
  );

  static final _valueOf = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public dev.hebei.camerax_android.view.PreviewView$ScaleType valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView$ScaleType? valueOf(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _valueOf(_class.reference.pointer, _id_valueOf as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<PreviewView$ScaleType?>(
            const $PreviewView$ScaleType$NullableType());
  }
}

final class $PreviewView$ScaleType$NullableType
    extends jni$_.JObjType<PreviewView$ScaleType?> {
  @jni$_.internal
  const $PreviewView$ScaleType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/view/PreviewView$ScaleType;';

  @jni$_.internal
  @core$_.override
  PreviewView$ScaleType? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PreviewView$ScaleType.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PreviewView$ScaleType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PreviewView$ScaleType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewView$ScaleType$NullableType) &&
        other is $PreviewView$ScaleType$NullableType;
  }
}

final class $PreviewView$ScaleType$Type
    extends jni$_.JObjType<PreviewView$ScaleType> {
  @jni$_.internal
  const $PreviewView$ScaleType$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/view/PreviewView$ScaleType;';

  @jni$_.internal
  @core$_.override
  PreviewView$ScaleType fromReference(jni$_.JReference reference) =>
      PreviewView$ScaleType.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PreviewView$ScaleType?> get nullableType =>
      const $PreviewView$ScaleType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PreviewView$ScaleType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewView$ScaleType$Type) &&
        other is $PreviewView$ScaleType$Type;
  }
}

/// from: `dev.hebei.camerax_android.view.PreviewView`
class PreviewView extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PreviewView> $type;

  @jni$_.internal
  PreviewView.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/view/PreviewView');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PreviewView$NullableType();
  static const type = $PreviewView$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;ILjava/lang/Object;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context, int i, java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  factory PreviewView(
    context$_.Context context,
    int i,
    jni$_.JObject? object,
  ) {
    final _$context = context.reference;
    final _$object = object?.reference ?? jni$_.jNullReference;
    return PreviewView.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$context.pointer,
            i,
            _$object.pointer)
        .reference);
  }

  static final _id_getView = _class.instanceMethodId(
    r'getView',
    r'()Landroid/view/View;',
  );

  static final _getView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.View getView()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getView() {
    return _getView(reference.pointer, _id_getView as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_dispose = _class.instanceMethodId(
    r'dispose',
    r'()V',
  );

  static final _dispose = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void dispose()`
  void dispose() {
    _dispose(reference.pointer, _id_dispose as jni$_.JMethodIDPtr).check();
  }

  static final _id_getController = _class.instanceMethodId(
    r'getController',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getController = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object getController(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<lifecyclecameracontroller$_.LifecycleCameraController?>
      getController() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _getController(reference.pointer, _id_getController as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const lifecyclecameracontroller$_
            .$LifecycleCameraController$NullableType()
        .jClass
        .reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const lifecyclecameracontroller$_
            .$LifecycleCameraController$NullableType()
        .fromReference($o);
  }

  static final _id_setController = _class.instanceMethodId(
    r'setController',
    r'(Ldev/hebei/camerax_android/view/CameraController;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _setController = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object setController(dev.hebei.camerax_android.view.CameraController cameraController, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> setController(
    cameracontroller$_.CameraController? cameraController,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$cameraController =
        cameraController?.reference ?? jni$_.jNullReference;
    _setController(reference.pointer, _id_setController as jni$_.JMethodIDPtr,
            _$cameraController.pointer, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_getScaleType = _class.instanceMethodId(
    r'getScaleType',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getScaleType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object getScaleType(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<PreviewView$ScaleType> getScaleType() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _getScaleType(reference.pointer, _id_getScaleType as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const $PreviewView$ScaleType$Type().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const $PreviewView$ScaleType$Type().fromReference($o);
  }

  static final _id_setScaleType = _class.instanceMethodId(
    r'setScaleType',
    r'(Ldev/hebei/camerax_android/view/PreviewView$ScaleType;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _setScaleType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object setScaleType(dev.hebei.camerax_android.view.PreviewView$ScaleType scaleType, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> setScaleType(
    PreviewView$ScaleType? scaleType,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$scaleType = scaleType?.reference ?? jni$_.jNullReference;
    _setScaleType(reference.pointer, _id_setScaleType as jni$_.JMethodIDPtr,
            _$scaleType.pointer, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }
}

final class $PreviewView$NullableType extends jni$_.JObjType<PreviewView?> {
  @jni$_.internal
  const $PreviewView$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/view/PreviewView;';

  @jni$_.internal
  @core$_.override
  PreviewView? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : PreviewView.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PreviewView?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PreviewView$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewView$NullableType) &&
        other is $PreviewView$NullableType;
  }
}

final class $PreviewView$Type extends jni$_.JObjType<PreviewView> {
  @jni$_.internal
  const $PreviewView$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/view/PreviewView;';

  @jni$_.internal
  @core$_.override
  PreviewView fromReference(jni$_.JReference reference) =>
      PreviewView.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PreviewView?> get nullableType =>
      const $PreviewView$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PreviewView$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewView$Type) &&
        other is $PreviewView$Type;
  }
}
