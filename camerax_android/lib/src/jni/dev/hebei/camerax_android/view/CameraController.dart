// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../androidx/lifecycle/LiveData.dart' as livedata$_;

import '../core/CameraSelector.dart' as cameraselector$_;

import '../core/ZoomState.dart' as zoomstate$_;

/// from: `dev.hebei.camerax_android.view.CameraController`
class CameraController extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraController> $type;

  @jni$_.internal
  CameraController.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/view/CameraController');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraController$NullableType();
  static const type = $CameraController$Type();
  static final _id_initialize = _class.instanceMethodId(
    r'initialize',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _initialize = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object initialize(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> initialize() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _initialize(reference.pointer, _id_initialize as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_hasCamera = _class.instanceMethodId(
    r'hasCamera',
    r'(Ldev/hebei/camerax_android/core/CameraSelector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _hasCamera = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object hasCamera(dev.hebei.camerax_android.core.CameraSelector cameraSelector, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JBoolean> hasCamera(
    cameraselector$_.CameraSelector? cameraSelector,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$cameraSelector = cameraSelector?.reference ?? jni$_.jNullReference;
    _hasCamera(reference.pointer, _id_hasCamera as jni$_.JMethodIDPtr,
            _$cameraSelector.pointer, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JBooleanType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JBooleanType().fromReference($o);
  }

  static final _id_getCameraSelector = _class.instanceMethodId(
    r'getCameraSelector',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getCameraSelector = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object getCameraSelector(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<cameraselector$_.CameraSelector> getCameraSelector() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _getCameraSelector(reference.pointer,
            _id_getCameraSelector as jni$_.JMethodIDPtr, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const cameraselector$_.$CameraSelector$Type().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const cameraselector$_.$CameraSelector$Type().fromReference($o);
  }

  static final _id_setCameraSelector = _class.instanceMethodId(
    r'setCameraSelector',
    r'(Ldev/hebei/camerax_android/core/CameraSelector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _setCameraSelector = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object setCameraSelector(dev.hebei.camerax_android.core.CameraSelector cameraSelector, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> setCameraSelector(
    cameraselector$_.CameraSelector? cameraSelector,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$cameraSelector = cameraSelector?.reference ?? jni$_.jNullReference;
    _setCameraSelector(
            reference.pointer,
            _id_setCameraSelector as jni$_.JMethodIDPtr,
            _$cameraSelector.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_isTapToFocusEnabled = _class.instanceMethodId(
    r'isTapToFocusEnabled',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _isTapToFocusEnabled = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object isTapToFocusEnabled(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JBoolean> isTapToFocusEnabled() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _isTapToFocusEnabled(
            reference.pointer,
            _id_isTapToFocusEnabled as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JBooleanType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JBooleanType().fromReference($o);
  }

  static final _id_setTapToFocusEnabled = _class.instanceMethodId(
    r'setTapToFocusEnabled',
    r'(ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _setTapToFocusEnabled = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object setTapToFocusEnabled(boolean z, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> setTapToFocusEnabled(
    bool z,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _setTapToFocusEnabled(
            reference.pointer,
            _id_setTapToFocusEnabled as jni$_.JMethodIDPtr,
            z ? 1 : 0,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_isPinchToZoomEnabled = _class.instanceMethodId(
    r'isPinchToZoomEnabled',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _isPinchToZoomEnabled = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object isPinchToZoomEnabled(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JBoolean> isPinchToZoomEnabled() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _isPinchToZoomEnabled(
            reference.pointer,
            _id_isPinchToZoomEnabled as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JBooleanType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JBooleanType().fromReference($o);
  }

  static final _id_setPinchToZoomEnabled = _class.instanceMethodId(
    r'setPinchToZoomEnabled',
    r'(ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _setPinchToZoomEnabled = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object setPinchToZoomEnabled(boolean z, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> setPinchToZoomEnabled(
    bool z,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _setPinchToZoomEnabled(
            reference.pointer,
            _id_setPinchToZoomEnabled as jni$_.JMethodIDPtr,
            z ? 1 : 0,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_getZoomState = _class.instanceMethodId(
    r'getZoomState',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getZoomState = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object getZoomState(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<livedata$_.LiveData<zoomstate$_.ZoomState?>>
      getZoomState() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _getZoomState(reference.pointer, _id_getZoomState as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const livedata$_.$LiveData$Type<zoomstate$_.ZoomState?>(
            zoomstate$_.$ZoomState$NullableType())
        .jClass
        .reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const livedata$_.$LiveData$Type<zoomstate$_.ZoomState?>(
            zoomstate$_.$ZoomState$NullableType())
        .fromReference($o);
  }

  static final _id_setZoomRatio = _class.instanceMethodId(
    r'setZoomRatio',
    r'(FLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _setZoomRatio = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, double, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object setZoomRatio(float f, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> setZoomRatio(
    double f,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _setZoomRatio(reference.pointer, _id_setZoomRatio as jni$_.JMethodIDPtr, f,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_setLinearZoom = _class.instanceMethodId(
    r'setLinearZoom',
    r'(FLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _setLinearZoom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, double, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object setLinearZoom(float f, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> setLinearZoom(
    double f,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _setLinearZoom(reference.pointer, _id_setLinearZoom as jni$_.JMethodIDPtr,
            f, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }
}

final class $CameraController$NullableType
    extends jni$_.JObjType<CameraController?> {
  @jni$_.internal
  const $CameraController$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/view/CameraController;';

  @jni$_.internal
  @core$_.override
  CameraController? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraController.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraController?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraController$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraController$NullableType) &&
        other is $CameraController$NullableType;
  }
}

final class $CameraController$Type extends jni$_.JObjType<CameraController> {
  @jni$_.internal
  const $CameraController$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/view/CameraController;';

  @jni$_.internal
  @core$_.override
  CameraController fromReference(jni$_.JReference reference) =>
      CameraController.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraController?> get nullableType =>
      const $CameraController$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraController$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraController$Type) &&
        other is $CameraController$Type;
  }
}
