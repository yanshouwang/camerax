// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../java/io/File.dart' as file_;

/// from: dev.hebei.camerax_android.MyFileOutputOptions$MyBuilder
class MyFileOutputOptions_MyBuilder extends jni.JObject {
  @override
  late final jni.JObjType<MyFileOutputOptions_MyBuilder> $type = type;

  MyFileOutputOptions_MyBuilder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'dev/hebei/camerax_android/MyFileOutputOptions$MyBuilder');

  /// The type which includes information such as the signature of this class.
  static const type = $MyFileOutputOptions_MyBuilderType();
  static final _id_new0 = _class.constructorId(
    r'(Ljava/io/File;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.io.File file)
  /// The returned object must be released after use, by calling the [release] method.
  factory MyFileOutputOptions_MyBuilder(
    file_.File file,
  ) {
    return MyFileOutputOptions_MyBuilder.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            file.reference.pointer)
        .reference);
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/camera/video/FileOutputOptions;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final androidx.camera.video.FileOutputOptions build()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $MyFileOutputOptions_MyBuilderType
    extends jni.JObjType<MyFileOutputOptions_MyBuilder> {
  const $MyFileOutputOptions_MyBuilderType();

  @override
  String get signature =>
      r'Ldev/hebei/camerax_android/MyFileOutputOptions$MyBuilder;';

  @override
  MyFileOutputOptions_MyBuilder fromReference(jni.JReference reference) =>
      MyFileOutputOptions_MyBuilder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MyFileOutputOptions_MyBuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MyFileOutputOptions_MyBuilderType) &&
        other is $MyFileOutputOptions_MyBuilderType;
  }
}

/// from: dev.hebei.camerax_android.MyFileOutputOptions
class MyFileOutputOptions extends jni.JObject {
  @override
  late final jni.JObjType<MyFileOutputOptions> $type = type;

  MyFileOutputOptions.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'dev/hebei/camerax_android/MyFileOutputOptions');

  /// The type which includes information such as the signature of this class.
  static const type = $MyFileOutputOptionsType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MyFileOutputOptions() {
    return MyFileOutputOptions.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }
}

final class $MyFileOutputOptionsType extends jni.JObjType<MyFileOutputOptions> {
  const $MyFileOutputOptionsType();

  @override
  String get signature => r'Ldev/hebei/camerax_android/MyFileOutputOptions;';

  @override
  MyFileOutputOptions fromReference(jni.JReference reference) =>
      MyFileOutputOptions.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MyFileOutputOptionsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MyFileOutputOptionsType) &&
        other is $MyFileOutputOptionsType;
  }
}
