// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../android/content/Context.dart' as context_;

import '../../../androidx/camera/view/CameraController.dart'
    as cameracontroller_;

/// from: dev.hebei.camerax_android.MyPreviewView$MyFactory
class MyPreviewView_MyFactory extends jni.JObject {
  @override
  late final jni.JObjType<MyPreviewView_MyFactory> $type = type;

  MyPreviewView_MyFactory.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'dev/hebei/camerax_android/MyPreviewView$MyFactory');

  /// The type which includes information such as the signature of this class.
  static const type = $MyPreviewView_MyFactoryType();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Ldev/hebei/camerax_android/MyPreviewView$MyFactory;',
  );

  /// from: static public final dev.hebei.camerax_android.MyPreviewView$MyFactory INSTANCE
  /// The returned object must be released after use, by calling the [release] method.
  static MyPreviewView_MyFactory get INSTANCE =>
      _id_INSTANCE.get(_class, const $MyPreviewView_MyFactoryType());

  static final _id_create = _class.instanceMethodId(
    r'create',
    r'(Landroid/content/Context;ILjava/lang/Object;)Lio/flutter/plugin/platform/PlatformView;',
  );

  static final _create = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public io.flutter.plugin.platform.PlatformView create(android.content.Context context, int i, java.lang.Object object)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject create(
    context_.Context context,
    int i,
    jni.JObject object,
  ) {
    return _create(reference.pointer, _id_create as jni.JMethodIDPtr,
            context.reference.pointer, i, object.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_addView = _class.instanceMethodId(
    r'addView',
    r'(ILdev/hebei/camerax_android/MyPreviewView;)V',
  );

  static final _addView = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void addView(int i, dev.hebei.camerax_android.MyPreviewView myPreviewView)
  void addView(
    int i,
    MyPreviewView myPreviewView,
  ) {
    _addView(reference.pointer, _id_addView as jni.JMethodIDPtr, i,
            myPreviewView.reference.pointer)
        .check();
  }

  static final _id_retrieveView = _class.instanceMethodId(
    r'retrieveView',
    r'(I)Ldev/hebei/camerax_android/MyPreviewView;',
  );

  static final _retrieveView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final dev.hebei.camerax_android.MyPreviewView retrieveView(int i)
  /// The returned object must be released after use, by calling the [release] method.
  MyPreviewView retrieveView(
    int i,
  ) {
    return _retrieveView(
            reference.pointer, _id_retrieveView as jni.JMethodIDPtr, i)
        .object(const $MyPreviewViewType());
  }

  static final _id_removeView = _class.instanceMethodId(
    r'removeView',
    r'(I)Ldev/hebei/camerax_android/MyPreviewView;',
  );

  static final _removeView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final dev.hebei.camerax_android.MyPreviewView removeView(int i)
  /// The returned object must be released after use, by calling the [release] method.
  MyPreviewView removeView(
    int i,
  ) {
    return _removeView(reference.pointer, _id_removeView as jni.JMethodIDPtr, i)
        .object(const $MyPreviewViewType());
  }
}

final class $MyPreviewView_MyFactoryType
    extends jni.JObjType<MyPreviewView_MyFactory> {
  const $MyPreviewView_MyFactoryType();

  @override
  String get signature =>
      r'Ldev/hebei/camerax_android/MyPreviewView$MyFactory;';

  @override
  MyPreviewView_MyFactory fromReference(jni.JReference reference) =>
      MyPreviewView_MyFactory.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MyPreviewView_MyFactoryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MyPreviewView_MyFactoryType) &&
        other is $MyPreviewView_MyFactoryType;
  }
}

/// from: dev.hebei.camerax_android.MyPreviewView$MyScaleType
class MyPreviewView_MyScaleType extends jni.JObject {
  @override
  late final jni.JObjType<MyPreviewView_MyScaleType> $type = type;

  MyPreviewView_MyScaleType.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'dev/hebei/camerax_android/MyPreviewView$MyScaleType');

  /// The type which includes information such as the signature of this class.
  static const type = $MyPreviewView_MyScaleTypeType();
  static final _id_FILL_START = _class.staticFieldId(
    r'FILL_START',
    r'Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;',
  );

  /// from: static public final dev.hebei.camerax_android.MyPreviewView$MyScaleType FILL_START
  /// The returned object must be released after use, by calling the [release] method.
  static MyPreviewView_MyScaleType get FILL_START =>
      _id_FILL_START.get(_class, const $MyPreviewView_MyScaleTypeType());

  static final _id_FILL_CENTER = _class.staticFieldId(
    r'FILL_CENTER',
    r'Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;',
  );

  /// from: static public final dev.hebei.camerax_android.MyPreviewView$MyScaleType FILL_CENTER
  /// The returned object must be released after use, by calling the [release] method.
  static MyPreviewView_MyScaleType get FILL_CENTER =>
      _id_FILL_CENTER.get(_class, const $MyPreviewView_MyScaleTypeType());

  static final _id_FILL_END = _class.staticFieldId(
    r'FILL_END',
    r'Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;',
  );

  /// from: static public final dev.hebei.camerax_android.MyPreviewView$MyScaleType FILL_END
  /// The returned object must be released after use, by calling the [release] method.
  static MyPreviewView_MyScaleType get FILL_END =>
      _id_FILL_END.get(_class, const $MyPreviewView_MyScaleTypeType());

  static final _id_FIT_START = _class.staticFieldId(
    r'FIT_START',
    r'Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;',
  );

  /// from: static public final dev.hebei.camerax_android.MyPreviewView$MyScaleType FIT_START
  /// The returned object must be released after use, by calling the [release] method.
  static MyPreviewView_MyScaleType get FIT_START =>
      _id_FIT_START.get(_class, const $MyPreviewView_MyScaleTypeType());

  static final _id_FIT_CENTER = _class.staticFieldId(
    r'FIT_CENTER',
    r'Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;',
  );

  /// from: static public final dev.hebei.camerax_android.MyPreviewView$MyScaleType FIT_CENTER
  /// The returned object must be released after use, by calling the [release] method.
  static MyPreviewView_MyScaleType get FIT_CENTER =>
      _id_FIT_CENTER.get(_class, const $MyPreviewView_MyScaleTypeType());

  static final _id_FIT_END = _class.staticFieldId(
    r'FIT_END',
    r'Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;',
  );

  /// from: static public final dev.hebei.camerax_android.MyPreviewView$MyScaleType FIT_END
  /// The returned object must be released after use, by calling the [release] method.
  static MyPreviewView_MyScaleType get FIT_END =>
      _id_FIT_END.get(_class, const $MyPreviewView_MyScaleTypeType());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;',
  );

  static final _values = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public dev.hebei.camerax_android.MyPreviewView$MyScaleType[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<MyPreviewView_MyScaleType> values() {
    return _values(_class.reference.pointer, _id_values as jni.JMethodIDPtr)
        .object(const jni.JArrayType($MyPreviewView_MyScaleTypeType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;',
  );

  static final _valueOf = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public dev.hebei.camerax_android.MyPreviewView$MyScaleType valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static MyPreviewView_MyScaleType valueOf(
    jni.JString string,
  ) {
    return _valueOf(_class.reference.pointer, _id_valueOf as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $MyPreviewView_MyScaleTypeType());
  }
}

final class $MyPreviewView_MyScaleTypeType
    extends jni.JObjType<MyPreviewView_MyScaleType> {
  const $MyPreviewView_MyScaleTypeType();

  @override
  String get signature =>
      r'Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;';

  @override
  MyPreviewView_MyScaleType fromReference(jni.JReference reference) =>
      MyPreviewView_MyScaleType.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MyPreviewView_MyScaleTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MyPreviewView_MyScaleTypeType) &&
        other is $MyPreviewView_MyScaleTypeType;
  }
}

/// from: dev.hebei.camerax_android.MyPreviewView$WhenMappings
class MyPreviewView_WhenMappings extends jni.JObject {
  @override
  late final jni.JObjType<MyPreviewView_WhenMappings> $type = type;

  MyPreviewView_WhenMappings.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'dev/hebei/camerax_android/MyPreviewView$WhenMappings');

  /// The type which includes information such as the signature of this class.
  static const type = $MyPreviewView_WhenMappingsType();
}

final class $MyPreviewView_WhenMappingsType
    extends jni.JObjType<MyPreviewView_WhenMappings> {
  const $MyPreviewView_WhenMappingsType();

  @override
  String get signature =>
      r'Ldev/hebei/camerax_android/MyPreviewView$WhenMappings;';

  @override
  MyPreviewView_WhenMappings fromReference(jni.JReference reference) =>
      MyPreviewView_WhenMappings.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MyPreviewView_WhenMappingsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MyPreviewView_WhenMappingsType) &&
        other is $MyPreviewView_WhenMappingsType;
  }
}

/// from: dev.hebei.camerax_android.MyPreviewView
class MyPreviewView extends jni.JObject {
  @override
  late final jni.JObjType<MyPreviewView> $type = type;

  MyPreviewView.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'dev/hebei/camerax_android/MyPreviewView');

  /// The type which includes information such as the signature of this class.
  static const type = $MyPreviewViewType();
  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/Context;ILjava/lang/Object;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context, int i, java.lang.Object object)
  /// The returned object must be released after use, by calling the [release] method.
  factory MyPreviewView(
    context_.Context context,
    int i,
    jni.JObject object,
  ) {
    return MyPreviewView.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            context.reference.pointer,
            i,
            object.reference.pointer)
        .reference);
  }

  static final _id_getView = _class.instanceMethodId(
    r'getView',
    r'()Landroid/view/View;',
  );

  static final _getView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.View getView()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getView() {
    return _getView(reference.pointer, _id_getView as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_dispose = _class.instanceMethodId(
    r'dispose',
    r'()V',
  );

  static final _dispose = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void dispose()
  void dispose() {
    _dispose(reference.pointer, _id_dispose as jni.JMethodIDPtr).check();
  }

  static final _id_getController = _class.instanceMethodId(
    r'getController',
    r'()Landroidx/camera/view/CameraController;',
  );

  static final _getController = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final androidx.camera.view.CameraController getController()
  /// The returned object must be released after use, by calling the [release] method.
  cameracontroller_.CameraController getController() {
    return _getController(
            reference.pointer, _id_getController as jni.JMethodIDPtr)
        .object(const cameracontroller_.$CameraControllerType());
  }

  static final _id_setController = _class.instanceMethodId(
    r'setController',
    r'(Landroidx/camera/view/CameraController;)V',
  );

  static final _setController = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setController(androidx.camera.view.CameraController cameraController)
  void setController(
    cameracontroller_.CameraController cameraController,
  ) {
    _setController(reference.pointer, _id_setController as jni.JMethodIDPtr,
            cameraController.reference.pointer)
        .check();
  }

  static final _id_getScaleType = _class.instanceMethodId(
    r'getScaleType',
    r'()Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;',
  );

  static final _getScaleType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final dev.hebei.camerax_android.MyPreviewView$MyScaleType getScaleType()
  /// The returned object must be released after use, by calling the [release] method.
  MyPreviewView_MyScaleType getScaleType() {
    return _getScaleType(
            reference.pointer, _id_getScaleType as jni.JMethodIDPtr)
        .object(const $MyPreviewView_MyScaleTypeType());
  }

  static final _id_setScaleType = _class.instanceMethodId(
    r'setScaleType',
    r'(Ldev/hebei/camerax_android/MyPreviewView$MyScaleType;)V',
  );

  static final _setScaleType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setScaleType(dev.hebei.camerax_android.MyPreviewView$MyScaleType myScaleType)
  void setScaleType(
    MyPreviewView_MyScaleType myScaleType,
  ) {
    _setScaleType(reference.pointer, _id_setScaleType as jni.JMethodIDPtr,
            myScaleType.reference.pointer)
        .check();
  }
}

final class $MyPreviewViewType extends jni.JObjType<MyPreviewView> {
  const $MyPreviewViewType();

  @override
  String get signature => r'Ldev/hebei/camerax_android/MyPreviewView;';

  @override
  MyPreviewView fromReference(jni.JReference reference) =>
      MyPreviewView.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MyPreviewViewType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MyPreviewViewType) &&
        other is $MyPreviewViewType;
  }
}
