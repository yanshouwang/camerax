// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'ImageProxy.dart' as imageproxy$_;

/// from: `dev.hebei.camerax_android.core.ImageAnalysis$Analyzer$Stub`
class ImageAnalysis$Analyzer$Stub extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ImageAnalysis$Analyzer$Stub> $type;

  @jni$_.internal
  ImageAnalysis$Analyzer$Stub.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/ImageAnalysis$Analyzer$Stub');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ImageAnalysis$Analyzer$Stub$NullableType();
  static const type = $ImageAnalysis$Analyzer$Stub$Type();
  static final _id_analyze = _class.instanceMethodId(
    r'analyze',
    r'(Ldev/hebei/camerax_android/core/ImageProxy;)V',
  );

  static final _analyze = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void analyze(dev.hebei.camerax_android.core.ImageProxy imageProxy)`
  void analyze(
    imageproxy$_.ImageProxy imageProxy,
  ) {
    final _$imageProxy = imageProxy.reference;
    _analyze(reference.pointer, _id_analyze as jni$_.JMethodIDPtr,
            _$imageProxy.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $ImageAnalysis$Analyzer$Stub> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'analyze(Ldev/hebei/camerax_android/core/ImageProxy;)V') {
        _$impls[$p]!.analyze(
          $a![0]!
              .as(const imageproxy$_.$ImageProxy$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ImageAnalysis$Analyzer$Stub $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'dev.hebei.camerax_android.core.ImageAnalysis$Analyzer$Stub',
      $p,
      _$invokePointer,
      [
        if ($impl.analyze$async)
          r'analyze(Ldev/hebei/camerax_android/core/ImageProxy;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ImageAnalysis$Analyzer$Stub.implement(
    $ImageAnalysis$Analyzer$Stub $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ImageAnalysis$Analyzer$Stub.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ImageAnalysis$Analyzer$Stub {
  factory $ImageAnalysis$Analyzer$Stub({
    required void Function(imageproxy$_.ImageProxy imageProxy) analyze,
    bool analyze$async,
  }) = _$ImageAnalysis$Analyzer$Stub;

  void analyze(imageproxy$_.ImageProxy imageProxy);
  bool get analyze$async => false;
}

final class _$ImageAnalysis$Analyzer$Stub with $ImageAnalysis$Analyzer$Stub {
  _$ImageAnalysis$Analyzer$Stub({
    required void Function(imageproxy$_.ImageProxy imageProxy) analyze,
    this.analyze$async = false,
  }) : _analyze = analyze;

  final void Function(imageproxy$_.ImageProxy imageProxy) _analyze;
  final bool analyze$async;

  void analyze(imageproxy$_.ImageProxy imageProxy) {
    return _analyze(imageProxy);
  }
}

final class $ImageAnalysis$Analyzer$Stub$NullableType
    extends jni$_.JObjType<ImageAnalysis$Analyzer$Stub?> {
  @jni$_.internal
  const $ImageAnalysis$Analyzer$Stub$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/ImageAnalysis$Analyzer$Stub;';

  @jni$_.internal
  @core$_.override
  ImageAnalysis$Analyzer$Stub? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ImageAnalysis$Analyzer$Stub.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageAnalysis$Analyzer$Stub?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageAnalysis$Analyzer$Stub$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis$Analyzer$Stub$NullableType) &&
        other is $ImageAnalysis$Analyzer$Stub$NullableType;
  }
}

final class $ImageAnalysis$Analyzer$Stub$Type
    extends jni$_.JObjType<ImageAnalysis$Analyzer$Stub> {
  @jni$_.internal
  const $ImageAnalysis$Analyzer$Stub$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/ImageAnalysis$Analyzer$Stub;';

  @jni$_.internal
  @core$_.override
  ImageAnalysis$Analyzer$Stub fromReference(jni$_.JReference reference) =>
      ImageAnalysis$Analyzer$Stub.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageAnalysis$Analyzer$Stub?> get nullableType =>
      const $ImageAnalysis$Analyzer$Stub$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageAnalysis$Analyzer$Stub$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis$Analyzer$Stub$Type) &&
        other is $ImageAnalysis$Analyzer$Stub$Type;
  }
}

/// from: `dev.hebei.camerax_android.core.ImageAnalysis$Analyzer`
class ImageAnalysis$Analyzer extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ImageAnalysis$Analyzer> $type;

  @jni$_.internal
  ImageAnalysis$Analyzer.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/ImageAnalysis$Analyzer');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ImageAnalysis$Analyzer$NullableType();
  static const type = $ImageAnalysis$Analyzer$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroidx/camera/core/ImageAnalysis$Analyzer;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.camera.core.ImageAnalysis$Analyzer analyzer)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageAnalysis$Analyzer(
    jni$_.JObject analyzer,
  ) {
    final _$analyzer = analyzer.reference;
    return ImageAnalysis$Analyzer.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$analyzer.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ldev/hebei/camerax_android/core/ImageAnalysis$Analyzer$Stub;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(dev.hebei.camerax_android.core.ImageAnalysis$Analyzer$Stub stub)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageAnalysis$Analyzer.new$1(
    ImageAnalysis$Analyzer$Stub stub,
  ) {
    final _$stub = stub.reference;
    return ImageAnalysis$Analyzer.fromReference(_new$1(_class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr, _$stub.pointer)
        .reference);
  }
}

final class $ImageAnalysis$Analyzer$NullableType
    extends jni$_.JObjType<ImageAnalysis$Analyzer?> {
  @jni$_.internal
  const $ImageAnalysis$Analyzer$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/ImageAnalysis$Analyzer;';

  @jni$_.internal
  @core$_.override
  ImageAnalysis$Analyzer? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ImageAnalysis$Analyzer.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageAnalysis$Analyzer?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageAnalysis$Analyzer$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis$Analyzer$NullableType) &&
        other is $ImageAnalysis$Analyzer$NullableType;
  }
}

final class $ImageAnalysis$Analyzer$Type
    extends jni$_.JObjType<ImageAnalysis$Analyzer> {
  @jni$_.internal
  const $ImageAnalysis$Analyzer$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/ImageAnalysis$Analyzer;';

  @jni$_.internal
  @core$_.override
  ImageAnalysis$Analyzer fromReference(jni$_.JReference reference) =>
      ImageAnalysis$Analyzer.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageAnalysis$Analyzer?> get nullableType =>
      const $ImageAnalysis$Analyzer$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageAnalysis$Analyzer$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis$Analyzer$Type) &&
        other is $ImageAnalysis$Analyzer$Type;
  }
}

/// from: `dev.hebei.camerax_android.core.ImageAnalysis$BackpressureStrategy`
class ImageAnalysis$BackpressureStrategy extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ImageAnalysis$BackpressureStrategy> $type;

  @jni$_.internal
  ImageAnalysis$BackpressureStrategy.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/ImageAnalysis$BackpressureStrategy');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $ImageAnalysis$BackpressureStrategy$NullableType();
  static const type = $ImageAnalysis$BackpressureStrategy$Type();
  static final _id_KEEP_ONLY_LATEST = _class.staticFieldId(
    r'KEEP_ONLY_LATEST',
    r'Ldev/hebei/camerax_android/core/ImageAnalysis$BackpressureStrategy;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.ImageAnalysis$BackpressureStrategy KEEP_ONLY_LATEST`
  /// The returned object must be released after use, by calling the [release] method.
  static ImageAnalysis$BackpressureStrategy? get KEEP_ONLY_LATEST =>
      _id_KEEP_ONLY_LATEST.get(
          _class, const $ImageAnalysis$BackpressureStrategy$NullableType());

  static final _id_BLOCK_PRODUCER = _class.staticFieldId(
    r'BLOCK_PRODUCER',
    r'Ldev/hebei/camerax_android/core/ImageAnalysis$BackpressureStrategy;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.ImageAnalysis$BackpressureStrategy BLOCK_PRODUCER`
  /// The returned object must be released after use, by calling the [release] method.
  static ImageAnalysis$BackpressureStrategy? get BLOCK_PRODUCER =>
      _id_BLOCK_PRODUCER.get(
          _class, const $ImageAnalysis$BackpressureStrategy$NullableType());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Ldev/hebei/camerax_android/core/ImageAnalysis$BackpressureStrategy;',
  );

  static final _values = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public dev.hebei.camerax_android.core.ImageAnalysis$BackpressureStrategy[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JArray<ImageAnalysis$BackpressureStrategy?>? values() {
    return _values(_class.reference.pointer, _id_values as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<ImageAnalysis$BackpressureStrategy?>?>(
            const jni$_.JArrayNullableType<ImageAnalysis$BackpressureStrategy?>(
                $ImageAnalysis$BackpressureStrategy$NullableType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Ldev/hebei/camerax_android/core/ImageAnalysis$BackpressureStrategy;',
  );

  static final _valueOf = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public dev.hebei.camerax_android.core.ImageAnalysis$BackpressureStrategy valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static ImageAnalysis$BackpressureStrategy? valueOf(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _valueOf(_class.reference.pointer, _id_valueOf as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<ImageAnalysis$BackpressureStrategy?>(
            const $ImageAnalysis$BackpressureStrategy$NullableType());
  }
}

final class $ImageAnalysis$BackpressureStrategy$NullableType
    extends jni$_.JObjType<ImageAnalysis$BackpressureStrategy?> {
  @jni$_.internal
  const $ImageAnalysis$BackpressureStrategy$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/ImageAnalysis$BackpressureStrategy;';

  @jni$_.internal
  @core$_.override
  ImageAnalysis$BackpressureStrategy? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ImageAnalysis$BackpressureStrategy.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageAnalysis$BackpressureStrategy?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($ImageAnalysis$BackpressureStrategy$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ImageAnalysis$BackpressureStrategy$NullableType) &&
        other is $ImageAnalysis$BackpressureStrategy$NullableType;
  }
}

final class $ImageAnalysis$BackpressureStrategy$Type
    extends jni$_.JObjType<ImageAnalysis$BackpressureStrategy> {
  @jni$_.internal
  const $ImageAnalysis$BackpressureStrategy$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/ImageAnalysis$BackpressureStrategy;';

  @jni$_.internal
  @core$_.override
  ImageAnalysis$BackpressureStrategy fromReference(
          jni$_.JReference reference) =>
      ImageAnalysis$BackpressureStrategy.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageAnalysis$BackpressureStrategy?> get nullableType =>
      const $ImageAnalysis$BackpressureStrategy$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageAnalysis$BackpressureStrategy$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis$BackpressureStrategy$Type) &&
        other is $ImageAnalysis$BackpressureStrategy$Type;
  }
}

/// from: `dev.hebei.camerax_android.core.ImageAnalysis`
class ImageAnalysis extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ImageAnalysis> $type;

  @jni$_.internal
  ImageAnalysis.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/core/ImageAnalysis');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ImageAnalysis$NullableType();
  static const type = $ImageAnalysis$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageAnalysis() {
    return ImageAnalysis.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }
}

final class $ImageAnalysis$NullableType extends jni$_.JObjType<ImageAnalysis?> {
  @jni$_.internal
  const $ImageAnalysis$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/ImageAnalysis;';

  @jni$_.internal
  @core$_.override
  ImageAnalysis? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ImageAnalysis.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageAnalysis?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageAnalysis$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis$NullableType) &&
        other is $ImageAnalysis$NullableType;
  }
}

final class $ImageAnalysis$Type extends jni$_.JObjType<ImageAnalysis> {
  @jni$_.internal
  const $ImageAnalysis$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/ImageAnalysis;';

  @jni$_.internal
  @core$_.override
  ImageAnalysis fromReference(jni$_.JReference reference) =>
      ImageAnalysis.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageAnalysis?> get nullableType =>
      const $ImageAnalysis$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageAnalysis$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis$Type) &&
        other is $ImageAnalysis$Type;
  }
}
