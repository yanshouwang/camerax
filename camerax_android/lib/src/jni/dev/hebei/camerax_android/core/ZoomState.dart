// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `dev.hebei.camerax_android.core.ZoomState`
class ZoomState extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ZoomState> $type;

  @jni$_.internal
  ZoomState.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/core/ZoomState');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ZoomState$NullableType();
  static const type = $ZoomState$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroidx/camera/core/ZoomState;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.camera.core.ZoomState zoomState)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ZoomState(
    jni$_.JObject zoomState,
  ) {
    final _$zoomState = zoomState.reference;
    return ZoomState.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$zoomState.pointer)
        .reference);
  }

  static final _id_getMinZoomRatio = _class.instanceMethodId(
    r'getMinZoomRatio',
    r'()F',
  );

  static final _getMinZoomRatio = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final float getMinZoomRatio()`
  double getMinZoomRatio() {
    return _getMinZoomRatio(
            reference.pointer, _id_getMinZoomRatio as jni$_.JMethodIDPtr)
        .float;
  }

  static final _id_getMaxZoomRatio = _class.instanceMethodId(
    r'getMaxZoomRatio',
    r'()F',
  );

  static final _getMaxZoomRatio = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final float getMaxZoomRatio()`
  double getMaxZoomRatio() {
    return _getMaxZoomRatio(
            reference.pointer, _id_getMaxZoomRatio as jni$_.JMethodIDPtr)
        .float;
  }

  static final _id_getZoomRatio = _class.instanceMethodId(
    r'getZoomRatio',
    r'()F',
  );

  static final _getZoomRatio = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final float getZoomRatio()`
  double getZoomRatio() {
    return _getZoomRatio(
            reference.pointer, _id_getZoomRatio as jni$_.JMethodIDPtr)
        .float;
  }

  static final _id_getLinearZoom = _class.instanceMethodId(
    r'getLinearZoom',
    r'()F',
  );

  static final _getLinearZoom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final float getLinearZoom()`
  double getLinearZoom() {
    return _getLinearZoom(
            reference.pointer, _id_getLinearZoom as jni$_.JMethodIDPtr)
        .float;
  }
}

final class $ZoomState$NullableType extends jni$_.JObjType<ZoomState?> {
  @jni$_.internal
  const $ZoomState$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/ZoomState;';

  @jni$_.internal
  @core$_.override
  ZoomState? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ZoomState.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ZoomState?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ZoomState$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ZoomState$NullableType) &&
        other is $ZoomState$NullableType;
  }
}

final class $ZoomState$Type extends jni$_.JObjType<ZoomState> {
  @jni$_.internal
  const $ZoomState$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/ZoomState;';

  @jni$_.internal
  @core$_.override
  ZoomState fromReference(jni$_.JReference reference) =>
      ZoomState.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ZoomState?> get nullableType =>
      const $ZoomState$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ZoomState$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ZoomState$Type) && other is $ZoomState$Type;
  }
}
