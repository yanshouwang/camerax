// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../androidx/lifecycle/LiveData.dart' as livedata$_;

import 'CameraSelector.dart' as cameraselector$_;

import 'CameraState.dart' as camerastate$_;

import 'DynamicRange.dart' as dynamicrange$_;

import 'ExposureState.dart' as exposurestate$_;

import 'FocusMeteringAction.dart' as focusmeteringaction$_;

import 'ZoomState.dart' as zoomstate$_;

/// from: `dev.hebei.camerax_android.core.CameraInfo$Companion`
class CameraInfo$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraInfo$Companion> $type;

  @jni$_.internal
  CameraInfo$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/CameraInfo$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraInfo$Companion$NullableType();
  static const type = $CameraInfo$Companion$Type();
  static final _id_mustPlayShutterSound = _class.instanceMethodId(
    r'mustPlayShutterSound',
    r'()Z',
  );

  static final _mustPlayShutterSound = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean mustPlayShutterSound()`
  bool mustPlayShutterSound() {
    return _mustPlayShutterSound(
            reference.pointer, _id_mustPlayShutterSound as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraInfo$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return CameraInfo$Companion.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $CameraInfo$Companion$NullableType
    extends jni$_.JObjType<CameraInfo$Companion?> {
  @jni$_.internal
  const $CameraInfo$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/CameraInfo$Companion;';

  @jni$_.internal
  @core$_.override
  CameraInfo$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraInfo$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraInfo$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraInfo$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraInfo$Companion$NullableType) &&
        other is $CameraInfo$Companion$NullableType;
  }
}

final class $CameraInfo$Companion$Type
    extends jni$_.JObjType<CameraInfo$Companion> {
  @jni$_.internal
  const $CameraInfo$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/CameraInfo$Companion;';

  @jni$_.internal
  @core$_.override
  CameraInfo$Companion fromReference(jni$_.JReference reference) =>
      CameraInfo$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraInfo$Companion?> get nullableType =>
      const $CameraInfo$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraInfo$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraInfo$Companion$Type) &&
        other is $CameraInfo$Companion$Type;
  }
}

/// from: `dev.hebei.camerax_android.core.CameraInfo`
class CameraInfo extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraInfo> $type;

  @jni$_.internal
  CameraInfo.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/core/CameraInfo');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraInfo$NullableType();
  static const type = $CameraInfo$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Ldev/hebei/camerax_android/core/CameraInfo$Companion;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.CameraInfo$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraInfo$Companion? get Companion =>
      _id_Companion.get(_class, const $CameraInfo$Companion$NullableType());

  static final _id_new$ = _class.constructorId(
    r'(Landroidx/camera/core/CameraInfo;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.camera.core.CameraInfo cameraInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraInfo(
    jni$_.JObject cameraInfo,
  ) {
    final _$cameraInfo = cameraInfo.reference;
    return CameraInfo.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$cameraInfo.pointer)
        .reference);
  }

  static final _id_getCameraSelector = _class.instanceMethodId(
    r'getCameraSelector',
    r'()Ldev/hebei/camerax_android/core/CameraSelector;',
  );

  static final _getCameraSelector = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final dev.hebei.camerax_android.core.CameraSelector getCameraSelector()`
  /// The returned object must be released after use, by calling the [release] method.
  cameraselector$_.CameraSelector getCameraSelector() {
    return _getCameraSelector(
            reference.pointer, _id_getCameraSelector as jni$_.JMethodIDPtr)
        .object<cameraselector$_.CameraSelector>(
            const cameraselector$_.$CameraSelector$Type());
  }

  static final _id_getCameraState = _class.instanceMethodId(
    r'getCameraState',
    r'()Landroidx/lifecycle/LiveData;',
  );

  static final _getCameraState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.lifecycle.LiveData getCameraState()`
  /// The returned object must be released after use, by calling the [release] method.
  livedata$_.LiveData<camerastate$_.CameraState> getCameraState() {
    return _getCameraState(
            reference.pointer, _id_getCameraState as jni$_.JMethodIDPtr)
        .object<livedata$_.LiveData<camerastate$_.CameraState>>(
            const livedata$_.$LiveData$Type<camerastate$_.CameraState>(
                camerastate$_.$CameraState$Type()));
  }

  static final _id_getTorchState = _class.instanceMethodId(
    r'getTorchState',
    r'()Landroidx/lifecycle/LiveData;',
  );

  static final _getTorchState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.lifecycle.LiveData getTorchState()`
  /// The returned object must be released after use, by calling the [release] method.
  livedata$_.LiveData<jni$_.JBoolean> getTorchState() {
    return _getTorchState(
            reference.pointer, _id_getTorchState as jni$_.JMethodIDPtr)
        .object<livedata$_.LiveData<jni$_.JBoolean>>(
            const livedata$_.$LiveData$Type<jni$_.JBoolean>(
                jni$_.JBooleanType()));
  }

  static final _id_getZoomState = _class.instanceMethodId(
    r'getZoomState',
    r'()Landroidx/lifecycle/LiveData;',
  );

  static final _getZoomState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.lifecycle.LiveData getZoomState()`
  /// The returned object must be released after use, by calling the [release] method.
  livedata$_.LiveData<zoomstate$_.ZoomState> getZoomState() {
    return _getZoomState(
            reference.pointer, _id_getZoomState as jni$_.JMethodIDPtr)
        .object<livedata$_.LiveData<zoomstate$_.ZoomState>>(
            const livedata$_.$LiveData$Type<zoomstate$_.ZoomState>(
                zoomstate$_.$ZoomState$Type()));
  }

  static final _id_getExposureState = _class.instanceMethodId(
    r'getExposureState',
    r'()Ldev/hebei/camerax_android/core/ExposureState;',
  );

  static final _getExposureState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final dev.hebei.camerax_android.core.ExposureState getExposureState()`
  /// The returned object must be released after use, by calling the [release] method.
  exposurestate$_.ExposureState getExposureState() {
    return _getExposureState(
            reference.pointer, _id_getExposureState as jni$_.JMethodIDPtr)
        .object<exposurestate$_.ExposureState>(
            const exposurestate$_.$ExposureState$Type());
  }

  static final _id_getIntrinsicZoomRatio = _class.instanceMethodId(
    r'getIntrinsicZoomRatio',
    r'()F',
  );

  static final _getIntrinsicZoomRatio = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final float getIntrinsicZoomRatio()`
  double getIntrinsicZoomRatio() {
    return _getIntrinsicZoomRatio(
            reference.pointer, _id_getIntrinsicZoomRatio as jni$_.JMethodIDPtr)
        .float;
  }

  static final _id_getLensFacing = _class.instanceMethodId(
    r'getLensFacing',
    r'()Ldev/hebei/camerax_android/core/CameraSelector$LensFacing;',
  );

  static final _getLensFacing = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final dev.hebei.camerax_android.core.CameraSelector$LensFacing getLensFacing()`
  /// The returned object must be released after use, by calling the [release] method.
  cameraselector$_.CameraSelector$LensFacing getLensFacing() {
    return _getLensFacing(
            reference.pointer, _id_getLensFacing as jni$_.JMethodIDPtr)
        .object<cameraselector$_.CameraSelector$LensFacing>(
            const cameraselector$_.$CameraSelector$LensFacing$Type());
  }

  static final _id_getPhysicalCameraInfos = _class.instanceMethodId(
    r'getPhysicalCameraInfos',
    r'()Ljava/util/Set;',
  );

  static final _getPhysicalCameraInfos = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Set getPhysicalCameraInfos()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<CameraInfo> getPhysicalCameraInfos() {
    return _getPhysicalCameraInfos(
            reference.pointer, _id_getPhysicalCameraInfos as jni$_.JMethodIDPtr)
        .object<jni$_.JSet<CameraInfo>>(
            const jni$_.JSetType<CameraInfo>($CameraInfo$Type()));
  }

  static final _id_getSensorRotationDegrees = _class.instanceMethodId(
    r'getSensorRotationDegrees',
    r'()I',
  );

  static final _getSensorRotationDegrees = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getSensorRotationDegrees()`
  int getSensorRotationDegrees() {
    return _getSensorRotationDegrees(reference.pointer,
            _id_getSensorRotationDegrees as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getSupportedFrameRateRanges = _class.instanceMethodId(
    r'getSupportedFrameRateRanges',
    r'()Ljava/util/Set;',
  );

  static final _getSupportedFrameRateRanges =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final java.util.Set getSupportedFrameRateRanges()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<jni$_.JObject> getSupportedFrameRateRanges() {
    return _getSupportedFrameRateRanges(reference.pointer,
            _id_getSupportedFrameRateRanges as jni$_.JMethodIDPtr)
        .object<jni$_.JSet<jni$_.JObject>>(
            const jni$_.JSetType<jni$_.JObject>(jni$_.JObjectType()));
  }

  static final _id_isLogicalMultiCameraSupported = _class.instanceMethodId(
    r'isLogicalMultiCameraSupported',
    r'()Z',
  );

  static final _isLogicalMultiCameraSupported =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final boolean isLogicalMultiCameraSupported()`
  bool isLogicalMultiCameraSupported() {
    return _isLogicalMultiCameraSupported(reference.pointer,
            _id_isLogicalMultiCameraSupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isZslSupported = _class.instanceMethodId(
    r'isZslSupported',
    r'()Z',
  );

  static final _isZslSupported = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean isZslSupported()`
  bool isZslSupported() {
    return _isZslSupported(
            reference.pointer, _id_isZslSupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_hasFlashUnit = _class.instanceMethodId(
    r'hasFlashUnit',
    r'()Z',
  );

  static final _hasFlashUnit = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean hasFlashUnit()`
  bool hasFlashUnit() {
    return _hasFlashUnit(
            reference.pointer, _id_hasFlashUnit as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isFocusMeteringSupported = _class.instanceMethodId(
    r'isFocusMeteringSupported',
    r'(Ldev/hebei/camerax_android/core/FocusMeteringAction;)Z',
  );

  static final _isFocusMeteringSupported = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean isFocusMeteringSupported(dev.hebei.camerax_android.core.FocusMeteringAction focusMeteringAction)`
  bool isFocusMeteringSupported(
    focusmeteringaction$_.FocusMeteringAction focusMeteringAction,
  ) {
    final _$focusMeteringAction = focusMeteringAction.reference;
    return _isFocusMeteringSupported(
            reference.pointer,
            _id_isFocusMeteringSupported as jni$_.JMethodIDPtr,
            _$focusMeteringAction.pointer)
        .boolean;
  }

  static final _id_querySupportedDynamicRanges = _class.instanceMethodId(
    r'querySupportedDynamicRanges',
    r'(Ljava/util/Set;)Ljava/util/Set;',
  );

  static final _querySupportedDynamicRanges =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.util.Set querySupportedDynamicRanges(java.util.Set set)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<dynamicrange$_.DynamicRange> querySupportedDynamicRanges(
    jni$_.JSet<dynamicrange$_.DynamicRange> set,
  ) {
    final _$set = set.reference;
    return _querySupportedDynamicRanges(
            reference.pointer,
            _id_querySupportedDynamicRanges as jni$_.JMethodIDPtr,
            _$set.pointer)
        .object<jni$_.JSet<dynamicrange$_.DynamicRange>>(
            const jni$_.JSetType<dynamicrange$_.DynamicRange>(
                dynamicrange$_.$DynamicRange$Type()));
  }
}

final class $CameraInfo$NullableType extends jni$_.JObjType<CameraInfo?> {
  @jni$_.internal
  const $CameraInfo$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/CameraInfo;';

  @jni$_.internal
  @core$_.override
  CameraInfo? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : CameraInfo.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraInfo?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraInfo$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraInfo$NullableType) &&
        other is $CameraInfo$NullableType;
  }
}

final class $CameraInfo$Type extends jni$_.JObjType<CameraInfo> {
  @jni$_.internal
  const $CameraInfo$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/CameraInfo;';

  @jni$_.internal
  @core$_.override
  CameraInfo fromReference(jni$_.JReference reference) =>
      CameraInfo.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraInfo?> get nullableType =>
      const $CameraInfo$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraInfo$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraInfo$Type) && other is $CameraInfo$Type;
  }
}
