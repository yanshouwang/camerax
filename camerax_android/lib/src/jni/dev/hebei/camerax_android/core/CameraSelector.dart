// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `dev.hebei.camerax_android.core.CameraSelector$Builder$WhenMappings`
class CameraSelector$Builder$WhenMappings extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraSelector$Builder$WhenMappings> $type;

  @jni$_.internal
  CameraSelector$Builder$WhenMappings.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/CameraSelector$Builder$WhenMappings');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $CameraSelector$Builder$WhenMappings$NullableType();
  static const type = $CameraSelector$Builder$WhenMappings$Type();
}

final class $CameraSelector$Builder$WhenMappings$NullableType
    extends jni$_.JObjType<CameraSelector$Builder$WhenMappings?> {
  @jni$_.internal
  const $CameraSelector$Builder$WhenMappings$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/CameraSelector$Builder$WhenMappings;';

  @jni$_.internal
  @core$_.override
  CameraSelector$Builder$WhenMappings? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraSelector$Builder$WhenMappings.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraSelector$Builder$WhenMappings?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($CameraSelector$Builder$WhenMappings$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraSelector$Builder$WhenMappings$NullableType) &&
        other is $CameraSelector$Builder$WhenMappings$NullableType;
  }
}

final class $CameraSelector$Builder$WhenMappings$Type
    extends jni$_.JObjType<CameraSelector$Builder$WhenMappings> {
  @jni$_.internal
  const $CameraSelector$Builder$WhenMappings$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/CameraSelector$Builder$WhenMappings;';

  @jni$_.internal
  @core$_.override
  CameraSelector$Builder$WhenMappings fromReference(
          jni$_.JReference reference) =>
      CameraSelector$Builder$WhenMappings.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraSelector$Builder$WhenMappings?> get nullableType =>
      const $CameraSelector$Builder$WhenMappings$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraSelector$Builder$WhenMappings$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector$Builder$WhenMappings$Type) &&
        other is $CameraSelector$Builder$WhenMappings$Type;
  }
}

/// from: `dev.hebei.camerax_android.core.CameraSelector$Builder`
class CameraSelector$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraSelector$Builder> $type;

  @jni$_.internal
  CameraSelector$Builder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/CameraSelector$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraSelector$Builder$NullableType();
  static const type = $CameraSelector$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraSelector$Builder() {
    return CameraSelector$Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_requireLensFacing = _class.instanceMethodId(
    r'requireLensFacing',
    r'(Ldev/hebei/camerax_android/core/CameraSelector$LensFacing;)Ldev/hebei/camerax_android/core/CameraSelector$Builder;',
  );

  static final _requireLensFacing = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final dev.hebei.camerax_android.core.CameraSelector$Builder requireLensFacing(dev.hebei.camerax_android.core.CameraSelector$LensFacing lensFacing)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraSelector$Builder requireLensFacing(
    CameraSelector$LensFacing lensFacing,
  ) {
    final _$lensFacing = lensFacing.reference;
    return _requireLensFacing(reference.pointer,
            _id_requireLensFacing as jni$_.JMethodIDPtr, _$lensFacing.pointer)
        .object<CameraSelector$Builder>(const $CameraSelector$Builder$Type());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Ldev/hebei/camerax_android/core/CameraSelector;',
  );

  static final _build = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final dev.hebei.camerax_android.core.CameraSelector build()`
  /// The returned object must be released after use, by calling the [release] method.
  CameraSelector build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr)
        .object<CameraSelector>(const $CameraSelector$Type());
  }
}

final class $CameraSelector$Builder$NullableType
    extends jni$_.JObjType<CameraSelector$Builder?> {
  @jni$_.internal
  const $CameraSelector$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/CameraSelector$Builder;';

  @jni$_.internal
  @core$_.override
  CameraSelector$Builder? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraSelector$Builder.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraSelector$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraSelector$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector$Builder$NullableType) &&
        other is $CameraSelector$Builder$NullableType;
  }
}

final class $CameraSelector$Builder$Type
    extends jni$_.JObjType<CameraSelector$Builder> {
  @jni$_.internal
  const $CameraSelector$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/CameraSelector$Builder;';

  @jni$_.internal
  @core$_.override
  CameraSelector$Builder fromReference(jni$_.JReference reference) =>
      CameraSelector$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraSelector$Builder?> get nullableType =>
      const $CameraSelector$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraSelector$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector$Builder$Type) &&
        other is $CameraSelector$Builder$Type;
  }
}

/// from: `dev.hebei.camerax_android.core.CameraSelector$LensFacing`
class CameraSelector$LensFacing extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraSelector$LensFacing> $type;

  @jni$_.internal
  CameraSelector$LensFacing.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/CameraSelector$LensFacing');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraSelector$LensFacing$NullableType();
  static const type = $CameraSelector$LensFacing$Type();
  static final _id_UNKNOWN = _class.staticFieldId(
    r'UNKNOWN',
    r'Ldev/hebei/camerax_android/core/CameraSelector$LensFacing;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.CameraSelector$LensFacing UNKNOWN`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector$LensFacing? get UNKNOWN =>
      _id_UNKNOWN.get(_class, const $CameraSelector$LensFacing$NullableType());

  static final _id_FRONT = _class.staticFieldId(
    r'FRONT',
    r'Ldev/hebei/camerax_android/core/CameraSelector$LensFacing;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.CameraSelector$LensFacing FRONT`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector$LensFacing? get FRONT =>
      _id_FRONT.get(_class, const $CameraSelector$LensFacing$NullableType());

  static final _id_BACK = _class.staticFieldId(
    r'BACK',
    r'Ldev/hebei/camerax_android/core/CameraSelector$LensFacing;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.CameraSelector$LensFacing BACK`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector$LensFacing? get BACK =>
      _id_BACK.get(_class, const $CameraSelector$LensFacing$NullableType());

  static final _id_EXTERNAL = _class.staticFieldId(
    r'EXTERNAL',
    r'Ldev/hebei/camerax_android/core/CameraSelector$LensFacing;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.CameraSelector$LensFacing EXTERNAL`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector$LensFacing? get EXTERNAL =>
      _id_EXTERNAL.get(_class, const $CameraSelector$LensFacing$NullableType());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Ldev/hebei/camerax_android/core/CameraSelector$LensFacing;',
  );

  static final _values = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public dev.hebei.camerax_android.core.CameraSelector$LensFacing[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JArray<CameraSelector$LensFacing?>? values() {
    return _values(_class.reference.pointer, _id_values as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<CameraSelector$LensFacing?>?>(
            const jni$_.JArrayNullableType<CameraSelector$LensFacing?>(
                $CameraSelector$LensFacing$NullableType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Ldev/hebei/camerax_android/core/CameraSelector$LensFacing;',
  );

  static final _valueOf = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public dev.hebei.camerax_android.core.CameraSelector$LensFacing valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector$LensFacing? valueOf(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _valueOf(_class.reference.pointer, _id_valueOf as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<CameraSelector$LensFacing?>(
            const $CameraSelector$LensFacing$NullableType());
  }
}

final class $CameraSelector$LensFacing$NullableType
    extends jni$_.JObjType<CameraSelector$LensFacing?> {
  @jni$_.internal
  const $CameraSelector$LensFacing$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/CameraSelector$LensFacing;';

  @jni$_.internal
  @core$_.override
  CameraSelector$LensFacing? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraSelector$LensFacing.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraSelector$LensFacing?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraSelector$LensFacing$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector$LensFacing$NullableType) &&
        other is $CameraSelector$LensFacing$NullableType;
  }
}

final class $CameraSelector$LensFacing$Type
    extends jni$_.JObjType<CameraSelector$LensFacing> {
  @jni$_.internal
  const $CameraSelector$LensFacing$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/CameraSelector$LensFacing;';

  @jni$_.internal
  @core$_.override
  CameraSelector$LensFacing fromReference(jni$_.JReference reference) =>
      CameraSelector$LensFacing.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraSelector$LensFacing?> get nullableType =>
      const $CameraSelector$LensFacing$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraSelector$LensFacing$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector$LensFacing$Type) &&
        other is $CameraSelector$LensFacing$Type;
  }
}

/// from: `dev.hebei.camerax_android.core.CameraSelector`
class CameraSelector extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraSelector> $type;

  @jni$_.internal
  CameraSelector.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/core/CameraSelector');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraSelector$NullableType();
  static const type = $CameraSelector$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroidx/camera/core/CameraSelector;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.camera.core.CameraSelector cameraSelector)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraSelector(
    jni$_.JObject cameraSelector,
  ) {
    final _$cameraSelector = cameraSelector.reference;
    return CameraSelector.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$cameraSelector.pointer)
        .reference);
  }
}

final class $CameraSelector$NullableType
    extends jni$_.JObjType<CameraSelector?> {
  @jni$_.internal
  const $CameraSelector$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/CameraSelector;';

  @jni$_.internal
  @core$_.override
  CameraSelector? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : CameraSelector.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraSelector?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraSelector$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector$NullableType) &&
        other is $CameraSelector$NullableType;
  }
}

final class $CameraSelector$Type extends jni$_.JObjType<CameraSelector> {
  @jni$_.internal
  const $CameraSelector$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/CameraSelector;';

  @jni$_.internal
  @core$_.override
  CameraSelector fromReference(jni$_.JReference reference) =>
      CameraSelector.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraSelector?> get nullableType =>
      const $CameraSelector$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraSelector$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector$Type) &&
        other is $CameraSelector$Type;
  }
}
