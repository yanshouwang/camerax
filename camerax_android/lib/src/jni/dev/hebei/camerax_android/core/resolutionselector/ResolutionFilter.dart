// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `dev.hebei.camerax_android.core.resolutionselector.ResolutionFilter$Stub`
class ResolutionFilter$Stub extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ResolutionFilter$Stub> $type;

  @jni$_.internal
  ResolutionFilter$Stub.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/resolutionselector/ResolutionFilter$Stub');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ResolutionFilter$Stub$NullableType();
  static const type = $ResolutionFilter$Stub$Type();
  static final _id_filter = _class.instanceMethodId(
    r'filter',
    r'(Ljava/util/List;I)Ljava/util/List;',
  );

  static final _filter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract java.util.List filter(java.util.List list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JObject> filter(
    jni$_.JList<jni$_.JObject> list,
    int i,
  ) {
    final _$list = list.reference;
    return _filter(reference.pointer, _id_filter as jni$_.JMethodIDPtr,
            _$list.pointer, i)
        .object<jni$_.JList<jni$_.JObject>>(
            const jni$_.JListType<jni$_.JObject>(jni$_.JObjectType()));
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $ResolutionFilter$Stub> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'filter(Ljava/util/List;I)Ljava/util/List;') {
        final $r = _$impls[$p]!.filter(
          $a![0]!.as(const jni$_.JListType<jni$_.JObject>(jni$_.JObjectType()),
              releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ResolutionFilter$Stub $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'dev.hebei.camerax_android.core.resolutionselector.ResolutionFilter$Stub',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ResolutionFilter$Stub.implement(
    $ResolutionFilter$Stub $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ResolutionFilter$Stub.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ResolutionFilter$Stub {
  factory $ResolutionFilter$Stub({
    required jni$_.JList<jni$_.JObject> Function(
            jni$_.JList<jni$_.JObject> list, int i)
        filter,
  }) = _$ResolutionFilter$Stub;

  jni$_.JList<jni$_.JObject> filter(jni$_.JList<jni$_.JObject> list, int i);
}

final class _$ResolutionFilter$Stub with $ResolutionFilter$Stub {
  _$ResolutionFilter$Stub({
    required jni$_.JList<jni$_.JObject> Function(
            jni$_.JList<jni$_.JObject> list, int i)
        filter,
  }) : _filter = filter;

  final jni$_.JList<jni$_.JObject> Function(
      jni$_.JList<jni$_.JObject> list, int i) _filter;

  jni$_.JList<jni$_.JObject> filter(jni$_.JList<jni$_.JObject> list, int i) {
    return _filter(list, i);
  }
}

final class $ResolutionFilter$Stub$NullableType
    extends jni$_.JObjType<ResolutionFilter$Stub?> {
  @jni$_.internal
  const $ResolutionFilter$Stub$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/resolutionselector/ResolutionFilter$Stub;';

  @jni$_.internal
  @core$_.override
  ResolutionFilter$Stub? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ResolutionFilter$Stub.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ResolutionFilter$Stub?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ResolutionFilter$Stub$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResolutionFilter$Stub$NullableType) &&
        other is $ResolutionFilter$Stub$NullableType;
  }
}

final class $ResolutionFilter$Stub$Type
    extends jni$_.JObjType<ResolutionFilter$Stub> {
  @jni$_.internal
  const $ResolutionFilter$Stub$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/resolutionselector/ResolutionFilter$Stub;';

  @jni$_.internal
  @core$_.override
  ResolutionFilter$Stub fromReference(jni$_.JReference reference) =>
      ResolutionFilter$Stub.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ResolutionFilter$Stub?> get nullableType =>
      const $ResolutionFilter$Stub$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ResolutionFilter$Stub$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResolutionFilter$Stub$Type) &&
        other is $ResolutionFilter$Stub$Type;
  }
}

/// from: `dev.hebei.camerax_android.core.resolutionselector.ResolutionFilter`
class ResolutionFilter extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ResolutionFilter> $type;

  @jni$_.internal
  ResolutionFilter.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/resolutionselector/ResolutionFilter');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ResolutionFilter$NullableType();
  static const type = $ResolutionFilter$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroidx/camera/core/resolutionselector/ResolutionFilter;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.camera.core.resolutionselector.ResolutionFilter resolutionFilter)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ResolutionFilter(
    jni$_.JObject resolutionFilter,
  ) {
    final _$resolutionFilter = resolutionFilter.reference;
    return ResolutionFilter.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$resolutionFilter.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ldev/hebei/camerax_android/core/resolutionselector/ResolutionFilter$Stub;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(dev.hebei.camerax_android.core.resolutionselector.ResolutionFilter$Stub stub)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ResolutionFilter.new$1(
    ResolutionFilter$Stub stub,
  ) {
    final _$stub = stub.reference;
    return ResolutionFilter.fromReference(_new$1(_class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr, _$stub.pointer)
        .reference);
  }

  static final _id_filter = _class.instanceMethodId(
    r'filter',
    r'(Ljava/util/List;I)Ljava/util/List;',
  );

  static final _filter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public final java.util.List filter(java.util.List list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JObject> filter(
    jni$_.JList<jni$_.JObject> list,
    int i,
  ) {
    final _$list = list.reference;
    return _filter(reference.pointer, _id_filter as jni$_.JMethodIDPtr,
            _$list.pointer, i)
        .object<jni$_.JList<jni$_.JObject>>(
            const jni$_.JListType<jni$_.JObject>(jni$_.JObjectType()));
  }
}

final class $ResolutionFilter$NullableType
    extends jni$_.JObjType<ResolutionFilter?> {
  @jni$_.internal
  const $ResolutionFilter$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/resolutionselector/ResolutionFilter;';

  @jni$_.internal
  @core$_.override
  ResolutionFilter? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ResolutionFilter.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ResolutionFilter?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ResolutionFilter$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResolutionFilter$NullableType) &&
        other is $ResolutionFilter$NullableType;
  }
}

final class $ResolutionFilter$Type extends jni$_.JObjType<ResolutionFilter> {
  @jni$_.internal
  const $ResolutionFilter$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/resolutionselector/ResolutionFilter;';

  @jni$_.internal
  @core$_.override
  ResolutionFilter fromReference(jni$_.JReference reference) =>
      ResolutionFilter.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ResolutionFilter?> get nullableType =>
      const $ResolutionFilter$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ResolutionFilter$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResolutionFilter$Type) &&
        other is $ResolutionFilter$Type;
  }
}
