// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `dev.hebei.camerax_android.core.PermissionManager$Permission`
class PermissionManager$Permission extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PermissionManager$Permission> $type;

  @jni$_.internal
  PermissionManager$Permission.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/PermissionManager$Permission');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PermissionManager$Permission$NullableType();
  static const type = $PermissionManager$Permission$Type();
  static final _id_ALBUM = _class.staticFieldId(
    r'ALBUM',
    r'Ldev/hebei/camerax_android/core/PermissionManager$Permission;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.PermissionManager$Permission ALBUM`
  /// The returned object must be released after use, by calling the [release] method.
  static PermissionManager$Permission? get ALBUM =>
      _id_ALBUM.get(_class, const $PermissionManager$Permission$NullableType());

  static final _id_AUDIO = _class.staticFieldId(
    r'AUDIO',
    r'Ldev/hebei/camerax_android/core/PermissionManager$Permission;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.PermissionManager$Permission AUDIO`
  /// The returned object must be released after use, by calling the [release] method.
  static PermissionManager$Permission? get AUDIO =>
      _id_AUDIO.get(_class, const $PermissionManager$Permission$NullableType());

  static final _id_VIDEO = _class.staticFieldId(
    r'VIDEO',
    r'Ldev/hebei/camerax_android/core/PermissionManager$Permission;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.PermissionManager$Permission VIDEO`
  /// The returned object must be released after use, by calling the [release] method.
  static PermissionManager$Permission? get VIDEO =>
      _id_VIDEO.get(_class, const $PermissionManager$Permission$NullableType());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Ldev/hebei/camerax_android/core/PermissionManager$Permission;',
  );

  static final _values = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public dev.hebei.camerax_android.core.PermissionManager$Permission[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JArray<PermissionManager$Permission?>? values() {
    return _values(_class.reference.pointer, _id_values as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<PermissionManager$Permission?>?>(
            const jni$_.JArrayNullableType<PermissionManager$Permission?>(
                $PermissionManager$Permission$NullableType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Ldev/hebei/camerax_android/core/PermissionManager$Permission;',
  );

  static final _valueOf = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public dev.hebei.camerax_android.core.PermissionManager$Permission valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static PermissionManager$Permission? valueOf(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _valueOf(_class.reference.pointer, _id_valueOf as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<PermissionManager$Permission?>(
            const $PermissionManager$Permission$NullableType());
  }
}

final class $PermissionManager$Permission$NullableType
    extends jni$_.JObjType<PermissionManager$Permission?> {
  @jni$_.internal
  const $PermissionManager$Permission$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/PermissionManager$Permission;';

  @jni$_.internal
  @core$_.override
  PermissionManager$Permission? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PermissionManager$Permission.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionManager$Permission?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionManager$Permission$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionManager$Permission$NullableType) &&
        other is $PermissionManager$Permission$NullableType;
  }
}

final class $PermissionManager$Permission$Type
    extends jni$_.JObjType<PermissionManager$Permission> {
  @jni$_.internal
  const $PermissionManager$Permission$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/PermissionManager$Permission;';

  @jni$_.internal
  @core$_.override
  PermissionManager$Permission fromReference(jni$_.JReference reference) =>
      PermissionManager$Permission.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionManager$Permission?> get nullableType =>
      const $PermissionManager$Permission$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionManager$Permission$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionManager$Permission$Type) &&
        other is $PermissionManager$Permission$Type;
  }
}

/// from: `dev.hebei.camerax_android.core.PermissionManager`
class PermissionManager extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PermissionManager> $type;

  @jni$_.internal
  PermissionManager.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/core/PermissionManager');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PermissionManager$NullableType();
  static const type = $PermissionManager$Type();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Ldev/hebei/camerax_android/core/PermissionManager;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.PermissionManager INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static PermissionManager? get INSTANCE =>
      _id_INSTANCE.get(_class, const $PermissionManager$NullableType());

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ldev/hebei/camerax_android/core/PermissionManager$Permission;)Z',
  );

  static final _checkPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean checkPermission(dev.hebei.camerax_android.core.PermissionManager$Permission permission)`
  bool checkPermission(
    PermissionManager$Permission permission,
  ) {
    final _$permission = permission.reference;
    return _checkPermission(reference.pointer,
            _id_checkPermission as jni$_.JMethodIDPtr, _$permission.pointer)
        .boolean;
  }

  static final _id_requestPermissions = _class.instanceMethodId(
    r'requestPermissions',
    r'(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _requestPermissions = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object requestPermissions(java.util.List list, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JBoolean> requestPermissions(
    jni$_.JList<PermissionManager$Permission?>? list,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$list = list?.reference ?? jni$_.jNullReference;
    _requestPermissions(
            reference.pointer,
            _id_requestPermissions as jni$_.JMethodIDPtr,
            _$list.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JBooleanType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JBooleanType().fromReference($o);
  }
}

final class $PermissionManager$NullableType
    extends jni$_.JObjType<PermissionManager?> {
  @jni$_.internal
  const $PermissionManager$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/PermissionManager;';

  @jni$_.internal
  @core$_.override
  PermissionManager? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PermissionManager.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionManager?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionManager$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionManager$NullableType) &&
        other is $PermissionManager$NullableType;
  }
}

final class $PermissionManager$Type extends jni$_.JObjType<PermissionManager> {
  @jni$_.internal
  const $PermissionManager$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/PermissionManager;';

  @jni$_.internal
  @core$_.override
  PermissionManager fromReference(jni$_.JReference reference) =>
      PermissionManager.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionManager?> get nullableType =>
      const $PermissionManager$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionManager$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionManager$Type) &&
        other is $PermissionManager$Type;
  }
}
