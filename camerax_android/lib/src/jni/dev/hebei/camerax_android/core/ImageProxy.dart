// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'ImageFormat.dart' as imageformat$_;

import 'ImageInfo.dart' as imageinfo$_;

/// from: `dev.hebei.camerax_android.core.ImageProxy$PlaneProxy`
class ImageProxy$PlaneProxy extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ImageProxy$PlaneProxy> $type;

  @jni$_.internal
  ImageProxy$PlaneProxy.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'dev/hebei/camerax_android/core/ImageProxy$PlaneProxy');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ImageProxy$PlaneProxy$NullableType();
  static const type = $ImageProxy$PlaneProxy$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroidx/camera/core/ImageProxy$PlaneProxy;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.camera.core.ImageProxy$PlaneProxy planeProxy)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageProxy$PlaneProxy(
    jni$_.JObject planeProxy,
  ) {
    final _$planeProxy = planeProxy.reference;
    return ImageProxy$PlaneProxy.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$planeProxy.pointer)
        .reference);
  }

  static final _id_getBuffer = _class.instanceMethodId(
    r'getBuffer',
    r'()Ljava/nio/ByteBuffer;',
  );

  static final _getBuffer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.nio.ByteBuffer getBuffer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteBuffer getBuffer() {
    return _getBuffer(reference.pointer, _id_getBuffer as jni$_.JMethodIDPtr)
        .object<jni$_.JByteBuffer>(const jni$_.JByteBufferType());
  }

  static final _id_getPixelStride = _class.instanceMethodId(
    r'getPixelStride',
    r'()I',
  );

  static final _getPixelStride = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getPixelStride()`
  int getPixelStride() {
    return _getPixelStride(
            reference.pointer, _id_getPixelStride as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getRowStride = _class.instanceMethodId(
    r'getRowStride',
    r'()I',
  );

  static final _getRowStride = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getRowStride()`
  int getRowStride() {
    return _getRowStride(
            reference.pointer, _id_getRowStride as jni$_.JMethodIDPtr)
        .integer;
  }
}

final class $ImageProxy$PlaneProxy$NullableType
    extends jni$_.JObjType<ImageProxy$PlaneProxy?> {
  @jni$_.internal
  const $ImageProxy$PlaneProxy$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/ImageProxy$PlaneProxy;';

  @jni$_.internal
  @core$_.override
  ImageProxy$PlaneProxy? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ImageProxy$PlaneProxy.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageProxy$PlaneProxy?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageProxy$PlaneProxy$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageProxy$PlaneProxy$NullableType) &&
        other is $ImageProxy$PlaneProxy$NullableType;
  }
}

final class $ImageProxy$PlaneProxy$Type
    extends jni$_.JObjType<ImageProxy$PlaneProxy> {
  @jni$_.internal
  const $ImageProxy$PlaneProxy$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Ldev/hebei/camerax_android/core/ImageProxy$PlaneProxy;';

  @jni$_.internal
  @core$_.override
  ImageProxy$PlaneProxy fromReference(jni$_.JReference reference) =>
      ImageProxy$PlaneProxy.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageProxy$PlaneProxy?> get nullableType =>
      const $ImageProxy$PlaneProxy$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageProxy$PlaneProxy$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageProxy$PlaneProxy$Type) &&
        other is $ImageProxy$PlaneProxy$Type;
  }
}

/// from: `dev.hebei.camerax_android.core.ImageProxy`
class ImageProxy extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ImageProxy> $type;

  @jni$_.internal
  ImageProxy.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/core/ImageProxy');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ImageProxy$NullableType();
  static const type = $ImageProxy$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroidx/camera/core/ImageProxy;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.camera.core.ImageProxy imageProxy)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageProxy(
    jni$_.JObject imageProxy,
  ) {
    final _$imageProxy = imageProxy.reference;
    return ImageProxy.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$imageProxy.pointer)
        .reference);
  }

  static final _id_getFormat = _class.instanceMethodId(
    r'getFormat',
    r'()Ldev/hebei/camerax_android/core/ImageFormat;',
  );

  static final _getFormat = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final dev.hebei.camerax_android.core.ImageFormat getFormat()`
  /// The returned object must be released after use, by calling the [release] method.
  imageformat$_.ImageFormat getFormat() {
    return _getFormat(reference.pointer, _id_getFormat as jni$_.JMethodIDPtr)
        .object<imageformat$_.ImageFormat>(
            const imageformat$_.$ImageFormat$Type());
  }

  static final _id_getWidth = _class.instanceMethodId(
    r'getWidth',
    r'()I',
  );

  static final _getWidth = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getWidth()`
  int getWidth() {
    return _getWidth(reference.pointer, _id_getWidth as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getHeight = _class.instanceMethodId(
    r'getHeight',
    r'()I',
  );

  static final _getHeight = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getHeight()`
  int getHeight() {
    return _getHeight(reference.pointer, _id_getHeight as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getPlanes = _class.instanceMethodId(
    r'getPlanes',
    r'()[Ldev/hebei/camerax_android/core/ImageProxy$PlaneProxy;',
  );

  static final _getPlanes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final dev.hebei.camerax_android.core.ImageProxy$PlaneProxy[] getPlanes()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<ImageProxy$PlaneProxy> getPlanes() {
    return _getPlanes(reference.pointer, _id_getPlanes as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<ImageProxy$PlaneProxy>>(
            const jni$_.JArrayType<ImageProxy$PlaneProxy>(
                $ImageProxy$PlaneProxy$Type()));
  }

  static final _id_getImage = _class.instanceMethodId(
    r'getImage',
    r'()Landroid/media/Image;',
  );

  static final _getImage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.media.Image getImage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getImage() {
    return _getImage(reference.pointer, _id_getImage as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getImageInfo = _class.instanceMethodId(
    r'getImageInfo',
    r'()Ldev/hebei/camerax_android/core/ImageInfo;',
  );

  static final _getImageInfo = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final dev.hebei.camerax_android.core.ImageInfo getImageInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  imageinfo$_.ImageInfo getImageInfo() {
    return _getImageInfo(
            reference.pointer, _id_getImageInfo as jni$_.JMethodIDPtr)
        .object<imageinfo$_.ImageInfo>(const imageinfo$_.$ImageInfo$Type());
  }

  static final _id_getCropRect = _class.instanceMethodId(
    r'getCropRect',
    r'()Landroid/graphics/Rect;',
  );

  static final _getCropRect = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.graphics.Rect getCropRect()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getCropRect() {
    return _getCropRect(
            reference.pointer, _id_getCropRect as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_setCropRect = _class.instanceMethodId(
    r'setCropRect',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _setCropRect = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setCropRect(android.graphics.Rect rect)`
  void setCropRect(
    jni$_.JObject? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _setCropRect(reference.pointer, _id_setCropRect as jni$_.JMethodIDPtr,
            _$rect.pointer)
        .check();
  }

  static final _id_toBitmap = _class.instanceMethodId(
    r'toBitmap',
    r'()Landroid/graphics/Bitmap;',
  );

  static final _toBitmap = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.graphics.Bitmap toBitmap()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject toBitmap() {
    return _toBitmap(reference.pointer, _id_toBitmap as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void close()`
  void close() {
    _close(reference.pointer, _id_close as jni$_.JMethodIDPtr).check();
  }
}

final class $ImageProxy$NullableType extends jni$_.JObjType<ImageProxy?> {
  @jni$_.internal
  const $ImageProxy$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/ImageProxy;';

  @jni$_.internal
  @core$_.override
  ImageProxy? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ImageProxy.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageProxy?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageProxy$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageProxy$NullableType) &&
        other is $ImageProxy$NullableType;
  }
}

final class $ImageProxy$Type extends jni$_.JObjType<ImageProxy> {
  @jni$_.internal
  const $ImageProxy$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/ImageProxy;';

  @jni$_.internal
  @core$_.override
  ImageProxy fromReference(jni$_.JReference reference) =>
      ImageProxy.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageProxy?> get nullableType =>
      const $ImageProxy$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageProxy$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageProxy$Type) && other is $ImageProxy$Type;
  }
}
