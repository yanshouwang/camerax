// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'FocusMeteringAction.dart' as focusmeteringaction$_;

/// from: `dev.hebei.camerax_android.core.CameraControl`
class CameraControl extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraControl> $type;

  @jni$_.internal
  CameraControl.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/core/CameraControl');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraControl$NullableType();
  static const type = $CameraControl$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroidx/camera/core/CameraControl;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.camera.core.CameraControl cameraControl)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraControl(
    jni$_.JObject cameraControl,
  ) {
    final _$cameraControl = cameraControl.reference;
    return CameraControl.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$cameraControl.pointer)
        .reference);
  }

  static final _id_getObj = _class.instanceMethodId(
    r'getObj',
    r'()Landroidx/camera/core/CameraControl;',
  );

  static final _getObj = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.camera.core.CameraControl getObj()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getObj() {
    return _getObj(reference.pointer, _id_getObj as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_enableTorch = _class.instanceMethodId(
    r'enableTorch',
    r'(ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _enableTorch = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object enableTorch(boolean z, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> enableTorch(
    bool z,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _enableTorch(reference.pointer, _id_enableTorch as jni$_.JMethodIDPtr,
            z ? 1 : 0, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_setZoomRatio = _class.instanceMethodId(
    r'setZoomRatio',
    r'(FLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _setZoomRatio = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, double, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object setZoomRatio(float f, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> setZoomRatio(
    double f,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _setZoomRatio(reference.pointer, _id_setZoomRatio as jni$_.JMethodIDPtr, f,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_setLinearZoom = _class.instanceMethodId(
    r'setLinearZoom',
    r'(FLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _setLinearZoom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, double, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object setLinearZoom(float f, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> setLinearZoom(
    double f,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _setLinearZoom(reference.pointer, _id_setLinearZoom as jni$_.JMethodIDPtr,
            f, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_startFocusAndMetering = _class.instanceMethodId(
    r'startFocusAndMetering',
    r'(Ldev/hebei/camerax_android/core/FocusMeteringAction;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _startFocusAndMetering = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object startFocusAndMetering(dev.hebei.camerax_android.core.FocusMeteringAction focusMeteringAction, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> startFocusAndMetering(
    focusmeteringaction$_.FocusMeteringAction? focusMeteringAction,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$focusMeteringAction =
        focusMeteringAction?.reference ?? jni$_.jNullReference;
    _startFocusAndMetering(
            reference.pointer,
            _id_startFocusAndMetering as jni$_.JMethodIDPtr,
            _$focusMeteringAction.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_cancelFocusAndMetering = _class.instanceMethodId(
    r'cancelFocusAndMetering',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _cancelFocusAndMetering = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object cancelFocusAndMetering(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> cancelFocusAndMetering() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _cancelFocusAndMetering(
            reference.pointer,
            _id_cancelFocusAndMetering as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_setExposureCompensationIndex = _class.instanceMethodId(
    r'setExposureCompensationIndex',
    r'(ILkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _setExposureCompensationIndex =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.Object setExposureCompensationIndex(int i, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JInteger> setExposureCompensationIndex(
    int i,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _setExposureCompensationIndex(
            reference.pointer,
            _id_setExposureCompensationIndex as jni$_.JMethodIDPtr,
            i,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JIntegerType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JIntegerType().fromReference($o);
  }
}

final class $CameraControl$NullableType extends jni$_.JObjType<CameraControl?> {
  @jni$_.internal
  const $CameraControl$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/CameraControl;';

  @jni$_.internal
  @core$_.override
  CameraControl? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : CameraControl.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraControl?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraControl$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraControl$NullableType) &&
        other is $CameraControl$NullableType;
  }
}

final class $CameraControl$Type extends jni$_.JObjType<CameraControl> {
  @jni$_.internal
  const $CameraControl$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/CameraControl;';

  @jni$_.internal
  @core$_.override
  CameraControl fromReference(jni$_.JReference reference) =>
      CameraControl.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraControl?> get nullableType =>
      const $CameraControl$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraControl$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraControl$Type) &&
        other is $CameraControl$Type;
  }
}
