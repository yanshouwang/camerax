// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `dev.hebei.camerax_android.core.CameraState`
class CameraState extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraState> $type;

  @jni$_.internal
  CameraState.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/hebei/camerax_android/core/CameraState');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraState$NullableType();
  static const type = $CameraState$Type();
  static final _id_PENDING_OPEN = _class.staticFieldId(
    r'PENDING_OPEN',
    r'Ldev/hebei/camerax_android/core/CameraState;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.CameraState PENDING_OPEN`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraState? get PENDING_OPEN =>
      _id_PENDING_OPEN.get(_class, const $CameraState$NullableType());

  static final _id_OPENING = _class.staticFieldId(
    r'OPENING',
    r'Ldev/hebei/camerax_android/core/CameraState;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.CameraState OPENING`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraState? get OPENING =>
      _id_OPENING.get(_class, const $CameraState$NullableType());

  static final _id_OPEN = _class.staticFieldId(
    r'OPEN',
    r'Ldev/hebei/camerax_android/core/CameraState;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.CameraState OPEN`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraState? get OPEN =>
      _id_OPEN.get(_class, const $CameraState$NullableType());

  static final _id_CLOSING = _class.staticFieldId(
    r'CLOSING',
    r'Ldev/hebei/camerax_android/core/CameraState;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.CameraState CLOSING`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraState? get CLOSING =>
      _id_CLOSING.get(_class, const $CameraState$NullableType());

  static final _id_CLOSED = _class.staticFieldId(
    r'CLOSED',
    r'Ldev/hebei/camerax_android/core/CameraState;',
  );

  /// from: `static public final dev.hebei.camerax_android.core.CameraState CLOSED`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraState? get CLOSED =>
      _id_CLOSED.get(_class, const $CameraState$NullableType());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Ldev/hebei/camerax_android/core/CameraState;',
  );

  static final _values = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public dev.hebei.camerax_android.core.CameraState[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JArray<CameraState?>? values() {
    return _values(_class.reference.pointer, _id_values as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<CameraState?>?>(
            const jni$_.JArrayNullableType<CameraState?>(
                $CameraState$NullableType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Ldev/hebei/camerax_android/core/CameraState;',
  );

  static final _valueOf = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public dev.hebei.camerax_android.core.CameraState valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraState? valueOf(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _valueOf(_class.reference.pointer, _id_valueOf as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<CameraState?>(const $CameraState$NullableType());
  }
}

final class $CameraState$NullableType extends jni$_.JObjType<CameraState?> {
  @jni$_.internal
  const $CameraState$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/CameraState;';

  @jni$_.internal
  @core$_.override
  CameraState? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : CameraState.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraState?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraState$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraState$NullableType) &&
        other is $CameraState$NullableType;
  }
}

final class $CameraState$Type extends jni$_.JObjType<CameraState> {
  @jni$_.internal
  const $CameraState$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/hebei/camerax_android/core/CameraState;';

  @jni$_.internal
  @core$_.override
  CameraState fromReference(jni$_.JReference reference) =>
      CameraState.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraState?> get nullableType =>
      const $CameraState$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraState$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraState$Type) &&
        other is $CameraState$Type;
  }
}
