// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../content/ContentResolver.dart' as contentresolver_;

import '../content/Context.dart' as context_;

import '../database/Cursor.dart' as cursor_;

import '../net/Uri.dart' as uri_;

import '../util/Size.dart' as size_;

/// from: android.provider.MediaStore$Audio$AlbumColumns
class MediaStore_Audio_AlbumColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_AlbumColumns> $type = type;

  MediaStore_Audio_AlbumColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$AlbumColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_AlbumColumnsType();
  static final _id_ALBUM = _class.staticFieldId(
    r'ALBUM',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ALBUM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM =>
      _id_ALBUM.get(_class, const jni.JStringType());

  static final _id_ALBUM_ART = _class.staticFieldId(
    r'ALBUM_ART',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ALBUM_ART
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_ART =>
      _id_ALBUM_ART.get(_class, const jni.JStringType());

  static final _id_ALBUM_ID = _class.staticFieldId(
    r'ALBUM_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ALBUM_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_ID =>
      _id_ALBUM_ID.get(_class, const jni.JStringType());

  static final _id_ALBUM_KEY = _class.staticFieldId(
    r'ALBUM_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ALBUM_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_KEY =>
      _id_ALBUM_KEY.get(_class, const jni.JStringType());

  static final _id_ARTIST = _class.staticFieldId(
    r'ARTIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST =>
      _id_ARTIST.get(_class, const jni.JStringType());

  static final _id_ARTIST_ID = _class.staticFieldId(
    r'ARTIST_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ARTIST_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST_ID =>
      _id_ARTIST_ID.get(_class, const jni.JStringType());

  static final _id_ARTIST_KEY = _class.staticFieldId(
    r'ARTIST_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ARTIST_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST_KEY =>
      _id_ARTIST_KEY.get(_class, const jni.JStringType());

  static final _id_FIRST_YEAR = _class.staticFieldId(
    r'FIRST_YEAR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FIRST_YEAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FIRST_YEAR =>
      _id_FIRST_YEAR.get(_class, const jni.JStringType());

  static final _id_LAST_YEAR = _class.staticFieldId(
    r'LAST_YEAR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LAST_YEAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAST_YEAR =>
      _id_LAST_YEAR.get(_class, const jni.JStringType());

  static final _id_NUMBER_OF_SONGS = _class.staticFieldId(
    r'NUMBER_OF_SONGS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NUMBER_OF_SONGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NUMBER_OF_SONGS =>
      _id_NUMBER_OF_SONGS.get(_class, const jni.JStringType());

  static final _id_NUMBER_OF_SONGS_FOR_ARTIST = _class.staticFieldId(
    r'NUMBER_OF_SONGS_FOR_ARTIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NUMBER_OF_SONGS_FOR_ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NUMBER_OF_SONGS_FOR_ARTIST =>
      _id_NUMBER_OF_SONGS_FOR_ARTIST.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Audio_AlbumColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Audio_AlbumColumns.implement(
    $MediaStore_Audio_AlbumColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Audio_AlbumColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.provider.MediaStore$Audio$AlbumColumns',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Audio_AlbumColumnsImpl {
  factory $MediaStore_Audio_AlbumColumnsImpl() =
      _$MediaStore_Audio_AlbumColumnsImpl;
}

class _$MediaStore_Audio_AlbumColumnsImpl
    implements $MediaStore_Audio_AlbumColumnsImpl {
  _$MediaStore_Audio_AlbumColumnsImpl();
}

final class $MediaStore_Audio_AlbumColumnsType
    extends jni.JObjType<MediaStore_Audio_AlbumColumns> {
  const $MediaStore_Audio_AlbumColumnsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$AlbumColumns;';

  @override
  MediaStore_Audio_AlbumColumns fromReference(jni.JReference reference) =>
      MediaStore_Audio_AlbumColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_AlbumColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_AlbumColumnsType) &&
        other is $MediaStore_Audio_AlbumColumnsType;
  }
}

/// from: android.provider.MediaStore$Audio$Albums
class MediaStore_Audio_Albums extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Albums> $type = type;

  MediaStore_Audio_Albums.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$Albums');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_AlbumsType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r'ENTRY_CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r'EXTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r'INTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Albums() {
    return MediaStore_Audio_Albums.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_Audio_AlbumsType
    extends jni.JObjType<MediaStore_Audio_Albums> {
  const $MediaStore_Audio_AlbumsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$Albums;';

  @override
  MediaStore_Audio_Albums fromReference(jni.JReference reference) =>
      MediaStore_Audio_Albums.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_AlbumsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_AlbumsType) &&
        other is $MediaStore_Audio_AlbumsType;
  }
}

/// from: android.provider.MediaStore$Audio$ArtistColumns
class MediaStore_Audio_ArtistColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_ArtistColumns> $type = type;

  MediaStore_Audio_ArtistColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$ArtistColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_ArtistColumnsType();
  static final _id_ARTIST = _class.staticFieldId(
    r'ARTIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST =>
      _id_ARTIST.get(_class, const jni.JStringType());

  static final _id_ARTIST_KEY = _class.staticFieldId(
    r'ARTIST_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ARTIST_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST_KEY =>
      _id_ARTIST_KEY.get(_class, const jni.JStringType());

  static final _id_NUMBER_OF_ALBUMS = _class.staticFieldId(
    r'NUMBER_OF_ALBUMS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NUMBER_OF_ALBUMS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NUMBER_OF_ALBUMS =>
      _id_NUMBER_OF_ALBUMS.get(_class, const jni.JStringType());

  static final _id_NUMBER_OF_TRACKS = _class.staticFieldId(
    r'NUMBER_OF_TRACKS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NUMBER_OF_TRACKS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NUMBER_OF_TRACKS =>
      _id_NUMBER_OF_TRACKS.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Audio_ArtistColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Audio_ArtistColumns.implement(
    $MediaStore_Audio_ArtistColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Audio_ArtistColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.provider.MediaStore$Audio$ArtistColumns',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Audio_ArtistColumnsImpl {
  factory $MediaStore_Audio_ArtistColumnsImpl() =
      _$MediaStore_Audio_ArtistColumnsImpl;
}

class _$MediaStore_Audio_ArtistColumnsImpl
    implements $MediaStore_Audio_ArtistColumnsImpl {
  _$MediaStore_Audio_ArtistColumnsImpl();
}

final class $MediaStore_Audio_ArtistColumnsType
    extends jni.JObjType<MediaStore_Audio_ArtistColumns> {
  const $MediaStore_Audio_ArtistColumnsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$ArtistColumns;';

  @override
  MediaStore_Audio_ArtistColumns fromReference(jni.JReference reference) =>
      MediaStore_Audio_ArtistColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_ArtistColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_ArtistColumnsType) &&
        other is $MediaStore_Audio_ArtistColumnsType;
  }
}

/// from: android.provider.MediaStore$Audio$Artists$Albums
class MediaStore_Audio_Artists_Albums extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Artists_Albums> $type = type;

  MediaStore_Audio_Artists_Albums.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$Artists$Albums');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_Artists_AlbumsType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Artists_Albums() {
    return MediaStore_Audio_Artists_Albums.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;J)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
    int j,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_Audio_Artists_AlbumsType
    extends jni.JObjType<MediaStore_Audio_Artists_Albums> {
  const $MediaStore_Audio_Artists_AlbumsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$Artists$Albums;';

  @override
  MediaStore_Audio_Artists_Albums fromReference(jni.JReference reference) =>
      MediaStore_Audio_Artists_Albums.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_Artists_AlbumsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_Artists_AlbumsType) &&
        other is $MediaStore_Audio_Artists_AlbumsType;
  }
}

/// from: android.provider.MediaStore$Audio$Artists
class MediaStore_Audio_Artists extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Artists> $type = type;

  MediaStore_Audio_Artists.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$Artists');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_ArtistsType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r'ENTRY_CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r'EXTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r'INTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Artists() {
    return MediaStore_Audio_Artists.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_Audio_ArtistsType
    extends jni.JObjType<MediaStore_Audio_Artists> {
  const $MediaStore_Audio_ArtistsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$Artists;';

  @override
  MediaStore_Audio_Artists fromReference(jni.JReference reference) =>
      MediaStore_Audio_Artists.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_ArtistsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_ArtistsType) &&
        other is $MediaStore_Audio_ArtistsType;
  }
}

/// from: android.provider.MediaStore$Audio$AudioColumns
class MediaStore_Audio_AudioColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_AudioColumns> $type = type;

  MediaStore_Audio_AudioColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$AudioColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_AudioColumnsType();
  static final _id_ALBUM_ID = _class.staticFieldId(
    r'ALBUM_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ALBUM_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_ID =>
      _id_ALBUM_ID.get(_class, const jni.JStringType());

  static final _id_ALBUM_KEY = _class.staticFieldId(
    r'ALBUM_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ALBUM_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_KEY =>
      _id_ALBUM_KEY.get(_class, const jni.JStringType());

  static final _id_ARTIST_ID = _class.staticFieldId(
    r'ARTIST_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ARTIST_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST_ID =>
      _id_ARTIST_ID.get(_class, const jni.JStringType());

  static final _id_ARTIST_KEY = _class.staticFieldId(
    r'ARTIST_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ARTIST_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST_KEY =>
      _id_ARTIST_KEY.get(_class, const jni.JStringType());

  static final _id_BOOKMARK = _class.staticFieldId(
    r'BOOKMARK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BOOKMARK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BOOKMARK =>
      _id_BOOKMARK.get(_class, const jni.JStringType());

  static final _id_GENRE = _class.staticFieldId(
    r'GENRE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GENRE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENRE =>
      _id_GENRE.get(_class, const jni.JStringType());

  static final _id_GENRE_ID = _class.staticFieldId(
    r'GENRE_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GENRE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENRE_ID =>
      _id_GENRE_ID.get(_class, const jni.JStringType());

  static final _id_GENRE_KEY = _class.staticFieldId(
    r'GENRE_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GENRE_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENRE_KEY =>
      _id_GENRE_KEY.get(_class, const jni.JStringType());

  static final _id_IS_ALARM = _class.staticFieldId(
    r'IS_ALARM',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_ALARM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_ALARM =>
      _id_IS_ALARM.get(_class, const jni.JStringType());

  static final _id_IS_AUDIOBOOK = _class.staticFieldId(
    r'IS_AUDIOBOOK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_AUDIOBOOK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_AUDIOBOOK =>
      _id_IS_AUDIOBOOK.get(_class, const jni.JStringType());

  static final _id_IS_MUSIC = _class.staticFieldId(
    r'IS_MUSIC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_MUSIC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_MUSIC =>
      _id_IS_MUSIC.get(_class, const jni.JStringType());

  static final _id_IS_NOTIFICATION = _class.staticFieldId(
    r'IS_NOTIFICATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_NOTIFICATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_NOTIFICATION =>
      _id_IS_NOTIFICATION.get(_class, const jni.JStringType());

  static final _id_IS_PODCAST = _class.staticFieldId(
    r'IS_PODCAST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_PODCAST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_PODCAST =>
      _id_IS_PODCAST.get(_class, const jni.JStringType());

  static final _id_IS_RECORDING = _class.staticFieldId(
    r'IS_RECORDING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_RECORDING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_RECORDING =>
      _id_IS_RECORDING.get(_class, const jni.JStringType());

  static final _id_IS_RINGTONE = _class.staticFieldId(
    r'IS_RINGTONE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_RINGTONE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_RINGTONE =>
      _id_IS_RINGTONE.get(_class, const jni.JStringType());

  static final _id_TITLE_KEY = _class.staticFieldId(
    r'TITLE_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TITLE_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TITLE_KEY =>
      _id_TITLE_KEY.get(_class, const jni.JStringType());

  static final _id_TITLE_RESOURCE_URI = _class.staticFieldId(
    r'TITLE_RESOURCE_URI',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TITLE_RESOURCE_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TITLE_RESOURCE_URI =>
      _id_TITLE_RESOURCE_URI.get(_class, const jni.JStringType());

  static final _id_TRACK = _class.staticFieldId(
    r'TRACK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TRACK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TRACK =>
      _id_TRACK.get(_class, const jni.JStringType());

  static final _id_YEAR = _class.staticFieldId(
    r'YEAR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String YEAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get YEAR => _id_YEAR.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Audio_AudioColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Audio_AudioColumns.implement(
    $MediaStore_Audio_AudioColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Audio_AudioColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.provider.MediaStore$Audio$AudioColumns',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Audio_AudioColumnsImpl {
  factory $MediaStore_Audio_AudioColumnsImpl() =
      _$MediaStore_Audio_AudioColumnsImpl;
}

class _$MediaStore_Audio_AudioColumnsImpl
    implements $MediaStore_Audio_AudioColumnsImpl {
  _$MediaStore_Audio_AudioColumnsImpl();
}

final class $MediaStore_Audio_AudioColumnsType
    extends jni.JObjType<MediaStore_Audio_AudioColumns> {
  const $MediaStore_Audio_AudioColumnsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$AudioColumns;';

  @override
  MediaStore_Audio_AudioColumns fromReference(jni.JReference reference) =>
      MediaStore_Audio_AudioColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_AudioColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_AudioColumnsType) &&
        other is $MediaStore_Audio_AudioColumnsType;
  }
}

/// from: android.provider.MediaStore$Audio$Genres$Members
class MediaStore_Audio_Genres_Members extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Genres_Members> $type = type;

  MediaStore_Audio_Genres_Members.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$Genres$Members');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_Genres_MembersType();
  static final _id_AUDIO_ID = _class.staticFieldId(
    r'AUDIO_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String AUDIO_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUDIO_ID =>
      _id_AUDIO_ID.get(_class, const jni.JStringType());

  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_DIRECTORY =>
      _id_CONTENT_DIRECTORY.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_GENRE_ID = _class.staticFieldId(
    r'GENRE_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GENRE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENRE_ID =>
      _id_GENRE_ID.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Genres_Members() {
    return MediaStore_Audio_Genres_Members.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;J)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
    int j,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_Audio_Genres_MembersType
    extends jni.JObjType<MediaStore_Audio_Genres_Members> {
  const $MediaStore_Audio_Genres_MembersType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$Genres$Members;';

  @override
  MediaStore_Audio_Genres_Members fromReference(jni.JReference reference) =>
      MediaStore_Audio_Genres_Members.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_Genres_MembersType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_Genres_MembersType) &&
        other is $MediaStore_Audio_Genres_MembersType;
  }
}

/// from: android.provider.MediaStore$Audio$Genres
class MediaStore_Audio_Genres extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Genres> $type = type;

  MediaStore_Audio_Genres.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$Genres');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_GenresType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r'ENTRY_CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r'EXTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r'INTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Genres() {
    return MediaStore_Audio_Genres.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getContentUriForAudioId = _class.staticMethodId(
    r'getContentUriForAudioId',
    r'(Ljava/lang/String;I)Landroid/net/Uri;',
  );

  static final _getContentUriForAudioId = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUriForAudioId(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUriForAudioId(
    jni.JString string,
    int i,
  ) {
    return _getContentUriForAudioId(
            _class.reference.pointer,
            _id_getContentUriForAudioId as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_Audio_GenresType
    extends jni.JObjType<MediaStore_Audio_Genres> {
  const $MediaStore_Audio_GenresType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$Genres;';

  @override
  MediaStore_Audio_Genres fromReference(jni.JReference reference) =>
      MediaStore_Audio_Genres.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_GenresType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_GenresType) &&
        other is $MediaStore_Audio_GenresType;
  }
}

/// from: android.provider.MediaStore$Audio$GenresColumns
class MediaStore_Audio_GenresColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_GenresColumns> $type = type;

  MediaStore_Audio_GenresColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$GenresColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_GenresColumnsType();
  static final _id_NAME = _class.staticFieldId(
    r'NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NAME => _id_NAME.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Audio_GenresColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Audio_GenresColumns.implement(
    $MediaStore_Audio_GenresColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Audio_GenresColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.provider.MediaStore$Audio$GenresColumns',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Audio_GenresColumnsImpl {
  factory $MediaStore_Audio_GenresColumnsImpl() =
      _$MediaStore_Audio_GenresColumnsImpl;
}

class _$MediaStore_Audio_GenresColumnsImpl
    implements $MediaStore_Audio_GenresColumnsImpl {
  _$MediaStore_Audio_GenresColumnsImpl();
}

final class $MediaStore_Audio_GenresColumnsType
    extends jni.JObjType<MediaStore_Audio_GenresColumns> {
  const $MediaStore_Audio_GenresColumnsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$GenresColumns;';

  @override
  MediaStore_Audio_GenresColumns fromReference(jni.JReference reference) =>
      MediaStore_Audio_GenresColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_GenresColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_GenresColumnsType) &&
        other is $MediaStore_Audio_GenresColumnsType;
  }
}

/// from: android.provider.MediaStore$Audio$Media
class MediaStore_Audio_Media extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Media> $type = type;

  MediaStore_Audio_Media.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$Media');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_MediaType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r'ENTRY_CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r'EXTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_EXTRA_MAX_BYTES = _class.staticFieldId(
    r'EXTRA_MAX_BYTES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MAX_BYTES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MAX_BYTES =>
      _id_EXTRA_MAX_BYTES.get(_class, const jni.JStringType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r'INTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_RECORD_SOUND_ACTION = _class.staticFieldId(
    r'RECORD_SOUND_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String RECORD_SOUND_ACTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RECORD_SOUND_ACTION =>
      _id_RECORD_SOUND_ACTION.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Media() {
    return MediaStore_Audio_Media.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getContentUri1 = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;J)Landroid/net/Uri;',
  );

  static final _getContentUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri1(
    jni.JString string,
    int j,
  ) {
    return _getContentUri1(_class.reference.pointer,
            _id_getContentUri1 as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const uri_.$UriType());
  }

  static final _id_getContentUriForPath = _class.staticMethodId(
    r'getContentUriForPath',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUriForPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUriForPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUriForPath(
    jni.JString string,
  ) {
    return _getContentUriForPath(
            _class.reference.pointer,
            _id_getContentUriForPath as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_Audio_MediaType
    extends jni.JObjType<MediaStore_Audio_Media> {
  const $MediaStore_Audio_MediaType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$Media;';

  @override
  MediaStore_Audio_Media fromReference(jni.JReference reference) =>
      MediaStore_Audio_Media.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_MediaType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_MediaType) &&
        other is $MediaStore_Audio_MediaType;
  }
}

/// from: android.provider.MediaStore$Audio$Playlists$Members
class MediaStore_Audio_Playlists_Members extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Playlists_Members> $type = type;

  MediaStore_Audio_Playlists_Members.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/provider/MediaStore$Audio$Playlists$Members');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_Playlists_MembersType();
  static final _id_AUDIO_ID = _class.staticFieldId(
    r'AUDIO_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String AUDIO_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUDIO_ID =>
      _id_AUDIO_ID.get(_class, const jni.JStringType());

  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_DIRECTORY =>
      _id_CONTENT_DIRECTORY.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_PLAYLIST_ID = _class.staticFieldId(
    r'PLAYLIST_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PLAYLIST_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PLAYLIST_ID =>
      _id_PLAYLIST_ID.get(_class, const jni.JStringType());

  static final _id_PLAY_ORDER = _class.staticFieldId(
    r'PLAY_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PLAY_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PLAY_ORDER =>
      _id_PLAY_ORDER.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Playlists_Members() {
    return MediaStore_Audio_Playlists_Members.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;J)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
    int j,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const uri_.$UriType());
  }

  static final _id_moveItem = _class.staticMethodId(
    r'moveItem',
    r'(Landroid/content/ContentResolver;JII)Z',
  );

  static final _moveItem = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: static public boolean moveItem(android.content.ContentResolver contentResolver, long j, int i, int i1)
  static bool moveItem(
    contentresolver_.ContentResolver contentResolver,
    int j,
    int i,
    int i1,
  ) {
    return _moveItem(_class.reference.pointer, _id_moveItem as jni.JMethodIDPtr,
            contentResolver.reference.pointer, j, i, i1)
        .boolean;
  }
}

final class $MediaStore_Audio_Playlists_MembersType
    extends jni.JObjType<MediaStore_Audio_Playlists_Members> {
  const $MediaStore_Audio_Playlists_MembersType();

  @override
  String get signature =>
      r'Landroid/provider/MediaStore$Audio$Playlists$Members;';

  @override
  MediaStore_Audio_Playlists_Members fromReference(jni.JReference reference) =>
      MediaStore_Audio_Playlists_Members.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_Playlists_MembersType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_Playlists_MembersType) &&
        other is $MediaStore_Audio_Playlists_MembersType;
  }
}

/// from: android.provider.MediaStore$Audio$Playlists
class MediaStore_Audio_Playlists extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Playlists> $type = type;

  MediaStore_Audio_Playlists.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$Playlists');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_PlaylistsType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r'ENTRY_CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r'EXTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r'INTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Playlists() {
    return MediaStore_Audio_Playlists.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_Audio_PlaylistsType
    extends jni.JObjType<MediaStore_Audio_Playlists> {
  const $MediaStore_Audio_PlaylistsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$Playlists;';

  @override
  MediaStore_Audio_Playlists fromReference(jni.JReference reference) =>
      MediaStore_Audio_Playlists.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_PlaylistsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_PlaylistsType) &&
        other is $MediaStore_Audio_PlaylistsType;
  }
}

/// from: android.provider.MediaStore$Audio$PlaylistsColumns
class MediaStore_Audio_PlaylistsColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_PlaylistsColumns> $type = type;

  MediaStore_Audio_PlaylistsColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$PlaylistsColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_PlaylistsColumnsType();
  static final _id_DATA = _class.staticFieldId(
    r'DATA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATA => _id_DATA.get(_class, const jni.JStringType());

  static final _id_DATE_ADDED = _class.staticFieldId(
    r'DATE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_ADDED =>
      _id_DATE_ADDED.get(_class, const jni.JStringType());

  static final _id_DATE_MODIFIED = _class.staticFieldId(
    r'DATE_MODIFIED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATE_MODIFIED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_MODIFIED =>
      _id_DATE_MODIFIED.get(_class, const jni.JStringType());

  static final _id_NAME = _class.staticFieldId(
    r'NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NAME => _id_NAME.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Audio_PlaylistsColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Audio_PlaylistsColumns.implement(
    $MediaStore_Audio_PlaylistsColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Audio_PlaylistsColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.provider.MediaStore$Audio$PlaylistsColumns',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Audio_PlaylistsColumnsImpl {
  factory $MediaStore_Audio_PlaylistsColumnsImpl() =
      _$MediaStore_Audio_PlaylistsColumnsImpl;
}

class _$MediaStore_Audio_PlaylistsColumnsImpl
    implements $MediaStore_Audio_PlaylistsColumnsImpl {
  _$MediaStore_Audio_PlaylistsColumnsImpl();
}

final class $MediaStore_Audio_PlaylistsColumnsType
    extends jni.JObjType<MediaStore_Audio_PlaylistsColumns> {
  const $MediaStore_Audio_PlaylistsColumnsType();

  @override
  String get signature =>
      r'Landroid/provider/MediaStore$Audio$PlaylistsColumns;';

  @override
  MediaStore_Audio_PlaylistsColumns fromReference(jni.JReference reference) =>
      MediaStore_Audio_PlaylistsColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_PlaylistsColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_PlaylistsColumnsType) &&
        other is $MediaStore_Audio_PlaylistsColumnsType;
  }
}

/// from: android.provider.MediaStore$Audio$Radio
class MediaStore_Audio_Radio extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Radio> $type = type;

  MediaStore_Audio_Radio.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio$Radio');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_RadioType();
  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r'ENTRY_CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());
}

final class $MediaStore_Audio_RadioType
    extends jni.JObjType<MediaStore_Audio_Radio> {
  const $MediaStore_Audio_RadioType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio$Radio;';

  @override
  MediaStore_Audio_Radio fromReference(jni.JReference reference) =>
      MediaStore_Audio_Radio.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_RadioType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_RadioType) &&
        other is $MediaStore_Audio_RadioType;
  }
}

/// from: android.provider.MediaStore$Audio
class MediaStore_Audio extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio> $type = type;

  MediaStore_Audio.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Audio');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_AudioType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio() {
    return MediaStore_Audio.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_keyFor = _class.staticMethodId(
    r'keyFor',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _keyFor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String keyFor(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString keyFor(
    jni.JString string,
  ) {
    return _keyFor(_class.reference.pointer, _id_keyFor as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }
}

final class $MediaStore_AudioType extends jni.JObjType<MediaStore_Audio> {
  const $MediaStore_AudioType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Audio;';

  @override
  MediaStore_Audio fromReference(jni.JReference reference) =>
      MediaStore_Audio.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_AudioType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_AudioType) &&
        other is $MediaStore_AudioType;
  }
}

/// from: android.provider.MediaStore$DownloadColumns
class MediaStore_DownloadColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_DownloadColumns> $type = type;

  MediaStore_DownloadColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$DownloadColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_DownloadColumnsType();
  static final _id_DOWNLOAD_URI = _class.staticFieldId(
    r'DOWNLOAD_URI',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DOWNLOAD_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOWNLOAD_URI =>
      _id_DOWNLOAD_URI.get(_class, const jni.JStringType());

  static final _id_REFERER_URI = _class.staticFieldId(
    r'REFERER_URI',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String REFERER_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get REFERER_URI =>
      _id_REFERER_URI.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_DownloadColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_DownloadColumns.implement(
    $MediaStore_DownloadColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_DownloadColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.provider.MediaStore$DownloadColumns',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_DownloadColumnsImpl {
  factory $MediaStore_DownloadColumnsImpl() = _$MediaStore_DownloadColumnsImpl;
}

class _$MediaStore_DownloadColumnsImpl
    implements $MediaStore_DownloadColumnsImpl {
  _$MediaStore_DownloadColumnsImpl();
}

final class $MediaStore_DownloadColumnsType
    extends jni.JObjType<MediaStore_DownloadColumns> {
  const $MediaStore_DownloadColumnsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$DownloadColumns;';

  @override
  MediaStore_DownloadColumns fromReference(jni.JReference reference) =>
      MediaStore_DownloadColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_DownloadColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_DownloadColumnsType) &&
        other is $MediaStore_DownloadColumnsType;
  }
}

/// from: android.provider.MediaStore$Downloads
class MediaStore_Downloads extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Downloads> $type = type;

  MediaStore_Downloads.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Downloads');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_DownloadsType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r'EXTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r'INTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getContentUri1 = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;J)Landroid/net/Uri;',
  );

  static final _getContentUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri1(
    jni.JString string,
    int j,
  ) {
    return _getContentUri1(_class.reference.pointer,
            _id_getContentUri1 as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_DownloadsType
    extends jni.JObjType<MediaStore_Downloads> {
  const $MediaStore_DownloadsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Downloads;';

  @override
  MediaStore_Downloads fromReference(jni.JReference reference) =>
      MediaStore_Downloads.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_DownloadsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_DownloadsType) &&
        other is $MediaStore_DownloadsType;
  }
}

/// from: android.provider.MediaStore$Files$FileColumns
class MediaStore_Files_FileColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Files_FileColumns> $type = type;

  MediaStore_Files_FileColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Files$FileColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Files_FileColumnsType();
  static final _id_MEDIA_TYPE = _class.staticFieldId(
    r'MEDIA_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_TYPE =>
      _id_MEDIA_TYPE.get(_class, const jni.JStringType());

  /// from: static public final int MEDIA_TYPE_AUDIO
  static const MEDIA_TYPE_AUDIO = 2;

  /// from: static public final int MEDIA_TYPE_DOCUMENT
  static const MEDIA_TYPE_DOCUMENT = 6;

  /// from: static public final int MEDIA_TYPE_IMAGE
  static const MEDIA_TYPE_IMAGE = 1;

  /// from: static public final int MEDIA_TYPE_NONE
  static const MEDIA_TYPE_NONE = 0;

  /// from: static public final int MEDIA_TYPE_PLAYLIST
  static const MEDIA_TYPE_PLAYLIST = 4;

  /// from: static public final int MEDIA_TYPE_SUBTITLE
  static const MEDIA_TYPE_SUBTITLE = 5;

  /// from: static public final int MEDIA_TYPE_VIDEO
  static const MEDIA_TYPE_VIDEO = 3;
  static final _id_MIME_TYPE = _class.staticFieldId(
    r'MIME_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MIME_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIME_TYPE =>
      _id_MIME_TYPE.get(_class, const jni.JStringType());

  static final _id_PARENT = _class.staticFieldId(
    r'PARENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PARENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PARENT =>
      _id_PARENT.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Files_FileColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Files_FileColumns.implement(
    $MediaStore_Files_FileColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Files_FileColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.provider.MediaStore$Files$FileColumns',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Files_FileColumnsImpl {
  factory $MediaStore_Files_FileColumnsImpl() =
      _$MediaStore_Files_FileColumnsImpl;
}

class _$MediaStore_Files_FileColumnsImpl
    implements $MediaStore_Files_FileColumnsImpl {
  _$MediaStore_Files_FileColumnsImpl();
}

final class $MediaStore_Files_FileColumnsType
    extends jni.JObjType<MediaStore_Files_FileColumns> {
  const $MediaStore_Files_FileColumnsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Files$FileColumns;';

  @override
  MediaStore_Files_FileColumns fromReference(jni.JReference reference) =>
      MediaStore_Files_FileColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Files_FileColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Files_FileColumnsType) &&
        other is $MediaStore_Files_FileColumnsType;
  }
}

/// from: android.provider.MediaStore$Files
class MediaStore_Files extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Files> $type = type;

  MediaStore_Files.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Files');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_FilesType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Files() {
    return MediaStore_Files.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getContentUri1 = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;J)Landroid/net/Uri;',
  );

  static final _getContentUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri1(
    jni.JString string,
    int j,
  ) {
    return _getContentUri1(_class.reference.pointer,
            _id_getContentUri1 as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_FilesType extends jni.JObjType<MediaStore_Files> {
  const $MediaStore_FilesType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Files;';

  @override
  MediaStore_Files fromReference(jni.JReference reference) =>
      MediaStore_Files.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_FilesType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_FilesType) &&
        other is $MediaStore_FilesType;
  }
}

/// from: android.provider.MediaStore$Images$ImageColumns
class MediaStore_Images_ImageColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Images_ImageColumns> $type = type;

  MediaStore_Images_ImageColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Images$ImageColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Images_ImageColumnsType();
  static final _id_DESCRIPTION = _class.staticFieldId(
    r'DESCRIPTION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DESCRIPTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DESCRIPTION =>
      _id_DESCRIPTION.get(_class, const jni.JStringType());

  static final _id_EXPOSURE_TIME = _class.staticFieldId(
    r'EXPOSURE_TIME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXPOSURE_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXPOSURE_TIME =>
      _id_EXPOSURE_TIME.get(_class, const jni.JStringType());

  static final _id_F_NUMBER = _class.staticFieldId(
    r'F_NUMBER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String F_NUMBER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get F_NUMBER =>
      _id_F_NUMBER.get(_class, const jni.JStringType());

  static final _id_ISO = _class.staticFieldId(
    r'ISO',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ISO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ISO => _id_ISO.get(_class, const jni.JStringType());

  static final _id_IS_PRIVATE = _class.staticFieldId(
    r'IS_PRIVATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_PRIVATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_PRIVATE =>
      _id_IS_PRIVATE.get(_class, const jni.JStringType());

  static final _id_LATITUDE = _class.staticFieldId(
    r'LATITUDE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LATITUDE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LATITUDE =>
      _id_LATITUDE.get(_class, const jni.JStringType());

  static final _id_LONGITUDE = _class.staticFieldId(
    r'LONGITUDE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LONGITUDE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LONGITUDE =>
      _id_LONGITUDE.get(_class, const jni.JStringType());

  static final _id_MINI_THUMB_MAGIC = _class.staticFieldId(
    r'MINI_THUMB_MAGIC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MINI_THUMB_MAGIC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MINI_THUMB_MAGIC =>
      _id_MINI_THUMB_MAGIC.get(_class, const jni.JStringType());

  static final _id_PICASA_ID = _class.staticFieldId(
    r'PICASA_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PICASA_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PICASA_ID =>
      _id_PICASA_ID.get(_class, const jni.JStringType());

  static final _id_SCENE_CAPTURE_TYPE = _class.staticFieldId(
    r'SCENE_CAPTURE_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SCENE_CAPTURE_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SCENE_CAPTURE_TYPE =>
      _id_SCENE_CAPTURE_TYPE.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Images_ImageColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Images_ImageColumns.implement(
    $MediaStore_Images_ImageColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Images_ImageColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.provider.MediaStore$Images$ImageColumns',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Images_ImageColumnsImpl {
  factory $MediaStore_Images_ImageColumnsImpl() =
      _$MediaStore_Images_ImageColumnsImpl;
}

class _$MediaStore_Images_ImageColumnsImpl
    implements $MediaStore_Images_ImageColumnsImpl {
  _$MediaStore_Images_ImageColumnsImpl();
}

final class $MediaStore_Images_ImageColumnsType
    extends jni.JObjType<MediaStore_Images_ImageColumns> {
  const $MediaStore_Images_ImageColumnsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Images$ImageColumns;';

  @override
  MediaStore_Images_ImageColumns fromReference(jni.JReference reference) =>
      MediaStore_Images_ImageColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Images_ImageColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Images_ImageColumnsType) &&
        other is $MediaStore_Images_ImageColumnsType;
  }
}

/// from: android.provider.MediaStore$Images$Media
class MediaStore_Images_Media extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Images_Media> $type = type;

  MediaStore_Images_Media.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Images$Media');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Images_MediaType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r'EXTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r'INTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Images_Media() {
    return MediaStore_Images_Media.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_query = _class.staticMethodId(
    r'query',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;[Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _query = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.database.Cursor query(android.content.ContentResolver contentResolver, android.net.Uri uri, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static cursor_.Cursor query(
    contentresolver_.ContentResolver contentResolver,
    uri_.Uri uri,
    jni.JArray<jni.JString> strings,
  ) {
    return _query(
            _class.reference.pointer,
            _id_query as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer)
        .object(const cursor_.$CursorType());
  }

  static final _id_query1 = _class.staticMethodId(
    r'query',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _query1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.database.Cursor query(android.content.ContentResolver contentResolver, android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static cursor_.Cursor query1(
    contentresolver_.ContentResolver contentResolver,
    uri_.Uri uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JString string1,
  ) {
    return _query1(
            _class.reference.pointer,
            _id_query1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const cursor_.$CursorType());
  }

  static final _id_query2 = _class.staticMethodId(
    r'query',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _query2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.database.Cursor query(android.content.ContentResolver contentResolver, android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static cursor_.Cursor query2(
    contentresolver_.ContentResolver contentResolver,
    uri_.Uri uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JArray<jni.JString> strings1,
    jni.JString string1,
  ) {
    return _query2(
            _class.reference.pointer,
            _id_query2 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            strings1.reference.pointer,
            string1.reference.pointer)
        .object(const cursor_.$CursorType());
  }

  static final _id_getBitmap = _class.staticMethodId(
    r'getBitmap',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/graphics/Bitmap;',
  );

  static final _getBitmap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap getBitmap(android.content.ContentResolver contentResolver, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getBitmap(
    contentresolver_.ContentResolver contentResolver,
    uri_.Uri uri,
  ) {
    return _getBitmap(
            _class.reference.pointer,
            _id_getBitmap as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_insertImage = _class.staticMethodId(
    r'insertImage',
    r'(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _insertImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String insertImage(android.content.ContentResolver contentResolver, java.lang.String string, java.lang.String string1, java.lang.String string2)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString insertImage(
    contentresolver_.ContentResolver contentResolver,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    return _insertImage(
            _class.reference.pointer,
            _id_insertImage as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_insertImage1 = _class.staticMethodId(
    r'insertImage',
    r'(Landroid/content/ContentResolver;Landroid/graphics/Bitmap;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _insertImage1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String insertImage(android.content.ContentResolver contentResolver, android.graphics.Bitmap bitmap, java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString insertImage1(
    contentresolver_.ContentResolver contentResolver,
    jni.JObject bitmap,
    jni.JString string,
    jni.JString string1,
  ) {
    return _insertImage1(
            _class.reference.pointer,
            _id_insertImage1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            bitmap.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getContentUri1 = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;J)Landroid/net/Uri;',
  );

  static final _getContentUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri1(
    jni.JString string,
    int j,
  ) {
    return _getContentUri1(_class.reference.pointer,
            _id_getContentUri1 as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_Images_MediaType
    extends jni.JObjType<MediaStore_Images_Media> {
  const $MediaStore_Images_MediaType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Images$Media;';

  @override
  MediaStore_Images_Media fromReference(jni.JReference reference) =>
      MediaStore_Images_Media.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Images_MediaType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Images_MediaType) &&
        other is $MediaStore_Images_MediaType;
  }
}

/// from: android.provider.MediaStore$Images$Thumbnails
class MediaStore_Images_Thumbnails extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Images_Thumbnails> $type = type;

  MediaStore_Images_Thumbnails.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Images$Thumbnails');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Images_ThumbnailsType();
  static final _id_DATA = _class.staticFieldId(
    r'DATA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATA => _id_DATA.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r'EXTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  /// from: static public final int FULL_SCREEN_KIND
  static const FULL_SCREEN_KIND = 2;
  static final _id_HEIGHT = _class.staticFieldId(
    r'HEIGHT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String HEIGHT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEIGHT =>
      _id_HEIGHT.get(_class, const jni.JStringType());

  static final _id_IMAGE_ID = _class.staticFieldId(
    r'IMAGE_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IMAGE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IMAGE_ID =>
      _id_IMAGE_ID.get(_class, const jni.JStringType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r'INTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_KIND = _class.staticFieldId(
    r'KIND',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String KIND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get KIND => _id_KIND.get(_class, const jni.JStringType());

  /// from: static public final int MICRO_KIND
  static const MICRO_KIND = 3;

  /// from: static public final int MINI_KIND
  static const MINI_KIND = 1;
  static final _id_THUMB_DATA = _class.staticFieldId(
    r'THUMB_DATA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String THUMB_DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get THUMB_DATA =>
      _id_THUMB_DATA.get(_class, const jni.JStringType());

  static final _id_WIDTH = _class.staticFieldId(
    r'WIDTH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIDTH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIDTH =>
      _id_WIDTH.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Images_Thumbnails() {
    return MediaStore_Images_Thumbnails.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_query = _class.staticMethodId(
    r'query',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;[Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _query = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final android.database.Cursor query(android.content.ContentResolver contentResolver, android.net.Uri uri, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static cursor_.Cursor query(
    contentresolver_.ContentResolver contentResolver,
    uri_.Uri uri,
    jni.JArray<jni.JString> strings,
  ) {
    return _query(
            _class.reference.pointer,
            _id_query as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer)
        .object(const cursor_.$CursorType());
  }

  static final _id_queryMiniThumbnails = _class.staticMethodId(
    r'queryMiniThumbnails',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;I[Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _queryMiniThumbnails = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final android.database.Cursor queryMiniThumbnails(android.content.ContentResolver contentResolver, android.net.Uri uri, int i, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static cursor_.Cursor queryMiniThumbnails(
    contentresolver_.ContentResolver contentResolver,
    uri_.Uri uri,
    int i,
    jni.JArray<jni.JString> strings,
  ) {
    return _queryMiniThumbnails(
            _class.reference.pointer,
            _id_queryMiniThumbnails as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            i,
            strings.reference.pointer)
        .object(const cursor_.$CursorType());
  }

  static final _id_queryMiniThumbnail = _class.staticMethodId(
    r'queryMiniThumbnail',
    r'(Landroid/content/ContentResolver;JI[Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _queryMiniThumbnail = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public final android.database.Cursor queryMiniThumbnail(android.content.ContentResolver contentResolver, long j, int i, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static cursor_.Cursor queryMiniThumbnail(
    contentresolver_.ContentResolver contentResolver,
    int j,
    int i,
    jni.JArray<jni.JString> strings,
  ) {
    return _queryMiniThumbnail(
            _class.reference.pointer,
            _id_queryMiniThumbnail as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            i,
            strings.reference.pointer)
        .object(const cursor_.$CursorType());
  }

  static final _id_cancelThumbnailRequest = _class.staticMethodId(
    r'cancelThumbnailRequest',
    r'(Landroid/content/ContentResolver;J)V',
  );

  static final _cancelThumbnailRequest = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public void cancelThumbnailRequest(android.content.ContentResolver contentResolver, long j)
  static void cancelThumbnailRequest(
    contentresolver_.ContentResolver contentResolver,
    int j,
  ) {
    _cancelThumbnailRequest(
            _class.reference.pointer,
            _id_cancelThumbnailRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j)
        .check();
  }

  static final _id_getThumbnail = _class.staticMethodId(
    r'getThumbnail',
    r'(Landroid/content/ContentResolver;JILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;',
  );

  static final _getThumbnail = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap getThumbnail(android.content.ContentResolver contentResolver, long j, int i, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getThumbnail(
    contentresolver_.ContentResolver contentResolver,
    int j,
    int i,
    jni.JObject options,
  ) {
    return _getThumbnail(
            _class.reference.pointer,
            _id_getThumbnail as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            i,
            options.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_cancelThumbnailRequest1 = _class.staticMethodId(
    r'cancelThumbnailRequest',
    r'(Landroid/content/ContentResolver;JJ)V',
  );

  static final _cancelThumbnailRequest1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public void cancelThumbnailRequest(android.content.ContentResolver contentResolver, long j, long j1)
  static void cancelThumbnailRequest1(
    contentresolver_.ContentResolver contentResolver,
    int j,
    int j1,
  ) {
    _cancelThumbnailRequest1(
            _class.reference.pointer,
            _id_cancelThumbnailRequest1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            j1)
        .check();
  }

  static final _id_getThumbnail1 = _class.staticMethodId(
    r'getThumbnail',
    r'(Landroid/content/ContentResolver;JJILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;',
  );

  static final _getThumbnail1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap getThumbnail(android.content.ContentResolver contentResolver, long j, long j1, int i, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getThumbnail1(
    contentresolver_.ContentResolver contentResolver,
    int j,
    int j1,
    int i,
    jni.JObject options,
  ) {
    return _getThumbnail1(
            _class.reference.pointer,
            _id_getThumbnail1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            j1,
            i,
            options.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getKindSize = _class.staticMethodId(
    r'getKindSize',
    r'(I)Landroid/util/Size;',
  );

  static final _getKindSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.util.Size getKindSize(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static size_.Size getKindSize(
    int i,
  ) {
    return _getKindSize(
            _class.reference.pointer, _id_getKindSize as jni.JMethodIDPtr, i)
        .object(const size_.$SizeType());
  }
}

final class $MediaStore_Images_ThumbnailsType
    extends jni.JObjType<MediaStore_Images_Thumbnails> {
  const $MediaStore_Images_ThumbnailsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Images$Thumbnails;';

  @override
  MediaStore_Images_Thumbnails fromReference(jni.JReference reference) =>
      MediaStore_Images_Thumbnails.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Images_ThumbnailsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Images_ThumbnailsType) &&
        other is $MediaStore_Images_ThumbnailsType;
  }
}

/// from: android.provider.MediaStore$Images
class MediaStore_Images extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Images> $type = type;

  MediaStore_Images.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Images');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_ImagesType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Images() {
    return MediaStore_Images.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }
}

final class $MediaStore_ImagesType extends jni.JObjType<MediaStore_Images> {
  const $MediaStore_ImagesType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Images;';

  @override
  MediaStore_Images fromReference(jni.JReference reference) =>
      MediaStore_Images.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_ImagesType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_ImagesType) &&
        other is $MediaStore_ImagesType;
  }
}

/// from: android.provider.MediaStore$MediaColumns
class MediaStore_MediaColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_MediaColumns> $type = type;

  MediaStore_MediaColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$MediaColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_MediaColumnsType();
  static final _id_ALBUM = _class.staticFieldId(
    r'ALBUM',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ALBUM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM =>
      _id_ALBUM.get(_class, const jni.JStringType());

  static final _id_ALBUM_ARTIST = _class.staticFieldId(
    r'ALBUM_ARTIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ALBUM_ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_ARTIST =>
      _id_ALBUM_ARTIST.get(_class, const jni.JStringType());

  static final _id_ARTIST = _class.staticFieldId(
    r'ARTIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST =>
      _id_ARTIST.get(_class, const jni.JStringType());

  static final _id_AUTHOR = _class.staticFieldId(
    r'AUTHOR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String AUTHOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUTHOR =>
      _id_AUTHOR.get(_class, const jni.JStringType());

  static final _id_BITRATE = _class.staticFieldId(
    r'BITRATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BITRATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BITRATE =>
      _id_BITRATE.get(_class, const jni.JStringType());

  static final _id_BUCKET_DISPLAY_NAME = _class.staticFieldId(
    r'BUCKET_DISPLAY_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BUCKET_DISPLAY_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BUCKET_DISPLAY_NAME =>
      _id_BUCKET_DISPLAY_NAME.get(_class, const jni.JStringType());

  static final _id_BUCKET_ID = _class.staticFieldId(
    r'BUCKET_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BUCKET_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BUCKET_ID =>
      _id_BUCKET_ID.get(_class, const jni.JStringType());

  static final _id_CAPTURE_FRAMERATE = _class.staticFieldId(
    r'CAPTURE_FRAMERATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CAPTURE_FRAMERATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAPTURE_FRAMERATE =>
      _id_CAPTURE_FRAMERATE.get(_class, const jni.JStringType());

  static final _id_CD_TRACK_NUMBER = _class.staticFieldId(
    r'CD_TRACK_NUMBER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CD_TRACK_NUMBER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CD_TRACK_NUMBER =>
      _id_CD_TRACK_NUMBER.get(_class, const jni.JStringType());

  static final _id_COMPILATION = _class.staticFieldId(
    r'COMPILATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String COMPILATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COMPILATION =>
      _id_COMPILATION.get(_class, const jni.JStringType());

  static final _id_COMPOSER = _class.staticFieldId(
    r'COMPOSER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String COMPOSER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COMPOSER =>
      _id_COMPOSER.get(_class, const jni.JStringType());

  static final _id_DATA = _class.staticFieldId(
    r'DATA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATA => _id_DATA.get(_class, const jni.JStringType());

  static final _id_DATE_ADDED = _class.staticFieldId(
    r'DATE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_ADDED =>
      _id_DATE_ADDED.get(_class, const jni.JStringType());

  static final _id_DATE_EXPIRES = _class.staticFieldId(
    r'DATE_EXPIRES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATE_EXPIRES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_EXPIRES =>
      _id_DATE_EXPIRES.get(_class, const jni.JStringType());

  static final _id_DATE_MODIFIED = _class.staticFieldId(
    r'DATE_MODIFIED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATE_MODIFIED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_MODIFIED =>
      _id_DATE_MODIFIED.get(_class, const jni.JStringType());

  static final _id_DATE_TAKEN = _class.staticFieldId(
    r'DATE_TAKEN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATE_TAKEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_TAKEN =>
      _id_DATE_TAKEN.get(_class, const jni.JStringType());

  static final _id_DISC_NUMBER = _class.staticFieldId(
    r'DISC_NUMBER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DISC_NUMBER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISC_NUMBER =>
      _id_DISC_NUMBER.get(_class, const jni.JStringType());

  static final _id_DISPLAY_NAME = _class.staticFieldId(
    r'DISPLAY_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DISPLAY_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_NAME =>
      _id_DISPLAY_NAME.get(_class, const jni.JStringType());

  static final _id_DOCUMENT_ID = _class.staticFieldId(
    r'DOCUMENT_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DOCUMENT_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOCUMENT_ID =>
      _id_DOCUMENT_ID.get(_class, const jni.JStringType());

  static final _id_DURATION = _class.staticFieldId(
    r'DURATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DURATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DURATION =>
      _id_DURATION.get(_class, const jni.JStringType());

  static final _id_GENERATION_ADDED = _class.staticFieldId(
    r'GENERATION_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GENERATION_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENERATION_ADDED =>
      _id_GENERATION_ADDED.get(_class, const jni.JStringType());

  static final _id_GENERATION_MODIFIED = _class.staticFieldId(
    r'GENERATION_MODIFIED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GENERATION_MODIFIED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENERATION_MODIFIED =>
      _id_GENERATION_MODIFIED.get(_class, const jni.JStringType());

  static final _id_GENRE = _class.staticFieldId(
    r'GENRE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GENRE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENRE =>
      _id_GENRE.get(_class, const jni.JStringType());

  static final _id_HEIGHT = _class.staticFieldId(
    r'HEIGHT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String HEIGHT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEIGHT =>
      _id_HEIGHT.get(_class, const jni.JStringType());

  static final _id_INSTANCE_ID = _class.staticFieldId(
    r'INSTANCE_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INSTANCE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INSTANCE_ID =>
      _id_INSTANCE_ID.get(_class, const jni.JStringType());

  static final _id_IS_DOWNLOAD = _class.staticFieldId(
    r'IS_DOWNLOAD',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_DOWNLOAD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_DOWNLOAD =>
      _id_IS_DOWNLOAD.get(_class, const jni.JStringType());

  static final _id_IS_DRM = _class.staticFieldId(
    r'IS_DRM',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_DRM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_DRM =>
      _id_IS_DRM.get(_class, const jni.JStringType());

  static final _id_IS_FAVORITE = _class.staticFieldId(
    r'IS_FAVORITE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_FAVORITE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_FAVORITE =>
      _id_IS_FAVORITE.get(_class, const jni.JStringType());

  static final _id_IS_PENDING = _class.staticFieldId(
    r'IS_PENDING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_PENDING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_PENDING =>
      _id_IS_PENDING.get(_class, const jni.JStringType());

  static final _id_IS_TRASHED = _class.staticFieldId(
    r'IS_TRASHED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_TRASHED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_TRASHED =>
      _id_IS_TRASHED.get(_class, const jni.JStringType());

  static final _id_MIME_TYPE = _class.staticFieldId(
    r'MIME_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MIME_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIME_TYPE =>
      _id_MIME_TYPE.get(_class, const jni.JStringType());

  static final _id_NUM_TRACKS = _class.staticFieldId(
    r'NUM_TRACKS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NUM_TRACKS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NUM_TRACKS =>
      _id_NUM_TRACKS.get(_class, const jni.JStringType());

  static final _id_ORIENTATION = _class.staticFieldId(
    r'ORIENTATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ORIENTATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ORIENTATION =>
      _id_ORIENTATION.get(_class, const jni.JStringType());

  static final _id_ORIGINAL_DOCUMENT_ID = _class.staticFieldId(
    r'ORIGINAL_DOCUMENT_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ORIGINAL_DOCUMENT_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ORIGINAL_DOCUMENT_ID =>
      _id_ORIGINAL_DOCUMENT_ID.get(_class, const jni.JStringType());

  static final _id_OWNER_PACKAGE_NAME = _class.staticFieldId(
    r'OWNER_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String OWNER_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get OWNER_PACKAGE_NAME =>
      _id_OWNER_PACKAGE_NAME.get(_class, const jni.JStringType());

  static final _id_RELATIVE_PATH = _class.staticFieldId(
    r'RELATIVE_PATH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String RELATIVE_PATH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RELATIVE_PATH =>
      _id_RELATIVE_PATH.get(_class, const jni.JStringType());

  static final _id_RESOLUTION = _class.staticFieldId(
    r'RESOLUTION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String RESOLUTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RESOLUTION =>
      _id_RESOLUTION.get(_class, const jni.JStringType());

  static final _id_SIZE = _class.staticFieldId(
    r'SIZE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SIZE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SIZE => _id_SIZE.get(_class, const jni.JStringType());

  static final _id_TITLE = _class.staticFieldId(
    r'TITLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TITLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TITLE =>
      _id_TITLE.get(_class, const jni.JStringType());

  static final _id_VOLUME_NAME = _class.staticFieldId(
    r'VOLUME_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VOLUME_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VOLUME_NAME =>
      _id_VOLUME_NAME.get(_class, const jni.JStringType());

  static final _id_WIDTH = _class.staticFieldId(
    r'WIDTH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIDTH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIDTH =>
      _id_WIDTH.get(_class, const jni.JStringType());

  static final _id_WRITER = _class.staticFieldId(
    r'WRITER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WRITER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WRITER =>
      _id_WRITER.get(_class, const jni.JStringType());

  static final _id_XMP = _class.staticFieldId(
    r'XMP',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String XMP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get XMP => _id_XMP.get(_class, const jni.JStringType());

  static final _id_YEAR = _class.staticFieldId(
    r'YEAR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String YEAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get YEAR => _id_YEAR.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_MediaColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_MediaColumns.implement(
    $MediaStore_MediaColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_MediaColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.provider.MediaStore$MediaColumns',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_MediaColumnsImpl {
  factory $MediaStore_MediaColumnsImpl() = _$MediaStore_MediaColumnsImpl;
}

class _$MediaStore_MediaColumnsImpl implements $MediaStore_MediaColumnsImpl {
  _$MediaStore_MediaColumnsImpl();
}

final class $MediaStore_MediaColumnsType
    extends jni.JObjType<MediaStore_MediaColumns> {
  const $MediaStore_MediaColumnsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$MediaColumns;';

  @override
  MediaStore_MediaColumns fromReference(jni.JReference reference) =>
      MediaStore_MediaColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_MediaColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_MediaColumnsType) &&
        other is $MediaStore_MediaColumnsType;
  }
}

/// from: android.provider.MediaStore$PickerMediaColumns
class MediaStore_PickerMediaColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_PickerMediaColumns> $type = type;

  MediaStore_PickerMediaColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$PickerMediaColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_PickerMediaColumnsType();
  static final _id_DATA = _class.staticFieldId(
    r'DATA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATA => _id_DATA.get(_class, const jni.JStringType());

  static final _id_DATE_TAKEN = _class.staticFieldId(
    r'DATE_TAKEN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATE_TAKEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_TAKEN =>
      _id_DATE_TAKEN.get(_class, const jni.JStringType());

  static final _id_DISPLAY_NAME = _class.staticFieldId(
    r'DISPLAY_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DISPLAY_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_NAME =>
      _id_DISPLAY_NAME.get(_class, const jni.JStringType());

  static final _id_DURATION_MILLIS = _class.staticFieldId(
    r'DURATION_MILLIS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DURATION_MILLIS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DURATION_MILLIS =>
      _id_DURATION_MILLIS.get(_class, const jni.JStringType());

  static final _id_HEIGHT = _class.staticFieldId(
    r'HEIGHT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String HEIGHT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEIGHT =>
      _id_HEIGHT.get(_class, const jni.JStringType());

  static final _id_MIME_TYPE = _class.staticFieldId(
    r'MIME_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MIME_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIME_TYPE =>
      _id_MIME_TYPE.get(_class, const jni.JStringType());

  static final _id_ORIENTATION = _class.staticFieldId(
    r'ORIENTATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ORIENTATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ORIENTATION =>
      _id_ORIENTATION.get(_class, const jni.JStringType());

  static final _id_SIZE = _class.staticFieldId(
    r'SIZE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SIZE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SIZE => _id_SIZE.get(_class, const jni.JStringType());

  static final _id_WIDTH = _class.staticFieldId(
    r'WIDTH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIDTH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIDTH =>
      _id_WIDTH.get(_class, const jni.JStringType());
}

final class $MediaStore_PickerMediaColumnsType
    extends jni.JObjType<MediaStore_PickerMediaColumns> {
  const $MediaStore_PickerMediaColumnsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$PickerMediaColumns;';

  @override
  MediaStore_PickerMediaColumns fromReference(jni.JReference reference) =>
      MediaStore_PickerMediaColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_PickerMediaColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_PickerMediaColumnsType) &&
        other is $MediaStore_PickerMediaColumnsType;
  }
}

/// from: android.provider.MediaStore$Video$Media
class MediaStore_Video_Media extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Video_Media> $type = type;

  MediaStore_Video_Media.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Video$Media');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Video_MediaType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r'EXTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r'INTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Video_Media() {
    return MediaStore_Video_Media.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getContentUri1 = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;J)Landroid/net/Uri;',
  );

  static final _getContentUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri1(
    jni.JString string,
    int j,
  ) {
    return _getContentUri1(_class.reference.pointer,
            _id_getContentUri1 as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const uri_.$UriType());
  }
}

final class $MediaStore_Video_MediaType
    extends jni.JObjType<MediaStore_Video_Media> {
  const $MediaStore_Video_MediaType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Video$Media;';

  @override
  MediaStore_Video_Media fromReference(jni.JReference reference) =>
      MediaStore_Video_Media.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Video_MediaType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Video_MediaType) &&
        other is $MediaStore_Video_MediaType;
  }
}

/// from: android.provider.MediaStore$Video$Thumbnails
class MediaStore_Video_Thumbnails extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Video_Thumbnails> $type = type;

  MediaStore_Video_Thumbnails.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Video$Thumbnails');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Video_ThumbnailsType();
  static final _id_DATA = _class.staticFieldId(
    r'DATA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATA => _id_DATA.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r'EXTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  /// from: static public final int FULL_SCREEN_KIND
  static const FULL_SCREEN_KIND = 2;
  static final _id_HEIGHT = _class.staticFieldId(
    r'HEIGHT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String HEIGHT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEIGHT =>
      _id_HEIGHT.get(_class, const jni.JStringType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r'INTERNAL_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const uri_.$UriType());

  static final _id_KIND = _class.staticFieldId(
    r'KIND',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String KIND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get KIND => _id_KIND.get(_class, const jni.JStringType());

  /// from: static public final int MICRO_KIND
  static const MICRO_KIND = 3;

  /// from: static public final int MINI_KIND
  static const MINI_KIND = 1;
  static final _id_VIDEO_ID = _class.staticFieldId(
    r'VIDEO_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VIDEO_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIDEO_ID =>
      _id_VIDEO_ID.get(_class, const jni.JStringType());

  static final _id_WIDTH = _class.staticFieldId(
    r'WIDTH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIDTH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIDTH =>
      _id_WIDTH.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Video_Thumbnails() {
    return MediaStore_Video_Thumbnails.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_cancelThumbnailRequest = _class.staticMethodId(
    r'cancelThumbnailRequest',
    r'(Landroid/content/ContentResolver;J)V',
  );

  static final _cancelThumbnailRequest = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public void cancelThumbnailRequest(android.content.ContentResolver contentResolver, long j)
  static void cancelThumbnailRequest(
    contentresolver_.ContentResolver contentResolver,
    int j,
  ) {
    _cancelThumbnailRequest(
            _class.reference.pointer,
            _id_cancelThumbnailRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j)
        .check();
  }

  static final _id_getThumbnail = _class.staticMethodId(
    r'getThumbnail',
    r'(Landroid/content/ContentResolver;JILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;',
  );

  static final _getThumbnail = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap getThumbnail(android.content.ContentResolver contentResolver, long j, int i, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getThumbnail(
    contentresolver_.ContentResolver contentResolver,
    int j,
    int i,
    jni.JObject options,
  ) {
    return _getThumbnail(
            _class.reference.pointer,
            _id_getThumbnail as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            i,
            options.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_cancelThumbnailRequest1 = _class.staticMethodId(
    r'cancelThumbnailRequest',
    r'(Landroid/content/ContentResolver;JJ)V',
  );

  static final _cancelThumbnailRequest1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public void cancelThumbnailRequest(android.content.ContentResolver contentResolver, long j, long j1)
  static void cancelThumbnailRequest1(
    contentresolver_.ContentResolver contentResolver,
    int j,
    int j1,
  ) {
    _cancelThumbnailRequest1(
            _class.reference.pointer,
            _id_cancelThumbnailRequest1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            j1)
        .check();
  }

  static final _id_getThumbnail1 = _class.staticMethodId(
    r'getThumbnail',
    r'(Landroid/content/ContentResolver;JJILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;',
  );

  static final _getThumbnail1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap getThumbnail(android.content.ContentResolver contentResolver, long j, long j1, int i, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getThumbnail1(
    contentresolver_.ContentResolver contentResolver,
    int j,
    int j1,
    int i,
    jni.JObject options,
  ) {
    return _getThumbnail1(
            _class.reference.pointer,
            _id_getThumbnail1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            j1,
            i,
            options.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getContentUri = _class.staticMethodId(
    r'getContentUri',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getKindSize = _class.staticMethodId(
    r'getKindSize',
    r'(I)Landroid/util/Size;',
  );

  static final _getKindSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.util.Size getKindSize(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static size_.Size getKindSize(
    int i,
  ) {
    return _getKindSize(
            _class.reference.pointer, _id_getKindSize as jni.JMethodIDPtr, i)
        .object(const size_.$SizeType());
  }
}

final class $MediaStore_Video_ThumbnailsType
    extends jni.JObjType<MediaStore_Video_Thumbnails> {
  const $MediaStore_Video_ThumbnailsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Video$Thumbnails;';

  @override
  MediaStore_Video_Thumbnails fromReference(jni.JReference reference) =>
      MediaStore_Video_Thumbnails.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Video_ThumbnailsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Video_ThumbnailsType) &&
        other is $MediaStore_Video_ThumbnailsType;
  }
}

/// from: android.provider.MediaStore$Video$VideoColumns
class MediaStore_Video_VideoColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Video_VideoColumns> $type = type;

  MediaStore_Video_VideoColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Video$VideoColumns');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Video_VideoColumnsType();
  static final _id_BOOKMARK = _class.staticFieldId(
    r'BOOKMARK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BOOKMARK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BOOKMARK =>
      _id_BOOKMARK.get(_class, const jni.JStringType());

  static final _id_CATEGORY = _class.staticFieldId(
    r'CATEGORY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY =>
      _id_CATEGORY.get(_class, const jni.JStringType());

  static final _id_COLOR_RANGE = _class.staticFieldId(
    r'COLOR_RANGE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String COLOR_RANGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COLOR_RANGE =>
      _id_COLOR_RANGE.get(_class, const jni.JStringType());

  static final _id_COLOR_STANDARD = _class.staticFieldId(
    r'COLOR_STANDARD',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String COLOR_STANDARD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COLOR_STANDARD =>
      _id_COLOR_STANDARD.get(_class, const jni.JStringType());

  static final _id_COLOR_TRANSFER = _class.staticFieldId(
    r'COLOR_TRANSFER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String COLOR_TRANSFER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COLOR_TRANSFER =>
      _id_COLOR_TRANSFER.get(_class, const jni.JStringType());

  static final _id_DESCRIPTION = _class.staticFieldId(
    r'DESCRIPTION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DESCRIPTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DESCRIPTION =>
      _id_DESCRIPTION.get(_class, const jni.JStringType());

  static final _id_IS_PRIVATE = _class.staticFieldId(
    r'IS_PRIVATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IS_PRIVATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_PRIVATE =>
      _id_IS_PRIVATE.get(_class, const jni.JStringType());

  static final _id_LANGUAGE = _class.staticFieldId(
    r'LANGUAGE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LANGUAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LANGUAGE =>
      _id_LANGUAGE.get(_class, const jni.JStringType());

  static final _id_LATITUDE = _class.staticFieldId(
    r'LATITUDE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LATITUDE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LATITUDE =>
      _id_LATITUDE.get(_class, const jni.JStringType());

  static final _id_LONGITUDE = _class.staticFieldId(
    r'LONGITUDE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LONGITUDE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LONGITUDE =>
      _id_LONGITUDE.get(_class, const jni.JStringType());

  static final _id_MINI_THUMB_MAGIC = _class.staticFieldId(
    r'MINI_THUMB_MAGIC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MINI_THUMB_MAGIC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MINI_THUMB_MAGIC =>
      _id_MINI_THUMB_MAGIC.get(_class, const jni.JStringType());

  static final _id_TAGS = _class.staticFieldId(
    r'TAGS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TAGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TAGS => _id_TAGS.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Video_VideoColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Video_VideoColumns.implement(
    $MediaStore_Video_VideoColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Video_VideoColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.provider.MediaStore$Video$VideoColumns',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Video_VideoColumnsImpl {
  factory $MediaStore_Video_VideoColumnsImpl() =
      _$MediaStore_Video_VideoColumnsImpl;
}

class _$MediaStore_Video_VideoColumnsImpl
    implements $MediaStore_Video_VideoColumnsImpl {
  _$MediaStore_Video_VideoColumnsImpl();
}

final class $MediaStore_Video_VideoColumnsType
    extends jni.JObjType<MediaStore_Video_VideoColumns> {
  const $MediaStore_Video_VideoColumnsType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Video$VideoColumns;';

  @override
  MediaStore_Video_VideoColumns fromReference(jni.JReference reference) =>
      MediaStore_Video_VideoColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Video_VideoColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Video_VideoColumnsType) &&
        other is $MediaStore_Video_VideoColumnsType;
  }
}

/// from: android.provider.MediaStore$Video
class MediaStore_Video extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Video> $type = type;

  MediaStore_Video.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/provider/MediaStore$Video');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_VideoType();
  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r'DEFAULT_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Video() {
    return MediaStore_Video.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_query = _class.staticMethodId(
    r'query',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;[Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _query = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.database.Cursor query(android.content.ContentResolver contentResolver, android.net.Uri uri, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static cursor_.Cursor query(
    contentresolver_.ContentResolver contentResolver,
    uri_.Uri uri,
    jni.JArray<jni.JString> strings,
  ) {
    return _query(
            _class.reference.pointer,
            _id_query as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer)
        .object(const cursor_.$CursorType());
  }
}

final class $MediaStore_VideoType extends jni.JObjType<MediaStore_Video> {
  const $MediaStore_VideoType();

  @override
  String get signature => r'Landroid/provider/MediaStore$Video;';

  @override
  MediaStore_Video fromReference(jni.JReference reference) =>
      MediaStore_Video.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_VideoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_VideoType) &&
        other is $MediaStore_VideoType;
  }
}

/// from: android.provider.MediaStore
class MediaStore extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore> $type = type;

  MediaStore.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/provider/MediaStore');

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStoreType();
  static final _id_ACTION_IMAGE_CAPTURE = _class.staticFieldId(
    r'ACTION_IMAGE_CAPTURE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_IMAGE_CAPTURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_IMAGE_CAPTURE =>
      _id_ACTION_IMAGE_CAPTURE.get(_class, const jni.JStringType());

  static final _id_ACTION_IMAGE_CAPTURE_SECURE = _class.staticFieldId(
    r'ACTION_IMAGE_CAPTURE_SECURE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_IMAGE_CAPTURE_SECURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_IMAGE_CAPTURE_SECURE =>
      _id_ACTION_IMAGE_CAPTURE_SECURE.get(_class, const jni.JStringType());

  static final _id_ACTION_PICK_IMAGES = _class.staticFieldId(
    r'ACTION_PICK_IMAGES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PICK_IMAGES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PICK_IMAGES =>
      _id_ACTION_PICK_IMAGES.get(_class, const jni.JStringType());

  static final _id_ACTION_PICK_IMAGES_SETTINGS = _class.staticFieldId(
    r'ACTION_PICK_IMAGES_SETTINGS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PICK_IMAGES_SETTINGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PICK_IMAGES_SETTINGS =>
      _id_ACTION_PICK_IMAGES_SETTINGS.get(_class, const jni.JStringType());

  static final _id_ACTION_REVIEW = _class.staticFieldId(
    r'ACTION_REVIEW',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_REVIEW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_REVIEW =>
      _id_ACTION_REVIEW.get(_class, const jni.JStringType());

  static final _id_ACTION_REVIEW_SECURE = _class.staticFieldId(
    r'ACTION_REVIEW_SECURE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_REVIEW_SECURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_REVIEW_SECURE =>
      _id_ACTION_REVIEW_SECURE.get(_class, const jni.JStringType());

  static final _id_ACTION_VIDEO_CAPTURE = _class.staticFieldId(
    r'ACTION_VIDEO_CAPTURE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_VIDEO_CAPTURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIDEO_CAPTURE =>
      _id_ACTION_VIDEO_CAPTURE.get(_class, const jni.JStringType());

  static final _id_AUTHORITY = _class.staticFieldId(
    r'AUTHORITY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String AUTHORITY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUTHORITY =>
      _id_AUTHORITY.get(_class, const jni.JStringType());

  static final _id_AUTHORITY_URI = _class.staticFieldId(
    r'AUTHORITY_URI',
    r'Landroid/net/Uri;',
  );

  /// from: static public final android.net.Uri AUTHORITY_URI
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri get AUTHORITY_URI =>
      _id_AUTHORITY_URI.get(_class, const uri_.$UriType());

  static final _id_EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT = _class.staticFieldId(
    r'EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT =>
      _id_EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT.get(
          _class, const jni.JStringType());

  static final _id_EXTRA_BRIGHTNESS = _class.staticFieldId(
    r'EXTRA_BRIGHTNESS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_BRIGHTNESS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_BRIGHTNESS =>
      _id_EXTRA_BRIGHTNESS.get(_class, const jni.JStringType());

  static final _id_EXTRA_DURATION_LIMIT = _class.staticFieldId(
    r'EXTRA_DURATION_LIMIT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_DURATION_LIMIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DURATION_LIMIT =>
      _id_EXTRA_DURATION_LIMIT.get(_class, const jni.JStringType());

  static final _id_EXTRA_FINISH_ON_COMPLETION = _class.staticFieldId(
    r'EXTRA_FINISH_ON_COMPLETION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_FINISH_ON_COMPLETION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_FINISH_ON_COMPLETION =>
      _id_EXTRA_FINISH_ON_COMPLETION.get(_class, const jni.JStringType());

  static final _id_EXTRA_FULL_SCREEN = _class.staticFieldId(
    r'EXTRA_FULL_SCREEN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_FULL_SCREEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_FULL_SCREEN =>
      _id_EXTRA_FULL_SCREEN.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_ALBUM = _class.staticFieldId(
    r'EXTRA_MEDIA_ALBUM',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_ALBUM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_ALBUM =>
      _id_EXTRA_MEDIA_ALBUM.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_ARTIST = _class.staticFieldId(
    r'EXTRA_MEDIA_ARTIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_ARTIST =>
      _id_EXTRA_MEDIA_ARTIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_CAPABILITIES = _class.staticFieldId(
    r'EXTRA_MEDIA_CAPABILITIES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_CAPABILITIES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_CAPABILITIES =>
      _id_EXTRA_MEDIA_CAPABILITIES.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_CAPABILITIES_UID = _class.staticFieldId(
    r'EXTRA_MEDIA_CAPABILITIES_UID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_CAPABILITIES_UID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_CAPABILITIES_UID =>
      _id_EXTRA_MEDIA_CAPABILITIES_UID.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_FOCUS = _class.staticFieldId(
    r'EXTRA_MEDIA_FOCUS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_FOCUS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_FOCUS =>
      _id_EXTRA_MEDIA_FOCUS.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_GENRE = _class.staticFieldId(
    r'EXTRA_MEDIA_GENRE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_GENRE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_GENRE =>
      _id_EXTRA_MEDIA_GENRE.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_PLAYLIST = _class.staticFieldId(
    r'EXTRA_MEDIA_PLAYLIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_PLAYLIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_PLAYLIST =>
      _id_EXTRA_MEDIA_PLAYLIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_RADIO_CHANNEL = _class.staticFieldId(
    r'EXTRA_MEDIA_RADIO_CHANNEL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_RADIO_CHANNEL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_RADIO_CHANNEL =>
      _id_EXTRA_MEDIA_RADIO_CHANNEL.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_TITLE = _class.staticFieldId(
    r'EXTRA_MEDIA_TITLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_TITLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_TITLE =>
      _id_EXTRA_MEDIA_TITLE.get(_class, const jni.JStringType());

  static final _id_EXTRA_OUTPUT = _class.staticFieldId(
    r'EXTRA_OUTPUT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_OUTPUT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_OUTPUT =>
      _id_EXTRA_OUTPUT.get(_class, const jni.JStringType());

  static final _id_EXTRA_PICK_IMAGES_MAX = _class.staticFieldId(
    r'EXTRA_PICK_IMAGES_MAX',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PICK_IMAGES_MAX
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PICK_IMAGES_MAX =>
      _id_EXTRA_PICK_IMAGES_MAX.get(_class, const jni.JStringType());

  static final _id_EXTRA_SCREEN_ORIENTATION = _class.staticFieldId(
    r'EXTRA_SCREEN_ORIENTATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SCREEN_ORIENTATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SCREEN_ORIENTATION =>
      _id_EXTRA_SCREEN_ORIENTATION.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHOW_ACTION_ICONS = _class.staticFieldId(
    r'EXTRA_SHOW_ACTION_ICONS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SHOW_ACTION_ICONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHOW_ACTION_ICONS =>
      _id_EXTRA_SHOW_ACTION_ICONS.get(_class, const jni.JStringType());

  static final _id_EXTRA_SIZE_LIMIT = _class.staticFieldId(
    r'EXTRA_SIZE_LIMIT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SIZE_LIMIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SIZE_LIMIT =>
      _id_EXTRA_SIZE_LIMIT.get(_class, const jni.JStringType());

  static final _id_EXTRA_VIDEO_QUALITY = _class.staticFieldId(
    r'EXTRA_VIDEO_QUALITY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_VIDEO_QUALITY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_VIDEO_QUALITY =>
      _id_EXTRA_VIDEO_QUALITY.get(_class, const jni.JStringType());

  static final _id_INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH = _class.staticFieldId(
    r'INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH =>
      _id_INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH.get(
          _class, const jni.JStringType());

  static final _id_INTENT_ACTION_MEDIA_SEARCH = _class.staticFieldId(
    r'INTENT_ACTION_MEDIA_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INTENT_ACTION_MEDIA_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_MEDIA_SEARCH =>
      _id_INTENT_ACTION_MEDIA_SEARCH.get(_class, const jni.JStringType());

  static final _id_INTENT_ACTION_MUSIC_PLAYER = _class.staticFieldId(
    r'INTENT_ACTION_MUSIC_PLAYER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INTENT_ACTION_MUSIC_PLAYER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_MUSIC_PLAYER =>
      _id_INTENT_ACTION_MUSIC_PLAYER.get(_class, const jni.JStringType());

  static final _id_INTENT_ACTION_STILL_IMAGE_CAMERA = _class.staticFieldId(
    r'INTENT_ACTION_STILL_IMAGE_CAMERA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INTENT_ACTION_STILL_IMAGE_CAMERA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_STILL_IMAGE_CAMERA =>
      _id_INTENT_ACTION_STILL_IMAGE_CAMERA.get(_class, const jni.JStringType());

  static final _id_INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE =
      _class.staticFieldId(
    r'INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE =>
      _id_INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.get(
          _class, const jni.JStringType());

  static final _id_INTENT_ACTION_TEXT_OPEN_FROM_SEARCH = _class.staticFieldId(
    r'INTENT_ACTION_TEXT_OPEN_FROM_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INTENT_ACTION_TEXT_OPEN_FROM_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_TEXT_OPEN_FROM_SEARCH =>
      _id_INTENT_ACTION_TEXT_OPEN_FROM_SEARCH.get(
          _class, const jni.JStringType());

  static final _id_INTENT_ACTION_VIDEO_CAMERA = _class.staticFieldId(
    r'INTENT_ACTION_VIDEO_CAMERA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INTENT_ACTION_VIDEO_CAMERA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_VIDEO_CAMERA =>
      _id_INTENT_ACTION_VIDEO_CAMERA.get(_class, const jni.JStringType());

  static final _id_INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH = _class.staticFieldId(
    r'INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH =>
      _id_INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH.get(
          _class, const jni.JStringType());

  /// from: static public final int MATCH_DEFAULT
  static const MATCH_DEFAULT = 0;

  /// from: static public final int MATCH_EXCLUDE
  static const MATCH_EXCLUDE = 2;

  /// from: static public final int MATCH_INCLUDE
  static const MATCH_INCLUDE = 1;

  /// from: static public final int MATCH_ONLY
  static const MATCH_ONLY = 3;
  static final _id_MEDIA_IGNORE_FILENAME = _class.staticFieldId(
    r'MEDIA_IGNORE_FILENAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_IGNORE_FILENAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_IGNORE_FILENAME =>
      _id_MEDIA_IGNORE_FILENAME.get(_class, const jni.JStringType());

  static final _id_MEDIA_SCANNER_VOLUME = _class.staticFieldId(
    r'MEDIA_SCANNER_VOLUME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_SCANNER_VOLUME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_SCANNER_VOLUME =>
      _id_MEDIA_SCANNER_VOLUME.get(_class, const jni.JStringType());

  static final _id_META_DATA_REVIEW_GALLERY_PREWARM_SERVICE =
      _class.staticFieldId(
    r'META_DATA_REVIEW_GALLERY_PREWARM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String META_DATA_REVIEW_GALLERY_PREWARM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get META_DATA_REVIEW_GALLERY_PREWARM_SERVICE =>
      _id_META_DATA_REVIEW_GALLERY_PREWARM_SERVICE.get(
          _class, const jni.JStringType());

  static final _id_META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE =
      _class.staticFieldId(
    r'META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE =>
      _id_META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE.get(
          _class, const jni.JStringType());

  static final _id_QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES =
      _class.staticFieldId(
    r'QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES =>
      _id_QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES.get(
          _class, const jni.JStringType());

  static final _id_QUERY_ARG_MATCH_FAVORITE = _class.staticFieldId(
    r'QUERY_ARG_MATCH_FAVORITE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String QUERY_ARG_MATCH_FAVORITE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_MATCH_FAVORITE =>
      _id_QUERY_ARG_MATCH_FAVORITE.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_MATCH_PENDING = _class.staticFieldId(
    r'QUERY_ARG_MATCH_PENDING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String QUERY_ARG_MATCH_PENDING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_MATCH_PENDING =>
      _id_QUERY_ARG_MATCH_PENDING.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_MATCH_TRASHED = _class.staticFieldId(
    r'QUERY_ARG_MATCH_TRASHED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String QUERY_ARG_MATCH_TRASHED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_MATCH_TRASHED =>
      _id_QUERY_ARG_MATCH_TRASHED.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_RELATED_URI = _class.staticFieldId(
    r'QUERY_ARG_RELATED_URI',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String QUERY_ARG_RELATED_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_RELATED_URI =>
      _id_QUERY_ARG_RELATED_URI.get(_class, const jni.JStringType());

  static final _id_UNKNOWN_STRING = _class.staticFieldId(
    r'UNKNOWN_STRING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String UNKNOWN_STRING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get UNKNOWN_STRING =>
      _id_UNKNOWN_STRING.get(_class, const jni.JStringType());

  static final _id_VOLUME_EXTERNAL = _class.staticFieldId(
    r'VOLUME_EXTERNAL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VOLUME_EXTERNAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VOLUME_EXTERNAL =>
      _id_VOLUME_EXTERNAL.get(_class, const jni.JStringType());

  static final _id_VOLUME_EXTERNAL_PRIMARY = _class.staticFieldId(
    r'VOLUME_EXTERNAL_PRIMARY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VOLUME_EXTERNAL_PRIMARY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VOLUME_EXTERNAL_PRIMARY =>
      _id_VOLUME_EXTERNAL_PRIMARY.get(_class, const jni.JStringType());

  static final _id_VOLUME_INTERNAL = _class.staticFieldId(
    r'VOLUME_INTERNAL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VOLUME_INTERNAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VOLUME_INTERNAL =>
      _id_VOLUME_INTERNAL.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore() {
    return MediaStore.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getPickImagesMaxLimit = _class.staticMethodId(
    r'getPickImagesMaxLimit',
    r'()I',
  );

  static final _getPickImagesMaxLimit = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public int getPickImagesMaxLimit()
  static int getPickImagesMaxLimit() {
    return _getPickImagesMaxLimit(_class.reference.pointer,
            _id_getPickImagesMaxLimit as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setIncludePending = _class.staticMethodId(
    r'setIncludePending',
    r'(Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _setIncludePending = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri setIncludePending(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri setIncludePending(
    uri_.Uri uri,
  ) {
    return _setIncludePending(_class.reference.pointer,
            _id_setIncludePending as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_setRequireOriginal = _class.staticMethodId(
    r'setRequireOriginal',
    r'(Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _setRequireOriginal = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri setRequireOriginal(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri setRequireOriginal(
    uri_.Uri uri,
  ) {
    return _setRequireOriginal(_class.reference.pointer,
            _id_setRequireOriginal as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getRequireOriginal = _class.staticMethodId(
    r'getRequireOriginal',
    r'(Landroid/net/Uri;)Z',
  );

  static final _getRequireOriginal = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean getRequireOriginal(android.net.Uri uri)
  static bool getRequireOriginal(
    uri_.Uri uri,
  ) {
    return _getRequireOriginal(_class.reference.pointer,
            _id_getRequireOriginal as jni.JMethodIDPtr, uri.reference.pointer)
        .boolean;
  }

  static final _id_getOriginalMediaFormatFileDescriptor = _class.staticMethodId(
    r'getOriginalMediaFormatFileDescriptor',
    r'(Landroid/content/Context;Landroid/os/ParcelFileDescriptor;)Landroid/os/ParcelFileDescriptor;',
  );

  static final _getOriginalMediaFormatFileDescriptor =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.ParcelFileDescriptor getOriginalMediaFormatFileDescriptor(android.content.Context context, android.os.ParcelFileDescriptor parcelFileDescriptor)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getOriginalMediaFormatFileDescriptor(
    context_.Context context,
    jni.JObject parcelFileDescriptor,
  ) {
    return _getOriginalMediaFormatFileDescriptor(
            _class.reference.pointer,
            _id_getOriginalMediaFormatFileDescriptor as jni.JMethodIDPtr,
            context.reference.pointer,
            parcelFileDescriptor.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_createWriteRequest = _class.staticMethodId(
    r'createWriteRequest',
    r'(Landroid/content/ContentResolver;Ljava/util/Collection;)Landroid/app/PendingIntent;',
  );

  static final _createWriteRequest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.app.PendingIntent createWriteRequest(android.content.ContentResolver contentResolver, java.util.Collection collection)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createWriteRequest(
    contentresolver_.ContentResolver contentResolver,
    jni.JObject collection,
  ) {
    return _createWriteRequest(
            _class.reference.pointer,
            _id_createWriteRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            collection.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_createTrashRequest = _class.staticMethodId(
    r'createTrashRequest',
    r'(Landroid/content/ContentResolver;Ljava/util/Collection;Z)Landroid/app/PendingIntent;',
  );

  static final _createTrashRequest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.app.PendingIntent createTrashRequest(android.content.ContentResolver contentResolver, java.util.Collection collection, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createTrashRequest(
    contentresolver_.ContentResolver contentResolver,
    jni.JObject collection,
    bool z,
  ) {
    return _createTrashRequest(
            _class.reference.pointer,
            _id_createTrashRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            collection.reference.pointer,
            z ? 1 : 0)
        .object(const jni.JObjectType());
  }

  static final _id_createFavoriteRequest = _class.staticMethodId(
    r'createFavoriteRequest',
    r'(Landroid/content/ContentResolver;Ljava/util/Collection;Z)Landroid/app/PendingIntent;',
  );

  static final _createFavoriteRequest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.app.PendingIntent createFavoriteRequest(android.content.ContentResolver contentResolver, java.util.Collection collection, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createFavoriteRequest(
    contentresolver_.ContentResolver contentResolver,
    jni.JObject collection,
    bool z,
  ) {
    return _createFavoriteRequest(
            _class.reference.pointer,
            _id_createFavoriteRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            collection.reference.pointer,
            z ? 1 : 0)
        .object(const jni.JObjectType());
  }

  static final _id_createDeleteRequest = _class.staticMethodId(
    r'createDeleteRequest',
    r'(Landroid/content/ContentResolver;Ljava/util/Collection;)Landroid/app/PendingIntent;',
  );

  static final _createDeleteRequest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.app.PendingIntent createDeleteRequest(android.content.ContentResolver contentResolver, java.util.Collection collection)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createDeleteRequest(
    contentresolver_.ContentResolver contentResolver,
    jni.JObject collection,
  ) {
    return _createDeleteRequest(
            _class.reference.pointer,
            _id_createDeleteRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            collection.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalVolumeNames = _class.staticMethodId(
    r'getExternalVolumeNames',
    r'(Landroid/content/Context;)Ljava/util/Set;',
  );

  static final _getExternalVolumeNames = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set getExternalVolumeNames(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JSet<jni.JString> getExternalVolumeNames(
    context_.Context context,
  ) {
    return _getExternalVolumeNames(
            _class.reference.pointer,
            _id_getExternalVolumeNames as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_getRecentExternalVolumeNames = _class.staticMethodId(
    r'getRecentExternalVolumeNames',
    r'(Landroid/content/Context;)Ljava/util/Set;',
  );

  static final _getRecentExternalVolumeNames = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set getRecentExternalVolumeNames(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JSet<jni.JString> getRecentExternalVolumeNames(
    context_.Context context,
  ) {
    return _getRecentExternalVolumeNames(
            _class.reference.pointer,
            _id_getRecentExternalVolumeNames as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_getVolumeName = _class.staticMethodId(
    r'getVolumeName',
    r'(Landroid/net/Uri;)Ljava/lang/String;',
  );

  static final _getVolumeName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getVolumeName(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getVolumeName(
    uri_.Uri uri,
  ) {
    return _getVolumeName(_class.reference.pointer,
            _id_getVolumeName as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getMediaScannerUri = _class.staticMethodId(
    r'getMediaScannerUri',
    r'()Landroid/net/Uri;',
  );

  static final _getMediaScannerUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public android.net.Uri getMediaScannerUri()
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getMediaScannerUri() {
    return _getMediaScannerUri(_class.reference.pointer,
            _id_getMediaScannerUri as jni.JMethodIDPtr)
        .object(const uri_.$UriType());
  }

  static final _id_getVersion = _class.staticMethodId(
    r'getVersion',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _getVersion = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getVersion(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getVersion(
    context_.Context context,
  ) {
    return _getVersion(_class.reference.pointer,
            _id_getVersion as jni.JMethodIDPtr, context.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getVersion1 = _class.staticMethodId(
    r'getVersion',
    r'(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getVersion1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getVersion(android.content.Context context, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getVersion1(
    context_.Context context,
    jni.JString string,
  ) {
    return _getVersion1(
            _class.reference.pointer,
            _id_getVersion1 as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getGeneration = _class.staticMethodId(
    r'getGeneration',
    r'(Landroid/content/Context;Ljava/lang/String;)J',
  );

  static final _getGeneration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticLongMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public long getGeneration(android.content.Context context, java.lang.String string)
  static int getGeneration(
    context_.Context context,
    jni.JString string,
  ) {
    return _getGeneration(
            _class.reference.pointer,
            _id_getGeneration as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .long;
  }

  static final _id_getDocumentUri = _class.staticMethodId(
    r'getDocumentUri',
    r'(Landroid/content/Context;Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _getDocumentUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getDocumentUri(android.content.Context context, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getDocumentUri(
    context_.Context context,
    uri_.Uri uri,
  ) {
    return _getDocumentUri(
            _class.reference.pointer,
            _id_getDocumentUri as jni.JMethodIDPtr,
            context.reference.pointer,
            uri.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getMediaUri = _class.staticMethodId(
    r'getMediaUri',
    r'(Landroid/content/Context;Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _getMediaUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getMediaUri(android.content.Context context, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getMediaUri(
    context_.Context context,
    uri_.Uri uri,
  ) {
    return _getMediaUri(
            _class.reference.pointer,
            _id_getMediaUri as jni.JMethodIDPtr,
            context.reference.pointer,
            uri.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_isCurrentSystemGallery = _class.staticMethodId(
    r'isCurrentSystemGallery',
    r'(Landroid/content/ContentResolver;ILjava/lang/String;)Z',
  );

  static final _isCurrentSystemGallery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isCurrentSystemGallery(android.content.ContentResolver contentResolver, int i, java.lang.String string)
  static bool isCurrentSystemGallery(
    contentresolver_.ContentResolver contentResolver,
    int i,
    jni.JString string,
  ) {
    return _isCurrentSystemGallery(
            _class.reference.pointer,
            _id_isCurrentSystemGallery as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            i,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getRedactedUri = _class.staticMethodId(
    r'getRedactedUri',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _getRedactedUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getRedactedUri(android.content.ContentResolver contentResolver, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static uri_.Uri getRedactedUri(
    contentresolver_.ContentResolver contentResolver,
    uri_.Uri uri,
  ) {
    return _getRedactedUri(
            _class.reference.pointer,
            _id_getRedactedUri as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer)
        .object(const uri_.$UriType());
  }

  static final _id_getRedactedUri1 = _class.staticMethodId(
    r'getRedactedUri',
    r'(Landroid/content/ContentResolver;Ljava/util/List;)Ljava/util/List;',
  );

  static final _getRedactedUri1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List getRedactedUri(android.content.ContentResolver contentResolver, java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JList<uri_.Uri> getRedactedUri1(
    contentresolver_.ContentResolver contentResolver,
    jni.JList<uri_.Uri> list,
  ) {
    return _getRedactedUri1(
            _class.reference.pointer,
            _id_getRedactedUri1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            list.reference.pointer)
        .object(const jni.JListType(uri_.$UriType()));
  }

  static final _id_canManageMedia = _class.staticMethodId(
    r'canManageMedia',
    r'(Landroid/content/Context;)Z',
  );

  static final _canManageMedia = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean canManageMedia(android.content.Context context)
  static bool canManageMedia(
    context_.Context context,
  ) {
    return _canManageMedia(_class.reference.pointer,
            _id_canManageMedia as jni.JMethodIDPtr, context.reference.pointer)
        .boolean;
  }

  static final _id_isCurrentCloudMediaProviderAuthority = _class.staticMethodId(
    r'isCurrentCloudMediaProviderAuthority',
    r'(Landroid/content/ContentResolver;Ljava/lang/String;)Z',
  );

  static final _isCurrentCloudMediaProviderAuthority =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallStaticBooleanMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isCurrentCloudMediaProviderAuthority(android.content.ContentResolver contentResolver, java.lang.String string)
  static bool isCurrentCloudMediaProviderAuthority(
    contentresolver_.ContentResolver contentResolver,
    jni.JString string,
  ) {
    return _isCurrentCloudMediaProviderAuthority(
            _class.reference.pointer,
            _id_isCurrentCloudMediaProviderAuthority as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_isSupportedCloudMediaProviderAuthority =
      _class.staticMethodId(
    r'isSupportedCloudMediaProviderAuthority',
    r'(Landroid/content/ContentResolver;Ljava/lang/String;)Z',
  );

  static final _isSupportedCloudMediaProviderAuthority =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallStaticBooleanMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isSupportedCloudMediaProviderAuthority(android.content.ContentResolver contentResolver, java.lang.String string)
  static bool isSupportedCloudMediaProviderAuthority(
    contentresolver_.ContentResolver contentResolver,
    jni.JString string,
  ) {
    return _isSupportedCloudMediaProviderAuthority(
            _class.reference.pointer,
            _id_isSupportedCloudMediaProviderAuthority as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_notifyCloudMediaChangedEvent = _class.staticMethodId(
    r'notifyCloudMediaChangedEvent',
    r'(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _notifyCloudMediaChangedEvent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void notifyCloudMediaChangedEvent(android.content.ContentResolver contentResolver, java.lang.String string, java.lang.String string1)
  static void notifyCloudMediaChangedEvent(
    contentresolver_.ContentResolver contentResolver,
    jni.JString string,
    jni.JString string1,
  ) {
    _notifyCloudMediaChangedEvent(
            _class.reference.pointer,
            _id_notifyCloudMediaChangedEvent as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }
}

final class $MediaStoreType extends jni.JObjType<MediaStore> {
  const $MediaStoreType();

  @override
  String get signature => r'Landroid/provider/MediaStore;';

  @override
  MediaStore fromReference(jni.JReference reference) =>
      MediaStore.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStoreType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStoreType) && other is $MediaStoreType;
  }
}
