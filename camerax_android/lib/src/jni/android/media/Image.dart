// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../graphics/Rect.dart' as rect_;

/// from: android.media.Image$Plane
class Image_Plane extends jni.JObject {
  @override
  late final jni.JObjType<Image_Plane> $type = type;

  Image_Plane.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/media/Image$Plane');

  /// The type which includes information such as the signature of this class.
  static const type = $Image_PlaneType();
  static final _id_getRowStride = _class.instanceMethodId(
    r'getRowStride',
    r'()I',
  );

  static final _getRowStride = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getRowStride()
  int getRowStride() {
    return _getRowStride(
            reference.pointer, _id_getRowStride as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPixelStride = _class.instanceMethodId(
    r'getPixelStride',
    r'()I',
  );

  static final _getPixelStride = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getPixelStride()
  int getPixelStride() {
    return _getPixelStride(
            reference.pointer, _id_getPixelStride as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getBuffer = _class.instanceMethodId(
    r'getBuffer',
    r'()Ljava/nio/ByteBuffer;',
  );

  static final _getBuffer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.nio.ByteBuffer getBuffer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JByteBuffer getBuffer() {
    return _getBuffer(reference.pointer, _id_getBuffer as jni.JMethodIDPtr)
        .object(const jni.JByteBufferType());
  }
}

final class $Image_PlaneType extends jni.JObjType<Image_Plane> {
  const $Image_PlaneType();

  @override
  String get signature => r'Landroid/media/Image$Plane;';

  @override
  Image_Plane fromReference(jni.JReference reference) =>
      Image_Plane.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Image_PlaneType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Image_PlaneType) && other is $Image_PlaneType;
  }
}

/// from: android.media.Image
class Image extends jni.JObject {
  @override
  late final jni.JObjType<Image> $type = type;

  Image.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/media/Image');

  /// The type which includes information such as the signature of this class.
  static const type = $ImageType();
  static final _id_getFormat = _class.instanceMethodId(
    r'getFormat',
    r'()I',
  );

  static final _getFormat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getFormat()
  int getFormat() {
    return _getFormat(reference.pointer, _id_getFormat as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getWidth = _class.instanceMethodId(
    r'getWidth',
    r'()I',
  );

  static final _getWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getWidth()
  int getWidth() {
    return _getWidth(reference.pointer, _id_getWidth as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getHeight = _class.instanceMethodId(
    r'getHeight',
    r'()I',
  );

  static final _getHeight = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getHeight()
  int getHeight() {
    return _getHeight(reference.pointer, _id_getHeight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getTimestamp = _class.instanceMethodId(
    r'getTimestamp',
    r'()J',
  );

  static final _getTimestamp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract long getTimestamp()
  int getTimestamp() {
    return _getTimestamp(
            reference.pointer, _id_getTimestamp as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getFence = _class.instanceMethodId(
    r'getFence',
    r'()Landroid/hardware/SyncFence;',
  );

  static final _getFence = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.hardware.SyncFence getFence()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFence() {
    return _getFence(reference.pointer, _id_getFence as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getHardwareBuffer = _class.instanceMethodId(
    r'getHardwareBuffer',
    r'()Landroid/hardware/HardwareBuffer;',
  );

  static final _getHardwareBuffer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.hardware.HardwareBuffer getHardwareBuffer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getHardwareBuffer() {
    return _getHardwareBuffer(
            reference.pointer, _id_getHardwareBuffer as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setTimestamp = _class.instanceMethodId(
    r'setTimestamp',
    r'(J)V',
  );

  static final _setTimestamp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTimestamp(long j)
  void setTimestamp(
    int j,
  ) {
    _setTimestamp(reference.pointer, _id_setTimestamp as jni.JMethodIDPtr, j)
        .check();
  }

  static final _id_setFence = _class.instanceMethodId(
    r'setFence',
    r'(Landroid/hardware/SyncFence;)V',
  );

  static final _setFence = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setFence(android.hardware.SyncFence syncFence)
  void setFence(
    jni.JObject syncFence,
  ) {
    _setFence(reference.pointer, _id_setFence as jni.JMethodIDPtr,
            syncFence.reference.pointer)
        .check();
  }

  static final _id_getDataSpace = _class.instanceMethodId(
    r'getDataSpace',
    r'()I',
  );

  static final _getDataSpace = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getDataSpace()
  int getDataSpace() {
    return _getDataSpace(
            reference.pointer, _id_getDataSpace as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setDataSpace = _class.instanceMethodId(
    r'setDataSpace',
    r'(I)V',
  );

  static final _setDataSpace = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setDataSpace(int i)
  void setDataSpace(
    int i,
  ) {
    _setDataSpace(reference.pointer, _id_setDataSpace as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getCropRect = _class.instanceMethodId(
    r'getCropRect',
    r'()Landroid/graphics/Rect;',
  );

  static final _getCropRect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.Rect getCropRect()
  /// The returned object must be released after use, by calling the [release] method.
  rect_.Rect getCropRect() {
    return _getCropRect(reference.pointer, _id_getCropRect as jni.JMethodIDPtr)
        .object(const rect_.$RectType());
  }

  static final _id_setCropRect = _class.instanceMethodId(
    r'setCropRect',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _setCropRect = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setCropRect(android.graphics.Rect rect)
  void setCropRect(
    rect_.Rect rect,
  ) {
    _setCropRect(reference.pointer, _id_setCropRect as jni.JMethodIDPtr,
            rect.reference.pointer)
        .check();
  }

  static final _id_getPlanes = _class.instanceMethodId(
    r'getPlanes',
    r'()[Landroid/media/Image$Plane;',
  );

  static final _getPlanes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.media.Image$Plane[] getPlanes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<Image_Plane> getPlanes() {
    return _getPlanes(reference.pointer, _id_getPlanes as jni.JMethodIDPtr)
        .object(const jni.JArrayType($Image_PlaneType()));
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }
}

final class $ImageType extends jni.JObjType<Image> {
  const $ImageType();

  @override
  String get signature => r'Landroid/media/Image;';

  @override
  Image fromReference(jni.JReference reference) =>
      Image.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageType) && other is $ImageType;
  }
}
