// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../graphics/Rect.dart' as rect$_;

/// from: `android.media.Image$Plane`
class Image$Plane extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Image$Plane> $type;

  @jni$_.internal
  Image$Plane.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/media/Image$Plane');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Image$Plane$NullableType();
  static const type = $Image$Plane$Type();
  static final _id_getRowStride = _class.instanceMethodId(
    r'getRowStride',
    r'()I',
  );

  static final _getRowStride = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract int getRowStride()`
  int getRowStride() {
    return _getRowStride(
            reference.pointer, _id_getRowStride as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getPixelStride = _class.instanceMethodId(
    r'getPixelStride',
    r'()I',
  );

  static final _getPixelStride = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract int getPixelStride()`
  int getPixelStride() {
    return _getPixelStride(
            reference.pointer, _id_getPixelStride as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getBuffer = _class.instanceMethodId(
    r'getBuffer',
    r'()Ljava/nio/ByteBuffer;',
  );

  static final _getBuffer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.nio.ByteBuffer getBuffer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteBuffer? getBuffer() {
    return _getBuffer(reference.pointer, _id_getBuffer as jni$_.JMethodIDPtr)
        .object<jni$_.JByteBuffer?>(const jni$_.JByteBufferNullableType());
  }
}

final class $Image$Plane$NullableType extends jni$_.JObjType<Image$Plane?> {
  @jni$_.internal
  const $Image$Plane$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/media/Image$Plane;';

  @jni$_.internal
  @core$_.override
  Image$Plane? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Image$Plane.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Image$Plane?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Image$Plane$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Image$Plane$NullableType) &&
        other is $Image$Plane$NullableType;
  }
}

final class $Image$Plane$Type extends jni$_.JObjType<Image$Plane> {
  @jni$_.internal
  const $Image$Plane$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/media/Image$Plane;';

  @jni$_.internal
  @core$_.override
  Image$Plane fromReference(jni$_.JReference reference) =>
      Image$Plane.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Image$Plane?> get nullableType =>
      const $Image$Plane$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Image$Plane$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Image$Plane$Type) &&
        other is $Image$Plane$Type;
  }
}

/// from: `android.media.Image`
class Image extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Image> $type;

  @jni$_.internal
  Image.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/media/Image');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Image$NullableType();
  static const type = $Image$Type();
  static final _id_getFormat = _class.instanceMethodId(
    r'getFormat',
    r'()I',
  );

  static final _getFormat = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract int getFormat()`
  int getFormat() {
    return _getFormat(reference.pointer, _id_getFormat as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getWidth = _class.instanceMethodId(
    r'getWidth',
    r'()I',
  );

  static final _getWidth = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract int getWidth()`
  int getWidth() {
    return _getWidth(reference.pointer, _id_getWidth as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getHeight = _class.instanceMethodId(
    r'getHeight',
    r'()I',
  );

  static final _getHeight = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract int getHeight()`
  int getHeight() {
    return _getHeight(reference.pointer, _id_getHeight as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getTimestamp = _class.instanceMethodId(
    r'getTimestamp',
    r'()J',
  );

  static final _getTimestamp = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract long getTimestamp()`
  int getTimestamp() {
    return _getTimestamp(
            reference.pointer, _id_getTimestamp as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getFence = _class.instanceMethodId(
    r'getFence',
    r'()Landroid/hardware/SyncFence;',
  );

  static final _getFence = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.hardware.SyncFence getFence()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFence() {
    return _getFence(reference.pointer, _id_getFence as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getHardwareBuffer = _class.instanceMethodId(
    r'getHardwareBuffer',
    r'()Landroid/hardware/HardwareBuffer;',
  );

  static final _getHardwareBuffer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.hardware.HardwareBuffer getHardwareBuffer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getHardwareBuffer() {
    return _getHardwareBuffer(
            reference.pointer, _id_getHardwareBuffer as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTimestamp = _class.instanceMethodId(
    r'setTimestamp',
    r'(J)V',
  );

  static final _setTimestamp = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTimestamp(long j)`
  void setTimestamp(
    int j,
  ) {
    _setTimestamp(reference.pointer, _id_setTimestamp as jni$_.JMethodIDPtr, j)
        .check();
  }

  static final _id_setFence = _class.instanceMethodId(
    r'setFence',
    r'(Landroid/hardware/SyncFence;)V',
  );

  static final _setFence = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setFence(android.hardware.SyncFence syncFence)`
  void setFence(
    jni$_.JObject? syncFence,
  ) {
    final _$syncFence = syncFence?.reference ?? jni$_.jNullReference;
    _setFence(reference.pointer, _id_setFence as jni$_.JMethodIDPtr,
            _$syncFence.pointer)
        .check();
  }

  static final _id_getDataSpace = _class.instanceMethodId(
    r'getDataSpace',
    r'()I',
  );

  static final _getDataSpace = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getDataSpace()`
  int getDataSpace() {
    return _getDataSpace(
            reference.pointer, _id_getDataSpace as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setDataSpace = _class.instanceMethodId(
    r'setDataSpace',
    r'(I)V',
  );

  static final _setDataSpace = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setDataSpace(int i)`
  void setDataSpace(
    int i,
  ) {
    _setDataSpace(reference.pointer, _id_setDataSpace as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getCropRect = _class.instanceMethodId(
    r'getCropRect',
    r'()Landroid/graphics/Rect;',
  );

  static final _getCropRect = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Rect getCropRect()`
  /// The returned object must be released after use, by calling the [release] method.
  rect$_.Rect? getCropRect() {
    return _getCropRect(
            reference.pointer, _id_getCropRect as jni$_.JMethodIDPtr)
        .object<rect$_.Rect?>(const rect$_.$Rect$NullableType());
  }

  static final _id_setCropRect = _class.instanceMethodId(
    r'setCropRect',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _setCropRect = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setCropRect(android.graphics.Rect rect)`
  void setCropRect(
    rect$_.Rect? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _setCropRect(reference.pointer, _id_setCropRect as jni$_.JMethodIDPtr,
            _$rect.pointer)
        .check();
  }

  static final _id_getPlanes = _class.instanceMethodId(
    r'getPlanes',
    r'()[Landroid/media/Image$Plane;',
  );

  static final _getPlanes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.media.Image$Plane[] getPlanes()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<Image$Plane?>? getPlanes() {
    return _getPlanes(reference.pointer, _id_getPlanes as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<Image$Plane?>?>(
            const jni$_.JArrayNullableType<Image$Plane?>(
                $Image$Plane$NullableType()));
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void close()`
  void close() {
    _close(reference.pointer, _id_close as jni$_.JMethodIDPtr).check();
  }
}

final class $Image$NullableType extends jni$_.JObjType<Image?> {
  @jni$_.internal
  const $Image$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/media/Image;';

  @jni$_.internal
  @core$_.override
  Image? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Image.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Image?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Image$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Image$NullableType) &&
        other is $Image$NullableType;
  }
}

final class $Image$Type extends jni$_.JObjType<Image> {
  @jni$_.internal
  const $Image$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/media/Image;';

  @jni$_.internal
  @core$_.override
  Image fromReference(jni$_.JReference reference) => Image.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Image?> get nullableType => const $Image$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Image$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Image$Type) && other is $Image$Type;
  }
}
