// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: android.content.ContentValues
class ContentValues extends jni.JObject {
  @override
  late final jni.JObjType<ContentValues> $type = type;

  ContentValues.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/content/ContentValues');

  /// The type which includes information such as the signature of this class.
  static const type = $ContentValuesType();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_TAG = _class.staticFieldId(
    r'TAG',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TAG
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TAG => _id_TAG.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ContentValues() {
    return ContentValues.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(I)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void <init>(int i)
  /// The returned object must be released after use, by calling the [release] method.
  factory ContentValues.new1(
    int i,
  ) {
    return ContentValues.fromReference(
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr, i)
            .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Landroid/content/ContentValues;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.ContentValues contentValues)
  /// The returned object must be released after use, by calling the [release] method.
  factory ContentValues.new2(
    ContentValues contentValues,
  ) {
    return ContentValues.fromReference(_new2(_class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr, contentValues.reference.pointer)
        .reference);
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_put = _class.instanceMethodId(
    r'put',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _put = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.String string1)
  void put(
    jni.JString string,
    jni.JString string1,
  ) {
    _put(reference.pointer, _id_put as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_putAll = _class.instanceMethodId(
    r'putAll',
    r'(Landroid/content/ContentValues;)V',
  );

  static final _putAll = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putAll(android.content.ContentValues contentValues)
  void putAll(
    ContentValues contentValues,
  ) {
    _putAll(reference.pointer, _id_putAll as jni.JMethodIDPtr,
            contentValues.reference.pointer)
        .check();
  }

  static final _id_put1 = _class.instanceMethodId(
    r'put',
    r'(Ljava/lang/String;Ljava/lang/Byte;)V',
  );

  static final _put1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Byte byte)
  void put1(
    jni.JString string,
    jni.JByte byte,
  ) {
    _put1(reference.pointer, _id_put1 as jni.JMethodIDPtr,
            string.reference.pointer, byte.reference.pointer)
        .check();
  }

  static final _id_put2 = _class.instanceMethodId(
    r'put',
    r'(Ljava/lang/String;Ljava/lang/Short;)V',
  );

  static final _put2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Short short)
  void put2(
    jni.JString string,
    jni.JShort short,
  ) {
    _put2(reference.pointer, _id_put2 as jni.JMethodIDPtr,
            string.reference.pointer, short.reference.pointer)
        .check();
  }

  static final _id_put3 = _class.instanceMethodId(
    r'put',
    r'(Ljava/lang/String;Ljava/lang/Integer;)V',
  );

  static final _put3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Integer integer)
  void put3(
    jni.JString string,
    jni.JInteger integer,
  ) {
    _put3(reference.pointer, _id_put3 as jni.JMethodIDPtr,
            string.reference.pointer, integer.reference.pointer)
        .check();
  }

  static final _id_put4 = _class.instanceMethodId(
    r'put',
    r'(Ljava/lang/String;Ljava/lang/Long;)V',
  );

  static final _put4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Long long)
  void put4(
    jni.JString string,
    jni.JLong long,
  ) {
    _put4(reference.pointer, _id_put4 as jni.JMethodIDPtr,
            string.reference.pointer, long.reference.pointer)
        .check();
  }

  static final _id_put5 = _class.instanceMethodId(
    r'put',
    r'(Ljava/lang/String;Ljava/lang/Float;)V',
  );

  static final _put5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Float float)
  void put5(
    jni.JString string,
    jni.JFloat float,
  ) {
    _put5(reference.pointer, _id_put5 as jni.JMethodIDPtr,
            string.reference.pointer, float.reference.pointer)
        .check();
  }

  static final _id_put6 = _class.instanceMethodId(
    r'put',
    r'(Ljava/lang/String;Ljava/lang/Double;)V',
  );

  static final _put6 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Double double)
  void put6(
    jni.JString string,
    jni.JDouble double,
  ) {
    _put6(reference.pointer, _id_put6 as jni.JMethodIDPtr,
            string.reference.pointer, double.reference.pointer)
        .check();
  }

  static final _id_put7 = _class.instanceMethodId(
    r'put',
    r'(Ljava/lang/String;Ljava/lang/Boolean;)V',
  );

  static final _put7 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Boolean boolean)
  void put7(
    jni.JString string,
    jni.JBoolean boolean,
  ) {
    _put7(reference.pointer, _id_put7 as jni.JMethodIDPtr,
            string.reference.pointer, boolean.reference.pointer)
        .check();
  }

  static final _id_put8 = _class.instanceMethodId(
    r'put',
    r'(Ljava/lang/String;[B)V',
  );

  static final _put8 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, byte[] bs)
  void put8(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    _put8(reference.pointer, _id_put8 as jni.JMethodIDPtr,
            string.reference.pointer, bs.reference.pointer)
        .check();
  }

  static final _id_putNull = _class.instanceMethodId(
    r'putNull',
    r'(Ljava/lang/String;)V',
  );

  static final _putNull = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putNull(java.lang.String string)
  void putNull(
    jni.JString string,
  ) {
    _putNull(reference.pointer, _id_putNull as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_size = _class.instanceMethodId(
    r'size',
    r'()I',
  );

  static final _size = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int size()
  int size() {
    return _size(reference.pointer, _id_size as jni.JMethodIDPtr).integer;
  }

  static final _id_isEmpty = _class.instanceMethodId(
    r'isEmpty',
    r'()Z',
  );

  static final _isEmpty = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isEmpty()
  bool isEmpty() {
    return _isEmpty(reference.pointer, _id_isEmpty as jni.JMethodIDPtr).boolean;
  }

  static final _id_remove = _class.instanceMethodId(
    r'remove',
    r'(Ljava/lang/String;)V',
  );

  static final _remove = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void remove(java.lang.String string)
  void remove(
    jni.JString string,
  ) {
    _remove(reference.pointer, _id_remove as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_clear = _class.instanceMethodId(
    r'clear',
    r'()V',
  );

  static final _clear = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void clear()
  void clear() {
    _clear(reference.pointer, _id_clear as jni.JMethodIDPtr).check();
  }

  static final _id_containsKey = _class.instanceMethodId(
    r'containsKey',
    r'(Ljava/lang/String;)Z',
  );

  static final _containsKey = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean containsKey(java.lang.String string)
  bool containsKey(
    jni.JString string,
  ) {
    return _containsKey(reference.pointer, _id_containsKey as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_get0 = _class.instanceMethodId(
    r'get',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _get0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object get(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get0(
    jni.JString string,
  ) {
    return _get0(reference.pointer, _id_get0 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getAsString = _class.instanceMethodId(
    r'getAsString',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getAsString = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAsString(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAsString(
    jni.JString string,
  ) {
    return _getAsString(reference.pointer, _id_getAsString as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getAsLong = _class.instanceMethodId(
    r'getAsLong',
    r'(Ljava/lang/String;)Ljava/lang/Long;',
  );

  static final _getAsLong = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Long getAsLong(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JLong getAsLong(
    jni.JString string,
  ) {
    return _getAsLong(reference.pointer, _id_getAsLong as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JLongType());
  }

  static final _id_getAsInteger = _class.instanceMethodId(
    r'getAsInteger',
    r'(Ljava/lang/String;)Ljava/lang/Integer;',
  );

  static final _getAsInteger = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Integer getAsInteger(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger getAsInteger(
    jni.JString string,
  ) {
    return _getAsInteger(reference.pointer,
            _id_getAsInteger as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JIntegerType());
  }

  static final _id_getAsShort = _class.instanceMethodId(
    r'getAsShort',
    r'(Ljava/lang/String;)Ljava/lang/Short;',
  );

  static final _getAsShort = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Short getAsShort(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JShort getAsShort(
    jni.JString string,
  ) {
    return _getAsShort(reference.pointer, _id_getAsShort as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JShortType());
  }

  static final _id_getAsByte = _class.instanceMethodId(
    r'getAsByte',
    r'(Ljava/lang/String;)Ljava/lang/Byte;',
  );

  static final _getAsByte = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Byte getAsByte(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JByte getAsByte(
    jni.JString string,
  ) {
    return _getAsByte(reference.pointer, _id_getAsByte as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JByteType());
  }

  static final _id_getAsDouble = _class.instanceMethodId(
    r'getAsDouble',
    r'(Ljava/lang/String;)Ljava/lang/Double;',
  );

  static final _getAsDouble = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Double getAsDouble(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JDouble getAsDouble(
    jni.JString string,
  ) {
    return _getAsDouble(reference.pointer, _id_getAsDouble as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JDoubleType());
  }

  static final _id_getAsFloat = _class.instanceMethodId(
    r'getAsFloat',
    r'(Ljava/lang/String;)Ljava/lang/Float;',
  );

  static final _getAsFloat = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Float getAsFloat(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JFloat getAsFloat(
    jni.JString string,
  ) {
    return _getAsFloat(reference.pointer, _id_getAsFloat as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JFloatType());
  }

  static final _id_getAsBoolean = _class.instanceMethodId(
    r'getAsBoolean',
    r'(Ljava/lang/String;)Ljava/lang/Boolean;',
  );

  static final _getAsBoolean = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Boolean getAsBoolean(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getAsBoolean(
    jni.JString string,
  ) {
    return _getAsBoolean(reference.pointer,
            _id_getAsBoolean as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JBooleanType());
  }

  static final _id_getAsByteArray = _class.instanceMethodId(
    r'getAsByteArray',
    r'(Ljava/lang/String;)[B',
  );

  static final _getAsByteArray = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] getAsByteArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getAsByteArray(
    jni.JString string,
  ) {
    return _getAsByteArray(reference.pointer,
            _id_getAsByteArray as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_valueSet = _class.instanceMethodId(
    r'valueSet',
    r'()Ljava/util/Set;',
  );

  static final _valueSet = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set valueSet()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JObject> valueSet() {
    return _valueSet(reference.pointer, _id_valueSet as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JObjectType()));
  }

  static final _id_keySet = _class.instanceMethodId(
    r'keySet',
    r'()Ljava/util/Set;',
  );

  static final _keySet = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set keySet()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> keySet() {
    return _keySet(reference.pointer, _id_keySet as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $ContentValuesType extends jni.JObjType<ContentValues> {
  const $ContentValuesType();

  @override
  String get signature => r'Landroid/content/ContentValues;';

  @override
  ContentValues fromReference(jni.JReference reference) =>
      ContentValues.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContentValuesType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContentValuesType) &&
        other is $ContentValuesType;
  }
}
