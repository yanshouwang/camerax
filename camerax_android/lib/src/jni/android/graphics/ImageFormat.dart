// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.graphics.ImageFormat`
class ImageFormat extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ImageFormat> $type;

  @jni$_.internal
  ImageFormat.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/graphics/ImageFormat');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ImageFormat$NullableType();
  static const type = $ImageFormat$Type();

  /// from: `static public final int DEPTH16`
  static const DEPTH16 = 1144402265;

  /// from: `static public final int DEPTH_JPEG`
  static const DEPTH_JPEG = 1768253795;

  /// from: `static public final int DEPTH_POINT_CLOUD`
  static const DEPTH_POINT_CLOUD = 257;

  /// from: `static public final int FLEX_RGBA_8888`
  static const FLEX_RGBA_8888 = 42;

  /// from: `static public final int FLEX_RGB_888`
  static const FLEX_RGB_888 = 41;

  /// from: `static public final int HEIC`
  static const HEIC = 1212500294;

  /// from: `static public final int JPEG`
  static const JPEG = 256;

  /// from: `static public final int JPEG_R`
  static const JPEG_R = 4101;

  /// from: `static public final int NV16`
  static const NV16 = 16;

  /// from: `static public final int NV21`
  static const NV21 = 17;

  /// from: `static public final int PRIVATE`
  static const PRIVATE = 34;

  /// from: `static public final int RAW10`
  static const RAW10 = 37;

  /// from: `static public final int RAW12`
  static const RAW12 = 38;

  /// from: `static public final int RAW_PRIVATE`
  static const RAW_PRIVATE = 36;

  /// from: `static public final int RAW_SENSOR`
  static const RAW_SENSOR = 32;

  /// from: `static public final int RGB_565`
  static const RGB_565 = 4;

  /// from: `static public final int UNKNOWN`
  static const UNKNOWN = 0;

  /// from: `static public final int Y8`
  static const Y8 = 538982489;

  /// from: `static public final int YCBCR_P010`
  static const YCBCR_P010 = 54;

  /// from: `static public final int YUV_420_888`
  static const YUV_420_888 = 35;

  /// from: `static public final int YUV_422_888`
  static const YUV_422_888 = 39;

  /// from: `static public final int YUV_444_888`
  static const YUV_444_888 = 40;

  /// from: `static public final int YUY2`
  static const YUY2 = 20;

  /// from: `static public final int YV12`
  static const YV12 = 842094169;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageFormat() {
    return ImageFormat.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getBitsPerPixel = _class.staticMethodId(
    r'getBitsPerPixel',
    r'(I)I',
  );

  static final _getBitsPerPixel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public int getBitsPerPixel(int i)`
  static int getBitsPerPixel(
    int i,
  ) {
    return _getBitsPerPixel(_class.reference.pointer,
            _id_getBitsPerPixel as jni$_.JMethodIDPtr, i)
        .integer;
  }
}

final class $ImageFormat$NullableType extends jni$_.JObjType<ImageFormat?> {
  @jni$_.internal
  const $ImageFormat$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/graphics/ImageFormat;';

  @jni$_.internal
  @core$_.override
  ImageFormat? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ImageFormat.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageFormat?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageFormat$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageFormat$NullableType) &&
        other is $ImageFormat$NullableType;
  }
}

final class $ImageFormat$Type extends jni$_.JObjType<ImageFormat> {
  @jni$_.internal
  const $ImageFormat$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/graphics/ImageFormat;';

  @jni$_.internal
  @core$_.override
  ImageFormat fromReference(jni$_.JReference reference) =>
      ImageFormat.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageFormat?> get nullableType =>
      const $ImageFormat$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ImageFormat$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageFormat$Type) &&
        other is $ImageFormat$Type;
  }
}
