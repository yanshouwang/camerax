// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: android.graphics.ImageFormat
class ImageFormat extends jni.JObject {
  @override
  late final jni.JObjType<ImageFormat> $type = type;

  ImageFormat.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/graphics/ImageFormat');

  /// The type which includes information such as the signature of this class.
  static const type = $ImageFormatType();

  /// from: static public final int DEPTH16
  static const DEPTH16 = 1144402265;

  /// from: static public final int DEPTH_JPEG
  static const DEPTH_JPEG = 1768253795;

  /// from: static public final int DEPTH_POINT_CLOUD
  static const DEPTH_POINT_CLOUD = 257;

  /// from: static public final int FLEX_RGBA_8888
  static const FLEX_RGBA_8888 = 42;

  /// from: static public final int FLEX_RGB_888
  static const FLEX_RGB_888 = 41;

  /// from: static public final int HEIC
  static const HEIC = 1212500294;

  /// from: static public final int JPEG
  static const JPEG = 256;

  /// from: static public final int JPEG_R
  static const JPEG_R = 4101;

  /// from: static public final int NV16
  static const NV16 = 16;

  /// from: static public final int NV21
  static const NV21 = 17;

  /// from: static public final int PRIVATE
  static const PRIVATE = 34;

  /// from: static public final int RAW10
  static const RAW10 = 37;

  /// from: static public final int RAW12
  static const RAW12 = 38;

  /// from: static public final int RAW_PRIVATE
  static const RAW_PRIVATE = 36;

  /// from: static public final int RAW_SENSOR
  static const RAW_SENSOR = 32;

  /// from: static public final int RGB_565
  static const RGB_565 = 4;

  /// from: static public final int UNKNOWN
  static const UNKNOWN = 0;

  /// from: static public final int Y8
  static const Y8 = 538982489;

  /// from: static public final int YCBCR_P010
  static const YCBCR_P010 = 54;

  /// from: static public final int YUV_420_888
  static const YUV_420_888 = 35;

  /// from: static public final int YUV_422_888
  static const YUV_422_888 = 39;

  /// from: static public final int YUV_444_888
  static const YUV_444_888 = 40;

  /// from: static public final int YUY2
  static const YUY2 = 20;

  /// from: static public final int YV12
  static const YV12 = 842094169;
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageFormat() {
    return ImageFormat.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getBitsPerPixel = _class.staticMethodId(
    r'getBitsPerPixel',
    r'(I)I',
  );

  static final _getBitsPerPixel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public int getBitsPerPixel(int i)
  static int getBitsPerPixel(
    int i,
  ) {
    return _getBitsPerPixel(_class.reference.pointer,
            _id_getBitsPerPixel as jni.JMethodIDPtr, i)
        .integer;
  }
}

final class $ImageFormatType extends jni.JObjType<ImageFormat> {
  const $ImageFormatType();

  @override
  String get signature => r'Landroid/graphics/ImageFormat;';

  @override
  ImageFormat fromReference(jni.JReference reference) =>
      ImageFormat.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageFormatType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageFormatType) && other is $ImageFormatType;
  }
}
