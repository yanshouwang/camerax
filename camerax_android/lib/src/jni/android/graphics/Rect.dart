// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.graphics.Rect`
class Rect extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Rect> $type;

  @jni$_.internal
  Rect.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/graphics/Rect');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Rect$NullableType();
  static const type = $Rect$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_bottom = _class.instanceFieldId(
    r'bottom',
    r'I',
  );

  /// from: `public int bottom`
  int get bottom => _id_bottom.get(this, const jni$_.jintType());

  /// from: `public int bottom`
  set bottom(int value) => _id_bottom.set(this, const jni$_.jintType(), value);

  static final _id_left = _class.instanceFieldId(
    r'left',
    r'I',
  );

  /// from: `public int left`
  int get left => _id_left.get(this, const jni$_.jintType());

  /// from: `public int left`
  set left(int value) => _id_left.set(this, const jni$_.jintType(), value);

  static final _id_right = _class.instanceFieldId(
    r'right',
    r'I',
  );

  /// from: `public int right`
  int get right => _id_right.get(this, const jni$_.jintType());

  /// from: `public int right`
  set right(int value) => _id_right.set(this, const jni$_.jintType(), value);

  static final _id_top = _class.instanceFieldId(
    r'top',
    r'I',
  );

  /// from: `public int top`
  int get top => _id_top.get(this, const jni$_.jintType());

  /// from: `public int top`
  set top(int value) => _id_top.set(this, const jni$_.jintType(), value);

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Rect() {
    return Rect.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(IIII)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void <init>(int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Rect.new$1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return Rect.fromReference(_new$1(_class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr, i, i1, i2, i3)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/graphics/Rect;)V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.graphics.Rect rect)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Rect.new$2(
    Rect? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    return Rect.fromReference(_new$2(_class.reference.pointer,
            _id_new$2 as jni$_.JMethodIDPtr, _$rect.pointer)
        .reference);
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toShortString = _class.instanceMethodId(
    r'toShortString',
    r'()Ljava/lang/String;',
  );

  static final _toShortString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toShortString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toShortString() {
    return _toShortString(
            reference.pointer, _id_toShortString as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_flattenToString = _class.instanceMethodId(
    r'flattenToString',
    r'()Ljava/lang/String;',
  );

  static final _flattenToString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String flattenToString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? flattenToString() {
    return _flattenToString(
            reference.pointer, _id_flattenToString as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_unflattenFromString = _class.staticMethodId(
    r'unflattenFromString',
    r'(Ljava/lang/String;)Landroid/graphics/Rect;',
  );

  static final _unflattenFromString = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.graphics.Rect unflattenFromString(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Rect? unflattenFromString(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _unflattenFromString(_class.reference.pointer,
            _id_unflattenFromString as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Rect?>(const $Rect$NullableType());
  }

  static final _id_isEmpty = _class.instanceMethodId(
    r'isEmpty',
    r'()Z',
  );

  static final _isEmpty = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isEmpty()`
  bool isEmpty() {
    return _isEmpty(reference.pointer, _id_isEmpty as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_width = _class.instanceMethodId(
    r'width',
    r'()I',
  );

  static final _width = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int width()`
  int width() {
    return _width(reference.pointer, _id_width as jni$_.JMethodIDPtr).integer;
  }

  static final _id_height = _class.instanceMethodId(
    r'height',
    r'()I',
  );

  static final _height = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int height()`
  int height() {
    return _height(reference.pointer, _id_height as jni$_.JMethodIDPtr).integer;
  }

  static final _id_centerX = _class.instanceMethodId(
    r'centerX',
    r'()I',
  );

  static final _centerX = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int centerX()`
  int centerX() {
    return _centerX(reference.pointer, _id_centerX as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_centerY = _class.instanceMethodId(
    r'centerY',
    r'()I',
  );

  static final _centerY = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int centerY()`
  int centerY() {
    return _centerY(reference.pointer, _id_centerY as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_exactCenterX = _class.instanceMethodId(
    r'exactCenterX',
    r'()F',
  );

  static final _exactCenterX = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public float exactCenterX()`
  double exactCenterX() {
    return _exactCenterX(
            reference.pointer, _id_exactCenterX as jni$_.JMethodIDPtr)
        .float;
  }

  static final _id_exactCenterY = _class.instanceMethodId(
    r'exactCenterY',
    r'()F',
  );

  static final _exactCenterY = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public float exactCenterY()`
  double exactCenterY() {
    return _exactCenterY(
            reference.pointer, _id_exactCenterY as jni$_.JMethodIDPtr)
        .float;
  }

  static final _id_setEmpty = _class.instanceMethodId(
    r'setEmpty',
    r'()V',
  );

  static final _setEmpty = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void setEmpty()`
  void setEmpty() {
    _setEmpty(reference.pointer, _id_setEmpty as jni$_.JMethodIDPtr).check();
  }

  static final _id_set = _class.instanceMethodId(
    r'set',
    r'(IIII)V',
  );

  static final _set = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void set(int i, int i1, int i2, int i3)`
  void set(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _set(reference.pointer, _id_set as jni$_.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_set$1 = _class.instanceMethodId(
    r'set',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _set$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void set(android.graphics.Rect rect)`
  void set$1(
    Rect? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _set$1(reference.pointer, _id_set$1 as jni$_.JMethodIDPtr, _$rect.pointer)
        .check();
  }

  static final _id_offset = _class.instanceMethodId(
    r'offset',
    r'(II)V',
  );

  static final _offset = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public void offset(int i, int i1)`
  void offset(
    int i,
    int i1,
  ) {
    _offset(reference.pointer, _id_offset as jni$_.JMethodIDPtr, i, i1).check();
  }

  static final _id_offsetTo = _class.instanceMethodId(
    r'offsetTo',
    r'(II)V',
  );

  static final _offsetTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public void offsetTo(int i, int i1)`
  void offsetTo(
    int i,
    int i1,
  ) {
    _offsetTo(reference.pointer, _id_offsetTo as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_inset = _class.instanceMethodId(
    r'inset',
    r'(II)V',
  );

  static final _inset = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public void inset(int i, int i1)`
  void inset(
    int i,
    int i1,
  ) {
    _inset(reference.pointer, _id_inset as jni$_.JMethodIDPtr, i, i1).check();
  }

  static final _id_inset$1 = _class.instanceMethodId(
    r'inset',
    r'(Landroid/graphics/Insets;)V',
  );

  static final _inset$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void inset(android.graphics.Insets insets)`
  void inset$1(
    jni$_.JObject? insets,
  ) {
    final _$insets = insets?.reference ?? jni$_.jNullReference;
    _inset$1(reference.pointer, _id_inset$1 as jni$_.JMethodIDPtr,
            _$insets.pointer)
        .check();
  }

  static final _id_inset$2 = _class.instanceMethodId(
    r'inset',
    r'(IIII)V',
  );

  static final _inset$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void inset(int i, int i1, int i2, int i3)`
  void inset$2(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _inset$2(
            reference.pointer, _id_inset$2 as jni$_.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_contains = _class.instanceMethodId(
    r'contains',
    r'(II)Z',
  );

  static final _contains = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public boolean contains(int i, int i1)`
  bool contains(
    int i,
    int i1,
  ) {
    return _contains(
            reference.pointer, _id_contains as jni$_.JMethodIDPtr, i, i1)
        .boolean;
  }

  static final _id_contains$1 = _class.instanceMethodId(
    r'contains',
    r'(IIII)Z',
  );

  static final _contains$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public boolean contains(int i, int i1, int i2, int i3)`
  bool contains$1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _contains$1(reference.pointer, _id_contains$1 as jni$_.JMethodIDPtr,
            i, i1, i2, i3)
        .boolean;
  }

  static final _id_contains$2 = _class.instanceMethodId(
    r'contains',
    r'(Landroid/graphics/Rect;)Z',
  );

  static final _contains$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean contains(android.graphics.Rect rect)`
  bool contains$2(
    Rect? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    return _contains$2(reference.pointer, _id_contains$2 as jni$_.JMethodIDPtr,
            _$rect.pointer)
        .boolean;
  }

  static final _id_intersect = _class.instanceMethodId(
    r'intersect',
    r'(IIII)Z',
  );

  static final _intersect = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public boolean intersect(int i, int i1, int i2, int i3)`
  bool intersect(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _intersect(reference.pointer, _id_intersect as jni$_.JMethodIDPtr, i,
            i1, i2, i3)
        .boolean;
  }

  static final _id_intersect$1 = _class.instanceMethodId(
    r'intersect',
    r'(Landroid/graphics/Rect;)Z',
  );

  static final _intersect$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean intersect(android.graphics.Rect rect)`
  bool intersect$1(
    Rect? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    return _intersect$1(reference.pointer,
            _id_intersect$1 as jni$_.JMethodIDPtr, _$rect.pointer)
        .boolean;
  }

  static final _id_setIntersect = _class.instanceMethodId(
    r'setIntersect',
    r'(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z',
  );

  static final _setIntersect = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean setIntersect(android.graphics.Rect rect, android.graphics.Rect rect1)`
  bool setIntersect(
    Rect? rect,
    Rect? rect1,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    final _$rect1 = rect1?.reference ?? jni$_.jNullReference;
    return _setIntersect(
            reference.pointer,
            _id_setIntersect as jni$_.JMethodIDPtr,
            _$rect.pointer,
            _$rect1.pointer)
        .boolean;
  }

  static final _id_intersects = _class.instanceMethodId(
    r'intersects',
    r'(IIII)Z',
  );

  static final _intersects = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public boolean intersects(int i, int i1, int i2, int i3)`
  bool intersects(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _intersects(reference.pointer, _id_intersects as jni$_.JMethodIDPtr,
            i, i1, i2, i3)
        .boolean;
  }

  static final _id_intersects$1 = _class.staticMethodId(
    r'intersects',
    r'(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z',
  );

  static final _intersects$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public boolean intersects(android.graphics.Rect rect, android.graphics.Rect rect1)`
  static bool intersects$1(
    Rect? rect,
    Rect? rect1,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    final _$rect1 = rect1?.reference ?? jni$_.jNullReference;
    return _intersects$1(
            _class.reference.pointer,
            _id_intersects$1 as jni$_.JMethodIDPtr,
            _$rect.pointer,
            _$rect1.pointer)
        .boolean;
  }

  static final _id_union = _class.instanceMethodId(
    r'union',
    r'(IIII)V',
  );

  static final _union = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void union(int i, int i1, int i2, int i3)`
  void union(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _union(reference.pointer, _id_union as jni$_.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_union$1 = _class.instanceMethodId(
    r'union',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _union$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void union(android.graphics.Rect rect)`
  void union$1(
    Rect? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _union$1(reference.pointer, _id_union$1 as jni$_.JMethodIDPtr,
            _$rect.pointer)
        .check();
  }

  static final _id_union$2 = _class.instanceMethodId(
    r'union',
    r'(II)V',
  );

  static final _union$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public void union(int i, int i1)`
  void union$2(
    int i,
    int i1,
  ) {
    _union$2(reference.pointer, _id_union$2 as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_sort = _class.instanceMethodId(
    r'sort',
    r'()V',
  );

  static final _sort = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void sort()`
  void sort() {
    _sort(reference.pointer, _id_sort as jni$_.JMethodIDPtr).check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer, i)
        .check();
  }

  static final _id_readFromParcel = _class.instanceMethodId(
    r'readFromParcel',
    r'(Landroid/os/Parcel;)V',
  );

  static final _readFromParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void readFromParcel(android.os.Parcel parcel)`
  void readFromParcel(
    jni$_.JObject? parcel,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _readFromParcel(reference.pointer, _id_readFromParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer)
        .check();
  }
}

final class $Rect$NullableType extends jni$_.JObjType<Rect?> {
  @jni$_.internal
  const $Rect$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/graphics/Rect;';

  @jni$_.internal
  @core$_.override
  Rect? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Rect.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Rect?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Rect$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Rect$NullableType) &&
        other is $Rect$NullableType;
  }
}

final class $Rect$Type extends jni$_.JObjType<Rect> {
  @jni$_.internal
  const $Rect$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/graphics/Rect;';

  @jni$_.internal
  @core$_.override
  Rect fromReference(jni$_.JReference reference) => Rect.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Rect?> get nullableType => const $Rect$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Rect$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Rect$Type) && other is $Rect$Type;
  }
}
