// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: android.graphics.Rect
class Rect extends jni.JObject {
  @override
  late final jni.JObjType<Rect> $type = type;

  Rect.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/graphics/Rect');

  /// The type which includes information such as the signature of this class.
  static const type = $RectType();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_bottom = _class.instanceFieldId(
    r'bottom',
    r'I',
  );

  /// from: public int bottom
  int get bottom => _id_bottom.get(this, const jni.jintType());

  /// from: public int bottom
  set bottom(int value) => _id_bottom.set(this, const jni.jintType(), value);

  static final _id_left = _class.instanceFieldId(
    r'left',
    r'I',
  );

  /// from: public int left
  int get left => _id_left.get(this, const jni.jintType());

  /// from: public int left
  set left(int value) => _id_left.set(this, const jni.jintType(), value);

  static final _id_right = _class.instanceFieldId(
    r'right',
    r'I',
  );

  /// from: public int right
  int get right => _id_right.get(this, const jni.jintType());

  /// from: public int right
  set right(int value) => _id_right.set(this, const jni.jintType(), value);

  static final _id_top = _class.instanceFieldId(
    r'top',
    r'I',
  );

  /// from: public int top
  int get top => _id_top.get(this, const jni.jintType());

  /// from: public int top
  set top(int value) => _id_top.set(this, const jni.jintType(), value);

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Rect() {
    return Rect.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(IIII)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: public void <init>(int i, int i1, int i2, int i3)
  /// The returned object must be released after use, by calling the [release] method.
  factory Rect.new1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return Rect.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, i, i1, i2, i3)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Landroid/graphics/Rect;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.graphics.Rect rect)
  /// The returned object must be released after use, by calling the [release] method.
  factory Rect.new2(
    Rect rect,
  ) {
    return Rect.fromReference(_new2(_class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr, rect.reference.pointer)
        .reference);
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toShortString = _class.instanceMethodId(
    r'toShortString',
    r'()Ljava/lang/String;',
  );

  static final _toShortString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toShortString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toShortString() {
    return _toShortString(
            reference.pointer, _id_toShortString as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_flattenToString = _class.instanceMethodId(
    r'flattenToString',
    r'()Ljava/lang/String;',
  );

  static final _flattenToString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String flattenToString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString flattenToString() {
    return _flattenToString(
            reference.pointer, _id_flattenToString as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_unflattenFromString = _class.staticMethodId(
    r'unflattenFromString',
    r'(Ljava/lang/String;)Landroid/graphics/Rect;',
  );

  static final _unflattenFromString = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Rect unflattenFromString(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Rect unflattenFromString(
    jni.JString string,
  ) {
    return _unflattenFromString(
            _class.reference.pointer,
            _id_unflattenFromString as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $RectType());
  }

  static final _id_isEmpty = _class.instanceMethodId(
    r'isEmpty',
    r'()Z',
  );

  static final _isEmpty = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isEmpty()
  bool isEmpty() {
    return _isEmpty(reference.pointer, _id_isEmpty as jni.JMethodIDPtr).boolean;
  }

  static final _id_width = _class.instanceMethodId(
    r'width',
    r'()I',
  );

  static final _width = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int width()
  int width() {
    return _width(reference.pointer, _id_width as jni.JMethodIDPtr).integer;
  }

  static final _id_height = _class.instanceMethodId(
    r'height',
    r'()I',
  );

  static final _height = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int height()
  int height() {
    return _height(reference.pointer, _id_height as jni.JMethodIDPtr).integer;
  }

  static final _id_centerX = _class.instanceMethodId(
    r'centerX',
    r'()I',
  );

  static final _centerX = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int centerX()
  int centerX() {
    return _centerX(reference.pointer, _id_centerX as jni.JMethodIDPtr).integer;
  }

  static final _id_centerY = _class.instanceMethodId(
    r'centerY',
    r'()I',
  );

  static final _centerY = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int centerY()
  int centerY() {
    return _centerY(reference.pointer, _id_centerY as jni.JMethodIDPtr).integer;
  }

  static final _id_exactCenterX = _class.instanceMethodId(
    r'exactCenterX',
    r'()F',
  );

  static final _exactCenterX = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public float exactCenterX()
  double exactCenterX() {
    return _exactCenterX(
            reference.pointer, _id_exactCenterX as jni.JMethodIDPtr)
        .float;
  }

  static final _id_exactCenterY = _class.instanceMethodId(
    r'exactCenterY',
    r'()F',
  );

  static final _exactCenterY = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public float exactCenterY()
  double exactCenterY() {
    return _exactCenterY(
            reference.pointer, _id_exactCenterY as jni.JMethodIDPtr)
        .float;
  }

  static final _id_setEmpty = _class.instanceMethodId(
    r'setEmpty',
    r'()V',
  );

  static final _setEmpty = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void setEmpty()
  void setEmpty() {
    _setEmpty(reference.pointer, _id_setEmpty as jni.JMethodIDPtr).check();
  }

  static final _id_set0 = _class.instanceMethodId(
    r'set',
    r'(IIII)V',
  );

  static final _set0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: public void set(int i, int i1, int i2, int i3)
  void set0(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _set0(reference.pointer, _id_set0 as jni.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_set1 = _class.instanceMethodId(
    r'set',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _set1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void set(android.graphics.Rect rect)
  void set1(
    Rect rect,
  ) {
    _set1(reference.pointer, _id_set1 as jni.JMethodIDPtr,
            rect.reference.pointer)
        .check();
  }

  static final _id_offset = _class.instanceMethodId(
    r'offset',
    r'(II)V',
  );

  static final _offset = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public void offset(int i, int i1)
  void offset(
    int i,
    int i1,
  ) {
    _offset(reference.pointer, _id_offset as jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_offsetTo = _class.instanceMethodId(
    r'offsetTo',
    r'(II)V',
  );

  static final _offsetTo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public void offsetTo(int i, int i1)
  void offsetTo(
    int i,
    int i1,
  ) {
    _offsetTo(reference.pointer, _id_offsetTo as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_inset = _class.instanceMethodId(
    r'inset',
    r'(II)V',
  );

  static final _inset = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public void inset(int i, int i1)
  void inset(
    int i,
    int i1,
  ) {
    _inset(reference.pointer, _id_inset as jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_inset1 = _class.instanceMethodId(
    r'inset',
    r'(Landroid/graphics/Insets;)V',
  );

  static final _inset1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void inset(android.graphics.Insets insets)
  void inset1(
    jni.JObject insets,
  ) {
    _inset1(reference.pointer, _id_inset1 as jni.JMethodIDPtr,
            insets.reference.pointer)
        .check();
  }

  static final _id_inset2 = _class.instanceMethodId(
    r'inset',
    r'(IIII)V',
  );

  static final _inset2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: public void inset(int i, int i1, int i2, int i3)
  void inset2(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _inset2(reference.pointer, _id_inset2 as jni.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_contains = _class.instanceMethodId(
    r'contains',
    r'(II)Z',
  );

  static final _contains = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<($Int32, $Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public boolean contains(int i, int i1)
  bool contains(
    int i,
    int i1,
  ) {
    return _contains(reference.pointer, _id_contains as jni.JMethodIDPtr, i, i1)
        .boolean;
  }

  static final _id_contains1 = _class.instanceMethodId(
    r'contains',
    r'(IIII)Z',
  );

  static final _contains1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: public boolean contains(int i, int i1, int i2, int i3)
  bool contains1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _contains1(
            reference.pointer, _id_contains1 as jni.JMethodIDPtr, i, i1, i2, i3)
        .boolean;
  }

  static final _id_contains2 = _class.instanceMethodId(
    r'contains',
    r'(Landroid/graphics/Rect;)Z',
  );

  static final _contains2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean contains(android.graphics.Rect rect)
  bool contains2(
    Rect rect,
  ) {
    return _contains2(reference.pointer, _id_contains2 as jni.JMethodIDPtr,
            rect.reference.pointer)
        .boolean;
  }

  static final _id_intersect = _class.instanceMethodId(
    r'intersect',
    r'(IIII)Z',
  );

  static final _intersect = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: public boolean intersect(int i, int i1, int i2, int i3)
  bool intersect(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _intersect(
            reference.pointer, _id_intersect as jni.JMethodIDPtr, i, i1, i2, i3)
        .boolean;
  }

  static final _id_intersect1 = _class.instanceMethodId(
    r'intersect',
    r'(Landroid/graphics/Rect;)Z',
  );

  static final _intersect1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean intersect(android.graphics.Rect rect)
  bool intersect1(
    Rect rect,
  ) {
    return _intersect1(reference.pointer, _id_intersect1 as jni.JMethodIDPtr,
            rect.reference.pointer)
        .boolean;
  }

  static final _id_setIntersect = _class.instanceMethodId(
    r'setIntersect',
    r'(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z',
  );

  static final _setIntersect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean setIntersect(android.graphics.Rect rect, android.graphics.Rect rect1)
  bool setIntersect(
    Rect rect,
    Rect rect1,
  ) {
    return _setIntersect(
            reference.pointer,
            _id_setIntersect as jni.JMethodIDPtr,
            rect.reference.pointer,
            rect1.reference.pointer)
        .boolean;
  }

  static final _id_intersects = _class.instanceMethodId(
    r'intersects',
    r'(IIII)Z',
  );

  static final _intersects = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: public boolean intersects(int i, int i1, int i2, int i3)
  bool intersects(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _intersects(reference.pointer, _id_intersects as jni.JMethodIDPtr, i,
            i1, i2, i3)
        .boolean;
  }

  static final _id_intersects1 = _class.staticMethodId(
    r'intersects',
    r'(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z',
  );

  static final _intersects1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean intersects(android.graphics.Rect rect, android.graphics.Rect rect1)
  static bool intersects1(
    Rect rect,
    Rect rect1,
  ) {
    return _intersects1(
            _class.reference.pointer,
            _id_intersects1 as jni.JMethodIDPtr,
            rect.reference.pointer,
            rect1.reference.pointer)
        .boolean;
  }

  static final _id_union = _class.instanceMethodId(
    r'union',
    r'(IIII)V',
  );

  static final _union = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: public void union(int i, int i1, int i2, int i3)
  void union(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _union(reference.pointer, _id_union as jni.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_union1 = _class.instanceMethodId(
    r'union',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _union1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void union(android.graphics.Rect rect)
  void union1(
    Rect rect,
  ) {
    _union1(reference.pointer, _id_union1 as jni.JMethodIDPtr,
            rect.reference.pointer)
        .check();
  }

  static final _id_union2 = _class.instanceMethodId(
    r'union',
    r'(II)V',
  );

  static final _union2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public void union(int i, int i1)
  void union2(
    int i,
    int i1,
  ) {
    _union2(reference.pointer, _id_union2 as jni.JMethodIDPtr, i, i1).check();
  }

  static final _id_sort = _class.instanceMethodId(
    r'sort',
    r'()V',
  );

  static final _sort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void sort()
  void sort() {
    _sort(reference.pointer, _id_sort as jni.JMethodIDPtr).check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_readFromParcel = _class.instanceMethodId(
    r'readFromParcel',
    r'(Landroid/os/Parcel;)V',
  );

  static final _readFromParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void readFromParcel(android.os.Parcel parcel)
  void readFromParcel(
    jni.JObject parcel,
  ) {
    _readFromParcel(reference.pointer, _id_readFromParcel as jni.JMethodIDPtr,
            parcel.reference.pointer)
        .check();
  }
}

final class $RectType extends jni.JObjType<Rect> {
  const $RectType();

  @override
  String get signature => r'Landroid/graphics/Rect;';

  @override
  Rect fromReference(jni.JReference reference) => Rect.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($RectType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($RectType) && other is $RectType;
  }
}
