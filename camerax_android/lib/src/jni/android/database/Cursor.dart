// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../content/ContentResolver.dart' as contentresolver_;

import '../net/Uri.dart' as uri_;

/// from: android.database.Cursor
class Cursor extends jni.JObject {
  @override
  late final jni.JObjType<Cursor> $type = type;

  Cursor.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/database/Cursor');

  /// The type which includes information such as the signature of this class.
  static const type = $CursorType();

  /// from: static public final int FIELD_TYPE_BLOB
  static const FIELD_TYPE_BLOB = 4;

  /// from: static public final int FIELD_TYPE_FLOAT
  static const FIELD_TYPE_FLOAT = 2;

  /// from: static public final int FIELD_TYPE_INTEGER
  static const FIELD_TYPE_INTEGER = 1;

  /// from: static public final int FIELD_TYPE_NULL
  static const FIELD_TYPE_NULL = 0;

  /// from: static public final int FIELD_TYPE_STRING
  static const FIELD_TYPE_STRING = 3;
  static final _id_getCount = _class.instanceMethodId(
    r'getCount',
    r'()I',
  );

  static final _getCount = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getCount()
  int getCount() {
    return _getCount(reference.pointer, _id_getCount as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPosition = _class.instanceMethodId(
    r'getPosition',
    r'()I',
  );

  static final _getPosition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getPosition()
  int getPosition() {
    return _getPosition(reference.pointer, _id_getPosition as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_move = _class.instanceMethodId(
    r'move',
    r'(I)Z',
  );

  static final _move = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract boolean move(int i)
  bool move(
    int i,
  ) {
    return _move(reference.pointer, _id_move as jni.JMethodIDPtr, i).boolean;
  }

  static final _id_moveToPosition = _class.instanceMethodId(
    r'moveToPosition',
    r'(I)Z',
  );

  static final _moveToPosition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract boolean moveToPosition(int i)
  bool moveToPosition(
    int i,
  ) {
    return _moveToPosition(
            reference.pointer, _id_moveToPosition as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_moveToFirst = _class.instanceMethodId(
    r'moveToFirst',
    r'()Z',
  );

  static final _moveToFirst = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean moveToFirst()
  bool moveToFirst() {
    return _moveToFirst(reference.pointer, _id_moveToFirst as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveToLast = _class.instanceMethodId(
    r'moveToLast',
    r'()Z',
  );

  static final _moveToLast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean moveToLast()
  bool moveToLast() {
    return _moveToLast(reference.pointer, _id_moveToLast as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveToNext = _class.instanceMethodId(
    r'moveToNext',
    r'()Z',
  );

  static final _moveToNext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean moveToNext()
  bool moveToNext() {
    return _moveToNext(reference.pointer, _id_moveToNext as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveToPrevious = _class.instanceMethodId(
    r'moveToPrevious',
    r'()Z',
  );

  static final _moveToPrevious = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean moveToPrevious()
  bool moveToPrevious() {
    return _moveToPrevious(
            reference.pointer, _id_moveToPrevious as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isFirst = _class.instanceMethodId(
    r'isFirst',
    r'()Z',
  );

  static final _isFirst = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isFirst()
  bool isFirst() {
    return _isFirst(reference.pointer, _id_isFirst as jni.JMethodIDPtr).boolean;
  }

  static final _id_isLast = _class.instanceMethodId(
    r'isLast',
    r'()Z',
  );

  static final _isLast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isLast()
  bool isLast() {
    return _isLast(reference.pointer, _id_isLast as jni.JMethodIDPtr).boolean;
  }

  static final _id_isBeforeFirst = _class.instanceMethodId(
    r'isBeforeFirst',
    r'()Z',
  );

  static final _isBeforeFirst = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isBeforeFirst()
  bool isBeforeFirst() {
    return _isBeforeFirst(
            reference.pointer, _id_isBeforeFirst as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isAfterLast = _class.instanceMethodId(
    r'isAfterLast',
    r'()Z',
  );

  static final _isAfterLast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isAfterLast()
  bool isAfterLast() {
    return _isAfterLast(reference.pointer, _id_isAfterLast as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getColumnIndex = _class.instanceMethodId(
    r'getColumnIndex',
    r'(Ljava/lang/String;)I',
  );

  static final _getColumnIndex = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getColumnIndex(java.lang.String string)
  int getColumnIndex(
    jni.JString string,
  ) {
    return _getColumnIndex(reference.pointer,
            _id_getColumnIndex as jni.JMethodIDPtr, string.reference.pointer)
        .integer;
  }

  static final _id_getColumnIndexOrThrow = _class.instanceMethodId(
    r'getColumnIndexOrThrow',
    r'(Ljava/lang/String;)I',
  );

  static final _getColumnIndexOrThrow = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getColumnIndexOrThrow(java.lang.String string)
  int getColumnIndexOrThrow(
    jni.JString string,
  ) {
    return _getColumnIndexOrThrow(
            reference.pointer,
            _id_getColumnIndexOrThrow as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_getColumnName = _class.instanceMethodId(
    r'getColumnName',
    r'(I)Ljava/lang/String;',
  );

  static final _getColumnName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.lang.String getColumnName(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getColumnName(
    int i,
  ) {
    return _getColumnName(
            reference.pointer, _id_getColumnName as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_getColumnNames = _class.instanceMethodId(
    r'getColumnNames',
    r'()[Ljava/lang/String;',
  );

  static final _getColumnNames = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] getColumnNames()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getColumnNames() {
    return _getColumnNames(
            reference.pointer, _id_getColumnNames as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getColumnCount = _class.instanceMethodId(
    r'getColumnCount',
    r'()I',
  );

  static final _getColumnCount = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getColumnCount()
  int getColumnCount() {
    return _getColumnCount(
            reference.pointer, _id_getColumnCount as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getBlob = _class.instanceMethodId(
    r'getBlob',
    r'(I)[B',
  );

  static final _getBlob = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract byte[] getBlob(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getBlob(
    int i,
  ) {
    return _getBlob(reference.pointer, _id_getBlob as jni.JMethodIDPtr, i)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(I)Ljava/lang/String;',
  );

  static final _getString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.lang.String getString(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString(
    int i,
  ) {
    return _getString(reference.pointer, _id_getString as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_copyStringToBuffer = _class.instanceMethodId(
    r'copyStringToBuffer',
    r'(ILandroid/database/CharArrayBuffer;)V',
  );

  static final _copyStringToBuffer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void copyStringToBuffer(int i, android.database.CharArrayBuffer charArrayBuffer)
  void copyStringToBuffer(
    int i,
    jni.JObject charArrayBuffer,
  ) {
    _copyStringToBuffer(
            reference.pointer,
            _id_copyStringToBuffer as jni.JMethodIDPtr,
            i,
            charArrayBuffer.reference.pointer)
        .check();
  }

  static final _id_getShort = _class.instanceMethodId(
    r'getShort',
    r'(I)S',
  );

  static final _getShort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallShortMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract short getShort(int i)
  int getShort(
    int i,
  ) {
    return _getShort(reference.pointer, _id_getShort as jni.JMethodIDPtr, i)
        .short;
  }

  static final _id_getInt = _class.instanceMethodId(
    r'getInt',
    r'(I)I',
  );

  static final _getInt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract int getInt(int i)
  int getInt(
    int i,
  ) {
    return _getInt(reference.pointer, _id_getInt as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getLong = _class.instanceMethodId(
    r'getLong',
    r'(I)J',
  );

  static final _getLong = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract long getLong(int i)
  int getLong(
    int i,
  ) {
    return _getLong(reference.pointer, _id_getLong as jni.JMethodIDPtr, i).long;
  }

  static final _id_getFloat = _class.instanceMethodId(
    r'getFloat',
    r'(I)F',
  );

  static final _getFloat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract float getFloat(int i)
  double getFloat(
    int i,
  ) {
    return _getFloat(reference.pointer, _id_getFloat as jni.JMethodIDPtr, i)
        .float;
  }

  static final _id_getDouble = _class.instanceMethodId(
    r'getDouble',
    r'(I)D',
  );

  static final _getDouble = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract double getDouble(int i)
  double getDouble(
    int i,
  ) {
    return _getDouble(reference.pointer, _id_getDouble as jni.JMethodIDPtr, i)
        .doubleFloat;
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'(I)I',
  );

  static final _getType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract int getType(int i)
  int getType(
    int i,
  ) {
    return _getType(reference.pointer, _id_getType as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_isNull1 = _class.instanceMethodId(
    r'isNull',
    r'(I)Z',
  );

  static final _isNull1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract boolean isNull(int i)
  bool isNull1(
    int i,
  ) {
    return _isNull1(reference.pointer, _id_isNull1 as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_deactivate = _class.instanceMethodId(
    r'deactivate',
    r'()V',
  );

  static final _deactivate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void deactivate()
  void deactivate() {
    _deactivate(reference.pointer, _id_deactivate as jni.JMethodIDPtr).check();
  }

  static final _id_requery = _class.instanceMethodId(
    r'requery',
    r'()Z',
  );

  static final _requery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean requery()
  bool requery() {
    return _requery(reference.pointer, _id_requery as jni.JMethodIDPtr).boolean;
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }

  static final _id_isClosed = _class.instanceMethodId(
    r'isClosed',
    r'()Z',
  );

  static final _isClosed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isClosed()
  bool isClosed() {
    return _isClosed(reference.pointer, _id_isClosed as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_registerContentObserver = _class.instanceMethodId(
    r'registerContentObserver',
    r'(Landroid/database/ContentObserver;)V',
  );

  static final _registerContentObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void registerContentObserver(android.database.ContentObserver contentObserver)
  void registerContentObserver(
    jni.JObject contentObserver,
  ) {
    _registerContentObserver(
            reference.pointer,
            _id_registerContentObserver as jni.JMethodIDPtr,
            contentObserver.reference.pointer)
        .check();
  }

  static final _id_unregisterContentObserver = _class.instanceMethodId(
    r'unregisterContentObserver',
    r'(Landroid/database/ContentObserver;)V',
  );

  static final _unregisterContentObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unregisterContentObserver(android.database.ContentObserver contentObserver)
  void unregisterContentObserver(
    jni.JObject contentObserver,
  ) {
    _unregisterContentObserver(
            reference.pointer,
            _id_unregisterContentObserver as jni.JMethodIDPtr,
            contentObserver.reference.pointer)
        .check();
  }

  static final _id_registerDataSetObserver = _class.instanceMethodId(
    r'registerDataSetObserver',
    r'(Landroid/database/DataSetObserver;)V',
  );

  static final _registerDataSetObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void registerDataSetObserver(android.database.DataSetObserver dataSetObserver)
  void registerDataSetObserver(
    jni.JObject dataSetObserver,
  ) {
    _registerDataSetObserver(
            reference.pointer,
            _id_registerDataSetObserver as jni.JMethodIDPtr,
            dataSetObserver.reference.pointer)
        .check();
  }

  static final _id_unregisterDataSetObserver = _class.instanceMethodId(
    r'unregisterDataSetObserver',
    r'(Landroid/database/DataSetObserver;)V',
  );

  static final _unregisterDataSetObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unregisterDataSetObserver(android.database.DataSetObserver dataSetObserver)
  void unregisterDataSetObserver(
    jni.JObject dataSetObserver,
  ) {
    _unregisterDataSetObserver(
            reference.pointer,
            _id_unregisterDataSetObserver as jni.JMethodIDPtr,
            dataSetObserver.reference.pointer)
        .check();
  }

  static final _id_setNotificationUri = _class.instanceMethodId(
    r'setNotificationUri',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;)V',
  );

  static final _setNotificationUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setNotificationUri(android.content.ContentResolver contentResolver, android.net.Uri uri)
  void setNotificationUri(
    contentresolver_.ContentResolver contentResolver,
    uri_.Uri uri,
  ) {
    _setNotificationUri(
            reference.pointer,
            _id_setNotificationUri as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer)
        .check();
  }

  static final _id_setNotificationUris = _class.instanceMethodId(
    r'setNotificationUris',
    r'(Landroid/content/ContentResolver;Ljava/util/List;)V',
  );

  static final _setNotificationUris = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setNotificationUris(android.content.ContentResolver contentResolver, java.util.List list)
  void setNotificationUris(
    contentresolver_.ContentResolver contentResolver,
    jni.JList<uri_.Uri> list,
  ) {
    _setNotificationUris(
            reference.pointer,
            _id_setNotificationUris as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            list.reference.pointer)
        .check();
  }

  static final _id_getNotificationUri = _class.instanceMethodId(
    r'getNotificationUri',
    r'()Landroid/net/Uri;',
  );

  static final _getNotificationUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.net.Uri getNotificationUri()
  /// The returned object must be released after use, by calling the [release] method.
  uri_.Uri getNotificationUri() {
    return _getNotificationUri(
            reference.pointer, _id_getNotificationUri as jni.JMethodIDPtr)
        .object(const uri_.$UriType());
  }

  static final _id_getNotificationUris = _class.instanceMethodId(
    r'getNotificationUris',
    r'()Ljava/util/List;',
  );

  static final _getNotificationUris = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.List getNotificationUris()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<uri_.Uri> getNotificationUris() {
    return _getNotificationUris(
            reference.pointer, _id_getNotificationUris as jni.JMethodIDPtr)
        .object(const jni.JListType(uri_.$UriType()));
  }

  static final _id_getWantsAllOnMoveCalls = _class.instanceMethodId(
    r'getWantsAllOnMoveCalls',
    r'()Z',
  );

  static final _getWantsAllOnMoveCalls = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean getWantsAllOnMoveCalls()
  bool getWantsAllOnMoveCalls() {
    return _getWantsAllOnMoveCalls(
            reference.pointer, _id_getWantsAllOnMoveCalls as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setExtras = _class.instanceMethodId(
    r'setExtras',
    r'(Landroid/os/Bundle;)V',
  );

  static final _setExtras = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setExtras(android.os.Bundle bundle)
  void setExtras(
    jni.JObject bundle,
  ) {
    _setExtras(reference.pointer, _id_setExtras as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_getExtras = _class.instanceMethodId(
    r'getExtras',
    r'()Landroid/os/Bundle;',
  );

  static final _getExtras = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.os.Bundle getExtras()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExtras() {
    return _getExtras(reference.pointer, _id_getExtras as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_respond = _class.instanceMethodId(
    r'respond',
    r'(Landroid/os/Bundle;)Landroid/os/Bundle;',
  );

  static final _respond = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.os.Bundle respond(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject respond(
    jni.JObject bundle,
  ) {
    return _respond(reference.pointer, _id_respond as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .object(const jni.JObjectType());
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CursorImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getCount()I') {
        final $r = _$impls[$p]!.getCount();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'getPosition()I') {
        final $r = _$impls[$p]!.getPosition();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'move(I)Z') {
        final $r = _$impls[$p]!.move(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'moveToPosition(I)Z') {
        final $r = _$impls[$p]!.moveToPosition(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'moveToFirst()Z') {
        final $r = _$impls[$p]!.moveToFirst();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'moveToLast()Z') {
        final $r = _$impls[$p]!.moveToLast();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'moveToNext()Z') {
        final $r = _$impls[$p]!.moveToNext();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'moveToPrevious()Z') {
        final $r = _$impls[$p]!.moveToPrevious();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isFirst()Z') {
        final $r = _$impls[$p]!.isFirst();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isLast()Z') {
        final $r = _$impls[$p]!.isLast();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isBeforeFirst()Z') {
        final $r = _$impls[$p]!.isBeforeFirst();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isAfterLast()Z') {
        final $r = _$impls[$p]!.isAfterLast();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'getColumnIndex(Ljava/lang/String;)I') {
        final $r = _$impls[$p]!.getColumnIndex(
          $a[0].castTo(const jni.JStringType(), releaseOriginal: true),
        );
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'getColumnIndexOrThrow(Ljava/lang/String;)I') {
        final $r = _$impls[$p]!.getColumnIndexOrThrow(
          $a[0].castTo(const jni.JStringType(), releaseOriginal: true),
        );
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'getColumnName(I)Ljava/lang/String;') {
        final $r = _$impls[$p]!.getColumnName(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getColumnNames()[Ljava/lang/String;') {
        final $r = _$impls[$p]!.getColumnNames();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getColumnCount()I') {
        final $r = _$impls[$p]!.getColumnCount();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'getBlob(I)[B') {
        final $r = _$impls[$p]!.getBlob(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getString(I)Ljava/lang/String;') {
        final $r = _$impls[$p]!.getString(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'copyStringToBuffer(ILandroid/database/CharArrayBuffer;)V') {
        _$impls[$p]!.copyStringToBuffer(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r'getShort(I)S') {
        final $r = _$impls[$p]!.getShort(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JShort($r).reference.toPointer();
      }
      if ($d == r'getInt(I)I') {
        final $r = _$impls[$p]!.getInt(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'getLong(I)J') {
        final $r = _$impls[$p]!.getLong(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JLong($r).reference.toPointer();
      }
      if ($d == r'getFloat(I)F') {
        final $r = _$impls[$p]!.getFloat(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JFloat($r).reference.toPointer();
      }
      if ($d == r'getDouble(I)D') {
        final $r = _$impls[$p]!.getDouble(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JDouble($r).reference.toPointer();
      }
      if ($d == r'getType(I)I') {
        final $r = _$impls[$p]!.getType(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'isNull(I)Z') {
        final $r = _$impls[$p]!.isNull1(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'deactivate()V') {
        _$impls[$p]!.deactivate();
        return jni.nullptr;
      }
      if ($d == r'requery()Z') {
        final $r = _$impls[$p]!.requery();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'close()V') {
        _$impls[$p]!.close();
        return jni.nullptr;
      }
      if ($d == r'isClosed()Z') {
        final $r = _$impls[$p]!.isClosed();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d ==
          r'registerContentObserver(Landroid/database/ContentObserver;)V') {
        _$impls[$p]!.registerContentObserver(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r'unregisterContentObserver(Landroid/database/ContentObserver;)V') {
        _$impls[$p]!.unregisterContentObserver(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r'registerDataSetObserver(Landroid/database/DataSetObserver;)V') {
        _$impls[$p]!.registerDataSetObserver(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r'unregisterDataSetObserver(Landroid/database/DataSetObserver;)V') {
        _$impls[$p]!.unregisterDataSetObserver(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r'setNotificationUri(Landroid/content/ContentResolver;Landroid/net/Uri;)V') {
        _$impls[$p]!.setNotificationUri(
          $a[0].castTo(const contentresolver_.$ContentResolverType(),
              releaseOriginal: true),
          $a[1].castTo(const uri_.$UriType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r'setNotificationUris(Landroid/content/ContentResolver;Ljava/util/List;)V') {
        _$impls[$p]!.setNotificationUris(
          $a[0].castTo(const contentresolver_.$ContentResolverType(),
              releaseOriginal: true),
          $a[1].castTo(const jni.JListType(uri_.$UriType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r'getNotificationUri()Landroid/net/Uri;') {
        final $r = _$impls[$p]!.getNotificationUri();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getNotificationUris()Ljava/util/List;') {
        final $r = _$impls[$p]!.getNotificationUris();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getWantsAllOnMoveCalls()Z') {
        final $r = _$impls[$p]!.getWantsAllOnMoveCalls();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'setExtras(Landroid/os/Bundle;)V') {
        _$impls[$p]!.setExtras(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r'getExtras()Landroid/os/Bundle;') {
        final $r = _$impls[$p]!.getExtras();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'respond(Landroid/os/Bundle;)Landroid/os/Bundle;') {
        final $r = _$impls[$p]!.respond(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Cursor.implement(
    $CursorImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Cursor.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.database.Cursor',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $CursorImpl {
  factory $CursorImpl({
    required int Function() getCount,
    required int Function() getPosition,
    required bool Function(int i) move,
    required bool Function(int i) moveToPosition,
    required bool Function() moveToFirst,
    required bool Function() moveToLast,
    required bool Function() moveToNext,
    required bool Function() moveToPrevious,
    required bool Function() isFirst,
    required bool Function() isLast,
    required bool Function() isBeforeFirst,
    required bool Function() isAfterLast,
    required int Function(jni.JString string) getColumnIndex,
    required int Function(jni.JString string) getColumnIndexOrThrow,
    required jni.JString Function(int i) getColumnName,
    required jni.JArray<jni.JString> Function() getColumnNames,
    required int Function() getColumnCount,
    required jni.JArray<jni.jbyte> Function(int i) getBlob,
    required jni.JString Function(int i) getString,
    required void Function(int i, jni.JObject charArrayBuffer)
        copyStringToBuffer,
    required int Function(int i) getShort,
    required int Function(int i) getInt,
    required int Function(int i) getLong,
    required double Function(int i) getFloat,
    required double Function(int i) getDouble,
    required int Function(int i) getType,
    required bool Function(int i) isNull1,
    required void Function() deactivate,
    required bool Function() requery,
    required void Function() close,
    required bool Function() isClosed,
    required void Function(jni.JObject contentObserver) registerContentObserver,
    required void Function(jni.JObject contentObserver)
        unregisterContentObserver,
    required void Function(jni.JObject dataSetObserver) registerDataSetObserver,
    required void Function(jni.JObject dataSetObserver)
        unregisterDataSetObserver,
    required void Function(
            contentresolver_.ContentResolver contentResolver, uri_.Uri uri)
        setNotificationUri,
    required void Function(contentresolver_.ContentResolver contentResolver,
            jni.JList<uri_.Uri> list)
        setNotificationUris,
    required uri_.Uri Function() getNotificationUri,
    required jni.JList<uri_.Uri> Function() getNotificationUris,
    required bool Function() getWantsAllOnMoveCalls,
    required void Function(jni.JObject bundle) setExtras,
    required jni.JObject Function() getExtras,
    required jni.JObject Function(jni.JObject bundle) respond,
  }) = _$CursorImpl;

  int getCount();
  int getPosition();
  bool move(int i);
  bool moveToPosition(int i);
  bool moveToFirst();
  bool moveToLast();
  bool moveToNext();
  bool moveToPrevious();
  bool isFirst();
  bool isLast();
  bool isBeforeFirst();
  bool isAfterLast();
  int getColumnIndex(jni.JString string);
  int getColumnIndexOrThrow(jni.JString string);
  jni.JString getColumnName(int i);
  jni.JArray<jni.JString> getColumnNames();
  int getColumnCount();
  jni.JArray<jni.jbyte> getBlob(int i);
  jni.JString getString(int i);
  void copyStringToBuffer(int i, jni.JObject charArrayBuffer);
  int getShort(int i);
  int getInt(int i);
  int getLong(int i);
  double getFloat(int i);
  double getDouble(int i);
  int getType(int i);
  bool isNull1(int i);
  void deactivate();
  bool requery();
  void close();
  bool isClosed();
  void registerContentObserver(jni.JObject contentObserver);
  void unregisterContentObserver(jni.JObject contentObserver);
  void registerDataSetObserver(jni.JObject dataSetObserver);
  void unregisterDataSetObserver(jni.JObject dataSetObserver);
  void setNotificationUri(
      contentresolver_.ContentResolver contentResolver, uri_.Uri uri);
  void setNotificationUris(contentresolver_.ContentResolver contentResolver,
      jni.JList<uri_.Uri> list);
  uri_.Uri getNotificationUri();
  jni.JList<uri_.Uri> getNotificationUris();
  bool getWantsAllOnMoveCalls();
  void setExtras(jni.JObject bundle);
  jni.JObject getExtras();
  jni.JObject respond(jni.JObject bundle);
}

class _$CursorImpl implements $CursorImpl {
  _$CursorImpl({
    required int Function() getCount,
    required int Function() getPosition,
    required bool Function(int i) move,
    required bool Function(int i) moveToPosition,
    required bool Function() moveToFirst,
    required bool Function() moveToLast,
    required bool Function() moveToNext,
    required bool Function() moveToPrevious,
    required bool Function() isFirst,
    required bool Function() isLast,
    required bool Function() isBeforeFirst,
    required bool Function() isAfterLast,
    required int Function(jni.JString string) getColumnIndex,
    required int Function(jni.JString string) getColumnIndexOrThrow,
    required jni.JString Function(int i) getColumnName,
    required jni.JArray<jni.JString> Function() getColumnNames,
    required int Function() getColumnCount,
    required jni.JArray<jni.jbyte> Function(int i) getBlob,
    required jni.JString Function(int i) getString,
    required void Function(int i, jni.JObject charArrayBuffer)
        copyStringToBuffer,
    required int Function(int i) getShort,
    required int Function(int i) getInt,
    required int Function(int i) getLong,
    required double Function(int i) getFloat,
    required double Function(int i) getDouble,
    required int Function(int i) getType,
    required bool Function(int i) isNull1,
    required void Function() deactivate,
    required bool Function() requery,
    required void Function() close,
    required bool Function() isClosed,
    required void Function(jni.JObject contentObserver) registerContentObserver,
    required void Function(jni.JObject contentObserver)
        unregisterContentObserver,
    required void Function(jni.JObject dataSetObserver) registerDataSetObserver,
    required void Function(jni.JObject dataSetObserver)
        unregisterDataSetObserver,
    required void Function(
            contentresolver_.ContentResolver contentResolver, uri_.Uri uri)
        setNotificationUri,
    required void Function(contentresolver_.ContentResolver contentResolver,
            jni.JList<uri_.Uri> list)
        setNotificationUris,
    required uri_.Uri Function() getNotificationUri,
    required jni.JList<uri_.Uri> Function() getNotificationUris,
    required bool Function() getWantsAllOnMoveCalls,
    required void Function(jni.JObject bundle) setExtras,
    required jni.JObject Function() getExtras,
    required jni.JObject Function(jni.JObject bundle) respond,
  })  : _getCount = getCount,
        _getPosition = getPosition,
        _move = move,
        _moveToPosition = moveToPosition,
        _moveToFirst = moveToFirst,
        _moveToLast = moveToLast,
        _moveToNext = moveToNext,
        _moveToPrevious = moveToPrevious,
        _isFirst = isFirst,
        _isLast = isLast,
        _isBeforeFirst = isBeforeFirst,
        _isAfterLast = isAfterLast,
        _getColumnIndex = getColumnIndex,
        _getColumnIndexOrThrow = getColumnIndexOrThrow,
        _getColumnName = getColumnName,
        _getColumnNames = getColumnNames,
        _getColumnCount = getColumnCount,
        _getBlob = getBlob,
        _getString = getString,
        _copyStringToBuffer = copyStringToBuffer,
        _getShort = getShort,
        _getInt = getInt,
        _getLong = getLong,
        _getFloat = getFloat,
        _getDouble = getDouble,
        _getType = getType,
        _isNull1 = isNull1,
        _deactivate = deactivate,
        _requery = requery,
        _close = close,
        _isClosed = isClosed,
        _registerContentObserver = registerContentObserver,
        _unregisterContentObserver = unregisterContentObserver,
        _registerDataSetObserver = registerDataSetObserver,
        _unregisterDataSetObserver = unregisterDataSetObserver,
        _setNotificationUri = setNotificationUri,
        _setNotificationUris = setNotificationUris,
        _getNotificationUri = getNotificationUri,
        _getNotificationUris = getNotificationUris,
        _getWantsAllOnMoveCalls = getWantsAllOnMoveCalls,
        _setExtras = setExtras,
        _getExtras = getExtras,
        _respond = respond;

  final int Function() _getCount;
  final int Function() _getPosition;
  final bool Function(int i) _move;
  final bool Function(int i) _moveToPosition;
  final bool Function() _moveToFirst;
  final bool Function() _moveToLast;
  final bool Function() _moveToNext;
  final bool Function() _moveToPrevious;
  final bool Function() _isFirst;
  final bool Function() _isLast;
  final bool Function() _isBeforeFirst;
  final bool Function() _isAfterLast;
  final int Function(jni.JString string) _getColumnIndex;
  final int Function(jni.JString string) _getColumnIndexOrThrow;
  final jni.JString Function(int i) _getColumnName;
  final jni.JArray<jni.JString> Function() _getColumnNames;
  final int Function() _getColumnCount;
  final jni.JArray<jni.jbyte> Function(int i) _getBlob;
  final jni.JString Function(int i) _getString;
  final void Function(int i, jni.JObject charArrayBuffer) _copyStringToBuffer;
  final int Function(int i) _getShort;
  final int Function(int i) _getInt;
  final int Function(int i) _getLong;
  final double Function(int i) _getFloat;
  final double Function(int i) _getDouble;
  final int Function(int i) _getType;
  final bool Function(int i) _isNull1;
  final void Function() _deactivate;
  final bool Function() _requery;
  final void Function() _close;
  final bool Function() _isClosed;
  final void Function(jni.JObject contentObserver) _registerContentObserver;
  final void Function(jni.JObject contentObserver) _unregisterContentObserver;
  final void Function(jni.JObject dataSetObserver) _registerDataSetObserver;
  final void Function(jni.JObject dataSetObserver) _unregisterDataSetObserver;
  final void Function(
          contentresolver_.ContentResolver contentResolver, uri_.Uri uri)
      _setNotificationUri;
  final void Function(contentresolver_.ContentResolver contentResolver,
      jni.JList<uri_.Uri> list) _setNotificationUris;
  final uri_.Uri Function() _getNotificationUri;
  final jni.JList<uri_.Uri> Function() _getNotificationUris;
  final bool Function() _getWantsAllOnMoveCalls;
  final void Function(jni.JObject bundle) _setExtras;
  final jni.JObject Function() _getExtras;
  final jni.JObject Function(jni.JObject bundle) _respond;

  int getCount() {
    return _getCount();
  }

  int getPosition() {
    return _getPosition();
  }

  bool move(int i) {
    return _move(i);
  }

  bool moveToPosition(int i) {
    return _moveToPosition(i);
  }

  bool moveToFirst() {
    return _moveToFirst();
  }

  bool moveToLast() {
    return _moveToLast();
  }

  bool moveToNext() {
    return _moveToNext();
  }

  bool moveToPrevious() {
    return _moveToPrevious();
  }

  bool isFirst() {
    return _isFirst();
  }

  bool isLast() {
    return _isLast();
  }

  bool isBeforeFirst() {
    return _isBeforeFirst();
  }

  bool isAfterLast() {
    return _isAfterLast();
  }

  int getColumnIndex(jni.JString string) {
    return _getColumnIndex(string);
  }

  int getColumnIndexOrThrow(jni.JString string) {
    return _getColumnIndexOrThrow(string);
  }

  jni.JString getColumnName(int i) {
    return _getColumnName(i);
  }

  jni.JArray<jni.JString> getColumnNames() {
    return _getColumnNames();
  }

  int getColumnCount() {
    return _getColumnCount();
  }

  jni.JArray<jni.jbyte> getBlob(int i) {
    return _getBlob(i);
  }

  jni.JString getString(int i) {
    return _getString(i);
  }

  void copyStringToBuffer(int i, jni.JObject charArrayBuffer) {
    return _copyStringToBuffer(i, charArrayBuffer);
  }

  int getShort(int i) {
    return _getShort(i);
  }

  int getInt(int i) {
    return _getInt(i);
  }

  int getLong(int i) {
    return _getLong(i);
  }

  double getFloat(int i) {
    return _getFloat(i);
  }

  double getDouble(int i) {
    return _getDouble(i);
  }

  int getType(int i) {
    return _getType(i);
  }

  bool isNull1(int i) {
    return _isNull1(i);
  }

  void deactivate() {
    return _deactivate();
  }

  bool requery() {
    return _requery();
  }

  void close() {
    return _close();
  }

  bool isClosed() {
    return _isClosed();
  }

  void registerContentObserver(jni.JObject contentObserver) {
    return _registerContentObserver(contentObserver);
  }

  void unregisterContentObserver(jni.JObject contentObserver) {
    return _unregisterContentObserver(contentObserver);
  }

  void registerDataSetObserver(jni.JObject dataSetObserver) {
    return _registerDataSetObserver(dataSetObserver);
  }

  void unregisterDataSetObserver(jni.JObject dataSetObserver) {
    return _unregisterDataSetObserver(dataSetObserver);
  }

  void setNotificationUri(
      contentresolver_.ContentResolver contentResolver, uri_.Uri uri) {
    return _setNotificationUri(contentResolver, uri);
  }

  void setNotificationUris(contentresolver_.ContentResolver contentResolver,
      jni.JList<uri_.Uri> list) {
    return _setNotificationUris(contentResolver, list);
  }

  uri_.Uri getNotificationUri() {
    return _getNotificationUri();
  }

  jni.JList<uri_.Uri> getNotificationUris() {
    return _getNotificationUris();
  }

  bool getWantsAllOnMoveCalls() {
    return _getWantsAllOnMoveCalls();
  }

  void setExtras(jni.JObject bundle) {
    return _setExtras(bundle);
  }

  jni.JObject getExtras() {
    return _getExtras();
  }

  jni.JObject respond(jni.JObject bundle) {
    return _respond(bundle);
  }
}

final class $CursorType extends jni.JObjType<Cursor> {
  const $CursorType();

  @override
  String get signature => r'Landroid/database/Cursor;';

  @override
  Cursor fromReference(jni.JReference reference) =>
      Cursor.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CursorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CursorType) && other is $CursorType;
  }
}
