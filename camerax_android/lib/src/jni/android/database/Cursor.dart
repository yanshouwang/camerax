// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../content/ContentResolver.dart' as contentresolver$_;

import '../net/Uri.dart' as uri$_;

/// from: `android.database.Cursor`
class Cursor extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Cursor> $type;

  @jni$_.internal
  Cursor.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/database/Cursor');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Cursor$NullableType();
  static const type = $Cursor$Type();

  /// from: `static public final int FIELD_TYPE_BLOB`
  static const FIELD_TYPE_BLOB = 4;

  /// from: `static public final int FIELD_TYPE_FLOAT`
  static const FIELD_TYPE_FLOAT = 2;

  /// from: `static public final int FIELD_TYPE_INTEGER`
  static const FIELD_TYPE_INTEGER = 1;

  /// from: `static public final int FIELD_TYPE_NULL`
  static const FIELD_TYPE_NULL = 0;

  /// from: `static public final int FIELD_TYPE_STRING`
  static const FIELD_TYPE_STRING = 3;
  static final _id_getCount = _class.instanceMethodId(
    r'getCount',
    r'()I',
  );

  static final _getCount = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract int getCount()`
  int getCount() {
    return _getCount(reference.pointer, _id_getCount as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getPosition = _class.instanceMethodId(
    r'getPosition',
    r'()I',
  );

  static final _getPosition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract int getPosition()`
  int getPosition() {
    return _getPosition(
            reference.pointer, _id_getPosition as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_move = _class.instanceMethodId(
    r'move',
    r'(I)Z',
  );

  static final _move = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract boolean move(int i)`
  bool move(
    int i,
  ) {
    return _move(reference.pointer, _id_move as jni$_.JMethodIDPtr, i).boolean;
  }

  static final _id_moveToPosition = _class.instanceMethodId(
    r'moveToPosition',
    r'(I)Z',
  );

  static final _moveToPosition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract boolean moveToPosition(int i)`
  bool moveToPosition(
    int i,
  ) {
    return _moveToPosition(
            reference.pointer, _id_moveToPosition as jni$_.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_moveToFirst = _class.instanceMethodId(
    r'moveToFirst',
    r'()Z',
  );

  static final _moveToFirst = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean moveToFirst()`
  bool moveToFirst() {
    return _moveToFirst(
            reference.pointer, _id_moveToFirst as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveToLast = _class.instanceMethodId(
    r'moveToLast',
    r'()Z',
  );

  static final _moveToLast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean moveToLast()`
  bool moveToLast() {
    return _moveToLast(reference.pointer, _id_moveToLast as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveToNext = _class.instanceMethodId(
    r'moveToNext',
    r'()Z',
  );

  static final _moveToNext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean moveToNext()`
  bool moveToNext() {
    return _moveToNext(reference.pointer, _id_moveToNext as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveToPrevious = _class.instanceMethodId(
    r'moveToPrevious',
    r'()Z',
  );

  static final _moveToPrevious = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean moveToPrevious()`
  bool moveToPrevious() {
    return _moveToPrevious(
            reference.pointer, _id_moveToPrevious as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isFirst = _class.instanceMethodId(
    r'isFirst',
    r'()Z',
  );

  static final _isFirst = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isFirst()`
  bool isFirst() {
    return _isFirst(reference.pointer, _id_isFirst as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLast = _class.instanceMethodId(
    r'isLast',
    r'()Z',
  );

  static final _isLast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isLast()`
  bool isLast() {
    return _isLast(reference.pointer, _id_isLast as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isBeforeFirst = _class.instanceMethodId(
    r'isBeforeFirst',
    r'()Z',
  );

  static final _isBeforeFirst = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isBeforeFirst()`
  bool isBeforeFirst() {
    return _isBeforeFirst(
            reference.pointer, _id_isBeforeFirst as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isAfterLast = _class.instanceMethodId(
    r'isAfterLast',
    r'()Z',
  );

  static final _isAfterLast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isAfterLast()`
  bool isAfterLast() {
    return _isAfterLast(
            reference.pointer, _id_isAfterLast as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getColumnIndex = _class.instanceMethodId(
    r'getColumnIndex',
    r'(Ljava/lang/String;)I',
  );

  static final _getColumnIndex = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int getColumnIndex(java.lang.String string)`
  int getColumnIndex(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getColumnIndex(reference.pointer,
            _id_getColumnIndex as jni$_.JMethodIDPtr, _$string.pointer)
        .integer;
  }

  static final _id_getColumnIndexOrThrow = _class.instanceMethodId(
    r'getColumnIndexOrThrow',
    r'(Ljava/lang/String;)I',
  );

  static final _getColumnIndexOrThrow = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int getColumnIndexOrThrow(java.lang.String string)`
  int getColumnIndexOrThrow(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getColumnIndexOrThrow(reference.pointer,
            _id_getColumnIndexOrThrow as jni$_.JMethodIDPtr, _$string.pointer)
        .integer;
  }

  static final _id_getColumnName = _class.instanceMethodId(
    r'getColumnName',
    r'(I)Ljava/lang/String;',
  );

  static final _getColumnName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract java.lang.String getColumnName(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getColumnName(
    int i,
  ) {
    return _getColumnName(
            reference.pointer, _id_getColumnName as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getColumnNames = _class.instanceMethodId(
    r'getColumnNames',
    r'()[Ljava/lang/String;',
  );

  static final _getColumnNames = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String[] getColumnNames()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? getColumnNames() {
    return _getColumnNames(
            reference.pointer, _id_getColumnNames as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JString?>?>(
            const jni$_.JArrayNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getColumnCount = _class.instanceMethodId(
    r'getColumnCount',
    r'()I',
  );

  static final _getColumnCount = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract int getColumnCount()`
  int getColumnCount() {
    return _getColumnCount(
            reference.pointer, _id_getColumnCount as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getBlob = _class.instanceMethodId(
    r'getBlob',
    r'(I)[B',
  );

  static final _getBlob = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract byte[] getBlob(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getBlob(
    int i,
  ) {
    return _getBlob(reference.pointer, _id_getBlob as jni$_.JMethodIDPtr, i)
        .object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(I)Ljava/lang/String;',
  );

  static final _getString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract java.lang.String getString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString(
    int i,
  ) {
    return _getString(reference.pointer, _id_getString as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_copyStringToBuffer = _class.instanceMethodId(
    r'copyStringToBuffer',
    r'(ILandroid/database/CharArrayBuffer;)V',
  );

  static final _copyStringToBuffer = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void copyStringToBuffer(int i, android.database.CharArrayBuffer charArrayBuffer)`
  void copyStringToBuffer(
    int i,
    jni$_.JObject? charArrayBuffer,
  ) {
    final _$charArrayBuffer =
        charArrayBuffer?.reference ?? jni$_.jNullReference;
    _copyStringToBuffer(
            reference.pointer,
            _id_copyStringToBuffer as jni$_.JMethodIDPtr,
            i,
            _$charArrayBuffer.pointer)
        .check();
  }

  static final _id_getShort = _class.instanceMethodId(
    r'getShort',
    r'(I)S',
  );

  static final _getShort = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallShortMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract short getShort(int i)`
  int getShort(
    int i,
  ) {
    return _getShort(reference.pointer, _id_getShort as jni$_.JMethodIDPtr, i)
        .short;
  }

  static final _id_getInt = _class.instanceMethodId(
    r'getInt',
    r'(I)I',
  );

  static final _getInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract int getInt(int i)`
  int getInt(
    int i,
  ) {
    return _getInt(reference.pointer, _id_getInt as jni$_.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getLong = _class.instanceMethodId(
    r'getLong',
    r'(I)J',
  );

  static final _getLong = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract long getLong(int i)`
  int getLong(
    int i,
  ) {
    return _getLong(reference.pointer, _id_getLong as jni$_.JMethodIDPtr, i)
        .long;
  }

  static final _id_getFloat = _class.instanceMethodId(
    r'getFloat',
    r'(I)F',
  );

  static final _getFloat = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract float getFloat(int i)`
  double getFloat(
    int i,
  ) {
    return _getFloat(reference.pointer, _id_getFloat as jni$_.JMethodIDPtr, i)
        .float;
  }

  static final _id_getDouble = _class.instanceMethodId(
    r'getDouble',
    r'(I)D',
  );

  static final _getDouble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract double getDouble(int i)`
  double getDouble(
    int i,
  ) {
    return _getDouble(reference.pointer, _id_getDouble as jni$_.JMethodIDPtr, i)
        .doubleFloat;
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'(I)I',
  );

  static final _getType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract int getType(int i)`
  int getType(
    int i,
  ) {
    return _getType(reference.pointer, _id_getType as jni$_.JMethodIDPtr, i)
        .integer;
  }

  static final _id_isNull$1 = _class.instanceMethodId(
    r'isNull',
    r'(I)Z',
  );

  static final _isNull$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract boolean isNull(int i)`
  bool isNull$1(
    int i,
  ) {
    return _isNull$1(reference.pointer, _id_isNull$1 as jni$_.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_deactivate = _class.instanceMethodId(
    r'deactivate',
    r'()V',
  );

  static final _deactivate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void deactivate()`
  void deactivate() {
    _deactivate(reference.pointer, _id_deactivate as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_requery = _class.instanceMethodId(
    r'requery',
    r'()Z',
  );

  static final _requery = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean requery()`
  bool requery() {
    return _requery(reference.pointer, _id_requery as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void close()`
  void close() {
    _close(reference.pointer, _id_close as jni$_.JMethodIDPtr).check();
  }

  static final _id_isClosed = _class.instanceMethodId(
    r'isClosed',
    r'()Z',
  );

  static final _isClosed = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isClosed()`
  bool isClosed() {
    return _isClosed(reference.pointer, _id_isClosed as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_registerContentObserver = _class.instanceMethodId(
    r'registerContentObserver',
    r'(Landroid/database/ContentObserver;)V',
  );

  static final _registerContentObserver = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void registerContentObserver(android.database.ContentObserver contentObserver)`
  void registerContentObserver(
    jni$_.JObject? contentObserver,
  ) {
    final _$contentObserver =
        contentObserver?.reference ?? jni$_.jNullReference;
    _registerContentObserver(
            reference.pointer,
            _id_registerContentObserver as jni$_.JMethodIDPtr,
            _$contentObserver.pointer)
        .check();
  }

  static final _id_unregisterContentObserver = _class.instanceMethodId(
    r'unregisterContentObserver',
    r'(Landroid/database/ContentObserver;)V',
  );

  static final _unregisterContentObserver = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void unregisterContentObserver(android.database.ContentObserver contentObserver)`
  void unregisterContentObserver(
    jni$_.JObject? contentObserver,
  ) {
    final _$contentObserver =
        contentObserver?.reference ?? jni$_.jNullReference;
    _unregisterContentObserver(
            reference.pointer,
            _id_unregisterContentObserver as jni$_.JMethodIDPtr,
            _$contentObserver.pointer)
        .check();
  }

  static final _id_registerDataSetObserver = _class.instanceMethodId(
    r'registerDataSetObserver',
    r'(Landroid/database/DataSetObserver;)V',
  );

  static final _registerDataSetObserver = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void registerDataSetObserver(android.database.DataSetObserver dataSetObserver)`
  void registerDataSetObserver(
    jni$_.JObject? dataSetObserver,
  ) {
    final _$dataSetObserver =
        dataSetObserver?.reference ?? jni$_.jNullReference;
    _registerDataSetObserver(
            reference.pointer,
            _id_registerDataSetObserver as jni$_.JMethodIDPtr,
            _$dataSetObserver.pointer)
        .check();
  }

  static final _id_unregisterDataSetObserver = _class.instanceMethodId(
    r'unregisterDataSetObserver',
    r'(Landroid/database/DataSetObserver;)V',
  );

  static final _unregisterDataSetObserver = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void unregisterDataSetObserver(android.database.DataSetObserver dataSetObserver)`
  void unregisterDataSetObserver(
    jni$_.JObject? dataSetObserver,
  ) {
    final _$dataSetObserver =
        dataSetObserver?.reference ?? jni$_.jNullReference;
    _unregisterDataSetObserver(
            reference.pointer,
            _id_unregisterDataSetObserver as jni$_.JMethodIDPtr,
            _$dataSetObserver.pointer)
        .check();
  }

  static final _id_setNotificationUri = _class.instanceMethodId(
    r'setNotificationUri',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;)V',
  );

  static final _setNotificationUri = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void setNotificationUri(android.content.ContentResolver contentResolver, android.net.Uri uri)`
  void setNotificationUri(
    contentresolver$_.ContentResolver? contentResolver,
    uri$_.Uri? uri,
  ) {
    final _$contentResolver =
        contentResolver?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _setNotificationUri(
            reference.pointer,
            _id_setNotificationUri as jni$_.JMethodIDPtr,
            _$contentResolver.pointer,
            _$uri.pointer)
        .check();
  }

  static final _id_setNotificationUris = _class.instanceMethodId(
    r'setNotificationUris',
    r'(Landroid/content/ContentResolver;Ljava/util/List;)V',
  );

  static final _setNotificationUris = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setNotificationUris(android.content.ContentResolver contentResolver, java.util.List list)`
  void setNotificationUris(
    contentresolver$_.ContentResolver? contentResolver,
    jni$_.JList<uri$_.Uri?>? list,
  ) {
    final _$contentResolver =
        contentResolver?.reference ?? jni$_.jNullReference;
    final _$list = list?.reference ?? jni$_.jNullReference;
    _setNotificationUris(
            reference.pointer,
            _id_setNotificationUris as jni$_.JMethodIDPtr,
            _$contentResolver.pointer,
            _$list.pointer)
        .check();
  }

  static final _id_getNotificationUri = _class.instanceMethodId(
    r'getNotificationUri',
    r'()Landroid/net/Uri;',
  );

  static final _getNotificationUri = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.net.Uri getNotificationUri()`
  /// The returned object must be released after use, by calling the [release] method.
  uri$_.Uri? getNotificationUri() {
    return _getNotificationUri(
            reference.pointer, _id_getNotificationUri as jni$_.JMethodIDPtr)
        .object<uri$_.Uri?>(const uri$_.$Uri$NullableType());
  }

  static final _id_getNotificationUris = _class.instanceMethodId(
    r'getNotificationUris',
    r'()Ljava/util/List;',
  );

  static final _getNotificationUris = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getNotificationUris()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<uri$_.Uri?>? getNotificationUris() {
    return _getNotificationUris(
            reference.pointer, _id_getNotificationUris as jni$_.JMethodIDPtr)
        .object<jni$_.JList<uri$_.Uri?>?>(
            const jni$_.JListNullableType<uri$_.Uri?>(
                uri$_.$Uri$NullableType()));
  }

  static final _id_getWantsAllOnMoveCalls = _class.instanceMethodId(
    r'getWantsAllOnMoveCalls',
    r'()Z',
  );

  static final _getWantsAllOnMoveCalls = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getWantsAllOnMoveCalls()`
  bool getWantsAllOnMoveCalls() {
    return _getWantsAllOnMoveCalls(
            reference.pointer, _id_getWantsAllOnMoveCalls as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setExtras = _class.instanceMethodId(
    r'setExtras',
    r'(Landroid/os/Bundle;)V',
  );

  static final _setExtras = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void setExtras(android.os.Bundle bundle)`
  void setExtras(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _setExtras(reference.pointer, _id_setExtras as jni$_.JMethodIDPtr,
            _$bundle.pointer)
        .check();
  }

  static final _id_getExtras = _class.instanceMethodId(
    r'getExtras',
    r'()Landroid/os/Bundle;',
  );

  static final _getExtras = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.os.Bundle getExtras()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExtras() {
    return _getExtras(reference.pointer, _id_getExtras as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_respond = _class.instanceMethodId(
    r'respond',
    r'(Landroid/os/Bundle;)Landroid/os/Bundle;',
  );

  static final _respond = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.os.Bundle respond(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? respond(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _respond(reference.pointer, _id_respond as jni$_.JMethodIDPtr,
            _$bundle.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Cursor> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getCount()I') {
        final $r = _$impls[$p]!.getCount();
        return jni$_.JInteger($r).reference.toPointer();
      }
      if ($d == r'getPosition()I') {
        final $r = _$impls[$p]!.getPosition();
        return jni$_.JInteger($r).reference.toPointer();
      }
      if ($d == r'move(I)Z') {
        final $r = _$impls[$p]!.move(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'moveToPosition(I)Z') {
        final $r = _$impls[$p]!.moveToPosition(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'moveToFirst()Z') {
        final $r = _$impls[$p]!.moveToFirst();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'moveToLast()Z') {
        final $r = _$impls[$p]!.moveToLast();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'moveToNext()Z') {
        final $r = _$impls[$p]!.moveToNext();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'moveToPrevious()Z') {
        final $r = _$impls[$p]!.moveToPrevious();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isFirst()Z') {
        final $r = _$impls[$p]!.isFirst();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isLast()Z') {
        final $r = _$impls[$p]!.isLast();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isBeforeFirst()Z') {
        final $r = _$impls[$p]!.isBeforeFirst();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isAfterLast()Z') {
        final $r = _$impls[$p]!.isAfterLast();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'getColumnIndex(Ljava/lang/String;)I') {
        final $r = _$impls[$p]!.getColumnIndex(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.JInteger($r).reference.toPointer();
      }
      if ($d == r'getColumnIndexOrThrow(Ljava/lang/String;)I') {
        final $r = _$impls[$p]!.getColumnIndexOrThrow(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.JInteger($r).reference.toPointer();
      }
      if ($d == r'getColumnName(I)Ljava/lang/String;') {
        final $r = _$impls[$p]!.getColumnName(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'getColumnNames()[Ljava/lang/String;') {
        final $r = _$impls[$p]!.getColumnNames();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'getColumnCount()I') {
        final $r = _$impls[$p]!.getColumnCount();
        return jni$_.JInteger($r).reference.toPointer();
      }
      if ($d == r'getBlob(I)[B') {
        final $r = _$impls[$p]!.getBlob(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'getString(I)Ljava/lang/String;') {
        final $r = _$impls[$p]!.getString(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'copyStringToBuffer(ILandroid/database/CharArrayBuffer;)V') {
        _$impls[$p]!.copyStringToBuffer(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'getShort(I)S') {
        final $r = _$impls[$p]!.getShort(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.JShort($r).reference.toPointer();
      }
      if ($d == r'getInt(I)I') {
        final $r = _$impls[$p]!.getInt(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.JInteger($r).reference.toPointer();
      }
      if ($d == r'getLong(I)J') {
        final $r = _$impls[$p]!.getLong(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.JLong($r).reference.toPointer();
      }
      if ($d == r'getFloat(I)F') {
        final $r = _$impls[$p]!.getFloat(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.JFloat($r).reference.toPointer();
      }
      if ($d == r'getDouble(I)D') {
        final $r = _$impls[$p]!.getDouble(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.JDouble($r).reference.toPointer();
      }
      if ($d == r'getType(I)I') {
        final $r = _$impls[$p]!.getType(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.JInteger($r).reference.toPointer();
      }
      if ($d == r'isNull(I)Z') {
        final $r = _$impls[$p]!.isNull$1(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'deactivate()V') {
        _$impls[$p]!.deactivate();
        return jni$_.nullptr;
      }
      if ($d == r'requery()Z') {
        final $r = _$impls[$p]!.requery();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'close()V') {
        _$impls[$p]!.close();
        return jni$_.nullptr;
      }
      if ($d == r'isClosed()Z') {
        final $r = _$impls[$p]!.isClosed();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d ==
          r'registerContentObserver(Landroid/database/ContentObserver;)V') {
        _$impls[$p]!.registerContentObserver(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'unregisterContentObserver(Landroid/database/ContentObserver;)V') {
        _$impls[$p]!.unregisterContentObserver(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'registerDataSetObserver(Landroid/database/DataSetObserver;)V') {
        _$impls[$p]!.registerDataSetObserver(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'unregisterDataSetObserver(Landroid/database/DataSetObserver;)V') {
        _$impls[$p]!.unregisterDataSetObserver(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'setNotificationUri(Landroid/content/ContentResolver;Landroid/net/Uri;)V') {
        _$impls[$p]!.setNotificationUri(
          $a![0]?.as(const contentresolver$_.$ContentResolver$Type(),
              releaseOriginal: true),
          $a![1]?.as(const uri$_.$Uri$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'setNotificationUris(Landroid/content/ContentResolver;Ljava/util/List;)V') {
        _$impls[$p]!.setNotificationUris(
          $a![0]?.as(const contentresolver$_.$ContentResolver$Type(),
              releaseOriginal: true),
          $a![1]?.as(
              const jni$_.JListType<uri$_.Uri?>(uri$_.$Uri$NullableType()),
              releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'getNotificationUri()Landroid/net/Uri;') {
        final $r = _$impls[$p]!.getNotificationUri();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'getNotificationUris()Ljava/util/List;') {
        final $r = _$impls[$p]!.getNotificationUris();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'getWantsAllOnMoveCalls()Z') {
        final $r = _$impls[$p]!.getWantsAllOnMoveCalls();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'setExtras(Landroid/os/Bundle;)V') {
        _$impls[$p]!.setExtras(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'getExtras()Landroid/os/Bundle;') {
        final $r = _$impls[$p]!.getExtras();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'respond(Landroid/os/Bundle;)Landroid/os/Bundle;') {
        final $r = _$impls[$p]!.respond(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Cursor $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.database.Cursor',
      $p,
      _$invokePointer,
      [
        if ($impl.copyStringToBuffer$async)
          r'copyStringToBuffer(ILandroid/database/CharArrayBuffer;)V',
        if ($impl.deactivate$async) r'deactivate()V',
        if ($impl.close$async) r'close()V',
        if ($impl.registerContentObserver$async)
          r'registerContentObserver(Landroid/database/ContentObserver;)V',
        if ($impl.unregisterContentObserver$async)
          r'unregisterContentObserver(Landroid/database/ContentObserver;)V',
        if ($impl.registerDataSetObserver$async)
          r'registerDataSetObserver(Landroid/database/DataSetObserver;)V',
        if ($impl.unregisterDataSetObserver$async)
          r'unregisterDataSetObserver(Landroid/database/DataSetObserver;)V',
        if ($impl.setNotificationUri$async)
          r'setNotificationUri(Landroid/content/ContentResolver;Landroid/net/Uri;)V',
        if ($impl.setNotificationUris$async)
          r'setNotificationUris(Landroid/content/ContentResolver;Ljava/util/List;)V',
        if ($impl.setExtras$async) r'setExtras(Landroid/os/Bundle;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Cursor.implement(
    $Cursor $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Cursor.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Cursor {
  factory $Cursor({
    required int Function() getCount,
    required int Function() getPosition,
    required bool Function(int i) move,
    required bool Function(int i) moveToPosition,
    required bool Function() moveToFirst,
    required bool Function() moveToLast,
    required bool Function() moveToNext,
    required bool Function() moveToPrevious,
    required bool Function() isFirst,
    required bool Function() isLast,
    required bool Function() isBeforeFirst,
    required bool Function() isAfterLast,
    required int Function(jni$_.JString? string) getColumnIndex,
    required int Function(jni$_.JString? string) getColumnIndexOrThrow,
    required jni$_.JString? Function(int i) getColumnName,
    required jni$_.JArray<jni$_.JString?>? Function() getColumnNames,
    required int Function() getColumnCount,
    required jni$_.JByteArray? Function(int i) getBlob,
    required jni$_.JString? Function(int i) getString,
    required void Function(int i, jni$_.JObject? charArrayBuffer)
        copyStringToBuffer,
    bool copyStringToBuffer$async,
    required int Function(int i) getShort,
    required int Function(int i) getInt,
    required int Function(int i) getLong,
    required double Function(int i) getFloat,
    required double Function(int i) getDouble,
    required int Function(int i) getType,
    required bool Function(int i) isNull$1,
    required void Function() deactivate,
    bool deactivate$async,
    required bool Function() requery,
    required void Function() close,
    bool close$async,
    required bool Function() isClosed,
    required void Function(jni$_.JObject? contentObserver)
        registerContentObserver,
    bool registerContentObserver$async,
    required void Function(jni$_.JObject? contentObserver)
        unregisterContentObserver,
    bool unregisterContentObserver$async,
    required void Function(jni$_.JObject? dataSetObserver)
        registerDataSetObserver,
    bool registerDataSetObserver$async,
    required void Function(jni$_.JObject? dataSetObserver)
        unregisterDataSetObserver,
    bool unregisterDataSetObserver$async,
    required void Function(
            contentresolver$_.ContentResolver? contentResolver, uri$_.Uri? uri)
        setNotificationUri,
    bool setNotificationUri$async,
    required void Function(contentresolver$_.ContentResolver? contentResolver,
            jni$_.JList<uri$_.Uri?>? list)
        setNotificationUris,
    bool setNotificationUris$async,
    required uri$_.Uri? Function() getNotificationUri,
    required jni$_.JList<uri$_.Uri?>? Function() getNotificationUris,
    required bool Function() getWantsAllOnMoveCalls,
    required void Function(jni$_.JObject? bundle) setExtras,
    bool setExtras$async,
    required jni$_.JObject? Function() getExtras,
    required jni$_.JObject? Function(jni$_.JObject? bundle) respond,
  }) = _$Cursor;

  int getCount();
  int getPosition();
  bool move(int i);
  bool moveToPosition(int i);
  bool moveToFirst();
  bool moveToLast();
  bool moveToNext();
  bool moveToPrevious();
  bool isFirst();
  bool isLast();
  bool isBeforeFirst();
  bool isAfterLast();
  int getColumnIndex(jni$_.JString? string);
  int getColumnIndexOrThrow(jni$_.JString? string);
  jni$_.JString? getColumnName(int i);
  jni$_.JArray<jni$_.JString?>? getColumnNames();
  int getColumnCount();
  jni$_.JByteArray? getBlob(int i);
  jni$_.JString? getString(int i);
  void copyStringToBuffer(int i, jni$_.JObject? charArrayBuffer);
  bool get copyStringToBuffer$async => false;
  int getShort(int i);
  int getInt(int i);
  int getLong(int i);
  double getFloat(int i);
  double getDouble(int i);
  int getType(int i);
  bool isNull$1(int i);
  void deactivate();
  bool get deactivate$async => false;
  bool requery();
  void close();
  bool get close$async => false;
  bool isClosed();
  void registerContentObserver(jni$_.JObject? contentObserver);
  bool get registerContentObserver$async => false;
  void unregisterContentObserver(jni$_.JObject? contentObserver);
  bool get unregisterContentObserver$async => false;
  void registerDataSetObserver(jni$_.JObject? dataSetObserver);
  bool get registerDataSetObserver$async => false;
  void unregisterDataSetObserver(jni$_.JObject? dataSetObserver);
  bool get unregisterDataSetObserver$async => false;
  void setNotificationUri(
      contentresolver$_.ContentResolver? contentResolver, uri$_.Uri? uri);
  bool get setNotificationUri$async => false;
  void setNotificationUris(contentresolver$_.ContentResolver? contentResolver,
      jni$_.JList<uri$_.Uri?>? list);
  bool get setNotificationUris$async => false;
  uri$_.Uri? getNotificationUri();
  jni$_.JList<uri$_.Uri?>? getNotificationUris();
  bool getWantsAllOnMoveCalls();
  void setExtras(jni$_.JObject? bundle);
  bool get setExtras$async => false;
  jni$_.JObject? getExtras();
  jni$_.JObject? respond(jni$_.JObject? bundle);
}

final class _$Cursor with $Cursor {
  _$Cursor({
    required int Function() getCount,
    required int Function() getPosition,
    required bool Function(int i) move,
    required bool Function(int i) moveToPosition,
    required bool Function() moveToFirst,
    required bool Function() moveToLast,
    required bool Function() moveToNext,
    required bool Function() moveToPrevious,
    required bool Function() isFirst,
    required bool Function() isLast,
    required bool Function() isBeforeFirst,
    required bool Function() isAfterLast,
    required int Function(jni$_.JString? string) getColumnIndex,
    required int Function(jni$_.JString? string) getColumnIndexOrThrow,
    required jni$_.JString? Function(int i) getColumnName,
    required jni$_.JArray<jni$_.JString?>? Function() getColumnNames,
    required int Function() getColumnCount,
    required jni$_.JByteArray? Function(int i) getBlob,
    required jni$_.JString? Function(int i) getString,
    required void Function(int i, jni$_.JObject? charArrayBuffer)
        copyStringToBuffer,
    this.copyStringToBuffer$async = false,
    required int Function(int i) getShort,
    required int Function(int i) getInt,
    required int Function(int i) getLong,
    required double Function(int i) getFloat,
    required double Function(int i) getDouble,
    required int Function(int i) getType,
    required bool Function(int i) isNull$1,
    required void Function() deactivate,
    this.deactivate$async = false,
    required bool Function() requery,
    required void Function() close,
    this.close$async = false,
    required bool Function() isClosed,
    required void Function(jni$_.JObject? contentObserver)
        registerContentObserver,
    this.registerContentObserver$async = false,
    required void Function(jni$_.JObject? contentObserver)
        unregisterContentObserver,
    this.unregisterContentObserver$async = false,
    required void Function(jni$_.JObject? dataSetObserver)
        registerDataSetObserver,
    this.registerDataSetObserver$async = false,
    required void Function(jni$_.JObject? dataSetObserver)
        unregisterDataSetObserver,
    this.unregisterDataSetObserver$async = false,
    required void Function(
            contentresolver$_.ContentResolver? contentResolver, uri$_.Uri? uri)
        setNotificationUri,
    this.setNotificationUri$async = false,
    required void Function(contentresolver$_.ContentResolver? contentResolver,
            jni$_.JList<uri$_.Uri?>? list)
        setNotificationUris,
    this.setNotificationUris$async = false,
    required uri$_.Uri? Function() getNotificationUri,
    required jni$_.JList<uri$_.Uri?>? Function() getNotificationUris,
    required bool Function() getWantsAllOnMoveCalls,
    required void Function(jni$_.JObject? bundle) setExtras,
    this.setExtras$async = false,
    required jni$_.JObject? Function() getExtras,
    required jni$_.JObject? Function(jni$_.JObject? bundle) respond,
  })  : _getCount = getCount,
        _getPosition = getPosition,
        _move = move,
        _moveToPosition = moveToPosition,
        _moveToFirst = moveToFirst,
        _moveToLast = moveToLast,
        _moveToNext = moveToNext,
        _moveToPrevious = moveToPrevious,
        _isFirst = isFirst,
        _isLast = isLast,
        _isBeforeFirst = isBeforeFirst,
        _isAfterLast = isAfterLast,
        _getColumnIndex = getColumnIndex,
        _getColumnIndexOrThrow = getColumnIndexOrThrow,
        _getColumnName = getColumnName,
        _getColumnNames = getColumnNames,
        _getColumnCount = getColumnCount,
        _getBlob = getBlob,
        _getString = getString,
        _copyStringToBuffer = copyStringToBuffer,
        _getShort = getShort,
        _getInt = getInt,
        _getLong = getLong,
        _getFloat = getFloat,
        _getDouble = getDouble,
        _getType = getType,
        _isNull$1 = isNull$1,
        _deactivate = deactivate,
        _requery = requery,
        _close = close,
        _isClosed = isClosed,
        _registerContentObserver = registerContentObserver,
        _unregisterContentObserver = unregisterContentObserver,
        _registerDataSetObserver = registerDataSetObserver,
        _unregisterDataSetObserver = unregisterDataSetObserver,
        _setNotificationUri = setNotificationUri,
        _setNotificationUris = setNotificationUris,
        _getNotificationUri = getNotificationUri,
        _getNotificationUris = getNotificationUris,
        _getWantsAllOnMoveCalls = getWantsAllOnMoveCalls,
        _setExtras = setExtras,
        _getExtras = getExtras,
        _respond = respond;

  final int Function() _getCount;
  final int Function() _getPosition;
  final bool Function(int i) _move;
  final bool Function(int i) _moveToPosition;
  final bool Function() _moveToFirst;
  final bool Function() _moveToLast;
  final bool Function() _moveToNext;
  final bool Function() _moveToPrevious;
  final bool Function() _isFirst;
  final bool Function() _isLast;
  final bool Function() _isBeforeFirst;
  final bool Function() _isAfterLast;
  final int Function(jni$_.JString? string) _getColumnIndex;
  final int Function(jni$_.JString? string) _getColumnIndexOrThrow;
  final jni$_.JString? Function(int i) _getColumnName;
  final jni$_.JArray<jni$_.JString?>? Function() _getColumnNames;
  final int Function() _getColumnCount;
  final jni$_.JByteArray? Function(int i) _getBlob;
  final jni$_.JString? Function(int i) _getString;
  final void Function(int i, jni$_.JObject? charArrayBuffer)
      _copyStringToBuffer;
  final bool copyStringToBuffer$async;
  final int Function(int i) _getShort;
  final int Function(int i) _getInt;
  final int Function(int i) _getLong;
  final double Function(int i) _getFloat;
  final double Function(int i) _getDouble;
  final int Function(int i) _getType;
  final bool Function(int i) _isNull$1;
  final void Function() _deactivate;
  final bool deactivate$async;
  final bool Function() _requery;
  final void Function() _close;
  final bool close$async;
  final bool Function() _isClosed;
  final void Function(jni$_.JObject? contentObserver) _registerContentObserver;
  final bool registerContentObserver$async;
  final void Function(jni$_.JObject? contentObserver)
      _unregisterContentObserver;
  final bool unregisterContentObserver$async;
  final void Function(jni$_.JObject? dataSetObserver) _registerDataSetObserver;
  final bool registerDataSetObserver$async;
  final void Function(jni$_.JObject? dataSetObserver)
      _unregisterDataSetObserver;
  final bool unregisterDataSetObserver$async;
  final void Function(
          contentresolver$_.ContentResolver? contentResolver, uri$_.Uri? uri)
      _setNotificationUri;
  final bool setNotificationUri$async;
  final void Function(contentresolver$_.ContentResolver? contentResolver,
      jni$_.JList<uri$_.Uri?>? list) _setNotificationUris;
  final bool setNotificationUris$async;
  final uri$_.Uri? Function() _getNotificationUri;
  final jni$_.JList<uri$_.Uri?>? Function() _getNotificationUris;
  final bool Function() _getWantsAllOnMoveCalls;
  final void Function(jni$_.JObject? bundle) _setExtras;
  final bool setExtras$async;
  final jni$_.JObject? Function() _getExtras;
  final jni$_.JObject? Function(jni$_.JObject? bundle) _respond;

  int getCount() {
    return _getCount();
  }

  int getPosition() {
    return _getPosition();
  }

  bool move(int i) {
    return _move(i);
  }

  bool moveToPosition(int i) {
    return _moveToPosition(i);
  }

  bool moveToFirst() {
    return _moveToFirst();
  }

  bool moveToLast() {
    return _moveToLast();
  }

  bool moveToNext() {
    return _moveToNext();
  }

  bool moveToPrevious() {
    return _moveToPrevious();
  }

  bool isFirst() {
    return _isFirst();
  }

  bool isLast() {
    return _isLast();
  }

  bool isBeforeFirst() {
    return _isBeforeFirst();
  }

  bool isAfterLast() {
    return _isAfterLast();
  }

  int getColumnIndex(jni$_.JString? string) {
    return _getColumnIndex(string);
  }

  int getColumnIndexOrThrow(jni$_.JString? string) {
    return _getColumnIndexOrThrow(string);
  }

  jni$_.JString? getColumnName(int i) {
    return _getColumnName(i);
  }

  jni$_.JArray<jni$_.JString?>? getColumnNames() {
    return _getColumnNames();
  }

  int getColumnCount() {
    return _getColumnCount();
  }

  jni$_.JByteArray? getBlob(int i) {
    return _getBlob(i);
  }

  jni$_.JString? getString(int i) {
    return _getString(i);
  }

  void copyStringToBuffer(int i, jni$_.JObject? charArrayBuffer) {
    return _copyStringToBuffer(i, charArrayBuffer);
  }

  int getShort(int i) {
    return _getShort(i);
  }

  int getInt(int i) {
    return _getInt(i);
  }

  int getLong(int i) {
    return _getLong(i);
  }

  double getFloat(int i) {
    return _getFloat(i);
  }

  double getDouble(int i) {
    return _getDouble(i);
  }

  int getType(int i) {
    return _getType(i);
  }

  bool isNull$1(int i) {
    return _isNull$1(i);
  }

  void deactivate() {
    return _deactivate();
  }

  bool requery() {
    return _requery();
  }

  void close() {
    return _close();
  }

  bool isClosed() {
    return _isClosed();
  }

  void registerContentObserver(jni$_.JObject? contentObserver) {
    return _registerContentObserver(contentObserver);
  }

  void unregisterContentObserver(jni$_.JObject? contentObserver) {
    return _unregisterContentObserver(contentObserver);
  }

  void registerDataSetObserver(jni$_.JObject? dataSetObserver) {
    return _registerDataSetObserver(dataSetObserver);
  }

  void unregisterDataSetObserver(jni$_.JObject? dataSetObserver) {
    return _unregisterDataSetObserver(dataSetObserver);
  }

  void setNotificationUri(
      contentresolver$_.ContentResolver? contentResolver, uri$_.Uri? uri) {
    return _setNotificationUri(contentResolver, uri);
  }

  void setNotificationUris(contentresolver$_.ContentResolver? contentResolver,
      jni$_.JList<uri$_.Uri?>? list) {
    return _setNotificationUris(contentResolver, list);
  }

  uri$_.Uri? getNotificationUri() {
    return _getNotificationUri();
  }

  jni$_.JList<uri$_.Uri?>? getNotificationUris() {
    return _getNotificationUris();
  }

  bool getWantsAllOnMoveCalls() {
    return _getWantsAllOnMoveCalls();
  }

  void setExtras(jni$_.JObject? bundle) {
    return _setExtras(bundle);
  }

  jni$_.JObject? getExtras() {
    return _getExtras();
  }

  jni$_.JObject? respond(jni$_.JObject? bundle) {
    return _respond(bundle);
  }
}

final class $Cursor$NullableType extends jni$_.JObjType<Cursor?> {
  @jni$_.internal
  const $Cursor$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/database/Cursor;';

  @jni$_.internal
  @core$_.override
  Cursor? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Cursor.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Cursor?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Cursor$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Cursor$NullableType) &&
        other is $Cursor$NullableType;
  }
}

final class $Cursor$Type extends jni$_.JObjType<Cursor> {
  @jni$_.internal
  const $Cursor$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/database/Cursor;';

  @jni$_.internal
  @core$_.override
  Cursor fromReference(jni$_.JReference reference) => Cursor.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Cursor?> get nullableType => const $Cursor$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Cursor$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Cursor$Type) && other is $Cursor$Type;
  }
}
