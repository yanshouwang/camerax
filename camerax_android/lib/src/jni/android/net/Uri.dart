// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../java/io/File.dart' as file$_;

/// from: `android.net.Uri$Builder`
class Uri$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Uri$Builder> $type;

  @jni$_.internal
  Uri$Builder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/net/Uri$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Uri$Builder$NullableType();
  static const type = $Uri$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Uri$Builder() {
    return Uri$Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_scheme = _class.instanceMethodId(
    r'scheme',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _scheme = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder scheme(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? scheme(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _scheme(reference.pointer, _id_scheme as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_opaquePart = _class.instanceMethodId(
    r'opaquePart',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _opaquePart = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder opaquePart(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? opaquePart(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _opaquePart(reference.pointer, _id_opaquePart as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_encodedOpaquePart = _class.instanceMethodId(
    r'encodedOpaquePart',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _encodedOpaquePart = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder encodedOpaquePart(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? encodedOpaquePart(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encodedOpaquePart(reference.pointer,
            _id_encodedOpaquePart as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_authority = _class.instanceMethodId(
    r'authority',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _authority = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder authority(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? authority(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _authority(reference.pointer, _id_authority as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_encodedAuthority = _class.instanceMethodId(
    r'encodedAuthority',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _encodedAuthority = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder encodedAuthority(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? encodedAuthority(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encodedAuthority(reference.pointer,
            _id_encodedAuthority as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_path = _class.instanceMethodId(
    r'path',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _path = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder path(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? path(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _path(
            reference.pointer, _id_path as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_encodedPath = _class.instanceMethodId(
    r'encodedPath',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _encodedPath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder encodedPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? encodedPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encodedPath(reference.pointer,
            _id_encodedPath as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_appendPath = _class.instanceMethodId(
    r'appendPath',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _appendPath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder appendPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? appendPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _appendPath(reference.pointer, _id_appendPath as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_appendEncodedPath = _class.instanceMethodId(
    r'appendEncodedPath',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _appendEncodedPath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder appendEncodedPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? appendEncodedPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _appendEncodedPath(reference.pointer,
            _id_appendEncodedPath as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_query = _class.instanceMethodId(
    r'query',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _query = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder query(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? query(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _query(reference.pointer, _id_query as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_encodedQuery = _class.instanceMethodId(
    r'encodedQuery',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _encodedQuery = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder encodedQuery(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? encodedQuery(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encodedQuery(reference.pointer,
            _id_encodedQuery as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_fragment = _class.instanceMethodId(
    r'fragment',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _fragment = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder fragment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? fragment(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fragment(reference.pointer, _id_fragment as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_encodedFragment = _class.instanceMethodId(
    r'encodedFragment',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _encodedFragment = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder encodedFragment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? encodedFragment(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encodedFragment(reference.pointer,
            _id_encodedFragment as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_appendQueryParameter = _class.instanceMethodId(
    r'appendQueryParameter',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _appendQueryParameter = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.net.Uri$Builder appendQueryParameter(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? appendQueryParameter(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _appendQueryParameter(
            reference.pointer,
            _id_appendQueryParameter as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_clearQuery = _class.instanceMethodId(
    r'clearQuery',
    r'()Landroid/net/Uri$Builder;',
  );

  static final _clearQuery = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.net.Uri$Builder clearQuery()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? clearQuery() {
    return _clearQuery(reference.pointer, _id_clearQuery as jni$_.JMethodIDPtr)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroid/net/Uri;',
  );

  static final _build = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.net.Uri build()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri? build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr)
        .object<Uri?>(const $Uri$NullableType());
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $Uri$Builder$NullableType extends jni$_.JObjType<Uri$Builder?> {
  @jni$_.internal
  const $Uri$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/net/Uri$Builder;';

  @jni$_.internal
  @core$_.override
  Uri$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Uri$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Uri$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Uri$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri$Builder$NullableType) &&
        other is $Uri$Builder$NullableType;
  }
}

final class $Uri$Builder$Type extends jni$_.JObjType<Uri$Builder> {
  @jni$_.internal
  const $Uri$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/net/Uri$Builder;';

  @jni$_.internal
  @core$_.override
  Uri$Builder fromReference(jni$_.JReference reference) =>
      Uri$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Uri$Builder?> get nullableType =>
      const $Uri$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Uri$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri$Builder$Type) &&
        other is $Uri$Builder$Type;
  }
}

/// from: `android.net.Uri`
class Uri extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Uri> $type;

  @jni$_.internal
  Uri.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/net/Uri');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Uri$NullableType();
  static const type = $Uri$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_EMPTY = _class.staticFieldId(
    r'EMPTY',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri EMPTY`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get EMPTY => _id_EMPTY.get(_class, const $Uri$NullableType());

  static final _id_isHierarchical = _class.instanceMethodId(
    r'isHierarchical',
    r'()Z',
  );

  static final _isHierarchical = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isHierarchical()`
  bool isHierarchical() {
    return _isHierarchical(
            reference.pointer, _id_isHierarchical as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isOpaque = _class.instanceMethodId(
    r'isOpaque',
    r'()Z',
  );

  static final _isOpaque = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isOpaque()`
  bool isOpaque() {
    return _isOpaque(reference.pointer, _id_isOpaque as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isRelative = _class.instanceMethodId(
    r'isRelative',
    r'()Z',
  );

  static final _isRelative = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isRelative()`
  bool isRelative() {
    return _isRelative(reference.pointer, _id_isRelative as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isAbsolute = _class.instanceMethodId(
    r'isAbsolute',
    r'()Z',
  );

  static final _isAbsolute = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isAbsolute()`
  bool isAbsolute() {
    return _isAbsolute(reference.pointer, _id_isAbsolute as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getScheme = _class.instanceMethodId(
    r'getScheme',
    r'()Ljava/lang/String;',
  );

  static final _getScheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getScheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getScheme() {
    return _getScheme(reference.pointer, _id_getScheme as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSchemeSpecificPart = _class.instanceMethodId(
    r'getSchemeSpecificPart',
    r'()Ljava/lang/String;',
  );

  static final _getSchemeSpecificPart = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getSchemeSpecificPart()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSchemeSpecificPart() {
    return _getSchemeSpecificPart(
            reference.pointer, _id_getSchemeSpecificPart as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedSchemeSpecificPart = _class.instanceMethodId(
    r'getEncodedSchemeSpecificPart',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedSchemeSpecificPart =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public abstract java.lang.String getEncodedSchemeSpecificPart()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedSchemeSpecificPart() {
    return _getEncodedSchemeSpecificPart(reference.pointer,
            _id_getEncodedSchemeSpecificPart as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAuthority = _class.instanceMethodId(
    r'getAuthority',
    r'()Ljava/lang/String;',
  );

  static final _getAuthority = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getAuthority()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAuthority() {
    return _getAuthority(
            reference.pointer, _id_getAuthority as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedAuthority = _class.instanceMethodId(
    r'getEncodedAuthority',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedAuthority = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getEncodedAuthority()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedAuthority() {
    return _getEncodedAuthority(
            reference.pointer, _id_getEncodedAuthority as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getUserInfo = _class.instanceMethodId(
    r'getUserInfo',
    r'()Ljava/lang/String;',
  );

  static final _getUserInfo = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getUserInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getUserInfo() {
    return _getUserInfo(
            reference.pointer, _id_getUserInfo as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedUserInfo = _class.instanceMethodId(
    r'getEncodedUserInfo',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedUserInfo = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getEncodedUserInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedUserInfo() {
    return _getEncodedUserInfo(
            reference.pointer, _id_getEncodedUserInfo as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getHost = _class.instanceMethodId(
    r'getHost',
    r'()Ljava/lang/String;',
  );

  static final _getHost = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getHost()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getHost() {
    return _getHost(reference.pointer, _id_getHost as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPort = _class.instanceMethodId(
    r'getPort',
    r'()I',
  );

  static final _getPort = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract int getPort()`
  int getPort() {
    return _getPort(reference.pointer, _id_getPort as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getPath = _class.instanceMethodId(
    r'getPath',
    r'()Ljava/lang/String;',
  );

  static final _getPath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getPath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPath() {
    return _getPath(reference.pointer, _id_getPath as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedPath = _class.instanceMethodId(
    r'getEncodedPath',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedPath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getEncodedPath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedPath() {
    return _getEncodedPath(
            reference.pointer, _id_getEncodedPath as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getQuery = _class.instanceMethodId(
    r'getQuery',
    r'()Ljava/lang/String;',
  );

  static final _getQuery = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getQuery()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getQuery() {
    return _getQuery(reference.pointer, _id_getQuery as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedQuery = _class.instanceMethodId(
    r'getEncodedQuery',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedQuery = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getEncodedQuery()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedQuery() {
    return _getEncodedQuery(
            reference.pointer, _id_getEncodedQuery as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getFragment = _class.instanceMethodId(
    r'getFragment',
    r'()Ljava/lang/String;',
  );

  static final _getFragment = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getFragment()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getFragment() {
    return _getFragment(
            reference.pointer, _id_getFragment as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedFragment = _class.instanceMethodId(
    r'getEncodedFragment',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedFragment = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getEncodedFragment()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedFragment() {
    return _getEncodedFragment(
            reference.pointer, _id_getEncodedFragment as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPathSegments = _class.instanceMethodId(
    r'getPathSegments',
    r'()Ljava/util/List;',
  );

  static final _getPathSegments = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.util.List getPathSegments()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JString?>? getPathSegments() {
    return _getPathSegments(
            reference.pointer, _id_getPathSegments as jni$_.JMethodIDPtr)
        .object<jni$_.JList<jni$_.JString?>?>(
            const jni$_.JListNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getLastPathSegment = _class.instanceMethodId(
    r'getLastPathSegment',
    r'()Ljava/lang/String;',
  );

  static final _getLastPathSegment = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getLastPathSegment()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getLastPathSegment() {
    return _getLastPathSegment(
            reference.pointer, _id_getLastPathSegment as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_compareTo = _class.instanceMethodId(
    r'compareTo',
    r'(Landroid/net/Uri;)I',
  );

  static final _compareTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public int compareTo(android.net.Uri uri)`
  int compareTo(
    Uri? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _compareTo(reference.pointer, _id_compareTo as jni$_.JMethodIDPtr,
            _$uri.pointer)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroid/net/Uri$Builder;',
  );

  static final _buildUpon = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.net.Uri$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? buildUpon() {
    return _buildUpon(reference.pointer, _id_buildUpon as jni$_.JMethodIDPtr)
        .object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_parse = _class.staticMethodId(
    r'parse',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _parse = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.net.Uri parse(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? parse(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _parse(_class.reference.pointer, _id_parse as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Uri?>(const $Uri$NullableType());
  }

  static final _id_fromFile = _class.staticMethodId(
    r'fromFile',
    r'(Ljava/io/File;)Landroid/net/Uri;',
  );

  static final _fromFile = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.net.Uri fromFile(java.io.File file)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? fromFile(
    file$_.File? file,
  ) {
    final _$file = file?.reference ?? jni$_.jNullReference;
    return _fromFile(_class.reference.pointer,
            _id_fromFile as jni$_.JMethodIDPtr, _$file.pointer)
        .object<Uri?>(const $Uri$NullableType());
  }

  static final _id_fromParts = _class.staticMethodId(
    r'fromParts',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _fromParts = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.net.Uri fromParts(java.lang.String string, java.lang.String string1, java.lang.String string2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? fromParts(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JString? string2,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    return _fromParts(
            _class.reference.pointer,
            _id_fromParts as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer,
            _$string2.pointer)
        .object<Uri?>(const $Uri$NullableType());
  }

  static final _id_getQueryParameterNames = _class.instanceMethodId(
    r'getQueryParameterNames',
    r'()Ljava/util/Set;',
  );

  static final _getQueryParameterNames = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.util.Set getQueryParameterNames()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<jni$_.JString?>? getQueryParameterNames() {
    return _getQueryParameterNames(
            reference.pointer, _id_getQueryParameterNames as jni$_.JMethodIDPtr)
        .object<jni$_.JSet<jni$_.JString?>?>(
            const jni$_.JSetNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getQueryParameters = _class.instanceMethodId(
    r'getQueryParameters',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _getQueryParameters = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.List getQueryParameters(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JString?>? getQueryParameters(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getQueryParameters(reference.pointer,
            _id_getQueryParameters as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JList<jni$_.JString?>?>(
            const jni$_.JListNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getQueryParameter = _class.instanceMethodId(
    r'getQueryParameter',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getQueryParameter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String getQueryParameter(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getQueryParameter(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getQueryParameter(reference.pointer,
            _id_getQueryParameter as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getBooleanQueryParameter = _class.instanceMethodId(
    r'getBooleanQueryParameter',
    r'(Ljava/lang/String;Z)Z',
  );

  static final _getBooleanQueryParameter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public boolean getBooleanQueryParameter(java.lang.String string, boolean z)`
  bool getBooleanQueryParameter(
    jni$_.JString? string,
    bool z,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBooleanQueryParameter(
            reference.pointer,
            _id_getBooleanQueryParameter as jni$_.JMethodIDPtr,
            _$string.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_normalizeScheme = _class.instanceMethodId(
    r'normalizeScheme',
    r'()Landroid/net/Uri;',
  );

  static final _normalizeScheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.net.Uri normalizeScheme()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri? normalizeScheme() {
    return _normalizeScheme(
            reference.pointer, _id_normalizeScheme as jni$_.JMethodIDPtr)
        .object<Uri?>(const $Uri$NullableType());
  }

  static final _id_writeToParcel = _class.staticMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;Landroid/net/Uri;)V',
  );

  static final _writeToParcel = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void writeToParcel(android.os.Parcel parcel, android.net.Uri uri)`
  static void writeToParcel(
    jni$_.JObject? parcel,
    Uri? uri,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _writeToParcel(
            _class.reference.pointer,
            _id_writeToParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer,
            _$uri.pointer)
        .check();
  }

  static final _id_encode = _class.staticMethodId(
    r'encode',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _encode = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.lang.String encode(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? encode(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encode(_class.reference.pointer, _id_encode as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_encode$1 = _class.staticMethodId(
    r'encode',
    r'(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _encode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.lang.String encode(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? encode$1(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _encode$1(
            _class.reference.pointer,
            _id_encode$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_decode = _class.staticMethodId(
    r'decode',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _decode = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.lang.String decode(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? decode(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _decode(_class.reference.pointer, _id_decode as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_withAppendedPath = _class.staticMethodId(
    r'withAppendedPath',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _withAppendedPath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.net.Uri withAppendedPath(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? withAppendedPath(
    Uri? uri,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _withAppendedPath(
            _class.reference.pointer,
            _id_withAppendedPath as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer)
        .object<Uri?>(const $Uri$NullableType());
  }
}

final class $Uri$NullableType extends jni$_.JObjType<Uri?> {
  @jni$_.internal
  const $Uri$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/net/Uri;';

  @jni$_.internal
  @core$_.override
  Uri? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Uri.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Uri?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Uri$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri$NullableType) &&
        other is $Uri$NullableType;
  }
}

final class $Uri$Type extends jni$_.JObjType<Uri> {
  @jni$_.internal
  const $Uri$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/net/Uri;';

  @jni$_.internal
  @core$_.override
  Uri fromReference(jni$_.JReference reference) => Uri.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Uri?> get nullableType => const $Uri$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Uri$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri$Type) && other is $Uri$Type;
  }
}
