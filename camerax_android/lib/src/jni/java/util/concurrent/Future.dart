// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: java.util.concurrent.Future
class Future<$V extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<Future<$V>> $type = type(V);

  final jni.JObjType<$V> V;

  Future.fromReference(
    this.V,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'java/util/concurrent/Future');

  /// The type which includes information such as the signature of this class.
  static $FutureType<$V> type<$V extends jni.JObject>(
    jni.JObjType<$V> V,
  ) {
    return $FutureType(
      V,
    );
  }

  static final _id_cancel = _class.instanceMethodId(
    r'cancel',
    r'(Z)Z',
  );

  static final _cancel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract boolean cancel(boolean z)
  bool cancel(
    bool z,
  ) {
    return _cancel(reference.pointer, _id_cancel as jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_isCancelled = _class.instanceMethodId(
    r'isCancelled',
    r'()Z',
  );

  static final _isCancelled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isCancelled()
  bool isCancelled() {
    return _isCancelled(reference.pointer, _id_isCancelled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDone = _class.instanceMethodId(
    r'isDone',
    r'()Z',
  );

  static final _isDone = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isDone()
  bool isDone() {
    return _isDone(reference.pointer, _id_isDone as jni.JMethodIDPtr).boolean;
  }

  static final _id_get0 = _class.instanceMethodId(
    r'get',
    r'()Ljava/lang/Object;',
  );

  static final _get0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract V get()
  /// The returned object must be released after use, by calling the [release] method.
  $V get0() {
    return _get0(reference.pointer, _id_get0 as jni.JMethodIDPtr).object(V);
  }

  static final _id_get1 = _class.instanceMethodId(
    r'get',
    r'(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;',
  );

  static final _get1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract V get(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be released after use, by calling the [release] method.
  $V get1(
    int j,
    jni.JObject timeUnit,
  ) {
    return _get1(reference.pointer, _id_get1 as jni.JMethodIDPtr, j,
            timeUnit.reference.pointer)
        .object(V);
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FutureImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'cancel(Z)Z') {
        final $r = _$impls[$p]!.cancel(
          $a[0]
              .castTo(const jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isCancelled()Z') {
        final $r = _$impls[$p]!.isCancelled();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isDone()Z') {
        final $r = _$impls[$p]!.isDone();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'get()Ljava/lang/Object;') {
        final $r = _$impls[$p]!.get0();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'get(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.get1(
          $a[0]
              .castTo(const jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Future.implement(
    $FutureImpl<$V> $impl,
  ) {
    final $p = ReceivePort();
    final $x = Future.fromReference(
      $impl.V,
      ProtectedJniExtensions.newPortProxy(
        r'java.util.concurrent.Future',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FutureImpl<$V extends jni.JObject> {
  factory $FutureImpl({
    required jni.JObjType<$V> V,
    required bool Function(bool z) cancel,
    required bool Function() isCancelled,
    required bool Function() isDone,
    required $V Function() get0,
    required $V Function(int j, jni.JObject timeUnit) get1,
  }) = _$FutureImpl;

  jni.JObjType<$V> get V;

  bool cancel(bool z);
  bool isCancelled();
  bool isDone();
  $V get0();
  $V get1(int j, jni.JObject timeUnit);
}

class _$FutureImpl<$V extends jni.JObject> implements $FutureImpl<$V> {
  _$FutureImpl({
    required this.V,
    required bool Function(bool z) cancel,
    required bool Function() isCancelled,
    required bool Function() isDone,
    required $V Function() get0,
    required $V Function(int j, jni.JObject timeUnit) get1,
  })  : _cancel = cancel,
        _isCancelled = isCancelled,
        _isDone = isDone,
        _get0 = get0,
        _get1 = get1;

  @override
  final jni.JObjType<$V> V;

  final bool Function(bool z) _cancel;
  final bool Function() _isCancelled;
  final bool Function() _isDone;
  final $V Function() _get0;
  final $V Function(int j, jni.JObject timeUnit) _get1;

  bool cancel(bool z) {
    return _cancel(z);
  }

  bool isCancelled() {
    return _isCancelled();
  }

  bool isDone() {
    return _isDone();
  }

  $V get0() {
    return _get0();
  }

  $V get1(int j, jni.JObject timeUnit) {
    return _get1(j, timeUnit);
  }
}

final class $FutureType<$V extends jni.JObject>
    extends jni.JObjType<Future<$V>> {
  final jni.JObjType<$V> V;

  const $FutureType(
    this.V,
  );

  @override
  String get signature => r'Ljava/util/concurrent/Future;';

  @override
  Future<$V> fromReference(jni.JReference reference) =>
      Future.fromReference(V, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($FutureType, V);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FutureType<$V>) &&
        other is $FutureType<$V> &&
        V == other.V;
  }
}
