// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `java.util.concurrent.Future`
class Future<$V extends jni$_.JObject?> extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Future<$V>> $type;

  @jni$_.internal
  final jni$_.JObjType<$V> V;

  @jni$_.internal
  Future.fromReference(
    this.V,
    jni$_.JReference reference,
  )   : $type = type<$V>(V),
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'java/util/concurrent/Future');

  /// The type which includes information such as the signature of this class.
  static $Future$NullableType<$V> nullableType<$V extends jni$_.JObject?>(
    jni$_.JObjType<$V> V,
  ) {
    return $Future$NullableType<$V>(
      V,
    );
  }

  static $Future$Type<$V> type<$V extends jni$_.JObject?>(
    jni$_.JObjType<$V> V,
  ) {
    return $Future$Type<$V>(
      V,
    );
  }

  static final _id_cancel = _class.instanceMethodId(
    r'cancel',
    r'(Z)Z',
  );

  static final _cancel = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract boolean cancel(boolean z)`
  bool cancel(
    bool z,
  ) {
    return _cancel(
            reference.pointer, _id_cancel as jni$_.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_isCancelled = _class.instanceMethodId(
    r'isCancelled',
    r'()Z',
  );

  static final _isCancelled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isCancelled()`
  bool isCancelled() {
    return _isCancelled(
            reference.pointer, _id_isCancelled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDone = _class.instanceMethodId(
    r'isDone',
    r'()Z',
  );

  static final _isDone = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isDone()`
  bool isDone() {
    return _isDone(reference.pointer, _id_isDone as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_get = _class.instanceMethodId(
    r'get',
    r'()Ljava/lang/Object;',
  );

  static final _get = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract V get()`
  /// The returned object must be released after use, by calling the [release] method.
  $V? get() {
    return _get(reference.pointer, _id_get as jni$_.JMethodIDPtr)
        .object<$V?>(V.nullableType);
  }

  static final _id_get$1 = _class.instanceMethodId(
    r'get',
    r'(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;',
  );

  static final _get$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract V get(long j, java.util.concurrent.TimeUnit timeUnit)`
  /// The returned object must be released after use, by calling the [release] method.
  $V? get$1(
    int j,
    jni$_.JObject? timeUnit,
  ) {
    final _$timeUnit = timeUnit?.reference ?? jni$_.jNullReference;
    return _get$1(reference.pointer, _id_get$1 as jni$_.JMethodIDPtr, j,
            _$timeUnit.pointer)
        .object<$V?>(V.nullableType);
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Future> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'cancel(Z)Z') {
        final $r = _$impls[$p]!.cancel(
          $a![0]!
              .as(const jni$_.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isCancelled()Z') {
        final $r = _$impls[$p]!.isCancelled();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'isDone()Z') {
        final $r = _$impls[$p]!.isDone();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'get()Ljava/lang/Object;') {
        final $r = _$impls[$p]!.get();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'get(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.get$1(
          $a![0]!
              .as(const jni$_.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn<$V extends jni$_.JObject?>(
    jni$_.JImplementer implementer,
    $Future<$V> $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'java.util.concurrent.Future',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Future.implement(
    $Future<$V> $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Future<$V>.fromReference(
      $impl.V,
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Future<$V extends jni$_.JObject?> {
  factory $Future({
    required jni$_.JObjType<$V> V,
    required bool Function(bool z) cancel,
    required bool Function() isCancelled,
    required bool Function() isDone,
    required $V? Function() get,
    required $V? Function(int j, jni$_.JObject? timeUnit) get$1,
  }) = _$Future<$V>;

  jni$_.JObjType<$V> get V;

  bool cancel(bool z);
  bool isCancelled();
  bool isDone();
  $V? get();
  $V? get$1(int j, jni$_.JObject? timeUnit);
}

final class _$Future<$V extends jni$_.JObject?> with $Future<$V> {
  _$Future({
    required this.V,
    required bool Function(bool z) cancel,
    required bool Function() isCancelled,
    required bool Function() isDone,
    required $V? Function() get,
    required $V? Function(int j, jni$_.JObject? timeUnit) get$1,
  })  : _cancel = cancel,
        _isCancelled = isCancelled,
        _isDone = isDone,
        _get = get,
        _get$1 = get$1;

  @core$_.override
  final jni$_.JObjType<$V> V;

  final bool Function(bool z) _cancel;
  final bool Function() _isCancelled;
  final bool Function() _isDone;
  final $V? Function() _get;
  final $V? Function(int j, jni$_.JObject? timeUnit) _get$1;

  bool cancel(bool z) {
    return _cancel(z);
  }

  bool isCancelled() {
    return _isCancelled();
  }

  bool isDone() {
    return _isDone();
  }

  $V? get() {
    return _get();
  }

  $V? get$1(int j, jni$_.JObject? timeUnit) {
    return _get$1(j, timeUnit);
  }
}

final class $Future$NullableType<$V extends jni$_.JObject?>
    extends jni$_.JObjType<Future<$V>?> {
  @jni$_.internal
  final jni$_.JObjType<$V> V;

  @jni$_.internal
  const $Future$NullableType(
    this.V,
  );

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/util/concurrent/Future;';

  @jni$_.internal
  @core$_.override
  Future<$V>? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Future<$V>.fromReference(
          V,
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Future<$V>?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($Future$NullableType, V);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Future$NullableType<$V>) &&
        other is $Future$NullableType<$V> &&
        V == other.V;
  }
}

final class $Future$Type<$V extends jni$_.JObject?>
    extends jni$_.JObjType<Future<$V>> {
  @jni$_.internal
  final jni$_.JObjType<$V> V;

  @jni$_.internal
  const $Future$Type(
    this.V,
  );

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/util/concurrent/Future;';

  @jni$_.internal
  @core$_.override
  Future<$V> fromReference(jni$_.JReference reference) =>
      Future<$V>.fromReference(
        V,
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Future<$V>?> get nullableType => $Future$NullableType<$V>(V);

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($Future$Type, V);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Future$Type<$V>) &&
        other is $Future$Type<$V> &&
        V == other.V;
  }
}
