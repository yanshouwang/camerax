// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../../android/util/Size.dart' as size_;

import '../../../../com/google/mlkit/vision/interfaces/Detector.dart'
    as detector_;

import '../../../../java/util/concurrent/Executor.dart' as executor_;

import '../../../core/util/Consumer.dart' as consumer_;

import '../../core/ImageProxy.dart' as imageproxy_;

/// from: androidx.camera.mlkit.vision.MlKitAnalyzer$Result
class MlKitAnalyzer_Result extends jni.JObject {
  @override
  late final jni.JObjType<MlKitAnalyzer_Result> $type = type;

  MlKitAnalyzer_Result.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'androidx/camera/mlkit/vision/MlKitAnalyzer$Result');

  /// The type which includes information such as the signature of this class.
  static const type = $MlKitAnalyzer_ResultType();
  static final _id_new0 = _class.constructorId(
    r'(Ljava/util/Map;JLjava/util/Map;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Map map, long j, java.util.Map map1)
  /// The returned object must be released after use, by calling the [release] method.
  factory MlKitAnalyzer_Result(
    jni.JMap<detector_.Detector<jni.JObject>, jni.JObject> map,
    int j,
    jni.JMap<detector_.Detector<jni.JObject>, jni.JObject> map1,
  ) {
    return MlKitAnalyzer_Result.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            map.reference.pointer,
            j,
            map1.reference.pointer)
        .reference);
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'(Lcom/google/mlkit/vision/interfaces/Detector;)Ljava/lang/Object;',
  );

  static final _getValue = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public T getValue(com.google.mlkit.vision.interfaces.Detector detector)
  /// The returned object must be released after use, by calling the [release] method.
  $T getValue<$T extends jni.JObject>(
    detector_.Detector<$T> detector, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      (detector.$type as detector_.$DetectorType).DetectionResultT,
    ]) as jni.JObjType<$T>;
    return _getValue(reference.pointer, _id_getValue as jni.JMethodIDPtr,
            detector.reference.pointer)
        .object(T);
  }

  static final _id_getThrowable = _class.instanceMethodId(
    r'getThrowable',
    r'(Lcom/google/mlkit/vision/interfaces/Detector;)Ljava/lang/Throwable;',
  );

  static final _getThrowable = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Throwable getThrowable(com.google.mlkit.vision.interfaces.Detector detector)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getThrowable(
    detector_.Detector<jni.JObject> detector,
  ) {
    return _getThrowable(reference.pointer,
            _id_getThrowable as jni.JMethodIDPtr, detector.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getTimestamp = _class.instanceMethodId(
    r'getTimestamp',
    r'()J',
  );

  static final _getTimestamp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long getTimestamp()
  int getTimestamp() {
    return _getTimestamp(
            reference.pointer, _id_getTimestamp as jni.JMethodIDPtr)
        .long;
  }
}

final class $MlKitAnalyzer_ResultType
    extends jni.JObjType<MlKitAnalyzer_Result> {
  const $MlKitAnalyzer_ResultType();

  @override
  String get signature =>
      r'Landroidx/camera/mlkit/vision/MlKitAnalyzer$Result;';

  @override
  MlKitAnalyzer_Result fromReference(jni.JReference reference) =>
      MlKitAnalyzer_Result.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MlKitAnalyzer_ResultType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MlKitAnalyzer_ResultType) &&
        other is $MlKitAnalyzer_ResultType;
  }
}

/// from: androidx.camera.mlkit.vision.MlKitAnalyzer
class MlKitAnalyzer extends jni.JObject {
  @override
  late final jni.JObjType<MlKitAnalyzer> $type = type;

  MlKitAnalyzer.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'androidx/camera/mlkit/vision/MlKitAnalyzer');

  /// The type which includes information such as the signature of this class.
  static const type = $MlKitAnalyzerType();
  static final _id_new0 = _class.constructorId(
    r'(Ljava/util/List;ILjava/util/concurrent/Executor;Landroidx/core/util/Consumer;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.List list, int i, java.util.concurrent.Executor executor, androidx.core.util.Consumer consumer)
  /// The returned object must be released after use, by calling the [release] method.
  factory MlKitAnalyzer(
    jni.JList<detector_.Detector<jni.JObject>> list,
    int i,
    executor_.Executor executor,
    consumer_.Consumer<MlKitAnalyzer_Result> consumer,
  ) {
    return MlKitAnalyzer.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            list.reference.pointer,
            i,
            executor.reference.pointer,
            consumer.reference.pointer)
        .reference);
  }

  static final _id_analyze = _class.instanceMethodId(
    r'analyze',
    r'(Landroidx/camera/core/ImageProxy;)V',
  );

  static final _analyze = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void analyze(androidx.camera.core.ImageProxy imageProxy)
  void analyze(
    imageproxy_.ImageProxy imageProxy,
  ) {
    _analyze(reference.pointer, _id_analyze as jni.JMethodIDPtr,
            imageProxy.reference.pointer)
        .check();
  }

  static final _id_getDefaultTargetResolution = _class.instanceMethodId(
    r'getDefaultTargetResolution',
    r'()Landroid/util/Size;',
  );

  static final _getDefaultTargetResolution = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.util.Size getDefaultTargetResolution()
  /// The returned object must be released after use, by calling the [release] method.
  size_.Size getDefaultTargetResolution() {
    return _getDefaultTargetResolution(reference.pointer,
            _id_getDefaultTargetResolution as jni.JMethodIDPtr)
        .object(const size_.$SizeType());
  }

  static final _id_getTargetCoordinateSystem = _class.instanceMethodId(
    r'getTargetCoordinateSystem',
    r'()I',
  );

  static final _getTargetCoordinateSystem = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int getTargetCoordinateSystem()
  int getTargetCoordinateSystem() {
    return _getTargetCoordinateSystem(reference.pointer,
            _id_getTargetCoordinateSystem as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_updateTransform = _class.instanceMethodId(
    r'updateTransform',
    r'(Landroid/graphics/Matrix;)V',
  );

  static final _updateTransform = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void updateTransform(android.graphics.Matrix matrix)
  void updateTransform(
    jni.JObject matrix,
  ) {
    _updateTransform(reference.pointer, _id_updateTransform as jni.JMethodIDPtr,
            matrix.reference.pointer)
        .check();
  }
}

final class $MlKitAnalyzerType extends jni.JObjType<MlKitAnalyzer> {
  const $MlKitAnalyzerType();

  @override
  String get signature => r'Landroidx/camera/mlkit/vision/MlKitAnalyzer;';

  @override
  MlKitAnalyzer fromReference(jni.JReference reference) =>
      MlKitAnalyzer.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MlKitAnalyzerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MlKitAnalyzerType) &&
        other is $MlKitAnalyzerType;
  }
}
