// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: androidx.camera.core.AspectRatio$Ratio
class AspectRatio_Ratio extends jni.JObject {
  @override
  late final jni.JObjType<AspectRatio_Ratio> $type = type;

  AspectRatio_Ratio.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'androidx/camera/core/AspectRatio$Ratio');

  /// The type which includes information such as the signature of this class.
  static const type = $AspectRatio_RatioType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $AspectRatio_RatioImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory AspectRatio_Ratio.implement(
    $AspectRatio_RatioImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = AspectRatio_Ratio.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'androidx.camera.core.AspectRatio$Ratio',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $AspectRatio_RatioImpl {
  factory $AspectRatio_RatioImpl() = _$AspectRatio_RatioImpl;
}

class _$AspectRatio_RatioImpl implements $AspectRatio_RatioImpl {
  _$AspectRatio_RatioImpl();
}

final class $AspectRatio_RatioType extends jni.JObjType<AspectRatio_Ratio> {
  const $AspectRatio_RatioType();

  @override
  String get signature => r'Landroidx/camera/core/AspectRatio$Ratio;';

  @override
  AspectRatio_Ratio fromReference(jni.JReference reference) =>
      AspectRatio_Ratio.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AspectRatio_RatioType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AspectRatio_RatioType) &&
        other is $AspectRatio_RatioType;
  }
}

/// from: androidx.camera.core.AspectRatio
class AspectRatio extends jni.JObject {
  @override
  late final jni.JObjType<AspectRatio> $type = type;

  AspectRatio.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'androidx/camera/core/AspectRatio');

  /// The type which includes information such as the signature of this class.
  static const type = $AspectRatioType();

  /// from: static public final int RATIO_DEFAULT
  static const RATIO_DEFAULT = -1;

  /// from: static public final int RATIO_4_3
  static const RATIO_4_3 = 0;

  /// from: static public final int RATIO_16_9
  static const RATIO_16_9 = 1;
}

final class $AspectRatioType extends jni.JObjType<AspectRatio> {
  const $AspectRatioType();

  @override
  String get signature => r'Landroidx/camera/core/AspectRatio;';

  @override
  AspectRatio fromReference(jni.JReference reference) =>
      AspectRatio.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AspectRatioType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AspectRatioType) && other is $AspectRatioType;
  }
}
