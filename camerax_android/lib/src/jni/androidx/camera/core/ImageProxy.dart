// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../android/graphics/Rect.dart' as rect_;

import '../../../android/media/Image.dart' as image_;

import 'ImageInfo.dart' as imageinfo_;

/// from: androidx.camera.core.ImageProxy$PlaneProxy
class ImageProxy_PlaneProxy extends jni.JObject {
  @override
  late final jni.JObjType<ImageProxy_PlaneProxy> $type = type;

  ImageProxy_PlaneProxy.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'androidx/camera/core/ImageProxy$PlaneProxy');

  /// The type which includes information such as the signature of this class.
  static const type = $ImageProxy_PlaneProxyType();
  static final _id_getRowStride = _class.instanceMethodId(
    r'getRowStride',
    r'()I',
  );

  static final _getRowStride = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getRowStride()
  int getRowStride() {
    return _getRowStride(
            reference.pointer, _id_getRowStride as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPixelStride = _class.instanceMethodId(
    r'getPixelStride',
    r'()I',
  );

  static final _getPixelStride = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getPixelStride()
  int getPixelStride() {
    return _getPixelStride(
            reference.pointer, _id_getPixelStride as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getBuffer = _class.instanceMethodId(
    r'getBuffer',
    r'()Ljava/nio/ByteBuffer;',
  );

  static final _getBuffer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.nio.ByteBuffer getBuffer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JByteBuffer getBuffer() {
    return _getBuffer(reference.pointer, _id_getBuffer as jni.JMethodIDPtr)
        .object(const jni.JByteBufferType());
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageProxy_PlaneProxyImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getRowStride()I') {
        final $r = _$impls[$p]!.getRowStride();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'getPixelStride()I') {
        final $r = _$impls[$p]!.getPixelStride();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'getBuffer()Ljava/nio/ByteBuffer;') {
        final $r = _$impls[$p]!.getBuffer();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageProxy_PlaneProxy.implement(
    $ImageProxy_PlaneProxyImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageProxy_PlaneProxy.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'androidx.camera.core.ImageProxy$PlaneProxy',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageProxy_PlaneProxyImpl {
  factory $ImageProxy_PlaneProxyImpl({
    required int Function() getRowStride,
    required int Function() getPixelStride,
    required jni.JByteBuffer Function() getBuffer,
  }) = _$ImageProxy_PlaneProxyImpl;

  int getRowStride();
  int getPixelStride();
  jni.JByteBuffer getBuffer();
}

class _$ImageProxy_PlaneProxyImpl implements $ImageProxy_PlaneProxyImpl {
  _$ImageProxy_PlaneProxyImpl({
    required int Function() getRowStride,
    required int Function() getPixelStride,
    required jni.JByteBuffer Function() getBuffer,
  })  : _getRowStride = getRowStride,
        _getPixelStride = getPixelStride,
        _getBuffer = getBuffer;

  final int Function() _getRowStride;
  final int Function() _getPixelStride;
  final jni.JByteBuffer Function() _getBuffer;

  int getRowStride() {
    return _getRowStride();
  }

  int getPixelStride() {
    return _getPixelStride();
  }

  jni.JByteBuffer getBuffer() {
    return _getBuffer();
  }
}

final class $ImageProxy_PlaneProxyType
    extends jni.JObjType<ImageProxy_PlaneProxy> {
  const $ImageProxy_PlaneProxyType();

  @override
  String get signature => r'Landroidx/camera/core/ImageProxy$PlaneProxy;';

  @override
  ImageProxy_PlaneProxy fromReference(jni.JReference reference) =>
      ImageProxy_PlaneProxy.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageProxy_PlaneProxyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageProxy_PlaneProxyType) &&
        other is $ImageProxy_PlaneProxyType;
  }
}

/// from: androidx.camera.core.ImageProxy
class ImageProxy extends jni.JObject {
  @override
  late final jni.JObjType<ImageProxy> $type = type;

  ImageProxy.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'androidx/camera/core/ImageProxy');

  /// The type which includes information such as the signature of this class.
  static const type = $ImageProxyType();
  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }

  static final _id_getCropRect = _class.instanceMethodId(
    r'getCropRect',
    r'()Landroid/graphics/Rect;',
  );

  static final _getCropRect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.Rect getCropRect()
  /// The returned object must be released after use, by calling the [release] method.
  rect_.Rect getCropRect() {
    return _getCropRect(reference.pointer, _id_getCropRect as jni.JMethodIDPtr)
        .object(const rect_.$RectType());
  }

  static final _id_setCropRect = _class.instanceMethodId(
    r'setCropRect',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _setCropRect = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setCropRect(android.graphics.Rect rect)
  void setCropRect(
    rect_.Rect rect,
  ) {
    _setCropRect(reference.pointer, _id_setCropRect as jni.JMethodIDPtr,
            rect.reference.pointer)
        .check();
  }

  static final _id_getFormat = _class.instanceMethodId(
    r'getFormat',
    r'()I',
  );

  static final _getFormat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getFormat()
  int getFormat() {
    return _getFormat(reference.pointer, _id_getFormat as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getHeight = _class.instanceMethodId(
    r'getHeight',
    r'()I',
  );

  static final _getHeight = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getHeight()
  int getHeight() {
    return _getHeight(reference.pointer, _id_getHeight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getWidth = _class.instanceMethodId(
    r'getWidth',
    r'()I',
  );

  static final _getWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getWidth()
  int getWidth() {
    return _getWidth(reference.pointer, _id_getWidth as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPlanes = _class.instanceMethodId(
    r'getPlanes',
    r'()[Landroidx/camera/core/ImageProxy$PlaneProxy;',
  );

  static final _getPlanes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract androidx.camera.core.ImageProxy$PlaneProxy[] getPlanes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<ImageProxy_PlaneProxy> getPlanes() {
    return _getPlanes(reference.pointer, _id_getPlanes as jni.JMethodIDPtr)
        .object(const jni.JArrayType($ImageProxy_PlaneProxyType()));
  }

  static final _id_getImageInfo = _class.instanceMethodId(
    r'getImageInfo',
    r'()Landroidx/camera/core/ImageInfo;',
  );

  static final _getImageInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract androidx.camera.core.ImageInfo getImageInfo()
  /// The returned object must be released after use, by calling the [release] method.
  imageinfo_.ImageInfo getImageInfo() {
    return _getImageInfo(
            reference.pointer, _id_getImageInfo as jni.JMethodIDPtr)
        .object(const imageinfo_.$ImageInfoType());
  }

  static final _id_getImage = _class.instanceMethodId(
    r'getImage',
    r'()Landroid/media/Image;',
  );

  static final _getImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.media.Image getImage()
  /// The returned object must be released after use, by calling the [release] method.
  image_.Image getImage() {
    return _getImage(reference.pointer, _id_getImage as jni.JMethodIDPtr)
        .object(const image_.$ImageType());
  }

  static final _id_toBitmap = _class.instanceMethodId(
    r'toBitmap',
    r'()Landroid/graphics/Bitmap;',
  );

  static final _toBitmap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.Bitmap toBitmap()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject toBitmap() {
    return _toBitmap(reference.pointer, _id_toBitmap as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageProxyImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'close()V') {
        _$impls[$p]!.close();
        return jni.nullptr;
      }
      if ($d == r'getCropRect()Landroid/graphics/Rect;') {
        final $r = _$impls[$p]!.getCropRect();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'setCropRect(Landroid/graphics/Rect;)V') {
        _$impls[$p]!.setCropRect(
          $a[0].castTo(const rect_.$RectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r'getFormat()I') {
        final $r = _$impls[$p]!.getFormat();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'getHeight()I') {
        final $r = _$impls[$p]!.getHeight();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'getWidth()I') {
        final $r = _$impls[$p]!.getWidth();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'getPlanes()[Landroidx/camera/core/ImageProxy$PlaneProxy;') {
        final $r = _$impls[$p]!.getPlanes();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getImageInfo()Landroidx/camera/core/ImageInfo;') {
        final $r = _$impls[$p]!.getImageInfo();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getImage()Landroid/media/Image;') {
        final $r = _$impls[$p]!.getImage();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'toBitmap()Landroid/graphics/Bitmap;') {
        final $r = _$impls[$p]!.toBitmap();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageProxy.implement(
    $ImageProxyImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageProxy.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'androidx.camera.core.ImageProxy',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageProxyImpl {
  factory $ImageProxyImpl({
    required void Function() close,
    required rect_.Rect Function() getCropRect,
    required void Function(rect_.Rect rect) setCropRect,
    required int Function() getFormat,
    required int Function() getHeight,
    required int Function() getWidth,
    required jni.JArray<ImageProxy_PlaneProxy> Function() getPlanes,
    required imageinfo_.ImageInfo Function() getImageInfo,
    required image_.Image Function() getImage,
    required jni.JObject Function() toBitmap,
  }) = _$ImageProxyImpl;

  void close();
  rect_.Rect getCropRect();
  void setCropRect(rect_.Rect rect);
  int getFormat();
  int getHeight();
  int getWidth();
  jni.JArray<ImageProxy_PlaneProxy> getPlanes();
  imageinfo_.ImageInfo getImageInfo();
  image_.Image getImage();
  jni.JObject toBitmap();
}

class _$ImageProxyImpl implements $ImageProxyImpl {
  _$ImageProxyImpl({
    required void Function() close,
    required rect_.Rect Function() getCropRect,
    required void Function(rect_.Rect rect) setCropRect,
    required int Function() getFormat,
    required int Function() getHeight,
    required int Function() getWidth,
    required jni.JArray<ImageProxy_PlaneProxy> Function() getPlanes,
    required imageinfo_.ImageInfo Function() getImageInfo,
    required image_.Image Function() getImage,
    required jni.JObject Function() toBitmap,
  })  : _close = close,
        _getCropRect = getCropRect,
        _setCropRect = setCropRect,
        _getFormat = getFormat,
        _getHeight = getHeight,
        _getWidth = getWidth,
        _getPlanes = getPlanes,
        _getImageInfo = getImageInfo,
        _getImage = getImage,
        _toBitmap = toBitmap;

  final void Function() _close;
  final rect_.Rect Function() _getCropRect;
  final void Function(rect_.Rect rect) _setCropRect;
  final int Function() _getFormat;
  final int Function() _getHeight;
  final int Function() _getWidth;
  final jni.JArray<ImageProxy_PlaneProxy> Function() _getPlanes;
  final imageinfo_.ImageInfo Function() _getImageInfo;
  final image_.Image Function() _getImage;
  final jni.JObject Function() _toBitmap;

  void close() {
    return _close();
  }

  rect_.Rect getCropRect() {
    return _getCropRect();
  }

  void setCropRect(rect_.Rect rect) {
    return _setCropRect(rect);
  }

  int getFormat() {
    return _getFormat();
  }

  int getHeight() {
    return _getHeight();
  }

  int getWidth() {
    return _getWidth();
  }

  jni.JArray<ImageProxy_PlaneProxy> getPlanes() {
    return _getPlanes();
  }

  imageinfo_.ImageInfo getImageInfo() {
    return _getImageInfo();
  }

  image_.Image getImage() {
    return _getImage();
  }

  jni.JObject toBitmap() {
    return _toBitmap();
  }
}

final class $ImageProxyType extends jni.JObjType<ImageProxy> {
  const $ImageProxyType();

  @override
  String get signature => r'Landroidx/camera/core/ImageProxy;';

  @override
  ImageProxy fromReference(jni.JReference reference) =>
      ImageProxy.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageProxyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageProxyType) && other is $ImageProxyType;
  }
}
