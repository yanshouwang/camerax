// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: androidx.camera.core.ZoomState
class ZoomState extends jni.JObject {
  @override
  late final jni.JObjType<ZoomState> $type = type;

  ZoomState.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'androidx/camera/core/ZoomState');

  /// The type which includes information such as the signature of this class.
  static const type = $ZoomStateType();
  static final _id_getZoomRatio = _class.instanceMethodId(
    r'getZoomRatio',
    r'()F',
  );

  static final _getZoomRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract float getZoomRatio()
  double getZoomRatio() {
    return _getZoomRatio(
            reference.pointer, _id_getZoomRatio as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getMaxZoomRatio = _class.instanceMethodId(
    r'getMaxZoomRatio',
    r'()F',
  );

  static final _getMaxZoomRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract float getMaxZoomRatio()
  double getMaxZoomRatio() {
    return _getMaxZoomRatio(
            reference.pointer, _id_getMaxZoomRatio as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getMinZoomRatio = _class.instanceMethodId(
    r'getMinZoomRatio',
    r'()F',
  );

  static final _getMinZoomRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract float getMinZoomRatio()
  double getMinZoomRatio() {
    return _getMinZoomRatio(
            reference.pointer, _id_getMinZoomRatio as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getLinearZoom = _class.instanceMethodId(
    r'getLinearZoom',
    r'()F',
  );

  static final _getLinearZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract float getLinearZoom()
  double getLinearZoom() {
    return _getLinearZoom(
            reference.pointer, _id_getLinearZoom as jni.JMethodIDPtr)
        .float;
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ZoomStateImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getZoomRatio()F') {
        final $r = _$impls[$p]!.getZoomRatio();
        return jni.JFloat($r).reference.toPointer();
      }
      if ($d == r'getMaxZoomRatio()F') {
        final $r = _$impls[$p]!.getMaxZoomRatio();
        return jni.JFloat($r).reference.toPointer();
      }
      if ($d == r'getMinZoomRatio()F') {
        final $r = _$impls[$p]!.getMinZoomRatio();
        return jni.JFloat($r).reference.toPointer();
      }
      if ($d == r'getLinearZoom()F') {
        final $r = _$impls[$p]!.getLinearZoom();
        return jni.JFloat($r).reference.toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ZoomState.implement(
    $ZoomStateImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ZoomState.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'androidx.camera.core.ZoomState',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ZoomStateImpl {
  factory $ZoomStateImpl({
    required double Function() getZoomRatio,
    required double Function() getMaxZoomRatio,
    required double Function() getMinZoomRatio,
    required double Function() getLinearZoom,
  }) = _$ZoomStateImpl;

  double getZoomRatio();
  double getMaxZoomRatio();
  double getMinZoomRatio();
  double getLinearZoom();
}

class _$ZoomStateImpl implements $ZoomStateImpl {
  _$ZoomStateImpl({
    required double Function() getZoomRatio,
    required double Function() getMaxZoomRatio,
    required double Function() getMinZoomRatio,
    required double Function() getLinearZoom,
  })  : _getZoomRatio = getZoomRatio,
        _getMaxZoomRatio = getMaxZoomRatio,
        _getMinZoomRatio = getMinZoomRatio,
        _getLinearZoom = getLinearZoom;

  final double Function() _getZoomRatio;
  final double Function() _getMaxZoomRatio;
  final double Function() _getMinZoomRatio;
  final double Function() _getLinearZoom;

  double getZoomRatio() {
    return _getZoomRatio();
  }

  double getMaxZoomRatio() {
    return _getMaxZoomRatio();
  }

  double getMinZoomRatio() {
    return _getMinZoomRatio();
  }

  double getLinearZoom() {
    return _getLinearZoom();
  }
}

final class $ZoomStateType extends jni.JObjType<ZoomState> {
  const $ZoomStateType();

  @override
  String get signature => r'Landroidx/camera/core/ZoomState;';

  @override
  ZoomState fromReference(jni.JReference reference) =>
      ZoomState.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ZoomStateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ZoomStateType) && other is $ZoomStateType;
  }
}
