// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: androidx.camera.core.CameraSelector$Builder
class CameraSelector_Builder extends jni.JObject {
  @override
  late final jni.JObjType<CameraSelector_Builder> $type = type;

  CameraSelector_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'androidx/camera/core/CameraSelector$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraSelector_BuilderType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraSelector_Builder() {
    return CameraSelector_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_requireLensFacing = _class.instanceMethodId(
    r'requireLensFacing',
    r'(I)Landroidx/camera/core/CameraSelector$Builder;',
  );

  static final _requireLensFacing = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.CameraSelector$Builder requireLensFacing(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CameraSelector_Builder requireLensFacing(
    int i,
  ) {
    return _requireLensFacing(
            reference.pointer, _id_requireLensFacing as jni.JMethodIDPtr, i)
        .object(const $CameraSelector_BuilderType());
  }

  static final _id_addCameraFilter = _class.instanceMethodId(
    r'addCameraFilter',
    r'(Landroidx/camera/core/CameraFilter;)Landroidx/camera/core/CameraSelector$Builder;',
  );

  static final _addCameraFilter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.CameraSelector$Builder addCameraFilter(androidx.camera.core.CameraFilter cameraFilter)
  /// The returned object must be released after use, by calling the [release] method.
  CameraSelector_Builder addCameraFilter(
    jni.JObject cameraFilter,
  ) {
    return _addCameraFilter(
            reference.pointer,
            _id_addCameraFilter as jni.JMethodIDPtr,
            cameraFilter.reference.pointer)
        .object(const $CameraSelector_BuilderType());
  }

  static final _id_fromSelector = _class.staticMethodId(
    r'fromSelector',
    r'(Landroidx/camera/core/CameraSelector;)Landroidx/camera/core/CameraSelector$Builder;',
  );

  static final _fromSelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.camera.core.CameraSelector$Builder fromSelector(androidx.camera.core.CameraSelector cameraSelector)
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector_Builder fromSelector(
    CameraSelector cameraSelector,
  ) {
    return _fromSelector(
            _class.reference.pointer,
            _id_fromSelector as jni.JMethodIDPtr,
            cameraSelector.reference.pointer)
        .object(const $CameraSelector_BuilderType());
  }

  static final _id_setPhysicalCameraId = _class.instanceMethodId(
    r'setPhysicalCameraId',
    r'(Ljava/lang/String;)Landroidx/camera/core/CameraSelector$Builder;',
  );

  static final _setPhysicalCameraId = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.CameraSelector$Builder setPhysicalCameraId(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  CameraSelector_Builder setPhysicalCameraId(
    jni.JString string,
  ) {
    return _setPhysicalCameraId(
            reference.pointer,
            _id_setPhysicalCameraId as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $CameraSelector_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/camera/core/CameraSelector;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.CameraSelector build()
  /// The returned object must be released after use, by calling the [release] method.
  CameraSelector build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $CameraSelectorType());
  }
}

final class $CameraSelector_BuilderType
    extends jni.JObjType<CameraSelector_Builder> {
  const $CameraSelector_BuilderType();

  @override
  String get signature => r'Landroidx/camera/core/CameraSelector$Builder;';

  @override
  CameraSelector_Builder fromReference(jni.JReference reference) =>
      CameraSelector_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraSelector_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector_BuilderType) &&
        other is $CameraSelector_BuilderType;
  }
}

/// from: androidx.camera.core.CameraSelector$LensFacing
class CameraSelector_LensFacing extends jni.JObject {
  @override
  late final jni.JObjType<CameraSelector_LensFacing> $type = type;

  CameraSelector_LensFacing.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'androidx/camera/core/CameraSelector$LensFacing');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraSelector_LensFacingType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CameraSelector_LensFacingImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory CameraSelector_LensFacing.implement(
    $CameraSelector_LensFacingImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CameraSelector_LensFacing.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'androidx.camera.core.CameraSelector$LensFacing',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $CameraSelector_LensFacingImpl {
  factory $CameraSelector_LensFacingImpl() = _$CameraSelector_LensFacingImpl;
}

class _$CameraSelector_LensFacingImpl
    implements $CameraSelector_LensFacingImpl {
  _$CameraSelector_LensFacingImpl();
}

final class $CameraSelector_LensFacingType
    extends jni.JObjType<CameraSelector_LensFacing> {
  const $CameraSelector_LensFacingType();

  @override
  String get signature => r'Landroidx/camera/core/CameraSelector$LensFacing;';

  @override
  CameraSelector_LensFacing fromReference(jni.JReference reference) =>
      CameraSelector_LensFacing.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraSelector_LensFacingType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector_LensFacingType) &&
        other is $CameraSelector_LensFacingType;
  }
}

/// from: androidx.camera.core.CameraSelector
class CameraSelector extends jni.JObject {
  @override
  late final jni.JObjType<CameraSelector> $type = type;

  CameraSelector.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'androidx/camera/core/CameraSelector');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraSelectorType();

  /// from: static public final int LENS_FACING_UNKNOWN
  static const LENS_FACING_UNKNOWN = -1;

  /// from: static public final int LENS_FACING_FRONT
  static const LENS_FACING_FRONT = 0;

  /// from: static public final int LENS_FACING_BACK
  static const LENS_FACING_BACK = 1;

  /// from: static public final int LENS_FACING_EXTERNAL
  static const LENS_FACING_EXTERNAL = 2;
  static final _id_DEFAULT_FRONT_CAMERA = _class.staticFieldId(
    r'DEFAULT_FRONT_CAMERA',
    r'Landroidx/camera/core/CameraSelector;',
  );

  /// from: static public final androidx.camera.core.CameraSelector DEFAULT_FRONT_CAMERA
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector get DEFAULT_FRONT_CAMERA =>
      _id_DEFAULT_FRONT_CAMERA.get(_class, const $CameraSelectorType());

  static final _id_DEFAULT_BACK_CAMERA = _class.staticFieldId(
    r'DEFAULT_BACK_CAMERA',
    r'Landroidx/camera/core/CameraSelector;',
  );

  /// from: static public final androidx.camera.core.CameraSelector DEFAULT_BACK_CAMERA
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector get DEFAULT_BACK_CAMERA =>
      _id_DEFAULT_BACK_CAMERA.get(_class, const $CameraSelectorType());

  static final _id_select = _class.instanceMethodId(
    r'select',
    r'(Ljava/util/LinkedHashSet;)Landroidx/camera/core/impl/CameraInternal;',
  );

  static final _select = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.impl.CameraInternal select(java.util.LinkedHashSet linkedHashSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject select(
    jni.JObject linkedHashSet,
  ) {
    return _select(reference.pointer, _id_select as jni.JMethodIDPtr,
            linkedHashSet.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_filter = _class.instanceMethodId(
    r'filter',
    r'(Ljava/util/List;)Ljava/util/List;',
  );

  static final _filter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List filter(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> filter(
    jni.JList<jni.JObject> list,
  ) {
    return _filter(reference.pointer, _id_filter as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_filter1 = _class.instanceMethodId(
    r'filter',
    r'(Ljava/util/LinkedHashSet;)Ljava/util/LinkedHashSet;',
  );

  static final _filter1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.LinkedHashSet filter(java.util.LinkedHashSet linkedHashSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject filter1(
    jni.JObject linkedHashSet,
  ) {
    return _filter1(reference.pointer, _id_filter1 as jni.JMethodIDPtr,
            linkedHashSet.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getCameraFilterSet = _class.instanceMethodId(
    r'getCameraFilterSet',
    r'()Ljava/util/LinkedHashSet;',
  );

  static final _getCameraFilterSet = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.LinkedHashSet getCameraFilterSet()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCameraFilterSet() {
    return _getCameraFilterSet(
            reference.pointer, _id_getCameraFilterSet as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getLensFacing = _class.instanceMethodId(
    r'getLensFacing',
    r'()Ljava/lang/Integer;',
  );

  static final _getLensFacing = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Integer getLensFacing()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger getLensFacing() {
    return _getLensFacing(
            reference.pointer, _id_getLensFacing as jni.JMethodIDPtr)
        .object(const jni.JIntegerType());
  }

  static final _id_getPhysicalCameraId = _class.instanceMethodId(
    r'getPhysicalCameraId',
    r'()Ljava/lang/String;',
  );

  static final _getPhysicalCameraId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getPhysicalCameraId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPhysicalCameraId() {
    return _getPhysicalCameraId(
            reference.pointer, _id_getPhysicalCameraId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $CameraSelectorType extends jni.JObjType<CameraSelector> {
  const $CameraSelectorType();

  @override
  String get signature => r'Landroidx/camera/core/CameraSelector;';

  @override
  CameraSelector fromReference(jni.JReference reference) =>
      CameraSelector.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraSelectorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelectorType) &&
        other is $CameraSelectorType;
  }
}
