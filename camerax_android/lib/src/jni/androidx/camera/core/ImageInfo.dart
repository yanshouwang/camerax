// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: androidx.camera.core.ImageInfo
class ImageInfo extends jni.JObject {
  @override
  late final jni.JObjType<ImageInfo> $type = type;

  ImageInfo.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'androidx/camera/core/ImageInfo');

  /// The type which includes information such as the signature of this class.
  static const type = $ImageInfoType();
  static final _id_getTagBundle = _class.instanceMethodId(
    r'getTagBundle',
    r'()Landroidx/camera/core/impl/TagBundle;',
  );

  static final _getTagBundle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract androidx.camera.core.impl.TagBundle getTagBundle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTagBundle() {
    return _getTagBundle(
            reference.pointer, _id_getTagBundle as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getTimestamp = _class.instanceMethodId(
    r'getTimestamp',
    r'()J',
  );

  static final _getTimestamp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract long getTimestamp()
  int getTimestamp() {
    return _getTimestamp(
            reference.pointer, _id_getTimestamp as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getRotationDegrees = _class.instanceMethodId(
    r'getRotationDegrees',
    r'()I',
  );

  static final _getRotationDegrees = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getRotationDegrees()
  int getRotationDegrees() {
    return _getRotationDegrees(
            reference.pointer, _id_getRotationDegrees as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getSensorToBufferTransformMatrix = _class.instanceMethodId(
    r'getSensorToBufferTransformMatrix',
    r'()Landroid/graphics/Matrix;',
  );

  static final _getSensorToBufferTransformMatrix =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public android.graphics.Matrix getSensorToBufferTransformMatrix()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSensorToBufferTransformMatrix() {
    return _getSensorToBufferTransformMatrix(reference.pointer,
            _id_getSensorToBufferTransformMatrix as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_populateExifData = _class.instanceMethodId(
    r'populateExifData',
    r'(Landroidx/camera/core/impl/utils/ExifData$Builder;)V',
  );

  static final _populateExifData = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void populateExifData(androidx.camera.core.impl.utils.ExifData$Builder builder)
  void populateExifData(
    jni.JObject builder,
  ) {
    _populateExifData(reference.pointer,
            _id_populateExifData as jni.JMethodIDPtr, builder.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageInfoImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getTagBundle()Landroidx/camera/core/impl/TagBundle;') {
        final $r = _$impls[$p]!.getTagBundle();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getTimestamp()J') {
        final $r = _$impls[$p]!.getTimestamp();
        return jni.JLong($r).reference.toPointer();
      }
      if ($d == r'getRotationDegrees()I') {
        final $r = _$impls[$p]!.getRotationDegrees();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d ==
          r'getSensorToBufferTransformMatrix()Landroid/graphics/Matrix;') {
        final $r = _$impls[$p]!.getSensorToBufferTransformMatrix();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'populateExifData(Landroidx/camera/core/impl/utils/ExifData$Builder;)V') {
        _$impls[$p]!.populateExifData(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageInfo.implement(
    $ImageInfoImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageInfo.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'androidx.camera.core.ImageInfo',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageInfoImpl {
  factory $ImageInfoImpl({
    required jni.JObject Function() getTagBundle,
    required int Function() getTimestamp,
    required int Function() getRotationDegrees,
    required jni.JObject Function() getSensorToBufferTransformMatrix,
    required void Function(jni.JObject builder) populateExifData,
  }) = _$ImageInfoImpl;

  jni.JObject getTagBundle();
  int getTimestamp();
  int getRotationDegrees();
  jni.JObject getSensorToBufferTransformMatrix();
  void populateExifData(jni.JObject builder);
}

class _$ImageInfoImpl implements $ImageInfoImpl {
  _$ImageInfoImpl({
    required jni.JObject Function() getTagBundle,
    required int Function() getTimestamp,
    required int Function() getRotationDegrees,
    required jni.JObject Function() getSensorToBufferTransformMatrix,
    required void Function(jni.JObject builder) populateExifData,
  })  : _getTagBundle = getTagBundle,
        _getTimestamp = getTimestamp,
        _getRotationDegrees = getRotationDegrees,
        _getSensorToBufferTransformMatrix = getSensorToBufferTransformMatrix,
        _populateExifData = populateExifData;

  final jni.JObject Function() _getTagBundle;
  final int Function() _getTimestamp;
  final int Function() _getRotationDegrees;
  final jni.JObject Function() _getSensorToBufferTransformMatrix;
  final void Function(jni.JObject builder) _populateExifData;

  jni.JObject getTagBundle() {
    return _getTagBundle();
  }

  int getTimestamp() {
    return _getTimestamp();
  }

  int getRotationDegrees() {
    return _getRotationDegrees();
  }

  jni.JObject getSensorToBufferTransformMatrix() {
    return _getSensorToBufferTransformMatrix();
  }

  void populateExifData(jni.JObject builder) {
    return _populateExifData(builder);
  }
}

final class $ImageInfoType extends jni.JObjType<ImageInfo> {
  const $ImageInfoType();

  @override
  String get signature => r'Landroidx/camera/core/ImageInfo;';

  @override
  ImageInfo fromReference(jni.JReference reference) =>
      ImageInfo.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageInfoType) && other is $ImageInfoType;
  }
}
