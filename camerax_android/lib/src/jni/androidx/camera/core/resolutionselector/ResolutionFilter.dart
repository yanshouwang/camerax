// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../../android/util/Size.dart' as size_;

/// from: androidx.camera.core.resolutionselector.ResolutionFilter
class ResolutionFilter extends jni.JObject {
  @override
  late final jni.JObjType<ResolutionFilter> $type = type;

  ResolutionFilter.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'androidx/camera/core/resolutionselector/ResolutionFilter');

  /// The type which includes information such as the signature of this class.
  static const type = $ResolutionFilterType();
  static final _id_filter = _class.instanceMethodId(
    r'filter',
    r'(Ljava/util/List;I)Ljava/util/List;',
  );

  static final _filter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.util.List filter(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<size_.Size> filter(
    jni.JList<size_.Size> list,
    int i,
  ) {
    return _filter(reference.pointer, _id_filter as jni.JMethodIDPtr,
            list.reference.pointer, i)
        .object(const jni.JListType(size_.$SizeType()));
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ResolutionFilterImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'filter(Ljava/util/List;I)Ljava/util/List;') {
        final $r = _$impls[$p]!.filter(
          $a[0].castTo(const jni.JListType(size_.$SizeType()),
              releaseOriginal: true),
          $a[1]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ResolutionFilter.implement(
    $ResolutionFilterImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ResolutionFilter.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'androidx.camera.core.resolutionselector.ResolutionFilter',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ResolutionFilterImpl {
  factory $ResolutionFilterImpl({
    required jni.JList<size_.Size> Function(jni.JList<size_.Size> list, int i)
        filter,
  }) = _$ResolutionFilterImpl;

  jni.JList<size_.Size> filter(jni.JList<size_.Size> list, int i);
}

class _$ResolutionFilterImpl implements $ResolutionFilterImpl {
  _$ResolutionFilterImpl({
    required jni.JList<size_.Size> Function(jni.JList<size_.Size> list, int i)
        filter,
  }) : _filter = filter;

  final jni.JList<size_.Size> Function(jni.JList<size_.Size> list, int i)
      _filter;

  jni.JList<size_.Size> filter(jni.JList<size_.Size> list, int i) {
    return _filter(list, i);
  }
}

final class $ResolutionFilterType extends jni.JObjType<ResolutionFilter> {
  const $ResolutionFilterType();

  @override
  String get signature =>
      r'Landroidx/camera/core/resolutionselector/ResolutionFilter;';

  @override
  ResolutionFilter fromReference(jni.JReference reference) =>
      ResolutionFilter.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResolutionFilterType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResolutionFilterType) &&
        other is $ResolutionFilterType;
  }
}
