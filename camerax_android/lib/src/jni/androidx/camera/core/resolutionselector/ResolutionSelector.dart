// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'AspectRatioStrategy.dart' as aspectratiostrategy_;

import 'ResolutionFilter.dart' as resolutionfilter_;

import 'ResolutionStrategy.dart' as resolutionstrategy_;

/// from: androidx.camera.core.resolutionselector.ResolutionSelector$AllowedResolutionMode
class ResolutionSelector_AllowedResolutionMode extends jni.JObject {
  @override
  late final jni.JObjType<ResolutionSelector_AllowedResolutionMode> $type =
      type;

  ResolutionSelector_AllowedResolutionMode.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'androidx/camera/core/resolutionselector/ResolutionSelector$AllowedResolutionMode');

  /// The type which includes information such as the signature of this class.
  static const type = $ResolutionSelector_AllowedResolutionModeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ResolutionSelector_AllowedResolutionModeImpl> _$impls =
      {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ResolutionSelector_AllowedResolutionMode.implement(
    $ResolutionSelector_AllowedResolutionModeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ResolutionSelector_AllowedResolutionMode.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'androidx.camera.core.resolutionselector.ResolutionSelector$AllowedResolutionMode',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ResolutionSelector_AllowedResolutionModeImpl {
  factory $ResolutionSelector_AllowedResolutionModeImpl() =
      _$ResolutionSelector_AllowedResolutionModeImpl;
}

class _$ResolutionSelector_AllowedResolutionModeImpl
    implements $ResolutionSelector_AllowedResolutionModeImpl {
  _$ResolutionSelector_AllowedResolutionModeImpl();
}

final class $ResolutionSelector_AllowedResolutionModeType
    extends jni.JObjType<ResolutionSelector_AllowedResolutionMode> {
  const $ResolutionSelector_AllowedResolutionModeType();

  @override
  String get signature =>
      r'Landroidx/camera/core/resolutionselector/ResolutionSelector$AllowedResolutionMode;';

  @override
  ResolutionSelector_AllowedResolutionMode fromReference(
          jni.JReference reference) =>
      ResolutionSelector_AllowedResolutionMode.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResolutionSelector_AllowedResolutionModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ResolutionSelector_AllowedResolutionModeType) &&
        other is $ResolutionSelector_AllowedResolutionModeType;
  }
}

/// from: androidx.camera.core.resolutionselector.ResolutionSelector$Builder
class ResolutionSelector_Builder extends jni.JObject {
  @override
  late final jni.JObjType<ResolutionSelector_Builder> $type = type;

  ResolutionSelector_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'androidx/camera/core/resolutionselector/ResolutionSelector$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $ResolutionSelector_BuilderType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ResolutionSelector_Builder() {
    return ResolutionSelector_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_fromResolutionSelector = _class.staticMethodId(
    r'fromResolutionSelector',
    r'(Landroidx/camera/core/resolutionselector/ResolutionSelector;)Landroidx/camera/core/resolutionselector/ResolutionSelector$Builder;',
  );

  static final _fromResolutionSelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.camera.core.resolutionselector.ResolutionSelector$Builder fromResolutionSelector(androidx.camera.core.resolutionselector.ResolutionSelector resolutionSelector)
  /// The returned object must be released after use, by calling the [release] method.
  static ResolutionSelector_Builder fromResolutionSelector(
    ResolutionSelector resolutionSelector,
  ) {
    return _fromResolutionSelector(
            _class.reference.pointer,
            _id_fromResolutionSelector as jni.JMethodIDPtr,
            resolutionSelector.reference.pointer)
        .object(const $ResolutionSelector_BuilderType());
  }

  static final _id_setAspectRatioStrategy = _class.instanceMethodId(
    r'setAspectRatioStrategy',
    r'(Landroidx/camera/core/resolutionselector/AspectRatioStrategy;)Landroidx/camera/core/resolutionselector/ResolutionSelector$Builder;',
  );

  static final _setAspectRatioStrategy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.resolutionselector.ResolutionSelector$Builder setAspectRatioStrategy(androidx.camera.core.resolutionselector.AspectRatioStrategy aspectRatioStrategy)
  /// The returned object must be released after use, by calling the [release] method.
  ResolutionSelector_Builder setAspectRatioStrategy(
    aspectratiostrategy_.AspectRatioStrategy aspectRatioStrategy,
  ) {
    return _setAspectRatioStrategy(
            reference.pointer,
            _id_setAspectRatioStrategy as jni.JMethodIDPtr,
            aspectRatioStrategy.reference.pointer)
        .object(const $ResolutionSelector_BuilderType());
  }

  static final _id_setResolutionStrategy = _class.instanceMethodId(
    r'setResolutionStrategy',
    r'(Landroidx/camera/core/resolutionselector/ResolutionStrategy;)Landroidx/camera/core/resolutionselector/ResolutionSelector$Builder;',
  );

  static final _setResolutionStrategy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.resolutionselector.ResolutionSelector$Builder setResolutionStrategy(androidx.camera.core.resolutionselector.ResolutionStrategy resolutionStrategy)
  /// The returned object must be released after use, by calling the [release] method.
  ResolutionSelector_Builder setResolutionStrategy(
    resolutionstrategy_.ResolutionStrategy resolutionStrategy,
  ) {
    return _setResolutionStrategy(
            reference.pointer,
            _id_setResolutionStrategy as jni.JMethodIDPtr,
            resolutionStrategy.reference.pointer)
        .object(const $ResolutionSelector_BuilderType());
  }

  static final _id_setResolutionFilter = _class.instanceMethodId(
    r'setResolutionFilter',
    r'(Landroidx/camera/core/resolutionselector/ResolutionFilter;)Landroidx/camera/core/resolutionselector/ResolutionSelector$Builder;',
  );

  static final _setResolutionFilter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.resolutionselector.ResolutionSelector$Builder setResolutionFilter(androidx.camera.core.resolutionselector.ResolutionFilter resolutionFilter)
  /// The returned object must be released after use, by calling the [release] method.
  ResolutionSelector_Builder setResolutionFilter(
    resolutionfilter_.ResolutionFilter resolutionFilter,
  ) {
    return _setResolutionFilter(
            reference.pointer,
            _id_setResolutionFilter as jni.JMethodIDPtr,
            resolutionFilter.reference.pointer)
        .object(const $ResolutionSelector_BuilderType());
  }

  static final _id_setAllowedResolutionMode = _class.instanceMethodId(
    r'setAllowedResolutionMode',
    r'(I)Landroidx/camera/core/resolutionselector/ResolutionSelector$Builder;',
  );

  static final _setAllowedResolutionMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.resolutionselector.ResolutionSelector$Builder setAllowedResolutionMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ResolutionSelector_Builder setAllowedResolutionMode(
    int i,
  ) {
    return _setAllowedResolutionMode(reference.pointer,
            _id_setAllowedResolutionMode as jni.JMethodIDPtr, i)
        .object(const $ResolutionSelector_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/camera/core/resolutionselector/ResolutionSelector;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.resolutionselector.ResolutionSelector build()
  /// The returned object must be released after use, by calling the [release] method.
  ResolutionSelector build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $ResolutionSelectorType());
  }
}

final class $ResolutionSelector_BuilderType
    extends jni.JObjType<ResolutionSelector_Builder> {
  const $ResolutionSelector_BuilderType();

  @override
  String get signature =>
      r'Landroidx/camera/core/resolutionselector/ResolutionSelector$Builder;';

  @override
  ResolutionSelector_Builder fromReference(jni.JReference reference) =>
      ResolutionSelector_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResolutionSelector_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResolutionSelector_BuilderType) &&
        other is $ResolutionSelector_BuilderType;
  }
}

/// from: androidx.camera.core.resolutionselector.ResolutionSelector
class ResolutionSelector extends jni.JObject {
  @override
  late final jni.JObjType<ResolutionSelector> $type = type;

  ResolutionSelector.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'androidx/camera/core/resolutionselector/ResolutionSelector');

  /// The type which includes information such as the signature of this class.
  static const type = $ResolutionSelectorType();

  /// from: static public final int PREFER_CAPTURE_RATE_OVER_HIGHER_RESOLUTION
  static const PREFER_CAPTURE_RATE_OVER_HIGHER_RESOLUTION = 0;

  /// from: static public final int PREFER_HIGHER_RESOLUTION_OVER_CAPTURE_RATE
  static const PREFER_HIGHER_RESOLUTION_OVER_CAPTURE_RATE = 1;
  static final _id_getAspectRatioStrategy = _class.instanceMethodId(
    r'getAspectRatioStrategy',
    r'()Landroidx/camera/core/resolutionselector/AspectRatioStrategy;',
  );

  static final _getAspectRatioStrategy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.resolutionselector.AspectRatioStrategy getAspectRatioStrategy()
  /// The returned object must be released after use, by calling the [release] method.
  aspectratiostrategy_.AspectRatioStrategy getAspectRatioStrategy() {
    return _getAspectRatioStrategy(
            reference.pointer, _id_getAspectRatioStrategy as jni.JMethodIDPtr)
        .object(const aspectratiostrategy_.$AspectRatioStrategyType());
  }

  static final _id_getResolutionStrategy = _class.instanceMethodId(
    r'getResolutionStrategy',
    r'()Landroidx/camera/core/resolutionselector/ResolutionStrategy;',
  );

  static final _getResolutionStrategy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.resolutionselector.ResolutionStrategy getResolutionStrategy()
  /// The returned object must be released after use, by calling the [release] method.
  resolutionstrategy_.ResolutionStrategy getResolutionStrategy() {
    return _getResolutionStrategy(
            reference.pointer, _id_getResolutionStrategy as jni.JMethodIDPtr)
        .object(const resolutionstrategy_.$ResolutionStrategyType());
  }

  static final _id_getResolutionFilter = _class.instanceMethodId(
    r'getResolutionFilter',
    r'()Landroidx/camera/core/resolutionselector/ResolutionFilter;',
  );

  static final _getResolutionFilter = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.resolutionselector.ResolutionFilter getResolutionFilter()
  /// The returned object must be released after use, by calling the [release] method.
  resolutionfilter_.ResolutionFilter getResolutionFilter() {
    return _getResolutionFilter(
            reference.pointer, _id_getResolutionFilter as jni.JMethodIDPtr)
        .object(const resolutionfilter_.$ResolutionFilterType());
  }

  static final _id_getAllowedResolutionMode = _class.instanceMethodId(
    r'getAllowedResolutionMode',
    r'()I',
  );

  static final _getAllowedResolutionMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getAllowedResolutionMode()
  int getAllowedResolutionMode() {
    return _getAllowedResolutionMode(
            reference.pointer, _id_getAllowedResolutionMode as jni.JMethodIDPtr)
        .integer;
  }
}

final class $ResolutionSelectorType extends jni.JObjType<ResolutionSelector> {
  const $ResolutionSelectorType();

  @override
  String get signature =>
      r'Landroidx/camera/core/resolutionselector/ResolutionSelector;';

  @override
  ResolutionSelector fromReference(jni.JReference reference) =>
      ResolutionSelector.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResolutionSelectorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResolutionSelectorType) &&
        other is $ResolutionSelectorType;
  }
}
