// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../android/util/Size.dart' as size_;

/// from: androidx.camera.video.Quality$ConstantQuality
class Quality_ConstantQuality extends Quality {
  @override
  late final jni.JObjType<Quality_ConstantQuality> $type = type;

  Quality_ConstantQuality.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'androidx/camera/video/Quality$ConstantQuality');

  /// The type which includes information such as the signature of this class.
  static const type = $Quality_ConstantQualityType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Quality_ConstantQuality() {
    return Quality_ConstantQuality.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()I',
  );

  static final _getValue = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getValue()
  int getValue() {
    return _getValue(reference.pointer, _id_getValue as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getName = _class.instanceMethodId(
    r'getName',
    r'()Ljava/lang/String;',
  );

  static final _getName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getName() {
    return _getName(reference.pointer, _id_getName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getTypicalSizes = _class.instanceMethodId(
    r'getTypicalSizes',
    r'()Ljava/util/List;',
  );

  static final _getTypicalSizes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.util.List getTypicalSizes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<size_.Size> getTypicalSizes() {
    return _getTypicalSizes(
            reference.pointer, _id_getTypicalSizes as jni.JMethodIDPtr)
        .object(const jni.JListType(size_.$SizeType()));
  }
}

final class $Quality_ConstantQualityType
    extends jni.JObjType<Quality_ConstantQuality> {
  const $Quality_ConstantQualityType();

  @override
  String get signature => r'Landroidx/camera/video/Quality$ConstantQuality;';

  @override
  Quality_ConstantQuality fromReference(jni.JReference reference) =>
      Quality_ConstantQuality.fromReference(reference);

  @override
  jni.JObjType get superType => const $QualityType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($Quality_ConstantQualityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Quality_ConstantQualityType) &&
        other is $Quality_ConstantQualityType;
  }
}

/// from: androidx.camera.video.Quality
class Quality extends jni.JObject {
  @override
  late final jni.JObjType<Quality> $type = type;

  Quality.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'androidx/camera/video/Quality');

  /// The type which includes information such as the signature of this class.
  static const type = $QualityType();
  static final _id_SD = _class.staticFieldId(
    r'SD',
    r'Landroidx/camera/video/Quality;',
  );

  /// from: static public final androidx.camera.video.Quality SD
  /// The returned object must be released after use, by calling the [release] method.
  static Quality get SD => _id_SD.get(_class, const $QualityType());

  static final _id_HD = _class.staticFieldId(
    r'HD',
    r'Landroidx/camera/video/Quality;',
  );

  /// from: static public final androidx.camera.video.Quality HD
  /// The returned object must be released after use, by calling the [release] method.
  static Quality get HD => _id_HD.get(_class, const $QualityType());

  static final _id_FHD = _class.staticFieldId(
    r'FHD',
    r'Landroidx/camera/video/Quality;',
  );

  /// from: static public final androidx.camera.video.Quality FHD
  /// The returned object must be released after use, by calling the [release] method.
  static Quality get FHD => _id_FHD.get(_class, const $QualityType());

  static final _id_UHD = _class.staticFieldId(
    r'UHD',
    r'Landroidx/camera/video/Quality;',
  );

  /// from: static public final androidx.camera.video.Quality UHD
  /// The returned object must be released after use, by calling the [release] method.
  static Quality get UHD => _id_UHD.get(_class, const $QualityType());

  static final _id_LOWEST = _class.staticFieldId(
    r'LOWEST',
    r'Landroidx/camera/video/Quality;',
  );

  /// from: static public final androidx.camera.video.Quality LOWEST
  /// The returned object must be released after use, by calling the [release] method.
  static Quality get LOWEST => _id_LOWEST.get(_class, const $QualityType());

  static final _id_HIGHEST = _class.staticFieldId(
    r'HIGHEST',
    r'Landroidx/camera/video/Quality;',
  );

  /// from: static public final androidx.camera.video.Quality HIGHEST
  /// The returned object must be released after use, by calling the [release] method.
  static Quality get HIGHEST => _id_HIGHEST.get(_class, const $QualityType());

  static final _id_getSortedQualities = _class.staticMethodId(
    r'getSortedQualities',
    r'()Ljava/util/List;',
  );

  static final _getSortedQualities = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.List getSortedQualities()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JList<Quality> getSortedQualities() {
    return _getSortedQualities(_class.reference.pointer,
            _id_getSortedQualities as jni.JMethodIDPtr)
        .object(const jni.JListType($QualityType()));
  }
}

final class $QualityType extends jni.JObjType<Quality> {
  const $QualityType();

  @override
  String get signature => r'Landroidx/camera/video/Quality;';

  @override
  Quality fromReference(jni.JReference reference) =>
      Quality.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($QualityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($QualityType) && other is $QualityType;
  }
}
