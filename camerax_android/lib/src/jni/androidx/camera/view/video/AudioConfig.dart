// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: androidx.camera.view.video.AudioConfig
class AudioConfig extends jni.JObject {
  @override
  late final jni.JObjType<AudioConfig> $type = type;

  AudioConfig.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'androidx/camera/view/video/AudioConfig');

  /// The type which includes information such as the signature of this class.
  static const type = $AudioConfigType();
  static final _id_AUDIO_DISABLED = _class.staticFieldId(
    r'AUDIO_DISABLED',
    r'Landroidx/camera/view/video/AudioConfig;',
  );

  /// from: static public final androidx.camera.view.video.AudioConfig AUDIO_DISABLED
  /// The returned object must be released after use, by calling the [release] method.
  static AudioConfig get AUDIO_DISABLED =>
      _id_AUDIO_DISABLED.get(_class, const $AudioConfigType());

  static final _id_create = _class.staticMethodId(
    r'create',
    r'(Z)Landroidx/camera/view/video/AudioConfig;',
  );

  static final _create = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public androidx.camera.view.video.AudioConfig create(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  static AudioConfig create(
    bool z,
  ) {
    return _create(
            _class.reference.pointer, _id_create as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $AudioConfigType());
  }

  static final _id_getAudioEnabled = _class.instanceMethodId(
    r'getAudioEnabled',
    r'()Z',
  );

  static final _getAudioEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean getAudioEnabled()
  bool getAudioEnabled() {
    return _getAudioEnabled(
            reference.pointer, _id_getAudioEnabled as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $AudioConfigType extends jni.JObjType<AudioConfig> {
  const $AudioConfigType();

  @override
  String get signature => r'Landroidx/camera/view/video/AudioConfig;';

  @override
  AudioConfig fromReference(jni.JReference reference) =>
      AudioConfig.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AudioConfigType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioConfigType) && other is $AudioConfigType;
  }
}
