// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../android/content/Context.dart' as context_;

import '../../lifecycle/LifecycleOwner.dart' as lifecycleowner_;

import 'CameraController.dart' as cameracontroller_;

/// from: androidx.camera.view.LifecycleCameraController
class LifecycleCameraController extends cameracontroller_.CameraController {
  @override
  late final jni.JObjType<LifecycleCameraController> $type = type;

  LifecycleCameraController.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'androidx/camera/view/LifecycleCameraController');

  /// The type which includes information such as the signature of this class.
  static const type = $LifecycleCameraControllerType();
  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  factory LifecycleCameraController(
    context_.Context context,
  ) {
    return LifecycleCameraController.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            context.reference.pointer)
        .reference);
  }

  static final _id_bindToLifecycle = _class.instanceMethodId(
    r'bindToLifecycle',
    r'(Landroidx/lifecycle/LifecycleOwner;)V',
  );

  static final _bindToLifecycle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void bindToLifecycle(androidx.lifecycle.LifecycleOwner lifecycleOwner)
  void bindToLifecycle(
    lifecycleowner_.LifecycleOwner lifecycleOwner,
  ) {
    _bindToLifecycle(reference.pointer, _id_bindToLifecycle as jni.JMethodIDPtr,
            lifecycleOwner.reference.pointer)
        .check();
  }

  static final _id_unbind = _class.instanceMethodId(
    r'unbind',
    r'()V',
  );

  static final _unbind = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void unbind()
  void unbind() {
    _unbind(reference.pointer, _id_unbind as jni.JMethodIDPtr).check();
  }
}

final class $LifecycleCameraControllerType
    extends jni.JObjType<LifecycleCameraController> {
  const $LifecycleCameraControllerType();

  @override
  String get signature => r'Landroidx/camera/view/LifecycleCameraController;';

  @override
  LifecycleCameraController fromReference(jni.JReference reference) =>
      LifecycleCameraController.fromReference(reference);

  @override
  jni.JObjType get superType => const cameracontroller_.$CameraControllerType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($LifecycleCameraControllerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LifecycleCameraControllerType) &&
        other is $LifecycleCameraControllerType;
  }
}
