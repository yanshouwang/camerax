// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `androidx.lifecycle.Observer`
class Observer<$T extends jni$_.JObject?> extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Observer<$T>> $type;

  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  Observer.fromReference(
    this.T,
    jni$_.JReference reference,
  )   : $type = type<$T>(T),
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/lifecycle/Observer');

  /// The type which includes information such as the signature of this class.
  static $Observer$NullableType<$T> nullableType<$T extends jni$_.JObject?>(
    jni$_.JObjType<$T> T,
  ) {
    return $Observer$NullableType<$T>(
      T,
    );
  }

  static $Observer$Type<$T> type<$T extends jni$_.JObject?>(
    jni$_.JObjType<$T> T,
  ) {
    return $Observer$Type<$T>(
      T,
    );
  }

  static final _id_onChanged = _class.instanceMethodId(
    r'onChanged',
    r'(Ljava/lang/Object;)V',
  );

  static final _onChanged = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onChanged(T object)`
  void onChanged(
    $T object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    _onChanged(reference.pointer, _id_onChanged as jni$_.JMethodIDPtr,
            _$object.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Observer> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onChanged(Ljava/lang/Object;)V') {
        _$impls[$p]!.onChanged(
          $a![0]?.as(_$impls[$p]!.T, releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn<$T extends jni$_.JObject?>(
    jni$_.JImplementer implementer,
    $Observer<$T> $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.lifecycle.Observer',
      $p,
      _$invokePointer,
      [
        if ($impl.onChanged$async) r'onChanged(Ljava/lang/Object;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Observer.implement(
    $Observer<$T> $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Observer<$T>.fromReference(
      $impl.T,
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Observer<$T extends jni$_.JObject?> {
  factory $Observer({
    required jni$_.JObjType<$T> T,
    required void Function($T object) onChanged,
    bool onChanged$async,
  }) = _$Observer<$T>;

  jni$_.JObjType<$T> get T;

  void onChanged($T object);
  bool get onChanged$async => false;
}

final class _$Observer<$T extends jni$_.JObject?> with $Observer<$T> {
  _$Observer({
    required this.T,
    required void Function($T object) onChanged,
    this.onChanged$async = false,
  }) : _onChanged = onChanged;

  @core$_.override
  final jni$_.JObjType<$T> T;

  final void Function($T object) _onChanged;
  final bool onChanged$async;

  void onChanged($T object) {
    return _onChanged(object);
  }
}

final class $Observer$NullableType<$T extends jni$_.JObject?>
    extends jni$_.JObjType<Observer<$T>?> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $Observer$NullableType(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/lifecycle/Observer;';

  @jni$_.internal
  @core$_.override
  Observer<$T>? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Observer<$T>.fromReference(
          T,
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Observer<$T>?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($Observer$NullableType, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Observer$NullableType<$T>) &&
        other is $Observer$NullableType<$T> &&
        T == other.T;
  }
}

final class $Observer$Type<$T extends jni$_.JObject?>
    extends jni$_.JObjType<Observer<$T>> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $Observer$Type(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/lifecycle/Observer;';

  @jni$_.internal
  @core$_.override
  Observer<$T> fromReference(jni$_.JReference reference) =>
      Observer<$T>.fromReference(
        T,
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Observer<$T>?> get nullableType =>
      $Observer$NullableType<$T>(T);

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($Observer$Type, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Observer$Type<$T>) &&
        other is $Observer$Type<$T> &&
        T == other.T;
  }
}
