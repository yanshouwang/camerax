// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'LifecycleOwner.dart' as lifecycleowner$_;

import 'Observer.dart' as observer$_;

/// from: `androidx.lifecycle.LiveData`
class LiveData<$T extends jni$_.JObject?> extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LiveData<$T>> $type;

  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  LiveData.fromReference(
    this.T,
    jni$_.JReference reference,
  )   : $type = type<$T>(T),
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/lifecycle/LiveData');

  /// The type which includes information such as the signature of this class.
  static $LiveData$NullableType<$T> nullableType<$T extends jni$_.JObject?>(
    jni$_.JObjType<$T> T,
  ) {
    return $LiveData$NullableType<$T>(
      T,
    );
  }

  static $LiveData$Type<$T> type<$T extends jni$_.JObject?>(
    jni$_.JObjType<$T> T,
  ) {
    return $LiveData$Type<$T>(
      T,
    );
  }

  static final _id_observe = _class.instanceMethodId(
    r'observe',
    r'(Landroidx/lifecycle/LifecycleOwner;Landroidx/lifecycle/Observer;)V',
  );

  static final _observe = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void observe(androidx.lifecycle.LifecycleOwner lifecycleOwner, androidx.lifecycle.Observer observer)`
  void observe(
    lifecycleowner$_.LifecycleOwner? lifecycleOwner,
    observer$_.Observer<jni$_.JObject?>? observer,
  ) {
    final _$lifecycleOwner = lifecycleOwner?.reference ?? jni$_.jNullReference;
    final _$observer = observer?.reference ?? jni$_.jNullReference;
    _observe(reference.pointer, _id_observe as jni$_.JMethodIDPtr,
            _$lifecycleOwner.pointer, _$observer.pointer)
        .check();
  }

  static final _id_observeForever = _class.instanceMethodId(
    r'observeForever',
    r'(Landroidx/lifecycle/Observer;)V',
  );

  static final _observeForever = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void observeForever(androidx.lifecycle.Observer observer)`
  void observeForever(
    observer$_.Observer<jni$_.JObject?>? observer,
  ) {
    final _$observer = observer?.reference ?? jni$_.jNullReference;
    _observeForever(reference.pointer, _id_observeForever as jni$_.JMethodIDPtr,
            _$observer.pointer)
        .check();
  }

  static final _id_removeObserver = _class.instanceMethodId(
    r'removeObserver',
    r'(Landroidx/lifecycle/Observer;)V',
  );

  static final _removeObserver = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void removeObserver(androidx.lifecycle.Observer observer)`
  void removeObserver(
    observer$_.Observer<jni$_.JObject?>? observer,
  ) {
    final _$observer = observer?.reference ?? jni$_.jNullReference;
    _removeObserver(reference.pointer, _id_removeObserver as jni$_.JMethodIDPtr,
            _$observer.pointer)
        .check();
  }

  static final _id_removeObservers = _class.instanceMethodId(
    r'removeObservers',
    r'(Landroidx/lifecycle/LifecycleOwner;)V',
  );

  static final _removeObservers = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void removeObservers(androidx.lifecycle.LifecycleOwner lifecycleOwner)`
  void removeObservers(
    lifecycleowner$_.LifecycleOwner? lifecycleOwner,
  ) {
    final _$lifecycleOwner = lifecycleOwner?.reference ?? jni$_.jNullReference;
    _removeObservers(reference.pointer,
            _id_removeObservers as jni$_.JMethodIDPtr, _$lifecycleOwner.pointer)
        .check();
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()Ljava/lang/Object;',
  );

  static final _getValue = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public T getValue()`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getValue() {
    return _getValue(reference.pointer, _id_getValue as jni$_.JMethodIDPtr)
        .object<$T?>(T.nullableType);
  }

  static final _id_isInitialized = _class.instanceMethodId(
    r'isInitialized',
    r'()Z',
  );

  static final _isInitialized = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isInitialized()`
  bool isInitialized() {
    return _isInitialized(
            reference.pointer, _id_isInitialized as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_hasObservers = _class.instanceMethodId(
    r'hasObservers',
    r'()Z',
  );

  static final _hasObservers = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean hasObservers()`
  bool hasObservers() {
    return _hasObservers(
            reference.pointer, _id_hasObservers as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_hasActiveObservers = _class.instanceMethodId(
    r'hasActiveObservers',
    r'()Z',
  );

  static final _hasActiveObservers = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean hasActiveObservers()`
  bool hasActiveObservers() {
    return _hasActiveObservers(
            reference.pointer, _id_hasActiveObservers as jni$_.JMethodIDPtr)
        .boolean;
  }
}

final class $LiveData$NullableType<$T extends jni$_.JObject?>
    extends jni$_.JObjType<LiveData<$T>?> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $LiveData$NullableType(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/lifecycle/LiveData;';

  @jni$_.internal
  @core$_.override
  LiveData<$T>? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : LiveData<$T>.fromReference(
          T,
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LiveData<$T>?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($LiveData$NullableType, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LiveData$NullableType<$T>) &&
        other is $LiveData$NullableType<$T> &&
        T == other.T;
  }
}

final class $LiveData$Type<$T extends jni$_.JObject?>
    extends jni$_.JObjType<LiveData<$T>> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $LiveData$Type(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/lifecycle/LiveData;';

  @jni$_.internal
  @core$_.override
  LiveData<$T> fromReference(jni$_.JReference reference) =>
      LiveData<$T>.fromReference(
        T,
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LiveData<$T>?> get nullableType =>
      $LiveData$NullableType<$T>(T);

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($LiveData$Type, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LiveData$Type<$T>) &&
        other is $LiveData$Type<$T> &&
        T == other.T;
  }
}
