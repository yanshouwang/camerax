// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'LifecycleOwner.dart' as lifecycleowner_;

import 'Observer.dart' as observer_;

/// from: androidx.lifecycle.LiveData
class LiveData<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<LiveData<$T>> $type = type(T);

  final jni.JObjType<$T> T;

  LiveData.fromReference(
    this.T,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'androidx/lifecycle/LiveData');

  /// The type which includes information such as the signature of this class.
  static $LiveDataType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $LiveDataType(
      T,
    );
  }

  static final _id_new0 = _class.constructorId(
    r'(Ljava/lang/Object;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(T object)
  /// The returned object must be released after use, by calling the [release] method.
  factory LiveData(
    $T object, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      object.$type,
    ]) as jni.JObjType<$T>;
    return LiveData.fromReference(
        T,
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr,
                object.reference.pointer)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'()V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory LiveData.new1({
    required jni.JObjType<$T> T,
  }) {
    return LiveData.fromReference(
        T,
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_observe = _class.instanceMethodId(
    r'observe',
    r'(Landroidx/lifecycle/LifecycleOwner;Landroidx/lifecycle/Observer;)V',
  );

  static final _observe = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void observe(androidx.lifecycle.LifecycleOwner lifecycleOwner, androidx.lifecycle.Observer observer)
  void observe(
    lifecycleowner_.LifecycleOwner lifecycleOwner,
    observer_.Observer<$T> observer,
  ) {
    _observe(reference.pointer, _id_observe as jni.JMethodIDPtr,
            lifecycleOwner.reference.pointer, observer.reference.pointer)
        .check();
  }

  static final _id_observeForever = _class.instanceMethodId(
    r'observeForever',
    r'(Landroidx/lifecycle/Observer;)V',
  );

  static final _observeForever = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void observeForever(androidx.lifecycle.Observer observer)
  void observeForever(
    observer_.Observer<$T> observer,
  ) {
    _observeForever(reference.pointer, _id_observeForever as jni.JMethodIDPtr,
            observer.reference.pointer)
        .check();
  }

  static final _id_removeObserver = _class.instanceMethodId(
    r'removeObserver',
    r'(Landroidx/lifecycle/Observer;)V',
  );

  static final _removeObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void removeObserver(androidx.lifecycle.Observer observer)
  void removeObserver(
    observer_.Observer<$T> observer,
  ) {
    _removeObserver(reference.pointer, _id_removeObserver as jni.JMethodIDPtr,
            observer.reference.pointer)
        .check();
  }

  static final _id_removeObservers = _class.instanceMethodId(
    r'removeObservers',
    r'(Landroidx/lifecycle/LifecycleOwner;)V',
  );

  static final _removeObservers = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void removeObservers(androidx.lifecycle.LifecycleOwner lifecycleOwner)
  void removeObservers(
    lifecycleowner_.LifecycleOwner lifecycleOwner,
  ) {
    _removeObservers(reference.pointer, _id_removeObservers as jni.JMethodIDPtr,
            lifecycleOwner.reference.pointer)
        .check();
  }

  static final _id_postValue = _class.instanceMethodId(
    r'postValue',
    r'(Ljava/lang/Object;)V',
  );

  static final _postValue = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void postValue(T object)
  void postValue(
    $T object,
  ) {
    _postValue(reference.pointer, _id_postValue as jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  static final _id_setValue = _class.instanceMethodId(
    r'setValue',
    r'(Ljava/lang/Object;)V',
  );

  static final _setValue = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void setValue(T object)
  void setValue(
    $T object,
  ) {
    _setValue(reference.pointer, _id_setValue as jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()Ljava/lang/Object;',
  );

  static final _getValue = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public T getValue()
  /// The returned object must be released after use, by calling the [release] method.
  $T getValue() {
    return _getValue(reference.pointer, _id_getValue as jni.JMethodIDPtr)
        .object(T);
  }

  static final _id_isInitialized = _class.instanceMethodId(
    r'isInitialized',
    r'()Z',
  );

  static final _isInitialized = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isInitialized()
  bool isInitialized() {
    return _isInitialized(
            reference.pointer, _id_isInitialized as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onActive = _class.instanceMethodId(
    r'onActive',
    r'()V',
  );

  static final _onActive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onActive()
  void onActive() {
    _onActive(reference.pointer, _id_onActive as jni.JMethodIDPtr).check();
  }

  static final _id_onInactive = _class.instanceMethodId(
    r'onInactive',
    r'()V',
  );

  static final _onInactive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onInactive()
  void onInactive() {
    _onInactive(reference.pointer, _id_onInactive as jni.JMethodIDPtr).check();
  }

  static final _id_hasObservers = _class.instanceMethodId(
    r'hasObservers',
    r'()Z',
  );

  static final _hasObservers = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean hasObservers()
  bool hasObservers() {
    return _hasObservers(
            reference.pointer, _id_hasObservers as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_hasActiveObservers = _class.instanceMethodId(
    r'hasActiveObservers',
    r'()Z',
  );

  static final _hasActiveObservers = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean hasActiveObservers()
  bool hasActiveObservers() {
    return _hasActiveObservers(
            reference.pointer, _id_hasActiveObservers as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $LiveDataType<$T extends jni.JObject>
    extends jni.JObjType<LiveData<$T>> {
  final jni.JObjType<$T> T;

  const $LiveDataType(
    this.T,
  );

  @override
  String get signature => r'Landroidx/lifecycle/LiveData;';

  @override
  LiveData<$T> fromReference(jni.JReference reference) =>
      LiveData.fromReference(T, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($LiveDataType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LiveDataType<$T>) &&
        other is $LiveDataType<$T> &&
        T == other.T;
  }
}
