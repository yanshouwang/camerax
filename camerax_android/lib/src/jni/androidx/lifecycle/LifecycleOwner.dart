// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `androidx.lifecycle.LifecycleOwner`
class LifecycleOwner extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LifecycleOwner> $type;

  @jni$_.internal
  LifecycleOwner.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'androidx/lifecycle/LifecycleOwner');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $LifecycleOwner$NullableType();
  static const type = $LifecycleOwner$Type();
  static final _id_getLifecycle = _class.instanceMethodId(
    r'getLifecycle',
    r'()Landroidx/lifecycle/Lifecycle;',
  );

  static final _getLifecycle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract androidx.lifecycle.Lifecycle getLifecycle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getLifecycle() {
    return _getLifecycle(
            reference.pointer, _id_getLifecycle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $LifecycleOwner> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getLifecycle()Landroidx/lifecycle/Lifecycle;') {
        final $r = _$impls[$p]!.getLifecycle();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $LifecycleOwner $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.lifecycle.LifecycleOwner',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory LifecycleOwner.implement(
    $LifecycleOwner $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return LifecycleOwner.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $LifecycleOwner {
  factory $LifecycleOwner({
    required jni$_.JObject Function() getLifecycle,
  }) = _$LifecycleOwner;

  jni$_.JObject getLifecycle();
}

final class _$LifecycleOwner with $LifecycleOwner {
  _$LifecycleOwner({
    required jni$_.JObject Function() getLifecycle,
  }) : _getLifecycle = getLifecycle;

  final jni$_.JObject Function() _getLifecycle;

  jni$_.JObject getLifecycle() {
    return _getLifecycle();
  }
}

final class $LifecycleOwner$NullableType
    extends jni$_.JObjType<LifecycleOwner?> {
  @jni$_.internal
  const $LifecycleOwner$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/lifecycle/LifecycleOwner;';

  @jni$_.internal
  @core$_.override
  LifecycleOwner? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : LifecycleOwner.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LifecycleOwner?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LifecycleOwner$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LifecycleOwner$NullableType) &&
        other is $LifecycleOwner$NullableType;
  }
}

final class $LifecycleOwner$Type extends jni$_.JObjType<LifecycleOwner> {
  @jni$_.internal
  const $LifecycleOwner$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/lifecycle/LifecycleOwner;';

  @jni$_.internal
  @core$_.override
  LifecycleOwner fromReference(jni$_.JReference reference) =>
      LifecycleOwner.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LifecycleOwner?> get nullableType =>
      const $LifecycleOwner$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LifecycleOwner$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LifecycleOwner$Type) &&
        other is $LifecycleOwner$Type;
  }
}
