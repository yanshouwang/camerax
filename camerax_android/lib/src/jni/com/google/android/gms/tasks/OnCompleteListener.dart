// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'Task.dart' as task_;

/// from: com.google.android.gms.tasks.OnCompleteListener
class OnCompleteListener<$TResult extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<OnCompleteListener<$TResult>> $type = type(TResult);

  final jni.JObjType<$TResult> TResult;

  OnCompleteListener.fromReference(
    this.TResult,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'com/google/android/gms/tasks/OnCompleteListener');

  /// The type which includes information such as the signature of this class.
  static $OnCompleteListenerType<$TResult> type<$TResult extends jni.JObject>(
    jni.JObjType<$TResult> TResult,
  ) {
    return $OnCompleteListenerType(
      TResult,
    );
  }

  static final _id_onComplete = _class.instanceMethodId(
    r'onComplete',
    r'(Lcom/google/android/gms/tasks/Task;)V',
  );

  static final _onComplete = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onComplete(com.google.android.gms.tasks.Task task)
  void onComplete(
    task_.Task<$TResult> task,
  ) {
    _onComplete(reference.pointer, _id_onComplete as jni.JMethodIDPtr,
            task.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $OnCompleteListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onComplete(Lcom/google/android/gms/tasks/Task;)V') {
        _$impls[$p]!.onComplete(
          $a[0].castTo(task_.$TaskType(_$impls[$p]!.TResult),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory OnCompleteListener.implement(
    $OnCompleteListenerImpl<$TResult> $impl,
  ) {
    final $p = ReceivePort();
    final $x = OnCompleteListener.fromReference(
      $impl.TResult,
      ProtectedJniExtensions.newPortProxy(
        r'com.google.android.gms.tasks.OnCompleteListener',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $OnCompleteListenerImpl<$TResult extends jni.JObject> {
  factory $OnCompleteListenerImpl({
    required jni.JObjType<$TResult> TResult,
    required void Function(task_.Task<$TResult> task) onComplete,
  }) = _$OnCompleteListenerImpl;

  jni.JObjType<$TResult> get TResult;

  void onComplete(task_.Task<$TResult> task);
}

class _$OnCompleteListenerImpl<$TResult extends jni.JObject>
    implements $OnCompleteListenerImpl<$TResult> {
  _$OnCompleteListenerImpl({
    required this.TResult,
    required void Function(task_.Task<$TResult> task) onComplete,
  }) : _onComplete = onComplete;

  @override
  final jni.JObjType<$TResult> TResult;

  final void Function(task_.Task<$TResult> task) _onComplete;

  void onComplete(task_.Task<$TResult> task) {
    return _onComplete(task);
  }
}

final class $OnCompleteListenerType<$TResult extends jni.JObject>
    extends jni.JObjType<OnCompleteListener<$TResult>> {
  final jni.JObjType<$TResult> TResult;

  const $OnCompleteListenerType(
    this.TResult,
  );

  @override
  String get signature => r'Lcom/google/android/gms/tasks/OnCompleteListener;';

  @override
  OnCompleteListener<$TResult> fromReference(jni.JReference reference) =>
      OnCompleteListener.fromReference(TResult, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($OnCompleteListenerType, TResult);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OnCompleteListenerType<$TResult>) &&
        other is $OnCompleteListenerType<$TResult> &&
        TResult == other.TResult;
  }
}
