// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../../../java/util/concurrent/Executor.dart' as executor_;

/// from: com.google.mlkit.vision.barcode.BarcodeScannerOptions$Builder
class BarcodeScannerOptions_Builder extends jni.JObject {
  @override
  late final jni.JObjType<BarcodeScannerOptions_Builder> $type = type;

  BarcodeScannerOptions_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/barcode/BarcodeScannerOptions$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $BarcodeScannerOptions_BuilderType();
  static final _id_enableAllPotentialBarcodes = _class.instanceMethodId(
    r'enableAllPotentialBarcodes',
    r'()Lcom/google/mlkit/vision/barcode/BarcodeScannerOptions$Builder;',
  );

  static final _enableAllPotentialBarcodes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public com.google.mlkit.vision.barcode.BarcodeScannerOptions$Builder enableAllPotentialBarcodes()
  /// The returned object must be released after use, by calling the [release] method.
  BarcodeScannerOptions_Builder enableAllPotentialBarcodes() {
    return _enableAllPotentialBarcodes(reference.pointer,
            _id_enableAllPotentialBarcodes as jni.JMethodIDPtr)
        .object(const $BarcodeScannerOptions_BuilderType());
  }

  static final _id_setBarcodeFormats = _class.instanceMethodId(
    r'setBarcodeFormats',
    r'(I[I)Lcom/google/mlkit/vision/barcode/BarcodeScannerOptions$Builder;',
  );

  static final _setBarcodeFormats = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.BarcodeScannerOptions$Builder setBarcodeFormats(int i, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  BarcodeScannerOptions_Builder setBarcodeFormats(
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _setBarcodeFormats(reference.pointer,
            _id_setBarcodeFormats as jni.JMethodIDPtr, i, is0.reference.pointer)
        .object(const $BarcodeScannerOptions_BuilderType());
  }

  static final _id_setExecutor = _class.instanceMethodId(
    r'setExecutor',
    r'(Ljava/util/concurrent/Executor;)Lcom/google/mlkit/vision/barcode/BarcodeScannerOptions$Builder;',
  );

  static final _setExecutor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.BarcodeScannerOptions$Builder setExecutor(java.util.concurrent.Executor executor)
  /// The returned object must be released after use, by calling the [release] method.
  BarcodeScannerOptions_Builder setExecutor(
    executor_.Executor executor,
  ) {
    return _setExecutor(reference.pointer, _id_setExecutor as jni.JMethodIDPtr,
            executor.reference.pointer)
        .object(const $BarcodeScannerOptions_BuilderType());
  }

  static final _id_setZoomSuggestionOptions = _class.instanceMethodId(
    r'setZoomSuggestionOptions',
    r'(Lcom/google/mlkit/vision/barcode/ZoomSuggestionOptions;)Lcom/google/mlkit/vision/barcode/BarcodeScannerOptions$Builder;',
  );

  static final _setZoomSuggestionOptions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.barcode.BarcodeScannerOptions$Builder setZoomSuggestionOptions(com.google.mlkit.vision.barcode.ZoomSuggestionOptions zoomSuggestionOptions)
  /// The returned object must be released after use, by calling the [release] method.
  BarcodeScannerOptions_Builder setZoomSuggestionOptions(
    jni.JObject zoomSuggestionOptions,
  ) {
    return _setZoomSuggestionOptions(
            reference.pointer,
            _id_setZoomSuggestionOptions as jni.JMethodIDPtr,
            zoomSuggestionOptions.reference.pointer)
        .object(const $BarcodeScannerOptions_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lcom/google/mlkit/vision/barcode/BarcodeScannerOptions;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public com.google.mlkit.vision.barcode.BarcodeScannerOptions build()
  /// The returned object must be released after use, by calling the [release] method.
  BarcodeScannerOptions build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $BarcodeScannerOptionsType());
  }

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory BarcodeScannerOptions_Builder() {
    return BarcodeScannerOptions_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }
}

final class $BarcodeScannerOptions_BuilderType
    extends jni.JObjType<BarcodeScannerOptions_Builder> {
  const $BarcodeScannerOptions_BuilderType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/barcode/BarcodeScannerOptions$Builder;';

  @override
  BarcodeScannerOptions_Builder fromReference(jni.JReference reference) =>
      BarcodeScannerOptions_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BarcodeScannerOptions_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BarcodeScannerOptions_BuilderType) &&
        other is $BarcodeScannerOptions_BuilderType;
  }
}

/// from: com.google.mlkit.vision.barcode.BarcodeScannerOptions
class BarcodeScannerOptions extends jni.JObject {
  @override
  late final jni.JObjType<BarcodeScannerOptions> $type = type;

  BarcodeScannerOptions.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/barcode/BarcodeScannerOptions');

  /// The type which includes information such as the signature of this class.
  static const type = $BarcodeScannerOptionsType();
  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_zza = _class.instanceMethodId(
    r'zza',
    r'()I',
  );

  static final _zza = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int zza()
  int zza() {
    return _zza(reference.pointer, _id_zza as jni.JMethodIDPtr).integer;
  }

  static final _id_zzb = _class.instanceMethodId(
    r'zzb',
    r'()Lcom/google/mlkit/vision/barcode/ZoomSuggestionOptions;',
  );

  static final _zzb = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final com.google.mlkit.vision.barcode.ZoomSuggestionOptions zzb()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject zzb() {
    return _zzb(reference.pointer, _id_zzb as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_zzc = _class.instanceMethodId(
    r'zzc',
    r'()Ljava/util/concurrent/Executor;',
  );

  static final _zzc = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.concurrent.Executor zzc()
  /// The returned object must be released after use, by calling the [release] method.
  executor_.Executor zzc() {
    return _zzc(reference.pointer, _id_zzc as jni.JMethodIDPtr)
        .object(const executor_.$ExecutorType());
  }

  static final _id_zzd = _class.instanceMethodId(
    r'zzd',
    r'()Z',
  );

  static final _zzd = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean zzd()
  bool zzd() {
    return _zzd(reference.pointer, _id_zzd as jni.JMethodIDPtr).boolean;
  }
}

final class $BarcodeScannerOptionsType
    extends jni.JObjType<BarcodeScannerOptions> {
  const $BarcodeScannerOptionsType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/barcode/BarcodeScannerOptions;';

  @override
  BarcodeScannerOptions fromReference(jni.JReference reference) =>
      BarcodeScannerOptions.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BarcodeScannerOptionsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BarcodeScannerOptionsType) &&
        other is $BarcodeScannerOptionsType;
  }
}
