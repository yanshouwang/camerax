// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../android/gms/tasks/Task.dart' as task_;

import '../common/InputImage.dart' as inputimage_;

import 'Face.dart' as face_;

/// from: com.google.mlkit.vision.face.FaceDetector
class FaceDetector extends jni.JObject {
  @override
  late final jni.JObjType<FaceDetector> $type = type;

  FaceDetector.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'com/google/mlkit/vision/face/FaceDetector');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceDetectorType();
  static final _id_process = _class.instanceMethodId(
    r'process',
    r'(Lcom/google/android/odml/image/MlImage;)Lcom/google/android/gms/tasks/Task;',
  );

  static final _process = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.android.gms.tasks.Task process(com.google.android.odml.image.MlImage mlImage)
  /// The returned object must be released after use, by calling the [release] method.
  task_.Task<jni.JList<face_.Face>> process(
    jni.JObject mlImage,
  ) {
    return _process(reference.pointer, _id_process as jni.JMethodIDPtr,
            mlImage.reference.pointer)
        .object(const task_.$TaskType(jni.JListType(face_.$FaceType())));
  }

  static final _id_process1 = _class.instanceMethodId(
    r'process',
    r'(Lcom/google/mlkit/vision/common/InputImage;)Lcom/google/android/gms/tasks/Task;',
  );

  static final _process1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.android.gms.tasks.Task process(com.google.mlkit.vision.common.InputImage inputImage)
  /// The returned object must be released after use, by calling the [release] method.
  task_.Task<jni.JList<face_.Face>> process1(
    inputimage_.InputImage inputImage,
  ) {
    return _process1(reference.pointer, _id_process1 as jni.JMethodIDPtr,
            inputImage.reference.pointer)
        .object(const task_.$TaskType(jni.JListType(face_.$FaceType())));
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FaceDetectorImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'process(Lcom/google/android/odml/image/MlImage;)Lcom/google/android/gms/tasks/Task;') {
        final $r = _$impls[$p]!.process(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'process(Lcom/google/mlkit/vision/common/InputImage;)Lcom/google/android/gms/tasks/Task;') {
        final $r = _$impls[$p]!.process1(
          $a[0].castTo(const inputimage_.$InputImageType(),
              releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'close()V') {
        _$impls[$p]!.close();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory FaceDetector.implement(
    $FaceDetectorImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = FaceDetector.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'com.google.mlkit.vision.face.FaceDetector',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FaceDetectorImpl {
  factory $FaceDetectorImpl({
    required task_.Task<jni.JList<face_.Face>> Function(jni.JObject mlImage)
        process,
    required task_.Task<jni.JList<face_.Face>> Function(
            inputimage_.InputImage inputImage)
        process1,
    required void Function() close,
  }) = _$FaceDetectorImpl;

  task_.Task<jni.JList<face_.Face>> process(jni.JObject mlImage);
  task_.Task<jni.JList<face_.Face>> process1(inputimage_.InputImage inputImage);
  void close();
}

class _$FaceDetectorImpl implements $FaceDetectorImpl {
  _$FaceDetectorImpl({
    required task_.Task<jni.JList<face_.Face>> Function(jni.JObject mlImage)
        process,
    required task_.Task<jni.JList<face_.Face>> Function(
            inputimage_.InputImage inputImage)
        process1,
    required void Function() close,
  })  : _process = process,
        _process1 = process1,
        _close = close;

  final task_.Task<jni.JList<face_.Face>> Function(jni.JObject mlImage)
      _process;
  final task_.Task<jni.JList<face_.Face>> Function(
      inputimage_.InputImage inputImage) _process1;
  final void Function() _close;

  task_.Task<jni.JList<face_.Face>> process(jni.JObject mlImage) {
    return _process(mlImage);
  }

  task_.Task<jni.JList<face_.Face>> process1(
      inputimage_.InputImage inputImage) {
    return _process1(inputImage);
  }

  void close() {
    return _close();
  }
}

final class $FaceDetectorType extends jni.JObjType<FaceDetector> {
  const $FaceDetectorType();

  @override
  String get signature => r'Lcom/google/mlkit/vision/face/FaceDetector;';

  @override
  FaceDetector fromReference(jni.JReference reference) =>
      FaceDetector.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceDetectorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceDetectorType) &&
        other is $FaceDetectorType;
  }
}
