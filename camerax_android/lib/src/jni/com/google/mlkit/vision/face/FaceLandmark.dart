// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: com.google.mlkit.vision.face.FaceLandmark$LandmarkType
class FaceLandmark_LandmarkType extends jni.JObject {
  @override
  late final jni.JObjType<FaceLandmark_LandmarkType> $type = type;

  FaceLandmark_LandmarkType.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/face/FaceLandmark$LandmarkType');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceLandmark_LandmarkTypeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FaceLandmark_LandmarkTypeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory FaceLandmark_LandmarkType.implement(
    $FaceLandmark_LandmarkTypeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = FaceLandmark_LandmarkType.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'com.google.mlkit.vision.face.FaceLandmark$LandmarkType',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FaceLandmark_LandmarkTypeImpl {
  factory $FaceLandmark_LandmarkTypeImpl() = _$FaceLandmark_LandmarkTypeImpl;
}

class _$FaceLandmark_LandmarkTypeImpl
    implements $FaceLandmark_LandmarkTypeImpl {
  _$FaceLandmark_LandmarkTypeImpl();
}

final class $FaceLandmark_LandmarkTypeType
    extends jni.JObjType<FaceLandmark_LandmarkType> {
  const $FaceLandmark_LandmarkTypeType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/face/FaceLandmark$LandmarkType;';

  @override
  FaceLandmark_LandmarkType fromReference(jni.JReference reference) =>
      FaceLandmark_LandmarkType.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceLandmark_LandmarkTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceLandmark_LandmarkTypeType) &&
        other is $FaceLandmark_LandmarkTypeType;
  }
}

/// from: com.google.mlkit.vision.face.FaceLandmark
class FaceLandmark extends jni.JObject {
  @override
  late final jni.JObjType<FaceLandmark> $type = type;

  FaceLandmark.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'com/google/mlkit/vision/face/FaceLandmark');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceLandmarkType();

  /// from: static public final int MOUTH_BOTTOM
  static const MOUTH_BOTTOM = 0;

  /// from: static public final int MOUTH_RIGHT
  static const MOUTH_RIGHT = 11;

  /// from: static public final int MOUTH_LEFT
  static const MOUTH_LEFT = 5;

  /// from: static public final int RIGHT_EYE
  static const RIGHT_EYE = 10;

  /// from: static public final int LEFT_EYE
  static const LEFT_EYE = 4;

  /// from: static public final int RIGHT_EAR
  static const RIGHT_EAR = 9;

  /// from: static public final int LEFT_EAR
  static const LEFT_EAR = 3;

  /// from: static public final int RIGHT_CHEEK
  static const RIGHT_CHEEK = 7;

  /// from: static public final int LEFT_CHEEK
  static const LEFT_CHEEK = 1;

  /// from: static public final int NOSE_BASE
  static const NOSE_BASE = 6;
  static final _id_getLandmarkType = _class.instanceMethodId(
    r'getLandmarkType',
    r'()I',
  );

  static final _getLandmarkType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getLandmarkType()
  int getLandmarkType() {
    return _getLandmarkType(
            reference.pointer, _id_getLandmarkType as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPosition = _class.instanceMethodId(
    r'getPosition',
    r'()Landroid/graphics/PointF;',
  );

  static final _getPosition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.PointF getPosition()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPosition() {
    return _getPosition(reference.pointer, _id_getPosition as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $FaceLandmarkType extends jni.JObjType<FaceLandmark> {
  const $FaceLandmarkType();

  @override
  String get signature => r'Lcom/google/mlkit/vision/face/FaceLandmark;';

  @override
  FaceLandmark fromReference(jni.JReference reference) =>
      FaceLandmark.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceLandmarkType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceLandmarkType) &&
        other is $FaceLandmarkType;
  }
}
