// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: com.google.mlkit.vision.face.FaceContour$ContourType
class FaceContour_ContourType extends jni.JObject {
  @override
  late final jni.JObjType<FaceContour_ContourType> $type = type;

  FaceContour_ContourType.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/face/FaceContour$ContourType');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceContour_ContourTypeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FaceContour_ContourTypeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory FaceContour_ContourType.implement(
    $FaceContour_ContourTypeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = FaceContour_ContourType.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'com.google.mlkit.vision.face.FaceContour$ContourType',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FaceContour_ContourTypeImpl {
  factory $FaceContour_ContourTypeImpl() = _$FaceContour_ContourTypeImpl;
}

class _$FaceContour_ContourTypeImpl implements $FaceContour_ContourTypeImpl {
  _$FaceContour_ContourTypeImpl();
}

final class $FaceContour_ContourTypeType
    extends jni.JObjType<FaceContour_ContourType> {
  const $FaceContour_ContourTypeType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/face/FaceContour$ContourType;';

  @override
  FaceContour_ContourType fromReference(jni.JReference reference) =>
      FaceContour_ContourType.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceContour_ContourTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceContour_ContourTypeType) &&
        other is $FaceContour_ContourTypeType;
  }
}

/// from: com.google.mlkit.vision.face.FaceContour
class FaceContour extends jni.JObject {
  @override
  late final jni.JObjType<FaceContour> $type = type;

  FaceContour.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'com/google/mlkit/vision/face/FaceContour');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceContourType();

  /// from: static public final int FACE
  static const FACE = 1;

  /// from: static public final int LEFT_EYEBROW_TOP
  static const LEFT_EYEBROW_TOP = 2;

  /// from: static public final int LEFT_EYEBROW_BOTTOM
  static const LEFT_EYEBROW_BOTTOM = 3;

  /// from: static public final int RIGHT_EYEBROW_TOP
  static const RIGHT_EYEBROW_TOP = 4;

  /// from: static public final int RIGHT_EYEBROW_BOTTOM
  static const RIGHT_EYEBROW_BOTTOM = 5;

  /// from: static public final int LEFT_EYE
  static const LEFT_EYE = 6;

  /// from: static public final int RIGHT_EYE
  static const RIGHT_EYE = 7;

  /// from: static public final int UPPER_LIP_TOP
  static const UPPER_LIP_TOP = 8;

  /// from: static public final int UPPER_LIP_BOTTOM
  static const UPPER_LIP_BOTTOM = 9;

  /// from: static public final int LOWER_LIP_TOP
  static const LOWER_LIP_TOP = 10;

  /// from: static public final int LOWER_LIP_BOTTOM
  static const LOWER_LIP_BOTTOM = 11;

  /// from: static public final int NOSE_BRIDGE
  static const NOSE_BRIDGE = 12;

  /// from: static public final int NOSE_BOTTOM
  static const NOSE_BOTTOM = 13;

  /// from: static public final int LEFT_CHEEK
  static const LEFT_CHEEK = 14;

  /// from: static public final int RIGHT_CHEEK
  static const RIGHT_CHEEK = 15;
  static final _id_getFaceContourType = _class.instanceMethodId(
    r'getFaceContourType',
    r'()I',
  );

  static final _getFaceContourType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getFaceContourType()
  int getFaceContourType() {
    return _getFaceContourType(
            reference.pointer, _id_getFaceContourType as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPoints = _class.instanceMethodId(
    r'getPoints',
    r'()Ljava/util/List;',
  );

  static final _getPoints = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.List getPoints()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getPoints() {
    return _getPoints(reference.pointer, _id_getPoints as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_new0 = _class.constructorId(
    r'(ILjava/util/List;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(int i, java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  factory FaceContour(
    int i,
    jni.JList<jni.JObject> list,
  ) {
    return FaceContour.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, i, list.reference.pointer)
        .reference);
  }
}

final class $FaceContourType extends jni.JObjType<FaceContour> {
  const $FaceContourType();

  @override
  String get signature => r'Lcom/google/mlkit/vision/face/FaceContour;';

  @override
  FaceContour fromReference(jni.JReference reference) =>
      FaceContour.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceContourType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceContourType) && other is $FaceContourType;
  }
}
