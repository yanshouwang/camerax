// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../../../android/media/Image.dart' as image_;

import '../../../android/gms/tasks/Task.dart' as task_;

/// from: com.google.mlkit.vision.interfaces.Detector$DetectorType
class Detector_DetectorType extends jni.JObject {
  @override
  late final jni.JObjType<Detector_DetectorType> $type = type;

  Detector_DetectorType.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/interfaces/Detector$DetectorType');

  /// The type which includes information such as the signature of this class.
  static const type = $Detector_DetectorTypeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Detector_DetectorTypeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Detector_DetectorType.implement(
    $Detector_DetectorTypeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Detector_DetectorType.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'com.google.mlkit.vision.interfaces.Detector$DetectorType',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $Detector_DetectorTypeImpl {
  factory $Detector_DetectorTypeImpl() = _$Detector_DetectorTypeImpl;
}

class _$Detector_DetectorTypeImpl implements $Detector_DetectorTypeImpl {
  _$Detector_DetectorTypeImpl();
}

final class $Detector_DetectorTypeType
    extends jni.JObjType<Detector_DetectorType> {
  const $Detector_DetectorTypeType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/interfaces/Detector$DetectorType;';

  @override
  Detector_DetectorType fromReference(jni.JReference reference) =>
      Detector_DetectorType.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Detector_DetectorTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Detector_DetectorTypeType) &&
        other is $Detector_DetectorTypeType;
  }
}

/// from: com.google.mlkit.vision.interfaces.Detector
class Detector<$DetectionResultT extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<Detector<$DetectionResultT>> $type =
      type(DetectionResultT);

  final jni.JObjType<$DetectionResultT> DetectionResultT;

  Detector.fromReference(
    this.DetectionResultT,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'com/google/mlkit/vision/interfaces/Detector');

  /// The type which includes information such as the signature of this class.
  static $DetectorType<$DetectionResultT>
      type<$DetectionResultT extends jni.JObject>(
    jni.JObjType<$DetectionResultT> DetectionResultT,
  ) {
    return $DetectorType(
      DetectionResultT,
    );
  }

  /// from: static public final int TYPE_BARCODE_SCANNING
  static const TYPE_BARCODE_SCANNING = 1;

  /// from: static public final int TYPE_FACE_DETECTION
  static const TYPE_FACE_DETECTION = 2;

  /// from: static public final int TYPE_IMAGE_LABELING
  static const TYPE_IMAGE_LABELING = 3;

  /// from: static public final int TYPE_TEXT_RECOGNITION
  static const TYPE_TEXT_RECOGNITION = 4;

  /// from: static public final int TYPE_OBJECT_DETECTION
  static const TYPE_OBJECT_DETECTION = 5;

  /// from: static public final int TYPE_POSE_DETECTION
  static const TYPE_POSE_DETECTION = 6;

  /// from: static public final int TYPE_SEGMENTATION
  static const TYPE_SEGMENTATION = 7;

  /// from: static public final int TYPE_SELFIE_FACE_DETECTION
  static const TYPE_SELFIE_FACE_DETECTION = 8;

  /// from: static public final int TYPE_IMAGE_CAPTIONING
  static const TYPE_IMAGE_CAPTIONING = 9;

  /// from: static public final int TYPE_DOCUMENT_DETECTION
  static const TYPE_DOCUMENT_DETECTION = 10;
  static final _id_getDetectorType = _class.instanceMethodId(
    r'getDetectorType',
    r'()I',
  );

  static final _getDetectorType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getDetectorType()
  int getDetectorType() {
    return _getDetectorType(
            reference.pointer, _id_getDetectorType as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_process = _class.instanceMethodId(
    r'process',
    r'(Landroid/graphics/Bitmap;I)Lcom/google/android/gms/tasks/Task;',
  );

  static final _process = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract com.google.android.gms.tasks.Task process(android.graphics.Bitmap bitmap, int i)
  /// The returned object must be released after use, by calling the [release] method.
  task_.Task<$DetectionResultT> process(
    jni.JObject bitmap,
    int i,
  ) {
    return _process(reference.pointer, _id_process as jni.JMethodIDPtr,
            bitmap.reference.pointer, i)
        .object(task_.$TaskType(DetectionResultT));
  }

  static final _id_process1 = _class.instanceMethodId(
    r'process',
    r'(Landroid/media/Image;I)Lcom/google/android/gms/tasks/Task;',
  );

  static final _process1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract com.google.android.gms.tasks.Task process(android.media.Image image, int i)
  /// The returned object must be released after use, by calling the [release] method.
  task_.Task<$DetectionResultT> process1(
    image_.Image image,
    int i,
  ) {
    return _process1(reference.pointer, _id_process1 as jni.JMethodIDPtr,
            image.reference.pointer, i)
        .object(task_.$TaskType(DetectionResultT));
  }

  static final _id_process2 = _class.instanceMethodId(
    r'process',
    r'(Landroid/media/Image;ILandroid/graphics/Matrix;)Lcom/google/android/gms/tasks/Task;',
  );

  static final _process2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.google.android.gms.tasks.Task process(android.media.Image image, int i, android.graphics.Matrix matrix)
  /// The returned object must be released after use, by calling the [release] method.
  task_.Task<$DetectionResultT> process2(
    image_.Image image,
    int i,
    jni.JObject matrix,
  ) {
    return _process2(reference.pointer, _id_process2 as jni.JMethodIDPtr,
            image.reference.pointer, i, matrix.reference.pointer)
        .object(task_.$TaskType(DetectionResultT));
  }

  static final _id_process3 = _class.instanceMethodId(
    r'process',
    r'(Ljava/nio/ByteBuffer;IIII)Lcom/google/android/gms/tasks/Task;',
  );

  static final _process3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  /// from: public abstract com.google.android.gms.tasks.Task process(java.nio.ByteBuffer byteBuffer, int i, int i1, int i2, int i3)
  /// The returned object must be released after use, by calling the [release] method.
  task_.Task<$DetectionResultT> process3(
    jni.JByteBuffer byteBuffer,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _process3(reference.pointer, _id_process3 as jni.JMethodIDPtr,
            byteBuffer.reference.pointer, i, i1, i2, i3)
        .object(task_.$TaskType(DetectionResultT));
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $DetectorImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getDetectorType()I') {
        final $r = _$impls[$p]!.getDetectorType();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d ==
          r'process(Landroid/graphics/Bitmap;I)Lcom/google/android/gms/tasks/Task;') {
        final $r = _$impls[$p]!.process(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'process(Landroid/media/Image;I)Lcom/google/android/gms/tasks/Task;') {
        final $r = _$impls[$p]!.process1(
          $a[0].castTo(const image_.$ImageType(), releaseOriginal: true),
          $a[1]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'process(Landroid/media/Image;ILandroid/graphics/Matrix;)Lcom/google/android/gms/tasks/Task;') {
        final $r = _$impls[$p]!.process2(
          $a[0].castTo(const image_.$ImageType(), releaseOriginal: true),
          $a[1]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'process(Ljava/nio/ByteBuffer;IIII)Lcom/google/android/gms/tasks/Task;') {
        final $r = _$impls[$p]!.process3(
          $a[0].castTo(const jni.JByteBufferType(), releaseOriginal: true),
          $a[1]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[3]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[4]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Detector.implement(
    $DetectorImpl<$DetectionResultT> $impl,
  ) {
    final $p = ReceivePort();
    final $x = Detector.fromReference(
      $impl.DetectionResultT,
      ProtectedJniExtensions.newPortProxy(
        r'com.google.mlkit.vision.interfaces.Detector',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $DetectorImpl<$DetectionResultT extends jni.JObject> {
  factory $DetectorImpl({
    required jni.JObjType<$DetectionResultT> DetectionResultT,
    required int Function() getDetectorType,
    required task_.Task<$DetectionResultT> Function(jni.JObject bitmap, int i)
        process,
    required task_.Task<$DetectionResultT> Function(image_.Image image, int i)
        process1,
    required task_.Task<$DetectionResultT> Function(
            image_.Image image, int i, jni.JObject matrix)
        process2,
    required task_.Task<$DetectionResultT> Function(
            jni.JByteBuffer byteBuffer, int i, int i1, int i2, int i3)
        process3,
  }) = _$DetectorImpl;

  jni.JObjType<$DetectionResultT> get DetectionResultT;

  int getDetectorType();
  task_.Task<$DetectionResultT> process(jni.JObject bitmap, int i);
  task_.Task<$DetectionResultT> process1(image_.Image image, int i);
  task_.Task<$DetectionResultT> process2(
      image_.Image image, int i, jni.JObject matrix);
  task_.Task<$DetectionResultT> process3(
      jni.JByteBuffer byteBuffer, int i, int i1, int i2, int i3);
}

class _$DetectorImpl<$DetectionResultT extends jni.JObject>
    implements $DetectorImpl<$DetectionResultT> {
  _$DetectorImpl({
    required this.DetectionResultT,
    required int Function() getDetectorType,
    required task_.Task<$DetectionResultT> Function(jni.JObject bitmap, int i)
        process,
    required task_.Task<$DetectionResultT> Function(image_.Image image, int i)
        process1,
    required task_.Task<$DetectionResultT> Function(
            image_.Image image, int i, jni.JObject matrix)
        process2,
    required task_.Task<$DetectionResultT> Function(
            jni.JByteBuffer byteBuffer, int i, int i1, int i2, int i3)
        process3,
  })  : _getDetectorType = getDetectorType,
        _process = process,
        _process1 = process1,
        _process2 = process2,
        _process3 = process3;

  @override
  final jni.JObjType<$DetectionResultT> DetectionResultT;

  final int Function() _getDetectorType;
  final task_.Task<$DetectionResultT> Function(jni.JObject bitmap, int i)
      _process;
  final task_.Task<$DetectionResultT> Function(image_.Image image, int i)
      _process1;
  final task_.Task<$DetectionResultT> Function(
      image_.Image image, int i, jni.JObject matrix) _process2;
  final task_.Task<$DetectionResultT> Function(
      jni.JByteBuffer byteBuffer, int i, int i1, int i2, int i3) _process3;

  int getDetectorType() {
    return _getDetectorType();
  }

  task_.Task<$DetectionResultT> process(jni.JObject bitmap, int i) {
    return _process(bitmap, i);
  }

  task_.Task<$DetectionResultT> process1(image_.Image image, int i) {
    return _process1(image, i);
  }

  task_.Task<$DetectionResultT> process2(
      image_.Image image, int i, jni.JObject matrix) {
    return _process2(image, i, matrix);
  }

  task_.Task<$DetectionResultT> process3(
      jni.JByteBuffer byteBuffer, int i, int i1, int i2, int i3) {
    return _process3(byteBuffer, i, i1, i2, i3);
  }
}

final class $DetectorType<$DetectionResultT extends jni.JObject>
    extends jni.JObjType<Detector<$DetectionResultT>> {
  final jni.JObjType<$DetectionResultT> DetectionResultT;

  const $DetectorType(
    this.DetectionResultT,
  );

  @override
  String get signature => r'Lcom/google/mlkit/vision/interfaces/Detector;';

  @override
  Detector<$DetectionResultT> fromReference(jni.JReference reference) =>
      Detector.fromReference(DetectionResultT, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($DetectorType, DetectionResultT);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DetectorType<$DetectionResultT>) &&
        other is $DetectorType<$DetectionResultT> &&
        DetectionResultT == other.DetectionResultT;
  }
}
