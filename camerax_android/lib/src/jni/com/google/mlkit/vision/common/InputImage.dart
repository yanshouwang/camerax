// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../../../android/content/Context.dart' as context_;

import '../../../../../android/media/Image.dart' as image_;

import '../../../../../android/net/Uri.dart' as uri_;

/// from: com.google.mlkit.vision.common.InputImage$ImageFormat
class InputImage_ImageFormat extends jni.JObject {
  @override
  late final jni.JObjType<InputImage_ImageFormat> $type = type;

  InputImage_ImageFormat.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/common/InputImage$ImageFormat');

  /// The type which includes information such as the signature of this class.
  static const type = $InputImage_ImageFormatType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $InputImage_ImageFormatImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory InputImage_ImageFormat.implement(
    $InputImage_ImageFormatImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = InputImage_ImageFormat.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'com.google.mlkit.vision.common.InputImage$ImageFormat',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $InputImage_ImageFormatImpl {
  factory $InputImage_ImageFormatImpl() = _$InputImage_ImageFormatImpl;
}

class _$InputImage_ImageFormatImpl implements $InputImage_ImageFormatImpl {
  _$InputImage_ImageFormatImpl();
}

final class $InputImage_ImageFormatType
    extends jni.JObjType<InputImage_ImageFormat> {
  const $InputImage_ImageFormatType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/common/InputImage$ImageFormat;';

  @override
  InputImage_ImageFormat fromReference(jni.JReference reference) =>
      InputImage_ImageFormat.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($InputImage_ImageFormatType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($InputImage_ImageFormatType) &&
        other is $InputImage_ImageFormatType;
  }
}

/// from: com.google.mlkit.vision.common.InputImage
class InputImage extends jni.JObject {
  @override
  late final jni.JObjType<InputImage> $type = type;

  InputImage.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'com/google/mlkit/vision/common/InputImage');

  /// The type which includes information such as the signature of this class.
  static const type = $InputImageType();

  /// from: static public final int IMAGE_FORMAT_NV21
  static const IMAGE_FORMAT_NV21 = 17;

  /// from: static public final int IMAGE_FORMAT_YV12
  static const IMAGE_FORMAT_YV12 = 842094169;

  /// from: static public final int IMAGE_FORMAT_BITMAP
  static const IMAGE_FORMAT_BITMAP = -1;

  /// from: static public final int IMAGE_FORMAT_YUV_420_888
  static const IMAGE_FORMAT_YUV_420_888 = 35;
  static final _id_getFormat = _class.instanceMethodId(
    r'getFormat',
    r'()I',
  );

  static final _getFormat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getFormat()
  int getFormat() {
    return _getFormat(reference.pointer, _id_getFormat as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getHeight = _class.instanceMethodId(
    r'getHeight',
    r'()I',
  );

  static final _getHeight = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getHeight()
  int getHeight() {
    return _getHeight(reference.pointer, _id_getHeight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getRotationDegrees = _class.instanceMethodId(
    r'getRotationDegrees',
    r'()I',
  );

  static final _getRotationDegrees = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getRotationDegrees()
  int getRotationDegrees() {
    return _getRotationDegrees(
            reference.pointer, _id_getRotationDegrees as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getWidth = _class.instanceMethodId(
    r'getWidth',
    r'()I',
  );

  static final _getWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getWidth()
  int getWidth() {
    return _getWidth(reference.pointer, _id_getWidth as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getBitmapInternal = _class.instanceMethodId(
    r'getBitmapInternal',
    r'()Landroid/graphics/Bitmap;',
  );

  static final _getBitmapInternal = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.Bitmap getBitmapInternal()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBitmapInternal() {
    return _getBitmapInternal(
            reference.pointer, _id_getBitmapInternal as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getCoordinatesMatrix = _class.instanceMethodId(
    r'getCoordinatesMatrix',
    r'()Landroid/graphics/Matrix;',
  );

  static final _getCoordinatesMatrix = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.Matrix getCoordinatesMatrix()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCoordinatesMatrix() {
    return _getCoordinatesMatrix(
            reference.pointer, _id_getCoordinatesMatrix as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMediaImage = _class.instanceMethodId(
    r'getMediaImage',
    r'()Landroid/media/Image;',
  );

  static final _getMediaImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.media.Image getMediaImage()
  /// The returned object must be released after use, by calling the [release] method.
  image_.Image getMediaImage() {
    return _getMediaImage(
            reference.pointer, _id_getMediaImage as jni.JMethodIDPtr)
        .object(const image_.$ImageType());
  }

  static final _id_fromBitmap = _class.staticMethodId(
    r'fromBitmap',
    r'(Landroid/graphics/Bitmap;I)Lcom/google/mlkit/vision/common/InputImage;',
  );

  static final _fromBitmap = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public com.google.mlkit.vision.common.InputImage fromBitmap(android.graphics.Bitmap bitmap, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static InputImage fromBitmap(
    jni.JObject bitmap,
    int i,
  ) {
    return _fromBitmap(_class.reference.pointer,
            _id_fromBitmap as jni.JMethodIDPtr, bitmap.reference.pointer, i)
        .object(const $InputImageType());
  }

  static final _id_fromByteArray = _class.staticMethodId(
    r'fromByteArray',
    r'([BIIII)Lcom/google/mlkit/vision/common/InputImage;',
  );

  static final _fromByteArray = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  /// from: static public com.google.mlkit.vision.common.InputImage fromByteArray(byte[] bs, int i, int i1, int i2, int i3)
  /// The returned object must be released after use, by calling the [release] method.
  static InputImage fromByteArray(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _fromByteArray(
            _class.reference.pointer,
            _id_fromByteArray as jni.JMethodIDPtr,
            bs.reference.pointer,
            i,
            i1,
            i2,
            i3)
        .object(const $InputImageType());
  }

  static final _id_fromByteBuffer = _class.staticMethodId(
    r'fromByteBuffer',
    r'(Ljava/nio/ByteBuffer;IIII)Lcom/google/mlkit/vision/common/InputImage;',
  );

  static final _fromByteBuffer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  /// from: static public com.google.mlkit.vision.common.InputImage fromByteBuffer(java.nio.ByteBuffer byteBuffer, int i, int i1, int i2, int i3)
  /// The returned object must be released after use, by calling the [release] method.
  static InputImage fromByteBuffer(
    jni.JByteBuffer byteBuffer,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _fromByteBuffer(
            _class.reference.pointer,
            _id_fromByteBuffer as jni.JMethodIDPtr,
            byteBuffer.reference.pointer,
            i,
            i1,
            i2,
            i3)
        .object(const $InputImageType());
  }

  static final _id_fromFilePath = _class.staticMethodId(
    r'fromFilePath',
    r'(Landroid/content/Context;Landroid/net/Uri;)Lcom/google/mlkit/vision/common/InputImage;',
  );

  static final _fromFilePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.mlkit.vision.common.InputImage fromFilePath(android.content.Context context, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static InputImage fromFilePath(
    context_.Context context,
    uri_.Uri uri,
  ) {
    return _fromFilePath(
            _class.reference.pointer,
            _id_fromFilePath as jni.JMethodIDPtr,
            context.reference.pointer,
            uri.reference.pointer)
        .object(const $InputImageType());
  }

  static final _id_fromMediaImage = _class.staticMethodId(
    r'fromMediaImage',
    r'(Landroid/media/Image;I)Lcom/google/mlkit/vision/common/InputImage;',
  );

  static final _fromMediaImage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public com.google.mlkit.vision.common.InputImage fromMediaImage(android.media.Image image, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static InputImage fromMediaImage(
    image_.Image image,
    int i,
  ) {
    return _fromMediaImage(_class.reference.pointer,
            _id_fromMediaImage as jni.JMethodIDPtr, image.reference.pointer, i)
        .object(const $InputImageType());
  }

  static final _id_fromMediaImage1 = _class.staticMethodId(
    r'fromMediaImage',
    r'(Landroid/media/Image;ILandroid/graphics/Matrix;)Lcom/google/mlkit/vision/common/InputImage;',
  );

  static final _fromMediaImage1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public com.google.mlkit.vision.common.InputImage fromMediaImage(android.media.Image image, int i, android.graphics.Matrix matrix)
  /// The returned object must be released after use, by calling the [release] method.
  static InputImage fromMediaImage1(
    image_.Image image,
    int i,
    jni.JObject matrix,
  ) {
    return _fromMediaImage1(
            _class.reference.pointer,
            _id_fromMediaImage1 as jni.JMethodIDPtr,
            image.reference.pointer,
            i,
            matrix.reference.pointer)
        .object(const $InputImageType());
  }

  static final _id_getByteBuffer = _class.instanceMethodId(
    r'getByteBuffer',
    r'()Ljava/nio/ByteBuffer;',
  );

  static final _getByteBuffer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.nio.ByteBuffer getByteBuffer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JByteBuffer getByteBuffer() {
    return _getByteBuffer(
            reference.pointer, _id_getByteBuffer as jni.JMethodIDPtr)
        .object(const jni.JByteBufferType());
  }

  static final _id_getPlanes = _class.instanceMethodId(
    r'getPlanes',
    r'()[Landroid/media/Image$Plane;',
  );

  static final _getPlanes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.media.Image$Plane[] getPlanes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<image_.Image_Plane> getPlanes() {
    return _getPlanes(reference.pointer, _id_getPlanes as jni.JMethodIDPtr)
        .object(const jni.JArrayType(image_.$Image_PlaneType()));
  }
}

final class $InputImageType extends jni.JObjType<InputImage> {
  const $InputImageType();

  @override
  String get signature => r'Lcom/google/mlkit/vision/common/InputImage;';

  @override
  InputImage fromReference(jni.JReference reference) =>
      InputImage.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($InputImageType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($InputImageType) && other is $InputImageType;
  }
}
