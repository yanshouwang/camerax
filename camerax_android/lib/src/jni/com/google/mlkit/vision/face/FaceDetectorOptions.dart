// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../../../java/util/concurrent/Executor.dart' as executor_;

/// from: com.google.mlkit.vision.face.FaceDetectorOptions$Builder
class FaceDetectorOptions_Builder extends jni.JObject {
  @override
  late final jni.JObjType<FaceDetectorOptions_Builder> $type = type;

  FaceDetectorOptions_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/face/FaceDetectorOptions$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceDetectorOptions_BuilderType();
  static final _id_enableTracking = _class.instanceMethodId(
    r'enableTracking',
    r'()Lcom/google/mlkit/vision/face/FaceDetectorOptions$Builder;',
  );

  static final _enableTracking = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public com.google.mlkit.vision.face.FaceDetectorOptions$Builder enableTracking()
  /// The returned object must be released after use, by calling the [release] method.
  FaceDetectorOptions_Builder enableTracking() {
    return _enableTracking(
            reference.pointer, _id_enableTracking as jni.JMethodIDPtr)
        .object(const $FaceDetectorOptions_BuilderType());
  }

  static final _id_setClassificationMode = _class.instanceMethodId(
    r'setClassificationMode',
    r'(I)Lcom/google/mlkit/vision/face/FaceDetectorOptions$Builder;',
  );

  static final _setClassificationMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public com.google.mlkit.vision.face.FaceDetectorOptions$Builder setClassificationMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  FaceDetectorOptions_Builder setClassificationMode(
    int i,
  ) {
    return _setClassificationMode(
            reference.pointer, _id_setClassificationMode as jni.JMethodIDPtr, i)
        .object(const $FaceDetectorOptions_BuilderType());
  }

  static final _id_setContourMode = _class.instanceMethodId(
    r'setContourMode',
    r'(I)Lcom/google/mlkit/vision/face/FaceDetectorOptions$Builder;',
  );

  static final _setContourMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public com.google.mlkit.vision.face.FaceDetectorOptions$Builder setContourMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  FaceDetectorOptions_Builder setContourMode(
    int i,
  ) {
    return _setContourMode(
            reference.pointer, _id_setContourMode as jni.JMethodIDPtr, i)
        .object(const $FaceDetectorOptions_BuilderType());
  }

  static final _id_setExecutor = _class.instanceMethodId(
    r'setExecutor',
    r'(Ljava/util/concurrent/Executor;)Lcom/google/mlkit/vision/face/FaceDetectorOptions$Builder;',
  );

  static final _setExecutor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.google.mlkit.vision.face.FaceDetectorOptions$Builder setExecutor(java.util.concurrent.Executor executor)
  /// The returned object must be released after use, by calling the [release] method.
  FaceDetectorOptions_Builder setExecutor(
    executor_.Executor executor,
  ) {
    return _setExecutor(reference.pointer, _id_setExecutor as jni.JMethodIDPtr,
            executor.reference.pointer)
        .object(const $FaceDetectorOptions_BuilderType());
  }

  static final _id_setLandmarkMode = _class.instanceMethodId(
    r'setLandmarkMode',
    r'(I)Lcom/google/mlkit/vision/face/FaceDetectorOptions$Builder;',
  );

  static final _setLandmarkMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public com.google.mlkit.vision.face.FaceDetectorOptions$Builder setLandmarkMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  FaceDetectorOptions_Builder setLandmarkMode(
    int i,
  ) {
    return _setLandmarkMode(
            reference.pointer, _id_setLandmarkMode as jni.JMethodIDPtr, i)
        .object(const $FaceDetectorOptions_BuilderType());
  }

  static final _id_setMinFaceSize = _class.instanceMethodId(
    r'setMinFaceSize',
    r'(F)Lcom/google/mlkit/vision/face/FaceDetectorOptions$Builder;',
  );

  static final _setMinFaceSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: public com.google.mlkit.vision.face.FaceDetectorOptions$Builder setMinFaceSize(float f)
  /// The returned object must be released after use, by calling the [release] method.
  FaceDetectorOptions_Builder setMinFaceSize(
    double f,
  ) {
    return _setMinFaceSize(
            reference.pointer, _id_setMinFaceSize as jni.JMethodIDPtr, f)
        .object(const $FaceDetectorOptions_BuilderType());
  }

  static final _id_setPerformanceMode = _class.instanceMethodId(
    r'setPerformanceMode',
    r'(I)Lcom/google/mlkit/vision/face/FaceDetectorOptions$Builder;',
  );

  static final _setPerformanceMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public com.google.mlkit.vision.face.FaceDetectorOptions$Builder setPerformanceMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  FaceDetectorOptions_Builder setPerformanceMode(
    int i,
  ) {
    return _setPerformanceMode(
            reference.pointer, _id_setPerformanceMode as jni.JMethodIDPtr, i)
        .object(const $FaceDetectorOptions_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lcom/google/mlkit/vision/face/FaceDetectorOptions;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public com.google.mlkit.vision.face.FaceDetectorOptions build()
  /// The returned object must be released after use, by calling the [release] method.
  FaceDetectorOptions build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $FaceDetectorOptionsType());
  }

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory FaceDetectorOptions_Builder() {
    return FaceDetectorOptions_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }
}

final class $FaceDetectorOptions_BuilderType
    extends jni.JObjType<FaceDetectorOptions_Builder> {
  const $FaceDetectorOptions_BuilderType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/face/FaceDetectorOptions$Builder;';

  @override
  FaceDetectorOptions_Builder fromReference(jni.JReference reference) =>
      FaceDetectorOptions_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceDetectorOptions_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceDetectorOptions_BuilderType) &&
        other is $FaceDetectorOptions_BuilderType;
  }
}

/// from: com.google.mlkit.vision.face.FaceDetectorOptions$ClassificationMode
class FaceDetectorOptions_ClassificationMode extends jni.JObject {
  @override
  late final jni.JObjType<FaceDetectorOptions_ClassificationMode> $type = type;

  FaceDetectorOptions_ClassificationMode.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/face/FaceDetectorOptions$ClassificationMode');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceDetectorOptions_ClassificationModeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FaceDetectorOptions_ClassificationModeImpl> _$impls =
      {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory FaceDetectorOptions_ClassificationMode.implement(
    $FaceDetectorOptions_ClassificationModeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = FaceDetectorOptions_ClassificationMode.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'com.google.mlkit.vision.face.FaceDetectorOptions$ClassificationMode',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FaceDetectorOptions_ClassificationModeImpl {
  factory $FaceDetectorOptions_ClassificationModeImpl() =
      _$FaceDetectorOptions_ClassificationModeImpl;
}

class _$FaceDetectorOptions_ClassificationModeImpl
    implements $FaceDetectorOptions_ClassificationModeImpl {
  _$FaceDetectorOptions_ClassificationModeImpl();
}

final class $FaceDetectorOptions_ClassificationModeType
    extends jni.JObjType<FaceDetectorOptions_ClassificationMode> {
  const $FaceDetectorOptions_ClassificationModeType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/face/FaceDetectorOptions$ClassificationMode;';

  @override
  FaceDetectorOptions_ClassificationMode fromReference(
          jni.JReference reference) =>
      FaceDetectorOptions_ClassificationMode.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceDetectorOptions_ClassificationModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceDetectorOptions_ClassificationModeType) &&
        other is $FaceDetectorOptions_ClassificationModeType;
  }
}

/// from: com.google.mlkit.vision.face.FaceDetectorOptions$ContourMode
class FaceDetectorOptions_ContourMode extends jni.JObject {
  @override
  late final jni.JObjType<FaceDetectorOptions_ContourMode> $type = type;

  FaceDetectorOptions_ContourMode.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/face/FaceDetectorOptions$ContourMode');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceDetectorOptions_ContourModeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FaceDetectorOptions_ContourModeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory FaceDetectorOptions_ContourMode.implement(
    $FaceDetectorOptions_ContourModeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = FaceDetectorOptions_ContourMode.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'com.google.mlkit.vision.face.FaceDetectorOptions$ContourMode',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FaceDetectorOptions_ContourModeImpl {
  factory $FaceDetectorOptions_ContourModeImpl() =
      _$FaceDetectorOptions_ContourModeImpl;
}

class _$FaceDetectorOptions_ContourModeImpl
    implements $FaceDetectorOptions_ContourModeImpl {
  _$FaceDetectorOptions_ContourModeImpl();
}

final class $FaceDetectorOptions_ContourModeType
    extends jni.JObjType<FaceDetectorOptions_ContourMode> {
  const $FaceDetectorOptions_ContourModeType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/face/FaceDetectorOptions$ContourMode;';

  @override
  FaceDetectorOptions_ContourMode fromReference(jni.JReference reference) =>
      FaceDetectorOptions_ContourMode.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceDetectorOptions_ContourModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceDetectorOptions_ContourModeType) &&
        other is $FaceDetectorOptions_ContourModeType;
  }
}

/// from: com.google.mlkit.vision.face.FaceDetectorOptions$LandmarkMode
class FaceDetectorOptions_LandmarkMode extends jni.JObject {
  @override
  late final jni.JObjType<FaceDetectorOptions_LandmarkMode> $type = type;

  FaceDetectorOptions_LandmarkMode.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/face/FaceDetectorOptions$LandmarkMode');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceDetectorOptions_LandmarkModeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FaceDetectorOptions_LandmarkModeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory FaceDetectorOptions_LandmarkMode.implement(
    $FaceDetectorOptions_LandmarkModeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = FaceDetectorOptions_LandmarkMode.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'com.google.mlkit.vision.face.FaceDetectorOptions$LandmarkMode',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FaceDetectorOptions_LandmarkModeImpl {
  factory $FaceDetectorOptions_LandmarkModeImpl() =
      _$FaceDetectorOptions_LandmarkModeImpl;
}

class _$FaceDetectorOptions_LandmarkModeImpl
    implements $FaceDetectorOptions_LandmarkModeImpl {
  _$FaceDetectorOptions_LandmarkModeImpl();
}

final class $FaceDetectorOptions_LandmarkModeType
    extends jni.JObjType<FaceDetectorOptions_LandmarkMode> {
  const $FaceDetectorOptions_LandmarkModeType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/face/FaceDetectorOptions$LandmarkMode;';

  @override
  FaceDetectorOptions_LandmarkMode fromReference(jni.JReference reference) =>
      FaceDetectorOptions_LandmarkMode.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceDetectorOptions_LandmarkModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceDetectorOptions_LandmarkModeType) &&
        other is $FaceDetectorOptions_LandmarkModeType;
  }
}

/// from: com.google.mlkit.vision.face.FaceDetectorOptions$PerformanceMode
class FaceDetectorOptions_PerformanceMode extends jni.JObject {
  @override
  late final jni.JObjType<FaceDetectorOptions_PerformanceMode> $type = type;

  FaceDetectorOptions_PerformanceMode.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/google/mlkit/vision/face/FaceDetectorOptions$PerformanceMode');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceDetectorOptions_PerformanceModeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FaceDetectorOptions_PerformanceModeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory FaceDetectorOptions_PerformanceMode.implement(
    $FaceDetectorOptions_PerformanceModeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = FaceDetectorOptions_PerformanceMode.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'com.google.mlkit.vision.face.FaceDetectorOptions$PerformanceMode',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FaceDetectorOptions_PerformanceModeImpl {
  factory $FaceDetectorOptions_PerformanceModeImpl() =
      _$FaceDetectorOptions_PerformanceModeImpl;
}

class _$FaceDetectorOptions_PerformanceModeImpl
    implements $FaceDetectorOptions_PerformanceModeImpl {
  _$FaceDetectorOptions_PerformanceModeImpl();
}

final class $FaceDetectorOptions_PerformanceModeType
    extends jni.JObjType<FaceDetectorOptions_PerformanceMode> {
  const $FaceDetectorOptions_PerformanceModeType();

  @override
  String get signature =>
      r'Lcom/google/mlkit/vision/face/FaceDetectorOptions$PerformanceMode;';

  @override
  FaceDetectorOptions_PerformanceMode fromReference(jni.JReference reference) =>
      FaceDetectorOptions_PerformanceMode.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceDetectorOptions_PerformanceModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceDetectorOptions_PerformanceModeType) &&
        other is $FaceDetectorOptions_PerformanceModeType;
  }
}

/// from: com.google.mlkit.vision.face.FaceDetectorOptions
class FaceDetectorOptions extends jni.JObject {
  @override
  late final jni.JObjType<FaceDetectorOptions> $type = type;

  FaceDetectorOptions.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'com/google/mlkit/vision/face/FaceDetectorOptions');

  /// The type which includes information such as the signature of this class.
  static const type = $FaceDetectorOptionsType();

  /// from: static public final int LANDMARK_MODE_NONE
  static const LANDMARK_MODE_NONE = 1;

  /// from: static public final int LANDMARK_MODE_ALL
  static const LANDMARK_MODE_ALL = 2;

  /// from: static public final int CONTOUR_MODE_NONE
  static const CONTOUR_MODE_NONE = 1;

  /// from: static public final int CONTOUR_MODE_ALL
  static const CONTOUR_MODE_ALL = 2;

  /// from: static public final int CLASSIFICATION_MODE_NONE
  static const CLASSIFICATION_MODE_NONE = 1;

  /// from: static public final int CLASSIFICATION_MODE_ALL
  static const CLASSIFICATION_MODE_ALL = 2;

  /// from: static public final int PERFORMANCE_MODE_FAST
  static const PERFORMANCE_MODE_FAST = 1;

  /// from: static public final int PERFORMANCE_MODE_ACCURATE
  static const PERFORMANCE_MODE_ACCURATE = 2;
  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_zza = _class.instanceMethodId(
    r'zza',
    r'()F',
  );

  static final _zza = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final float zza()
  double zza() {
    return _zza(reference.pointer, _id_zza as jni.JMethodIDPtr).float;
  }

  static final _id_zzb = _class.instanceMethodId(
    r'zzb',
    r'()I',
  );

  static final _zzb = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int zzb()
  int zzb() {
    return _zzb(reference.pointer, _id_zzb as jni.JMethodIDPtr).integer;
  }

  static final _id_zzc = _class.instanceMethodId(
    r'zzc',
    r'()I',
  );

  static final _zzc = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int zzc()
  int zzc() {
    return _zzc(reference.pointer, _id_zzc as jni.JMethodIDPtr).integer;
  }

  static final _id_zzd = _class.instanceMethodId(
    r'zzd',
    r'()I',
  );

  static final _zzd = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int zzd()
  int zzd() {
    return _zzd(reference.pointer, _id_zzd as jni.JMethodIDPtr).integer;
  }

  static final _id_zze = _class.instanceMethodId(
    r'zze',
    r'()I',
  );

  static final _zze = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int zze()
  int zze() {
    return _zze(reference.pointer, _id_zze as jni.JMethodIDPtr).integer;
  }

  static final _id_zzf = _class.instanceMethodId(
    r'zzf',
    r'()Ljava/util/concurrent/Executor;',
  );

  static final _zzf = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.concurrent.Executor zzf()
  /// The returned object must be released after use, by calling the [release] method.
  executor_.Executor zzf() {
    return _zzf(reference.pointer, _id_zzf as jni.JMethodIDPtr)
        .object(const executor_.$ExecutorType());
  }

  static final _id_zzg = _class.instanceMethodId(
    r'zzg',
    r'()Z',
  );

  static final _zzg = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean zzg()
  bool zzg() {
    return _zzg(reference.pointer, _id_zzg as jni.JMethodIDPtr).boolean;
  }
}

final class $FaceDetectorOptionsType extends jni.JObjType<FaceDetectorOptions> {
  const $FaceDetectorOptionsType();

  @override
  String get signature => r'Lcom/google/mlkit/vision/face/FaceDetectorOptions;';

  @override
  FaceDetectorOptions fromReference(jni.JReference reference) =>
      FaceDetectorOptions.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FaceDetectorOptionsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FaceDetectorOptionsType) &&
        other is $FaceDetectorOptionsType;
  }
}
