// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: android.app.Activity$ScreenCaptureCallback
class Activity_ScreenCaptureCallback extends jni.JObject {
  @override
  late final jni.JObjType<Activity_ScreenCaptureCallback> $type = type;

  Activity_ScreenCaptureCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/app/Activity$ScreenCaptureCallback");

  /// The type which includes information such as the signature of this class.
  static const type = $Activity_ScreenCaptureCallbackType();
  static final _id_onScreenCaptured = _class.instanceMethodId(
    r"onScreenCaptured",
    r"()V",
  );

  static final _onScreenCaptured = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void onScreenCaptured()
  void onScreenCaptured() {
    _onScreenCaptured(
            reference.pointer, _id_onScreenCaptured as jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Activity_ScreenCaptureCallbackImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onScreenCaptured()V") {
        _$impls[$p]!.onScreenCaptured();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Activity_ScreenCaptureCallback.implement(
    $Activity_ScreenCaptureCallbackImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Activity_ScreenCaptureCallback.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.app.Activity$ScreenCaptureCallback",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $Activity_ScreenCaptureCallbackImpl {
  factory $Activity_ScreenCaptureCallbackImpl({
    required void Function() onScreenCaptured,
  }) = _$Activity_ScreenCaptureCallbackImpl;

  void onScreenCaptured();
}

class _$Activity_ScreenCaptureCallbackImpl
    implements $Activity_ScreenCaptureCallbackImpl {
  _$Activity_ScreenCaptureCallbackImpl({
    required void Function() onScreenCaptured,
  }) : _onScreenCaptured = onScreenCaptured;

  final void Function() _onScreenCaptured;

  void onScreenCaptured() {
    return _onScreenCaptured();
  }
}

final class $Activity_ScreenCaptureCallbackType
    extends jni.JObjType<Activity_ScreenCaptureCallback> {
  const $Activity_ScreenCaptureCallbackType();

  @override
  String get signature => r"Landroid/app/Activity$ScreenCaptureCallback;";

  @override
  Activity_ScreenCaptureCallback fromReference(jni.JReference reference) =>
      Activity_ScreenCaptureCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Activity_ScreenCaptureCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity_ScreenCaptureCallbackType) &&
        other is $Activity_ScreenCaptureCallbackType;
  }
}

/// from: android.app.Activity
class Activity extends jni.JObject {
  @override
  late final jni.JObjType<Activity> $type = type;

  Activity.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/app/Activity");

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityType();

  /// from: static public final int DEFAULT_KEYS_DIALER
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: static public final int DEFAULT_KEYS_DISABLE
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: static public final int DEFAULT_KEYS_SEARCH_GLOBAL
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: static public final int DEFAULT_KEYS_SEARCH_LOCAL
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: static public final int DEFAULT_KEYS_SHORTCUT
  static const DEFAULT_KEYS_SHORTCUT = 2;
  static final _id_FOCUSED_STATE_SET = _class.staticFieldId(
    r"FOCUSED_STATE_SET",
    r"[I",
  );

  /// from: static protected final int[] FOCUSED_STATE_SET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.jint> get FOCUSED_STATE_SET =>
      _id_FOCUSED_STATE_SET.get(_class, const jni.JArrayType(jni.jintType()));

  /// from: static public final int FULLSCREEN_MODE_REQUEST_ENTER
  static const FULLSCREEN_MODE_REQUEST_ENTER = 1;

  /// from: static public final int FULLSCREEN_MODE_REQUEST_EXIT
  static const FULLSCREEN_MODE_REQUEST_EXIT = 0;

  /// from: static public final int OVERRIDE_TRANSITION_CLOSE
  static const OVERRIDE_TRANSITION_CLOSE = 1;

  /// from: static public final int OVERRIDE_TRANSITION_OPEN
  static const OVERRIDE_TRANSITION_OPEN = 0;

  /// from: static public final int RESULT_CANCELED
  static const RESULT_CANCELED = 0;

  /// from: static public final int RESULT_FIRST_USER
  static const RESULT_FIRST_USER = 1;

  /// from: static public final int RESULT_OK
  static const RESULT_OK = -1;
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Activity() {
    return Activity.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getIntent = _class.instanceMethodId(
    r"getIntent",
    r"()Landroid/content/Intent;",
  );

  static final _getIntent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.Intent getIntent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getIntent() {
    return _getIntent(reference.pointer, _id_getIntent as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setIntent = _class.instanceMethodId(
    r"setIntent",
    r"(Landroid/content/Intent;)V",
  );

  static final _setIntent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setIntent(android.content.Intent intent)
  void setIntent(
    jni.JObject intent,
  ) {
    _setIntent(reference.pointer, _id_setIntent as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_setLocusContext = _class.instanceMethodId(
    r"setLocusContext",
    r"(Landroid/content/LocusId;Landroid/os/Bundle;)V",
  );

  static final _setLocusContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)
  void setLocusContext(
    jni.JObject locusId,
    jni.JObject bundle,
  ) {
    _setLocusContext(reference.pointer, _id_setLocusContext as jni.JMethodIDPtr,
            locusId.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_getApplication = _class.instanceMethodId(
    r"getApplication",
    r"()Landroid/app/Application;",
  );

  static final _getApplication = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.app.Application getApplication()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplication() {
    return _getApplication(
            reference.pointer, _id_getApplication as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_isChild = _class.instanceMethodId(
    r"isChild",
    r"()Z",
  );

  static final _isChild = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean isChild()
  bool isChild() {
    return _isChild(reference.pointer, _id_isChild as jni.JMethodIDPtr).boolean;
  }

  static final _id_getParent = _class.instanceMethodId(
    r"getParent",
    r"()Landroid/app/Activity;",
  );

  static final _getParent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.app.Activity getParent()
  /// The returned object must be released after use, by calling the [release] method.
  Activity getParent() {
    return _getParent(reference.pointer, _id_getParent as jni.JMethodIDPtr)
        .object(const $ActivityType());
  }

  static final _id_getWindowManager = _class.instanceMethodId(
    r"getWindowManager",
    r"()Landroid/view/WindowManager;",
  );

  static final _getWindowManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.WindowManager getWindowManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindowManager() {
    return _getWindowManager(
            reference.pointer, _id_getWindowManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getWindow = _class.instanceMethodId(
    r"getWindow",
    r"()Landroid/view/Window;",
  );

  static final _getWindow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.Window getWindow()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindow() {
    return _getWindow(reference.pointer, _id_getWindow as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getLoaderManager = _class.instanceMethodId(
    r"getLoaderManager",
    r"()Landroid/app/LoaderManager;",
  );

  static final _getLoaderManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.app.LoaderManager getLoaderManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLoaderManager() {
    return _getLoaderManager(
            reference.pointer, _id_getLoaderManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getCurrentFocus = _class.instanceMethodId(
    r"getCurrentFocus",
    r"()Landroid/view/View;",
  );

  static final _getCurrentFocus = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.View getCurrentFocus()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCurrentFocus() {
    return _getCurrentFocus(
            reference.pointer, _id_getCurrentFocus as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_attachBaseContext = _class.instanceMethodId(
    r"attachBaseContext",
    r"(Landroid/content/Context;)V",
  );

  static final _attachBaseContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void attachBaseContext(android.content.Context context)
  void attachBaseContext(
    Context context,
  ) {
    _attachBaseContext(
            reference.pointer,
            _id_attachBaseContext as jni.JMethodIDPtr,
            context.reference.pointer)
        .check();
  }

  static final _id_registerActivityLifecycleCallbacks = _class.instanceMethodId(
    r"registerActivityLifecycleCallbacks",
    r"(Landroid/app/Application$ActivityLifecycleCallbacks;)V",
  );

  static final _registerActivityLifecycleCallbacks =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void registerActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    _registerActivityLifecycleCallbacks(
            reference.pointer,
            _id_registerActivityLifecycleCallbacks as jni.JMethodIDPtr,
            activityLifecycleCallbacks.reference.pointer)
        .check();
  }

  static final _id_unregisterActivityLifecycleCallbacks =
      _class.instanceMethodId(
    r"unregisterActivityLifecycleCallbacks",
    r"(Landroid/app/Application$ActivityLifecycleCallbacks;)V",
  );

  static final _unregisterActivityLifecycleCallbacks =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void unregisterActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    _unregisterActivityLifecycleCallbacks(
            reference.pointer,
            _id_unregisterActivityLifecycleCallbacks as jni.JMethodIDPtr,
            activityLifecycleCallbacks.reference.pointer)
        .check();
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r"registerComponentCallbacks",
    r"(Landroid/content/ComponentCallbacks;)V",
  );

  static final _registerComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r"unregisterComponentCallbacks",
    r"(Landroid/content/ComponentCallbacks;)V",
  );

  static final _unregisterComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_onCreate = _class.instanceMethodId(
    r"onCreate",
    r"(Landroid/os/Bundle;)V",
  );

  static final _onCreate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onCreate(android.os.Bundle bundle)
  void onCreate(
    jni.JObject bundle,
  ) {
    _onCreate(reference.pointer, _id_onCreate as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_getSplashScreen = _class.instanceMethodId(
    r"getSplashScreen",
    r"()Landroid/window/SplashScreen;",
  );

  static final _getSplashScreen = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.window.SplashScreen getSplashScreen()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSplashScreen() {
    return _getSplashScreen(
            reference.pointer, _id_getSplashScreen as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onCreate1 = _class.instanceMethodId(
    r"onCreate",
    r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V",
  );

  static final _onCreate1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onCreate1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onCreate1(reference.pointer, _id_onCreate1 as jni.JMethodIDPtr,
            bundle.reference.pointer, persistableBundle.reference.pointer)
        .check();
  }

  static final _id_onRestoreInstanceState = _class.instanceMethodId(
    r"onRestoreInstanceState",
    r"(Landroid/os/Bundle;)V",
  );

  static final _onRestoreInstanceState = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onRestoreInstanceState(android.os.Bundle bundle)
  void onRestoreInstanceState(
    jni.JObject bundle,
  ) {
    _onRestoreInstanceState(
            reference.pointer,
            _id_onRestoreInstanceState as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onRestoreInstanceState1 = _class.instanceMethodId(
    r"onRestoreInstanceState",
    r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V",
  );

  static final _onRestoreInstanceState1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onRestoreInstanceState1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onRestoreInstanceState1(
            reference.pointer,
            _id_onRestoreInstanceState1 as jni.JMethodIDPtr,
            bundle.reference.pointer,
            persistableBundle.reference.pointer)
        .check();
  }

  static final _id_onPostCreate = _class.instanceMethodId(
    r"onPostCreate",
    r"(Landroid/os/Bundle;)V",
  );

  static final _onPostCreate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPostCreate(android.os.Bundle bundle)
  void onPostCreate(
    jni.JObject bundle,
  ) {
    _onPostCreate(reference.pointer, _id_onPostCreate as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onPostCreate1 = _class.instanceMethodId(
    r"onPostCreate",
    r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V",
  );

  static final _onPostCreate1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onPostCreate1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onPostCreate1(reference.pointer, _id_onPostCreate1 as jni.JMethodIDPtr,
            bundle.reference.pointer, persistableBundle.reference.pointer)
        .check();
  }

  static final _id_onStart = _class.instanceMethodId(
    r"onStart",
    r"()V",
  );

  static final _onStart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onStart()
  void onStart() {
    _onStart(reference.pointer, _id_onStart as jni.JMethodIDPtr).check();
  }

  static final _id_onRestart = _class.instanceMethodId(
    r"onRestart",
    r"()V",
  );

  static final _onRestart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onRestart()
  void onRestart() {
    _onRestart(reference.pointer, _id_onRestart as jni.JMethodIDPtr).check();
  }

  static final _id_onStateNotSaved = _class.instanceMethodId(
    r"onStateNotSaved",
    r"()V",
  );

  static final _onStateNotSaved = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onStateNotSaved()
  void onStateNotSaved() {
    _onStateNotSaved(reference.pointer, _id_onStateNotSaved as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onResume = _class.instanceMethodId(
    r"onResume",
    r"()V",
  );

  static final _onResume = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onResume()
  void onResume() {
    _onResume(reference.pointer, _id_onResume as jni.JMethodIDPtr).check();
  }

  static final _id_onPostResume = _class.instanceMethodId(
    r"onPostResume",
    r"()V",
  );

  static final _onPostResume = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onPostResume()
  void onPostResume() {
    _onPostResume(reference.pointer, _id_onPostResume as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onTopResumedActivityChanged = _class.instanceMethodId(
    r"onTopResumedActivityChanged",
    r"(Z)V",
  );

  static final _onTopResumedActivityChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void onTopResumedActivityChanged(boolean z)
  void onTopResumedActivityChanged(
    bool z,
  ) {
    _onTopResumedActivityChanged(reference.pointer,
            _id_onTopResumedActivityChanged as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isVoiceInteraction = _class.instanceMethodId(
    r"isVoiceInteraction",
    r"()Z",
  );

  static final _isVoiceInteraction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isVoiceInteraction()
  bool isVoiceInteraction() {
    return _isVoiceInteraction(
            reference.pointer, _id_isVoiceInteraction as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isVoiceInteractionRoot = _class.instanceMethodId(
    r"isVoiceInteractionRoot",
    r"()Z",
  );

  static final _isVoiceInteractionRoot = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isVoiceInteractionRoot()
  bool isVoiceInteractionRoot() {
    return _isVoiceInteractionRoot(
            reference.pointer, _id_isVoiceInteractionRoot as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getVoiceInteractor = _class.instanceMethodId(
    r"getVoiceInteractor",
    r"()Landroid/app/VoiceInteractor;",
  );

  static final _getVoiceInteractor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.app.VoiceInteractor getVoiceInteractor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getVoiceInteractor() {
    return _getVoiceInteractor(
            reference.pointer, _id_getVoiceInteractor as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_isLocalVoiceInteractionSupported = _class.instanceMethodId(
    r"isLocalVoiceInteractionSupported",
    r"()Z",
  );

  static final _isLocalVoiceInteractionSupported =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallBooleanMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public boolean isLocalVoiceInteractionSupported()
  bool isLocalVoiceInteractionSupported() {
    return _isLocalVoiceInteractionSupported(reference.pointer,
            _id_isLocalVoiceInteractionSupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_startLocalVoiceInteraction = _class.instanceMethodId(
    r"startLocalVoiceInteraction",
    r"(Landroid/os/Bundle;)V",
  );

  static final _startLocalVoiceInteraction = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startLocalVoiceInteraction(android.os.Bundle bundle)
  void startLocalVoiceInteraction(
    jni.JObject bundle,
  ) {
    _startLocalVoiceInteraction(
            reference.pointer,
            _id_startLocalVoiceInteraction as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onLocalVoiceInteractionStarted = _class.instanceMethodId(
    r"onLocalVoiceInteractionStarted",
    r"()V",
  );

  static final _onLocalVoiceInteractionStarted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onLocalVoiceInteractionStarted()
  void onLocalVoiceInteractionStarted() {
    _onLocalVoiceInteractionStarted(reference.pointer,
            _id_onLocalVoiceInteractionStarted as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onLocalVoiceInteractionStopped = _class.instanceMethodId(
    r"onLocalVoiceInteractionStopped",
    r"()V",
  );

  static final _onLocalVoiceInteractionStopped = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onLocalVoiceInteractionStopped()
  void onLocalVoiceInteractionStopped() {
    _onLocalVoiceInteractionStopped(reference.pointer,
            _id_onLocalVoiceInteractionStopped as jni.JMethodIDPtr)
        .check();
  }

  static final _id_stopLocalVoiceInteraction = _class.instanceMethodId(
    r"stopLocalVoiceInteraction",
    r"()V",
  );

  static final _stopLocalVoiceInteraction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void stopLocalVoiceInteraction()
  void stopLocalVoiceInteraction() {
    _stopLocalVoiceInteraction(reference.pointer,
            _id_stopLocalVoiceInteraction as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onNewIntent = _class.instanceMethodId(
    r"onNewIntent",
    r"(Landroid/content/Intent;)V",
  );

  static final _onNewIntent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onNewIntent(android.content.Intent intent)
  void onNewIntent(
    jni.JObject intent,
  ) {
    _onNewIntent(reference.pointer, _id_onNewIntent as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r"onSaveInstanceState",
    r"(Landroid/os/Bundle;)V",
  );

  static final _onSaveInstanceState = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onSaveInstanceState(android.os.Bundle bundle)
  void onSaveInstanceState(
    jni.JObject bundle,
  ) {
    _onSaveInstanceState(
            reference.pointer,
            _id_onSaveInstanceState as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onSaveInstanceState1 = _class.instanceMethodId(
    r"onSaveInstanceState",
    r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V",
  );

  static final _onSaveInstanceState1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onSaveInstanceState1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onSaveInstanceState1(
            reference.pointer,
            _id_onSaveInstanceState1 as jni.JMethodIDPtr,
            bundle.reference.pointer,
            persistableBundle.reference.pointer)
        .check();
  }

  static final _id_onPause = _class.instanceMethodId(
    r"onPause",
    r"()V",
  );

  static final _onPause = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onPause()
  void onPause() {
    _onPause(reference.pointer, _id_onPause as jni.JMethodIDPtr).check();
  }

  static final _id_onUserLeaveHint = _class.instanceMethodId(
    r"onUserLeaveHint",
    r"()V",
  );

  static final _onUserLeaveHint = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onUserLeaveHint()
  void onUserLeaveHint() {
    _onUserLeaveHint(reference.pointer, _id_onUserLeaveHint as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onCreateThumbnail = _class.instanceMethodId(
    r"onCreateThumbnail",
    r"(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z",
  );

  static final _onCreateThumbnail = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)
  bool onCreateThumbnail(
    jni.JObject bitmap,
    jni.JObject canvas,
  ) {
    return _onCreateThumbnail(
            reference.pointer,
            _id_onCreateThumbnail as jni.JMethodIDPtr,
            bitmap.reference.pointer,
            canvas.reference.pointer)
        .boolean;
  }

  static final _id_onCreateDescription = _class.instanceMethodId(
    r"onCreateDescription",
    r"()Ljava/lang/CharSequence;",
  );

  static final _onCreateDescription = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.CharSequence onCreateDescription()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDescription() {
    return _onCreateDescription(
            reference.pointer, _id_onCreateDescription as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onProvideAssistData = _class.instanceMethodId(
    r"onProvideAssistData",
    r"(Landroid/os/Bundle;)V",
  );

  static final _onProvideAssistData = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onProvideAssistData(android.os.Bundle bundle)
  void onProvideAssistData(
    jni.JObject bundle,
  ) {
    _onProvideAssistData(
            reference.pointer,
            _id_onProvideAssistData as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onProvideAssistContent = _class.instanceMethodId(
    r"onProvideAssistContent",
    r"(Landroid/app/assist/AssistContent;)V",
  );

  static final _onProvideAssistContent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onProvideAssistContent(android.app.assist.AssistContent assistContent)
  void onProvideAssistContent(
    jni.JObject assistContent,
  ) {
    _onProvideAssistContent(
            reference.pointer,
            _id_onProvideAssistContent as jni.JMethodIDPtr,
            assistContent.reference.pointer)
        .check();
  }

  static final _id_onGetDirectActions = _class.instanceMethodId(
    r"onGetDirectActions",
    r"(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V",
  );

  static final _onGetDirectActions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onGetDirectActions(
    jni.JObject cancellationSignal,
    jni.JObject consumer,
  ) {
    _onGetDirectActions(
            reference.pointer,
            _id_onGetDirectActions as jni.JMethodIDPtr,
            cancellationSignal.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_onPerformDirectAction = _class.instanceMethodId(
    r"onPerformDirectAction",
    r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V",
  );

  static final _onPerformDirectAction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onPerformDirectAction(
    jni.JString string,
    jni.JObject bundle,
    jni.JObject cancellationSignal,
    jni.JObject consumer,
  ) {
    _onPerformDirectAction(
            reference.pointer,
            _id_onPerformDirectAction as jni.JMethodIDPtr,
            string.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_requestShowKeyboardShortcuts = _class.instanceMethodId(
    r"requestShowKeyboardShortcuts",
    r"()V",
  );

  static final _requestShowKeyboardShortcuts = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final void requestShowKeyboardShortcuts()
  void requestShowKeyboardShortcuts() {
    _requestShowKeyboardShortcuts(reference.pointer,
            _id_requestShowKeyboardShortcuts as jni.JMethodIDPtr)
        .check();
  }

  static final _id_dismissKeyboardShortcutsHelper = _class.instanceMethodId(
    r"dismissKeyboardShortcutsHelper",
    r"()V",
  );

  static final _dismissKeyboardShortcutsHelper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final void dismissKeyboardShortcutsHelper()
  void dismissKeyboardShortcutsHelper() {
    _dismissKeyboardShortcutsHelper(reference.pointer,
            _id_dismissKeyboardShortcutsHelper as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onProvideKeyboardShortcuts = _class.instanceMethodId(
    r"onProvideKeyboardShortcuts",
    r"(Ljava/util/List;Landroid/view/Menu;I)V",
  );

  static final _onProvideKeyboardShortcuts = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onProvideKeyboardShortcuts(java.util.List list, android.view.Menu menu, int i)
  void onProvideKeyboardShortcuts(
    jni.JList<jni.JObject> list,
    jni.JObject menu,
    int i,
  ) {
    _onProvideKeyboardShortcuts(
            reference.pointer,
            _id_onProvideKeyboardShortcuts as jni.JMethodIDPtr,
            list.reference.pointer,
            menu.reference.pointer,
            i)
        .check();
  }

  static final _id_showAssist = _class.instanceMethodId(
    r"showAssist",
    r"(Landroid/os/Bundle;)Z",
  );

  static final _showAssist = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean showAssist(android.os.Bundle bundle)
  bool showAssist(
    jni.JObject bundle,
  ) {
    return _showAssist(reference.pointer, _id_showAssist as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_onStop = _class.instanceMethodId(
    r"onStop",
    r"()V",
  );

  static final _onStop = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onStop()
  void onStop() {
    _onStop(reference.pointer, _id_onStop as jni.JMethodIDPtr).check();
  }

  static final _id_onDestroy = _class.instanceMethodId(
    r"onDestroy",
    r"()V",
  );

  static final _onDestroy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onDestroy()
  void onDestroy() {
    _onDestroy(reference.pointer, _id_onDestroy as jni.JMethodIDPtr).check();
  }

  static final _id_reportFullyDrawn = _class.instanceMethodId(
    r"reportFullyDrawn",
    r"()V",
  );

  static final _reportFullyDrawn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void reportFullyDrawn()
  void reportFullyDrawn() {
    _reportFullyDrawn(
            reference.pointer, _id_reportFullyDrawn as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onMultiWindowModeChanged = _class.instanceMethodId(
    r"onMultiWindowModeChanged",
    r"(ZLandroid/content/res/Configuration;)V",
  );

  static final _onMultiWindowModeChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)
  void onMultiWindowModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    _onMultiWindowModeChanged(
            reference.pointer,
            _id_onMultiWindowModeChanged as jni.JMethodIDPtr,
            z ? 1 : 0,
            configuration.reference.pointer)
        .check();
  }

  static final _id_onMultiWindowModeChanged1 = _class.instanceMethodId(
    r"onMultiWindowModeChanged",
    r"(Z)V",
  );

  static final _onMultiWindowModeChanged1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void onMultiWindowModeChanged(boolean z)
  void onMultiWindowModeChanged1(
    bool z,
  ) {
    _onMultiWindowModeChanged1(reference.pointer,
            _id_onMultiWindowModeChanged1 as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isInMultiWindowMode = _class.instanceMethodId(
    r"isInMultiWindowMode",
    r"()Z",
  );

  static final _isInMultiWindowMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isInMultiWindowMode()
  bool isInMultiWindowMode() {
    return _isInMultiWindowMode(
            reference.pointer, _id_isInMultiWindowMode as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onPictureInPictureModeChanged = _class.instanceMethodId(
    r"onPictureInPictureModeChanged",
    r"(ZLandroid/content/res/Configuration;)V",
  );

  static final _onPictureInPictureModeChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)
  void onPictureInPictureModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    _onPictureInPictureModeChanged(
            reference.pointer,
            _id_onPictureInPictureModeChanged as jni.JMethodIDPtr,
            z ? 1 : 0,
            configuration.reference.pointer)
        .check();
  }

  static final _id_onPictureInPictureUiStateChanged = _class.instanceMethodId(
    r"onPictureInPictureUiStateChanged",
    r"(Landroid/app/PictureInPictureUiState;)V",
  );

  static final _onPictureInPictureUiStateChanged =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)
  void onPictureInPictureUiStateChanged(
    jni.JObject pictureInPictureUiState,
  ) {
    _onPictureInPictureUiStateChanged(
            reference.pointer,
            _id_onPictureInPictureUiStateChanged as jni.JMethodIDPtr,
            pictureInPictureUiState.reference.pointer)
        .check();
  }

  static final _id_onPictureInPictureModeChanged1 = _class.instanceMethodId(
    r"onPictureInPictureModeChanged",
    r"(Z)V",
  );

  static final _onPictureInPictureModeChanged1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void onPictureInPictureModeChanged(boolean z)
  void onPictureInPictureModeChanged1(
    bool z,
  ) {
    _onPictureInPictureModeChanged1(reference.pointer,
            _id_onPictureInPictureModeChanged1 as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isInPictureInPictureMode = _class.instanceMethodId(
    r"isInPictureInPictureMode",
    r"()Z",
  );

  static final _isInPictureInPictureMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isInPictureInPictureMode()
  bool isInPictureInPictureMode() {
    return _isInPictureInPictureMode(
            reference.pointer, _id_isInPictureInPictureMode as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_enterPictureInPictureMode = _class.instanceMethodId(
    r"enterPictureInPictureMode",
    r"()V",
  );

  static final _enterPictureInPictureMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void enterPictureInPictureMode()
  void enterPictureInPictureMode() {
    _enterPictureInPictureMode(reference.pointer,
            _id_enterPictureInPictureMode as jni.JMethodIDPtr)
        .check();
  }

  static final _id_enterPictureInPictureMode1 = _class.instanceMethodId(
    r"enterPictureInPictureMode",
    r"(Landroid/app/PictureInPictureParams;)Z",
  );

  static final _enterPictureInPictureMode1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)
  bool enterPictureInPictureMode1(
    jni.JObject pictureInPictureParams,
  ) {
    return _enterPictureInPictureMode1(
            reference.pointer,
            _id_enterPictureInPictureMode1 as jni.JMethodIDPtr,
            pictureInPictureParams.reference.pointer)
        .boolean;
  }

  static final _id_setPictureInPictureParams = _class.instanceMethodId(
    r"setPictureInPictureParams",
    r"(Landroid/app/PictureInPictureParams;)V",
  );

  static final _setPictureInPictureParams = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)
  void setPictureInPictureParams(
    jni.JObject pictureInPictureParams,
  ) {
    _setPictureInPictureParams(
            reference.pointer,
            _id_setPictureInPictureParams as jni.JMethodIDPtr,
            pictureInPictureParams.reference.pointer)
        .check();
  }

  static final _id_getMaxNumPictureInPictureActions = _class.instanceMethodId(
    r"getMaxNumPictureInPictureActions",
    r"()I",
  );

  static final _getMaxNumPictureInPictureActions =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallIntMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public int getMaxNumPictureInPictureActions()
  int getMaxNumPictureInPictureActions() {
    return _getMaxNumPictureInPictureActions(reference.pointer,
            _id_getMaxNumPictureInPictureActions as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_onPictureInPictureRequested = _class.instanceMethodId(
    r"onPictureInPictureRequested",
    r"()Z",
  );

  static final _onPictureInPictureRequested = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean onPictureInPictureRequested()
  bool onPictureInPictureRequested() {
    return _onPictureInPictureRequested(reference.pointer,
            _id_onPictureInPictureRequested as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_requestFullscreenMode = _class.instanceMethodId(
    r"requestFullscreenMode",
    r"(ILandroid/os/OutcomeReceiver;)V",
  );

  static final _requestFullscreenMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void requestFullscreenMode(int i, android.os.OutcomeReceiver outcomeReceiver)
  void requestFullscreenMode(
    int i,
    jni.JObject outcomeReceiver,
  ) {
    _requestFullscreenMode(
            reference.pointer,
            _id_requestFullscreenMode as jni.JMethodIDPtr,
            i,
            outcomeReceiver.reference.pointer)
        .check();
  }

  static final _id_setShouldDockBigOverlays = _class.instanceMethodId(
    r"setShouldDockBigOverlays",
    r"(Z)V",
  );

  static final _setShouldDockBigOverlays = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setShouldDockBigOverlays(boolean z)
  void setShouldDockBigOverlays(
    bool z,
  ) {
    _setShouldDockBigOverlays(reference.pointer,
            _id_setShouldDockBigOverlays as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_shouldDockBigOverlays = _class.instanceMethodId(
    r"shouldDockBigOverlays",
    r"()Z",
  );

  static final _shouldDockBigOverlays = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean shouldDockBigOverlays()
  bool shouldDockBigOverlays() {
    return _shouldDockBigOverlays(
            reference.pointer, _id_shouldDockBigOverlays as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onConfigurationChanged = _class.instanceMethodId(
    r"onConfigurationChanged",
    r"(Landroid/content/res/Configuration;)V",
  );

  static final _onConfigurationChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onConfigurationChanged(android.content.res.Configuration configuration)
  void onConfigurationChanged(
    jni.JObject configuration,
  ) {
    _onConfigurationChanged(
            reference.pointer,
            _id_onConfigurationChanged as jni.JMethodIDPtr,
            configuration.reference.pointer)
        .check();
  }

  static final _id_getChangingConfigurations = _class.instanceMethodId(
    r"getChangingConfigurations",
    r"()I",
  );

  static final _getChangingConfigurations = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getChangingConfigurations()
  int getChangingConfigurations() {
    return _getChangingConfigurations(reference.pointer,
            _id_getChangingConfigurations as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getLastNonConfigurationInstance = _class.instanceMethodId(
    r"getLastNonConfigurationInstance",
    r"()Ljava/lang/Object;",
  );

  static final _getLastNonConfigurationInstance = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Object getLastNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLastNonConfigurationInstance() {
    return _getLastNonConfigurationInstance(reference.pointer,
            _id_getLastNonConfigurationInstance as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onRetainNonConfigurationInstance = _class.instanceMethodId(
    r"onRetainNonConfigurationInstance",
    r"()Ljava/lang/Object;",
  );

  static final _onRetainNonConfigurationInstance =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public java.lang.Object onRetainNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onRetainNonConfigurationInstance() {
    return _onRetainNonConfigurationInstance(reference.pointer,
            _id_onRetainNonConfigurationInstance as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r"onLowMemory",
    r"()V",
  );

  static final _onLowMemory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onLowMemory()
  void onLowMemory() {
    _onLowMemory(reference.pointer, _id_onLowMemory as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onTrimMemory = _class.instanceMethodId(
    r"onTrimMemory",
    r"(I)V",
  );

  static final _onTrimMemory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void onTrimMemory(int i)
  void onTrimMemory(
    int i,
  ) {
    _onTrimMemory(reference.pointer, _id_onTrimMemory as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getFragmentManager = _class.instanceMethodId(
    r"getFragmentManager",
    r"()Landroid/app/FragmentManager;",
  );

  static final _getFragmentManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.app.FragmentManager getFragmentManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFragmentManager() {
    return _getFragmentManager(
            reference.pointer, _id_getFragmentManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onAttachFragment = _class.instanceMethodId(
    r"onAttachFragment",
    r"(Landroid/app/Fragment;)V",
  );

  static final _onAttachFragment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onAttachFragment(android.app.Fragment fragment)
  void onAttachFragment(
    jni.JObject fragment,
  ) {
    _onAttachFragment(
            reference.pointer,
            _id_onAttachFragment as jni.JMethodIDPtr,
            fragment.reference.pointer)
        .check();
  }

  static final _id_managedQuery = _class.instanceMethodId(
    r"managedQuery",
    r"(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;",
  );

  static final _managedQuery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Cursor managedQuery(
    Uri uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JArray<jni.JString> strings1,
    jni.JString string1,
  ) {
    return _managedQuery(
            reference.pointer,
            _id_managedQuery as jni.JMethodIDPtr,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            strings1.reference.pointer,
            string1.reference.pointer)
        .object(const $CursorType());
  }

  static final _id_startManagingCursor = _class.instanceMethodId(
    r"startManagingCursor",
    r"(Landroid/database/Cursor;)V",
  );

  static final _startManagingCursor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startManagingCursor(android.database.Cursor cursor)
  void startManagingCursor(
    Cursor cursor,
  ) {
    _startManagingCursor(
            reference.pointer,
            _id_startManagingCursor as jni.JMethodIDPtr,
            cursor.reference.pointer)
        .check();
  }

  static final _id_stopManagingCursor = _class.instanceMethodId(
    r"stopManagingCursor",
    r"(Landroid/database/Cursor;)V",
  );

  static final _stopManagingCursor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void stopManagingCursor(android.database.Cursor cursor)
  void stopManagingCursor(
    Cursor cursor,
  ) {
    _stopManagingCursor(
            reference.pointer,
            _id_stopManagingCursor as jni.JMethodIDPtr,
            cursor.reference.pointer)
        .check();
  }

  static final _id_findViewById = _class.instanceMethodId(
    r"findViewById",
    r"(I)Landroid/view/View;",
  );

  static final _findViewById = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public T findViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T findViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return _findViewById(
            reference.pointer, _id_findViewById as jni.JMethodIDPtr, i)
        .object(T);
  }

  static final _id_requireViewById = _class.instanceMethodId(
    r"requireViewById",
    r"(I)Landroid/view/View;",
  );

  static final _requireViewById = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final T requireViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T requireViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return _requireViewById(
            reference.pointer, _id_requireViewById as jni.JMethodIDPtr, i)
        .object(T);
  }

  static final _id_getActionBar = _class.instanceMethodId(
    r"getActionBar",
    r"()Landroid/app/ActionBar;",
  );

  static final _getActionBar = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.app.ActionBar getActionBar()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActionBar() {
    return _getActionBar(
            reference.pointer, _id_getActionBar as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setActionBar = _class.instanceMethodId(
    r"setActionBar",
    r"(Landroid/widget/Toolbar;)V",
  );

  static final _setActionBar = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setActionBar(android.widget.Toolbar toolbar)
  void setActionBar(
    jni.JObject toolbar,
  ) {
    _setActionBar(reference.pointer, _id_setActionBar as jni.JMethodIDPtr,
            toolbar.reference.pointer)
        .check();
  }

  static final _id_setContentView = _class.instanceMethodId(
    r"setContentView",
    r"(I)V",
  );

  static final _setContentView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setContentView(int i)
  void setContentView(
    int i,
  ) {
    _setContentView(
            reference.pointer, _id_setContentView as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setContentView1 = _class.instanceMethodId(
    r"setContentView",
    r"(Landroid/view/View;)V",
  );

  static final _setContentView1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentView(android.view.View view)
  void setContentView1(
    jni.JObject view,
  ) {
    _setContentView1(reference.pointer, _id_setContentView1 as jni.JMethodIDPtr,
            view.reference.pointer)
        .check();
  }

  static final _id_setContentView2 = _class.instanceMethodId(
    r"setContentView",
    r"(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V",
  );

  static final _setContentView2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void setContentView2(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    _setContentView2(reference.pointer, _id_setContentView2 as jni.JMethodIDPtr,
            view.reference.pointer, layoutParams.reference.pointer)
        .check();
  }

  static final _id_addContentView = _class.instanceMethodId(
    r"addContentView",
    r"(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V",
  );

  static final _addContentView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void addContentView(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    _addContentView(reference.pointer, _id_addContentView as jni.JMethodIDPtr,
            view.reference.pointer, layoutParams.reference.pointer)
        .check();
  }

  static final _id_getContentTransitionManager = _class.instanceMethodId(
    r"getContentTransitionManager",
    r"()Landroid/transition/TransitionManager;",
  );

  static final _getContentTransitionManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.transition.TransitionManager getContentTransitionManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentTransitionManager() {
    return _getContentTransitionManager(reference.pointer,
            _id_getContentTransitionManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setContentTransitionManager = _class.instanceMethodId(
    r"setContentTransitionManager",
    r"(Landroid/transition/TransitionManager;)V",
  );

  static final _setContentTransitionManager = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentTransitionManager(android.transition.TransitionManager transitionManager)
  void setContentTransitionManager(
    jni.JObject transitionManager,
  ) {
    _setContentTransitionManager(
            reference.pointer,
            _id_setContentTransitionManager as jni.JMethodIDPtr,
            transitionManager.reference.pointer)
        .check();
  }

  static final _id_getContentScene = _class.instanceMethodId(
    r"getContentScene",
    r"()Landroid/transition/Scene;",
  );

  static final _getContentScene = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.transition.Scene getContentScene()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentScene() {
    return _getContentScene(
            reference.pointer, _id_getContentScene as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setFinishOnTouchOutside = _class.instanceMethodId(
    r"setFinishOnTouchOutside",
    r"(Z)V",
  );

  static final _setFinishOnTouchOutside = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setFinishOnTouchOutside(boolean z)
  void setFinishOnTouchOutside(
    bool z,
  ) {
    _setFinishOnTouchOutside(reference.pointer,
            _id_setFinishOnTouchOutside as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setDefaultKeyMode = _class.instanceMethodId(
    r"setDefaultKeyMode",
    r"(I)V",
  );

  static final _setDefaultKeyMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setDefaultKeyMode(int i)
  void setDefaultKeyMode(
    int i,
  ) {
    _setDefaultKeyMode(
            reference.pointer, _id_setDefaultKeyMode as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r"onKeyDown",
    r"(ILandroid/view/KeyEvent;)Z",
  );

  static final _onKeyDown = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)
  bool onKeyDown(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyDown(reference.pointer, _id_onKeyDown as jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyLongPress = _class.instanceMethodId(
    r"onKeyLongPress",
    r"(ILandroid/view/KeyEvent;)Z",
  );

  static final _onKeyLongPress = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)
  bool onKeyLongPress(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyLongPress(
            reference.pointer,
            _id_onKeyLongPress as jni.JMethodIDPtr,
            i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r"onKeyUp",
    r"(ILandroid/view/KeyEvent;)Z",
  );

  static final _onKeyUp = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)
  bool onKeyUp(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyUp(reference.pointer, _id_onKeyUp as jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyMultiple = _class.instanceMethodId(
    r"onKeyMultiple",
    r"(IILandroid/view/KeyEvent;)Z",
  );

  static final _onKeyMultiple = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)
  bool onKeyMultiple(
    int i,
    int i1,
    jni.JObject keyEvent,
  ) {
    return _onKeyMultiple(
            reference.pointer,
            _id_onKeyMultiple as jni.JMethodIDPtr,
            i,
            i1,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onBackPressed = _class.instanceMethodId(
    r"onBackPressed",
    r"()V",
  );

  static final _onBackPressed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onBackPressed()
  void onBackPressed() {
    _onBackPressed(reference.pointer, _id_onBackPressed as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onKeyShortcut = _class.instanceMethodId(
    r"onKeyShortcut",
    r"(ILandroid/view/KeyEvent;)Z",
  );

  static final _onKeyShortcut = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)
  bool onKeyShortcut(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyShortcut(
            reference.pointer,
            _id_onKeyShortcut as jni.JMethodIDPtr,
            i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r"onTouchEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _onTouchEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onTouchEvent(android.view.MotionEvent motionEvent)
  bool onTouchEvent(
    jni.JObject motionEvent,
  ) {
    return _onTouchEvent(reference.pointer,
            _id_onTouchEvent as jni.JMethodIDPtr, motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r"onTrackballEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _onTrackballEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onTrackballEvent(android.view.MotionEvent motionEvent)
  bool onTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return _onTrackballEvent(
            reference.pointer,
            _id_onTrackballEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r"onGenericMotionEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _onGenericMotionEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool onGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return _onGenericMotionEvent(
            reference.pointer,
            _id_onGenericMotionEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onUserInteraction = _class.instanceMethodId(
    r"onUserInteraction",
    r"()V",
  );

  static final _onUserInteraction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onUserInteraction()
  void onUserInteraction() {
    _onUserInteraction(
            reference.pointer, _id_onUserInteraction as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onWindowAttributesChanged = _class.instanceMethodId(
    r"onWindowAttributesChanged",
    r"(Landroid/view/WindowManager$LayoutParams;)V",
  );

  static final _onWindowAttributesChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)
  void onWindowAttributesChanged(
    jni.JObject layoutParams,
  ) {
    _onWindowAttributesChanged(
            reference.pointer,
            _id_onWindowAttributesChanged as jni.JMethodIDPtr,
            layoutParams.reference.pointer)
        .check();
  }

  static final _id_onContentChanged = _class.instanceMethodId(
    r"onContentChanged",
    r"()V",
  );

  static final _onContentChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onContentChanged()
  void onContentChanged() {
    _onContentChanged(
            reference.pointer, _id_onContentChanged as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r"onWindowFocusChanged",
    r"(Z)V",
  );

  static final _onWindowFocusChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void onWindowFocusChanged(boolean z)
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer,
            _id_onWindowFocusChanged as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_onAttachedToWindow = _class.instanceMethodId(
    r"onAttachedToWindow",
    r"()V",
  );

  static final _onAttachedToWindow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onAttachedToWindow()
  void onAttachedToWindow() {
    _onAttachedToWindow(
            reference.pointer, _id_onAttachedToWindow as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onDetachedFromWindow = _class.instanceMethodId(
    r"onDetachedFromWindow",
    r"()V",
  );

  static final _onDetachedFromWindow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onDetachedFromWindow()
  void onDetachedFromWindow() {
    _onDetachedFromWindow(
            reference.pointer, _id_onDetachedFromWindow as jni.JMethodIDPtr)
        .check();
  }

  static final _id_hasWindowFocus = _class.instanceMethodId(
    r"hasWindowFocus",
    r"()Z",
  );

  static final _hasWindowFocus = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean hasWindowFocus()
  bool hasWindowFocus() {
    return _hasWindowFocus(
            reference.pointer, _id_hasWindowFocus as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_dispatchKeyEvent = _class.instanceMethodId(
    r"dispatchKeyEvent",
    r"(Landroid/view/KeyEvent;)Z",
  );

  static final _dispatchKeyEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyEvent(
    jni.JObject keyEvent,
  ) {
    return _dispatchKeyEvent(
            reference.pointer,
            _id_dispatchKeyEvent as jni.JMethodIDPtr,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_dispatchKeyShortcutEvent = _class.instanceMethodId(
    r"dispatchKeyShortcutEvent",
    r"(Landroid/view/KeyEvent;)Z",
  );

  static final _dispatchKeyShortcutEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyShortcutEvent(
    jni.JObject keyEvent,
  ) {
    return _dispatchKeyShortcutEvent(
            reference.pointer,
            _id_dispatchKeyShortcutEvent as jni.JMethodIDPtr,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_dispatchTouchEvent = _class.instanceMethodId(
    r"dispatchTouchEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _dispatchTouchEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)
  bool dispatchTouchEvent(
    jni.JObject motionEvent,
  ) {
    return _dispatchTouchEvent(
            reference.pointer,
            _id_dispatchTouchEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_dispatchTrackballEvent = _class.instanceMethodId(
    r"dispatchTrackballEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _dispatchTrackballEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)
  bool dispatchTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return _dispatchTrackballEvent(
            reference.pointer,
            _id_dispatchTrackballEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_dispatchGenericMotionEvent = _class.instanceMethodId(
    r"dispatchGenericMotionEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _dispatchGenericMotionEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool dispatchGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return _dispatchGenericMotionEvent(
            reference.pointer,
            _id_dispatchGenericMotionEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_dispatchPopulateAccessibilityEvent = _class.instanceMethodId(
    r"dispatchPopulateAccessibilityEvent",
    r"(Landroid/view/accessibility/AccessibilityEvent;)Z",
  );

  static final _dispatchPopulateAccessibilityEvent =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallBooleanMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)
  bool dispatchPopulateAccessibilityEvent(
    jni.JObject accessibilityEvent,
  ) {
    return _dispatchPopulateAccessibilityEvent(
            reference.pointer,
            _id_dispatchPopulateAccessibilityEvent as jni.JMethodIDPtr,
            accessibilityEvent.reference.pointer)
        .boolean;
  }

  static final _id_onCreatePanelView = _class.instanceMethodId(
    r"onCreatePanelView",
    r"(I)Landroid/view/View;",
  );

  static final _onCreatePanelView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.view.View onCreatePanelView(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreatePanelView(
    int i,
  ) {
    return _onCreatePanelView(
            reference.pointer, _id_onCreatePanelView as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_onCreatePanelMenu = _class.instanceMethodId(
    r"onCreatePanelMenu",
    r"(ILandroid/view/Menu;)Z",
  );

  static final _onCreatePanelMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreatePanelMenu(int i, android.view.Menu menu)
  bool onCreatePanelMenu(
    int i,
    jni.JObject menu,
  ) {
    return _onCreatePanelMenu(
            reference.pointer,
            _id_onCreatePanelMenu as jni.JMethodIDPtr,
            i,
            menu.reference.pointer)
        .boolean;
  }

  static final _id_onPreparePanel = _class.instanceMethodId(
    r"onPreparePanel",
    r"(ILandroid/view/View;Landroid/view/Menu;)Z",
  );

  static final _onPreparePanel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)
  bool onPreparePanel(
    int i,
    jni.JObject view,
    jni.JObject menu,
  ) {
    return _onPreparePanel(
            reference.pointer,
            _id_onPreparePanel as jni.JMethodIDPtr,
            i,
            view.reference.pointer,
            menu.reference.pointer)
        .boolean;
  }

  static final _id_onMenuOpened = _class.instanceMethodId(
    r"onMenuOpened",
    r"(ILandroid/view/Menu;)Z",
  );

  static final _onMenuOpened = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onMenuOpened(int i, android.view.Menu menu)
  bool onMenuOpened(
    int i,
    jni.JObject menu,
  ) {
    return _onMenuOpened(reference.pointer,
            _id_onMenuOpened as jni.JMethodIDPtr, i, menu.reference.pointer)
        .boolean;
  }

  static final _id_onMenuItemSelected = _class.instanceMethodId(
    r"onMenuItemSelected",
    r"(ILandroid/view/MenuItem;)Z",
  );

  static final _onMenuItemSelected = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)
  bool onMenuItemSelected(
    int i,
    jni.JObject menuItem,
  ) {
    return _onMenuItemSelected(
            reference.pointer,
            _id_onMenuItemSelected as jni.JMethodIDPtr,
            i,
            menuItem.reference.pointer)
        .boolean;
  }

  static final _id_onPanelClosed = _class.instanceMethodId(
    r"onPanelClosed",
    r"(ILandroid/view/Menu;)V",
  );

  static final _onPanelClosed = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPanelClosed(int i, android.view.Menu menu)
  void onPanelClosed(
    int i,
    jni.JObject menu,
  ) {
    _onPanelClosed(reference.pointer, _id_onPanelClosed as jni.JMethodIDPtr, i,
            menu.reference.pointer)
        .check();
  }

  static final _id_invalidateOptionsMenu = _class.instanceMethodId(
    r"invalidateOptionsMenu",
    r"()V",
  );

  static final _invalidateOptionsMenu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void invalidateOptionsMenu()
  void invalidateOptionsMenu() {
    _invalidateOptionsMenu(
            reference.pointer, _id_invalidateOptionsMenu as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onCreateOptionsMenu = _class.instanceMethodId(
    r"onCreateOptionsMenu",
    r"(Landroid/view/Menu;)Z",
  );

  static final _onCreateOptionsMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreateOptionsMenu(android.view.Menu menu)
  bool onCreateOptionsMenu(
    jni.JObject menu,
  ) {
    return _onCreateOptionsMenu(reference.pointer,
            _id_onCreateOptionsMenu as jni.JMethodIDPtr, menu.reference.pointer)
        .boolean;
  }

  static final _id_onPrepareOptionsMenu = _class.instanceMethodId(
    r"onPrepareOptionsMenu",
    r"(Landroid/view/Menu;)Z",
  );

  static final _onPrepareOptionsMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onPrepareOptionsMenu(android.view.Menu menu)
  bool onPrepareOptionsMenu(
    jni.JObject menu,
  ) {
    return _onPrepareOptionsMenu(
            reference.pointer,
            _id_onPrepareOptionsMenu as jni.JMethodIDPtr,
            menu.reference.pointer)
        .boolean;
  }

  static final _id_onOptionsItemSelected = _class.instanceMethodId(
    r"onOptionsItemSelected",
    r"(Landroid/view/MenuItem;)Z",
  );

  static final _onOptionsItemSelected = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onOptionsItemSelected(android.view.MenuItem menuItem)
  bool onOptionsItemSelected(
    jni.JObject menuItem,
  ) {
    return _onOptionsItemSelected(
            reference.pointer,
            _id_onOptionsItemSelected as jni.JMethodIDPtr,
            menuItem.reference.pointer)
        .boolean;
  }

  static final _id_onNavigateUp = _class.instanceMethodId(
    r"onNavigateUp",
    r"()Z",
  );

  static final _onNavigateUp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean onNavigateUp()
  bool onNavigateUp() {
    return _onNavigateUp(
            reference.pointer, _id_onNavigateUp as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onNavigateUpFromChild = _class.instanceMethodId(
    r"onNavigateUpFromChild",
    r"(Landroid/app/Activity;)Z",
  );

  static final _onNavigateUpFromChild = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onNavigateUpFromChild(android.app.Activity activity)
  bool onNavigateUpFromChild(
    Activity activity,
  ) {
    return _onNavigateUpFromChild(
            reference.pointer,
            _id_onNavigateUpFromChild as jni.JMethodIDPtr,
            activity.reference.pointer)
        .boolean;
  }

  static final _id_onCreateNavigateUpTaskStack = _class.instanceMethodId(
    r"onCreateNavigateUpTaskStack",
    r"(Landroid/app/TaskStackBuilder;)V",
  );

  static final _onCreateNavigateUpTaskStack = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onCreateNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    _onCreateNavigateUpTaskStack(
            reference.pointer,
            _id_onCreateNavigateUpTaskStack as jni.JMethodIDPtr,
            taskStackBuilder.reference.pointer)
        .check();
  }

  static final _id_onPrepareNavigateUpTaskStack = _class.instanceMethodId(
    r"onPrepareNavigateUpTaskStack",
    r"(Landroid/app/TaskStackBuilder;)V",
  );

  static final _onPrepareNavigateUpTaskStack = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onPrepareNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    _onPrepareNavigateUpTaskStack(
            reference.pointer,
            _id_onPrepareNavigateUpTaskStack as jni.JMethodIDPtr,
            taskStackBuilder.reference.pointer)
        .check();
  }

  static final _id_onOptionsMenuClosed = _class.instanceMethodId(
    r"onOptionsMenuClosed",
    r"(Landroid/view/Menu;)V",
  );

  static final _onOptionsMenuClosed = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onOptionsMenuClosed(android.view.Menu menu)
  void onOptionsMenuClosed(
    jni.JObject menu,
  ) {
    _onOptionsMenuClosed(reference.pointer,
            _id_onOptionsMenuClosed as jni.JMethodIDPtr, menu.reference.pointer)
        .check();
  }

  static final _id_openOptionsMenu = _class.instanceMethodId(
    r"openOptionsMenu",
    r"()V",
  );

  static final _openOptionsMenu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void openOptionsMenu()
  void openOptionsMenu() {
    _openOptionsMenu(reference.pointer, _id_openOptionsMenu as jni.JMethodIDPtr)
        .check();
  }

  static final _id_closeOptionsMenu = _class.instanceMethodId(
    r"closeOptionsMenu",
    r"()V",
  );

  static final _closeOptionsMenu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void closeOptionsMenu()
  void closeOptionsMenu() {
    _closeOptionsMenu(
            reference.pointer, _id_closeOptionsMenu as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onCreateContextMenu = _class.instanceMethodId(
    r"onCreateContextMenu",
    r"(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V",
  );

  static final _onCreateContextMenu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)
  void onCreateContextMenu(
    jni.JObject contextMenu,
    jni.JObject view,
    jni.JObject contextMenuInfo,
  ) {
    _onCreateContextMenu(
            reference.pointer,
            _id_onCreateContextMenu as jni.JMethodIDPtr,
            contextMenu.reference.pointer,
            view.reference.pointer,
            contextMenuInfo.reference.pointer)
        .check();
  }

  static final _id_registerForContextMenu = _class.instanceMethodId(
    r"registerForContextMenu",
    r"(Landroid/view/View;)V",
  );

  static final _registerForContextMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void registerForContextMenu(android.view.View view)
  void registerForContextMenu(
    jni.JObject view,
  ) {
    _registerForContextMenu(
            reference.pointer,
            _id_registerForContextMenu as jni.JMethodIDPtr,
            view.reference.pointer)
        .check();
  }

  static final _id_unregisterForContextMenu = _class.instanceMethodId(
    r"unregisterForContextMenu",
    r"(Landroid/view/View;)V",
  );

  static final _unregisterForContextMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterForContextMenu(android.view.View view)
  void unregisterForContextMenu(
    jni.JObject view,
  ) {
    _unregisterForContextMenu(
            reference.pointer,
            _id_unregisterForContextMenu as jni.JMethodIDPtr,
            view.reference.pointer)
        .check();
  }

  static final _id_openContextMenu = _class.instanceMethodId(
    r"openContextMenu",
    r"(Landroid/view/View;)V",
  );

  static final _openContextMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void openContextMenu(android.view.View view)
  void openContextMenu(
    jni.JObject view,
  ) {
    _openContextMenu(reference.pointer, _id_openContextMenu as jni.JMethodIDPtr,
            view.reference.pointer)
        .check();
  }

  static final _id_closeContextMenu = _class.instanceMethodId(
    r"closeContextMenu",
    r"()V",
  );

  static final _closeContextMenu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void closeContextMenu()
  void closeContextMenu() {
    _closeContextMenu(
            reference.pointer, _id_closeContextMenu as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onContextItemSelected = _class.instanceMethodId(
    r"onContextItemSelected",
    r"(Landroid/view/MenuItem;)Z",
  );

  static final _onContextItemSelected = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onContextItemSelected(android.view.MenuItem menuItem)
  bool onContextItemSelected(
    jni.JObject menuItem,
  ) {
    return _onContextItemSelected(
            reference.pointer,
            _id_onContextItemSelected as jni.JMethodIDPtr,
            menuItem.reference.pointer)
        .boolean;
  }

  static final _id_onContextMenuClosed = _class.instanceMethodId(
    r"onContextMenuClosed",
    r"(Landroid/view/Menu;)V",
  );

  static final _onContextMenuClosed = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onContextMenuClosed(android.view.Menu menu)
  void onContextMenuClosed(
    jni.JObject menu,
  ) {
    _onContextMenuClosed(reference.pointer,
            _id_onContextMenuClosed as jni.JMethodIDPtr, menu.reference.pointer)
        .check();
  }

  static final _id_onCreateDialog = _class.instanceMethodId(
    r"onCreateDialog",
    r"(I)Landroid/app/Dialog;",
  );

  static final _onCreateDialog = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: protected android.app.Dialog onCreateDialog(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog(
    int i,
  ) {
    return _onCreateDialog(
            reference.pointer, _id_onCreateDialog as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_onCreateDialog1 = _class.instanceMethodId(
    r"onCreateDialog",
    r"(ILandroid/os/Bundle;)Landroid/app/Dialog;",
  );

  static final _onCreateDialog1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected android.app.Dialog onCreateDialog(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog1(
    int i,
    jni.JObject bundle,
  ) {
    return _onCreateDialog1(
            reference.pointer,
            _id_onCreateDialog1 as jni.JMethodIDPtr,
            i,
            bundle.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onPrepareDialog = _class.instanceMethodId(
    r"onPrepareDialog",
    r"(ILandroid/app/Dialog;)V",
  );

  static final _onPrepareDialog = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog)
  void onPrepareDialog(
    int i,
    jni.JObject dialog,
  ) {
    _onPrepareDialog(reference.pointer, _id_onPrepareDialog as jni.JMethodIDPtr,
            i, dialog.reference.pointer)
        .check();
  }

  static final _id_onPrepareDialog1 = _class.instanceMethodId(
    r"onPrepareDialog",
    r"(ILandroid/app/Dialog;Landroid/os/Bundle;)V",
  );

  static final _onPrepareDialog1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog, android.os.Bundle bundle)
  void onPrepareDialog1(
    int i,
    jni.JObject dialog,
    jni.JObject bundle,
  ) {
    _onPrepareDialog1(
            reference.pointer,
            _id_onPrepareDialog1 as jni.JMethodIDPtr,
            i,
            dialog.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_showDialog = _class.instanceMethodId(
    r"showDialog",
    r"(I)V",
  );

  static final _showDialog = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void showDialog(int i)
  void showDialog(
    int i,
  ) {
    _showDialog(reference.pointer, _id_showDialog as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_showDialog1 = _class.instanceMethodId(
    r"showDialog",
    r"(ILandroid/os/Bundle;)Z",
  );

  static final _showDialog1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean showDialog(int i, android.os.Bundle bundle)
  bool showDialog1(
    int i,
    jni.JObject bundle,
  ) {
    return _showDialog1(reference.pointer, _id_showDialog1 as jni.JMethodIDPtr,
            i, bundle.reference.pointer)
        .boolean;
  }

  static final _id_dismissDialog = _class.instanceMethodId(
    r"dismissDialog",
    r"(I)V",
  );

  static final _dismissDialog = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void dismissDialog(int i)
  void dismissDialog(
    int i,
  ) {
    _dismissDialog(reference.pointer, _id_dismissDialog as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_removeDialog = _class.instanceMethodId(
    r"removeDialog",
    r"(I)V",
  );

  static final _removeDialog = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void removeDialog(int i)
  void removeDialog(
    int i,
  ) {
    _removeDialog(reference.pointer, _id_removeDialog as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_onSearchRequested = _class.instanceMethodId(
    r"onSearchRequested",
    r"(Landroid/view/SearchEvent;)Z",
  );

  static final _onSearchRequested = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onSearchRequested(android.view.SearchEvent searchEvent)
  bool onSearchRequested(
    jni.JObject searchEvent,
  ) {
    return _onSearchRequested(
            reference.pointer,
            _id_onSearchRequested as jni.JMethodIDPtr,
            searchEvent.reference.pointer)
        .boolean;
  }

  static final _id_onSearchRequested1 = _class.instanceMethodId(
    r"onSearchRequested",
    r"()Z",
  );

  static final _onSearchRequested1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean onSearchRequested()
  bool onSearchRequested1() {
    return _onSearchRequested1(
            reference.pointer, _id_onSearchRequested1 as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getSearchEvent = _class.instanceMethodId(
    r"getSearchEvent",
    r"()Landroid/view/SearchEvent;",
  );

  static final _getSearchEvent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.view.SearchEvent getSearchEvent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSearchEvent() {
    return _getSearchEvent(
            reference.pointer, _id_getSearchEvent as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_startSearch = _class.instanceMethodId(
    r"startSearch",
    r"(Ljava/lang/String;ZLandroid/os/Bundle;Z)V",
  );

  static final _startSearch = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)
  void startSearch(
    jni.JString string,
    bool z,
    jni.JObject bundle,
    bool z1,
  ) {
    _startSearch(
            reference.pointer,
            _id_startSearch as jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0,
            bundle.reference.pointer,
            z1 ? 1 : 0)
        .check();
  }

  static final _id_triggerSearch = _class.instanceMethodId(
    r"triggerSearch",
    r"(Ljava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _triggerSearch = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void triggerSearch(java.lang.String string, android.os.Bundle bundle)
  void triggerSearch(
    jni.JString string,
    jni.JObject bundle,
  ) {
    _triggerSearch(reference.pointer, _id_triggerSearch as jni.JMethodIDPtr,
            string.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_takeKeyEvents = _class.instanceMethodId(
    r"takeKeyEvents",
    r"(Z)V",
  );

  static final _takeKeyEvents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void takeKeyEvents(boolean z)
  void takeKeyEvents(
    bool z,
  ) {
    _takeKeyEvents(
            reference.pointer, _id_takeKeyEvents as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_requestWindowFeature = _class.instanceMethodId(
    r"requestWindowFeature",
    r"(I)Z",
  );

  static final _requestWindowFeature = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final boolean requestWindowFeature(int i)
  bool requestWindowFeature(
    int i,
  ) {
    return _requestWindowFeature(
            reference.pointer, _id_requestWindowFeature as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_setFeatureDrawableResource = _class.instanceMethodId(
    r"setFeatureDrawableResource",
    r"(II)V",
  );

  static final _setFeatureDrawableResource = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public final void setFeatureDrawableResource(int i, int i1)
  void setFeatureDrawableResource(
    int i,
    int i1,
  ) {
    _setFeatureDrawableResource(reference.pointer,
            _id_setFeatureDrawableResource as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_setFeatureDrawableUri = _class.instanceMethodId(
    r"setFeatureDrawableUri",
    r"(ILandroid/net/Uri;)V",
  );

  static final _setFeatureDrawableUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setFeatureDrawableUri(int i, android.net.Uri uri)
  void setFeatureDrawableUri(
    int i,
    Uri uri,
  ) {
    _setFeatureDrawableUri(
            reference.pointer,
            _id_setFeatureDrawableUri as jni.JMethodIDPtr,
            i,
            uri.reference.pointer)
        .check();
  }

  static final _id_setFeatureDrawable = _class.instanceMethodId(
    r"setFeatureDrawable",
    r"(ILandroid/graphics/drawable/Drawable;)V",
  );

  static final _setFeatureDrawable = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)
  void setFeatureDrawable(
    int i,
    jni.JObject drawable,
  ) {
    _setFeatureDrawable(
            reference.pointer,
            _id_setFeatureDrawable as jni.JMethodIDPtr,
            i,
            drawable.reference.pointer)
        .check();
  }

  static final _id_setFeatureDrawableAlpha = _class.instanceMethodId(
    r"setFeatureDrawableAlpha",
    r"(II)V",
  );

  static final _setFeatureDrawableAlpha = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public final void setFeatureDrawableAlpha(int i, int i1)
  void setFeatureDrawableAlpha(
    int i,
    int i1,
  ) {
    _setFeatureDrawableAlpha(reference.pointer,
            _id_setFeatureDrawableAlpha as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_getLayoutInflater = _class.instanceMethodId(
    r"getLayoutInflater",
    r"()Landroid/view/LayoutInflater;",
  );

  static final _getLayoutInflater = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.LayoutInflater getLayoutInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLayoutInflater() {
    return _getLayoutInflater(
            reference.pointer, _id_getLayoutInflater as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMenuInflater = _class.instanceMethodId(
    r"getMenuInflater",
    r"()Landroid/view/MenuInflater;",
  );

  static final _getMenuInflater = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.MenuInflater getMenuInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMenuInflater() {
    return _getMenuInflater(
            reference.pointer, _id_getMenuInflater as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r"setTheme",
    r"(I)V",
  );

  static final _setTheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTheme(int i)
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni.JMethodIDPtr, i).check();
  }

  static final _id_onApplyThemeResource = _class.instanceMethodId(
    r"onApplyThemeResource",
    r"(Landroid/content/res/Resources$Theme;IZ)V",
  );

  static final _onApplyThemeResource = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: protected void onApplyThemeResource(android.content.res.Resources$Theme theme, int i, boolean z)
  void onApplyThemeResource(
    jni.JObject theme,
    int i,
    bool z,
  ) {
    _onApplyThemeResource(
            reference.pointer,
            _id_onApplyThemeResource as jni.JMethodIDPtr,
            theme.reference.pointer,
            i,
            z ? 1 : 0)
        .check();
  }

  static final _id_requestPermissions = _class.instanceMethodId(
    r"requestPermissions",
    r"([Ljava/lang/String;I)V",
  );

  static final _requestPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void requestPermissions(java.lang.String[] strings, int i)
  void requestPermissions(
    jni.JArray<jni.JString> strings,
    int i,
  ) {
    _requestPermissions(
            reference.pointer,
            _id_requestPermissions as jni.JMethodIDPtr,
            strings.reference.pointer,
            i)
        .check();
  }

  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r"onRequestPermissionsResult",
    r"(I[Ljava/lang/String;[I)V",
  );

  static final _onRequestPermissionsResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)
  void onRequestPermissionsResult(
    int i,
    jni.JArray<jni.JString> strings,
    jni.JArray<jni.jint> is0,
  ) {
    _onRequestPermissionsResult(
            reference.pointer,
            _id_onRequestPermissionsResult as jni.JMethodIDPtr,
            i,
            strings.reference.pointer,
            is0.reference.pointer)
        .check();
  }

  static final _id_shouldShowRequestPermissionRationale =
      _class.instanceMethodId(
    r"shouldShowRequestPermissionRationale",
    r"(Ljava/lang/String;)Z",
  );

  static final _shouldShowRequestPermissionRationale =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallBooleanMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public boolean shouldShowRequestPermissionRationale(java.lang.String string)
  bool shouldShowRequestPermissionRationale(
    jni.JString string,
  ) {
    return _shouldShowRequestPermissionRationale(
            reference.pointer,
            _id_shouldShowRequestPermissionRationale as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_startActivityForResult = _class.instanceMethodId(
    r"startActivityForResult",
    r"(Landroid/content/Intent;I)V",
  );

  static final _startActivityForResult = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityForResult(android.content.Intent intent, int i)
  void startActivityForResult(
    jni.JObject intent,
    int i,
  ) {
    _startActivityForResult(
            reference.pointer,
            _id_startActivityForResult as jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .check();
  }

  static final _id_startActivityForResult1 = _class.instanceMethodId(
    r"startActivityForResult",
    r"(Landroid/content/Intent;ILandroid/os/Bundle;)V",
  );

  static final _startActivityForResult1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityForResult1(
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    _startActivityForResult1(
            reference.pointer,
            _id_startActivityForResult1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            bundle.reference.pointer)
        .check();
  }

  static final _id_isActivityTransitionRunning = _class.instanceMethodId(
    r"isActivityTransitionRunning",
    r"()Z",
  );

  static final _isActivityTransitionRunning = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isActivityTransitionRunning()
  bool isActivityTransitionRunning() {
    return _isActivityTransitionRunning(reference.pointer,
            _id_isActivityTransitionRunning as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_startIntentSenderForResult = _class.instanceMethodId(
    r"startIntentSenderForResult",
    r"(Landroid/content/IntentSender;ILandroid/content/Intent;III)V",
  );

  static final _startIntentSenderForResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderForResult(
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
  ) {
    _startIntentSenderForResult(
            reference.pointer,
            _id_startIntentSenderForResult as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3)
        .check();
  }

  static final _id_startIntentSenderForResult1 = _class.instanceMethodId(
    r"startIntentSenderForResult",
    r"(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V",
  );

  static final _startIntentSenderForResult1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderForResult1(
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
    jni.JObject bundle,
  ) {
    _startIntentSenderForResult1(
            reference.pointer,
            _id_startIntentSenderForResult1 as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r"startActivity",
    r"(Landroid/content/Intent;)V",
  );

  static final _startActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivity(android.content.Intent intent)
  void startActivity(
    jni.JObject intent,
  ) {
    _startActivity(reference.pointer, _id_startActivity as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_startActivity1 = _class.instanceMethodId(
    r"startActivity",
    r"(Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _startActivity1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    _startActivity1(reference.pointer, _id_startActivity1 as jni.JMethodIDPtr,
            intent.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r"startActivities",
    r"([Landroid/content/Intent;)V",
  );

  static final _startActivities = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<jni.JObject> intents,
  ) {
    _startActivities(reference.pointer, _id_startActivities as jni.JMethodIDPtr,
            intents.reference.pointer)
        .check();
  }

  static final _id_startActivities1 = _class.instanceMethodId(
    r"startActivities",
    r"([Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _startActivities1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<jni.JObject> intents,
    jni.JObject bundle,
  ) {
    _startActivities1(
            reference.pointer,
            _id_startActivities1 as jni.JMethodIDPtr,
            intents.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r"startIntentSender",
    r"(Landroid/content/IntentSender;Landroid/content/Intent;III)V",
  );

  static final _startIntentSender = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
  ) {
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender1 = _class.instanceMethodId(
    r"startIntentSender",
    r"(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V",
  );

  static final _startIntentSender1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    _startIntentSender1(
            reference.pointer,
            _id_startIntentSender1 as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startActivityIfNeeded = _class.instanceMethodId(
    r"startActivityIfNeeded",
    r"(Landroid/content/Intent;I)Z",
  );

  static final _startActivityIfNeeded = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i)
  bool startActivityIfNeeded(
    jni.JObject intent,
    int i,
  ) {
    return _startActivityIfNeeded(
            reference.pointer,
            _id_startActivityIfNeeded as jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .boolean;
  }

  static final _id_startActivityIfNeeded1 = _class.instanceMethodId(
    r"startActivityIfNeeded",
    r"(Landroid/content/Intent;ILandroid/os/Bundle;)Z",
  );

  static final _startActivityIfNeeded1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)
  bool startActivityIfNeeded1(
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    return _startActivityIfNeeded1(
            reference.pointer,
            _id_startActivityIfNeeded1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_startNextMatchingActivity = _class.instanceMethodId(
    r"startNextMatchingActivity",
    r"(Landroid/content/Intent;)Z",
  );

  static final _startNextMatchingActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent)
  bool startNextMatchingActivity(
    jni.JObject intent,
  ) {
    return _startNextMatchingActivity(
            reference.pointer,
            _id_startNextMatchingActivity as jni.JMethodIDPtr,
            intent.reference.pointer)
        .boolean;
  }

  static final _id_startNextMatchingActivity1 = _class.instanceMethodId(
    r"startNextMatchingActivity",
    r"(Landroid/content/Intent;Landroid/os/Bundle;)Z",
  );

  static final _startNextMatchingActivity1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)
  bool startNextMatchingActivity1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    return _startNextMatchingActivity1(
            reference.pointer,
            _id_startNextMatchingActivity1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_startActivityFromChild = _class.instanceMethodId(
    r"startActivityFromChild",
    r"(Landroid/app/Activity;Landroid/content/Intent;I)V",
  );

  static final _startActivityFromChild = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)
  void startActivityFromChild(
    Activity activity,
    jni.JObject intent,
    int i,
  ) {
    _startActivityFromChild(
            reference.pointer,
            _id_startActivityFromChild as jni.JMethodIDPtr,
            activity.reference.pointer,
            intent.reference.pointer,
            i)
        .check();
  }

  static final _id_startActivityFromChild1 = _class.instanceMethodId(
    r"startActivityFromChild",
    r"(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V",
  );

  static final _startActivityFromChild1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromChild1(
    Activity activity,
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    _startActivityFromChild1(
            reference.pointer,
            _id_startActivityFromChild1 as jni.JMethodIDPtr,
            activity.reference.pointer,
            intent.reference.pointer,
            i,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startActivityFromFragment = _class.instanceMethodId(
    r"startActivityFromFragment",
    r"(Landroid/app/Fragment;Landroid/content/Intent;I)V",
  );

  static final _startActivityFromFragment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)
  void startActivityFromFragment(
    jni.JObject fragment,
    jni.JObject intent,
    int i,
  ) {
    _startActivityFromFragment(
            reference.pointer,
            _id_startActivityFromFragment as jni.JMethodIDPtr,
            fragment.reference.pointer,
            intent.reference.pointer,
            i)
        .check();
  }

  static final _id_startActivityFromFragment1 = _class.instanceMethodId(
    r"startActivityFromFragment",
    r"(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V",
  );

  static final _startActivityFromFragment1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromFragment1(
    jni.JObject fragment,
    jni.JObject intent,
    int i,
    jni.JObject bundle,
  ) {
    _startActivityFromFragment1(
            reference.pointer,
            _id_startActivityFromFragment1 as jni.JMethodIDPtr,
            fragment.reference.pointer,
            intent.reference.pointer,
            i,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startIntentSenderFromChild = _class.instanceMethodId(
    r"startIntentSenderFromChild",
    r"(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V",
  );

  static final _startIntentSenderFromChild = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderFromChild(
    Activity activity,
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
  ) {
    _startIntentSenderFromChild(
            reference.pointer,
            _id_startIntentSenderFromChild as jni.JMethodIDPtr,
            activity.reference.pointer,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3)
        .check();
  }

  static final _id_startIntentSenderFromChild1 = _class.instanceMethodId(
    r"startIntentSenderFromChild",
    r"(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V",
  );

  static final _startIntentSenderFromChild1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderFromChild1(
    Activity activity,
    jni.JObject intentSender,
    int i,
    jni.JObject intent,
    int i1,
    int i2,
    int i3,
    jni.JObject bundle,
  ) {
    _startIntentSenderFromChild1(
            reference.pointer,
            _id_startIntentSenderFromChild1 as jni.JMethodIDPtr,
            activity.reference.pointer,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3,
            bundle.reference.pointer)
        .check();
  }

  static final _id_overrideActivityTransition = _class.instanceMethodId(
    r"overrideActivityTransition",
    r"(III)V",
  );

  static final _overrideActivityTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: public void overrideActivityTransition(int i, int i1, int i2)
  void overrideActivityTransition(
    int i,
    int i1,
    int i2,
  ) {
    _overrideActivityTransition(reference.pointer,
            _id_overrideActivityTransition as jni.JMethodIDPtr, i, i1, i2)
        .check();
  }

  static final _id_overrideActivityTransition1 = _class.instanceMethodId(
    r"overrideActivityTransition",
    r"(IIII)V",
  );

  static final _overrideActivityTransition1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: public void overrideActivityTransition(int i, int i1, int i2, int i3)
  void overrideActivityTransition1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _overrideActivityTransition1(reference.pointer,
            _id_overrideActivityTransition1 as jni.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_clearOverrideActivityTransition = _class.instanceMethodId(
    r"clearOverrideActivityTransition",
    r"(I)V",
  );

  static final _clearOverrideActivityTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void clearOverrideActivityTransition(int i)
  void clearOverrideActivityTransition(
    int i,
  ) {
    _clearOverrideActivityTransition(reference.pointer,
            _id_clearOverrideActivityTransition as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_overridePendingTransition = _class.instanceMethodId(
    r"overridePendingTransition",
    r"(II)V",
  );

  static final _overridePendingTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public void overridePendingTransition(int i, int i1)
  void overridePendingTransition(
    int i,
    int i1,
  ) {
    _overridePendingTransition(reference.pointer,
            _id_overridePendingTransition as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_overridePendingTransition1 = _class.instanceMethodId(
    r"overridePendingTransition",
    r"(III)V",
  );

  static final _overridePendingTransition1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: public void overridePendingTransition(int i, int i1, int i2)
  void overridePendingTransition1(
    int i,
    int i1,
    int i2,
  ) {
    _overridePendingTransition1(reference.pointer,
            _id_overridePendingTransition1 as jni.JMethodIDPtr, i, i1, i2)
        .check();
  }

  static final _id_setResult = _class.instanceMethodId(
    r"setResult",
    r"(I)V",
  );

  static final _setResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setResult(int i)
  void setResult(
    int i,
  ) {
    _setResult(reference.pointer, _id_setResult as jni.JMethodIDPtr, i).check();
  }

  static final _id_setResult1 = _class.instanceMethodId(
    r"setResult",
    r"(ILandroid/content/Intent;)V",
  );

  static final _setResult1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setResult(int i, android.content.Intent intent)
  void setResult1(
    int i,
    jni.JObject intent,
  ) {
    _setResult1(reference.pointer, _id_setResult1 as jni.JMethodIDPtr, i,
            intent.reference.pointer)
        .check();
  }

  static final _id_getReferrer = _class.instanceMethodId(
    r"getReferrer",
    r"()Landroid/net/Uri;",
  );

  static final _getReferrer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri getReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  Uri getReferrer() {
    return _getReferrer(reference.pointer, _id_getReferrer as jni.JMethodIDPtr)
        .object(const $UriType());
  }

  static final _id_onProvideReferrer = _class.instanceMethodId(
    r"onProvideReferrer",
    r"()Landroid/net/Uri;",
  );

  static final _onProvideReferrer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri onProvideReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  Uri onProvideReferrer() {
    return _onProvideReferrer(
            reference.pointer, _id_onProvideReferrer as jni.JMethodIDPtr)
        .object(const $UriType());
  }

  static final _id_getCallingPackage = _class.instanceMethodId(
    r"getCallingPackage",
    r"()Ljava/lang/String;",
  );

  static final _getCallingPackage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getCallingPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCallingPackage() {
    return _getCallingPackage(
            reference.pointer, _id_getCallingPackage as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getCallingActivity = _class.instanceMethodId(
    r"getCallingActivity",
    r"()Landroid/content/ComponentName;",
  );

  static final _getCallingActivity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ComponentName getCallingActivity()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCallingActivity() {
    return _getCallingActivity(
            reference.pointer, _id_getCallingActivity as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getLaunchedFromUid = _class.instanceMethodId(
    r"getLaunchedFromUid",
    r"()I",
  );

  static final _getLaunchedFromUid = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getLaunchedFromUid()
  int getLaunchedFromUid() {
    return _getLaunchedFromUid(
            reference.pointer, _id_getLaunchedFromUid as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getLaunchedFromPackage = _class.instanceMethodId(
    r"getLaunchedFromPackage",
    r"()Ljava/lang/String;",
  );

  static final _getLaunchedFromPackage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getLaunchedFromPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLaunchedFromPackage() {
    return _getLaunchedFromPackage(
            reference.pointer, _id_getLaunchedFromPackage as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setVisible = _class.instanceMethodId(
    r"setVisible",
    r"(Z)V",
  );

  static final _setVisible = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setVisible(boolean z)
  void setVisible(
    bool z,
  ) {
    _setVisible(
            reference.pointer, _id_setVisible as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isFinishing = _class.instanceMethodId(
    r"isFinishing",
    r"()Z",
  );

  static final _isFinishing = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isFinishing()
  bool isFinishing() {
    return _isFinishing(reference.pointer, _id_isFinishing as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDestroyed = _class.instanceMethodId(
    r"isDestroyed",
    r"()Z",
  );

  static final _isDestroyed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isDestroyed()
  bool isDestroyed() {
    return _isDestroyed(reference.pointer, _id_isDestroyed as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isChangingConfigurations = _class.instanceMethodId(
    r"isChangingConfigurations",
    r"()Z",
  );

  static final _isChangingConfigurations = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isChangingConfigurations()
  bool isChangingConfigurations() {
    return _isChangingConfigurations(
            reference.pointer, _id_isChangingConfigurations as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_recreate = _class.instanceMethodId(
    r"recreate",
    r"()V",
  );

  static final _recreate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void recreate()
  void recreate() {
    _recreate(reference.pointer, _id_recreate as jni.JMethodIDPtr).check();
  }

  static final _id_finish = _class.instanceMethodId(
    r"finish",
    r"()V",
  );

  static final _finish = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void finish()
  void finish() {
    _finish(reference.pointer, _id_finish as jni.JMethodIDPtr).check();
  }

  static final _id_finishAffinity = _class.instanceMethodId(
    r"finishAffinity",
    r"()V",
  );

  static final _finishAffinity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void finishAffinity()
  void finishAffinity() {
    _finishAffinity(reference.pointer, _id_finishAffinity as jni.JMethodIDPtr)
        .check();
  }

  static final _id_finishFromChild = _class.instanceMethodId(
    r"finishFromChild",
    r"(Landroid/app/Activity;)V",
  );

  static final _finishFromChild = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void finishFromChild(android.app.Activity activity)
  void finishFromChild(
    Activity activity,
  ) {
    _finishFromChild(reference.pointer, _id_finishFromChild as jni.JMethodIDPtr,
            activity.reference.pointer)
        .check();
  }

  static final _id_finishAfterTransition = _class.instanceMethodId(
    r"finishAfterTransition",
    r"()V",
  );

  static final _finishAfterTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void finishAfterTransition()
  void finishAfterTransition() {
    _finishAfterTransition(
            reference.pointer, _id_finishAfterTransition as jni.JMethodIDPtr)
        .check();
  }

  static final _id_finishActivity = _class.instanceMethodId(
    r"finishActivity",
    r"(I)V",
  );

  static final _finishActivity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void finishActivity(int i)
  void finishActivity(
    int i,
  ) {
    _finishActivity(
            reference.pointer, _id_finishActivity as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_finishActivityFromChild = _class.instanceMethodId(
    r"finishActivityFromChild",
    r"(Landroid/app/Activity;I)V",
  );

  static final _finishActivityFromChild = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void finishActivityFromChild(android.app.Activity activity, int i)
  void finishActivityFromChild(
    Activity activity,
    int i,
  ) {
    _finishActivityFromChild(
            reference.pointer,
            _id_finishActivityFromChild as jni.JMethodIDPtr,
            activity.reference.pointer,
            i)
        .check();
  }

  static final _id_finishAndRemoveTask = _class.instanceMethodId(
    r"finishAndRemoveTask",
    r"()V",
  );

  static final _finishAndRemoveTask = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void finishAndRemoveTask()
  void finishAndRemoveTask() {
    _finishAndRemoveTask(
            reference.pointer, _id_finishAndRemoveTask as jni.JMethodIDPtr)
        .check();
  }

  static final _id_releaseInstance = _class.instanceMethodId(
    r"releaseInstance",
    r"()Z",
  );

  static final _releaseInstance = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean releaseInstance()
  bool releaseInstance() {
    return _releaseInstance(
            reference.pointer, _id_releaseInstance as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onActivityResult = _class.instanceMethodId(
    r"onActivityResult",
    r"(IILandroid/content/Intent;)V",
  );

  static final _onActivityResult = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, int, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onActivityResult(int i, int i1, android.content.Intent intent)
  void onActivityResult(
    int i,
    int i1,
    jni.JObject intent,
  ) {
    _onActivityResult(
            reference.pointer,
            _id_onActivityResult as jni.JMethodIDPtr,
            i,
            i1,
            intent.reference.pointer)
        .check();
  }

  static final _id_onActivityReenter = _class.instanceMethodId(
    r"onActivityReenter",
    r"(ILandroid/content/Intent;)V",
  );

  static final _onActivityReenter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onActivityReenter(int i, android.content.Intent intent)
  void onActivityReenter(
    int i,
    jni.JObject intent,
  ) {
    _onActivityReenter(
            reference.pointer,
            _id_onActivityReenter as jni.JMethodIDPtr,
            i,
            intent.reference.pointer)
        .check();
  }

  static final _id_createPendingResult = _class.instanceMethodId(
    r"createPendingResult",
    r"(ILandroid/content/Intent;I)Landroid/app/PendingIntent;",
  );

  static final _createPendingResult = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createPendingResult(
    int i,
    jni.JObject intent,
    int i1,
  ) {
    return _createPendingResult(
            reference.pointer,
            _id_createPendingResult as jni.JMethodIDPtr,
            i,
            intent.reference.pointer,
            i1)
        .object(const jni.JObjectType());
  }

  static final _id_setRequestedOrientation = _class.instanceMethodId(
    r"setRequestedOrientation",
    r"(I)V",
  );

  static final _setRequestedOrientation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setRequestedOrientation(int i)
  void setRequestedOrientation(
    int i,
  ) {
    _setRequestedOrientation(reference.pointer,
            _id_setRequestedOrientation as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getRequestedOrientation = _class.instanceMethodId(
    r"getRequestedOrientation",
    r"()I",
  );

  static final _getRequestedOrientation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getRequestedOrientation()
  int getRequestedOrientation() {
    return _getRequestedOrientation(
            reference.pointer, _id_getRequestedOrientation as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getTaskId = _class.instanceMethodId(
    r"getTaskId",
    r"()I",
  );

  static final _getTaskId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getTaskId()
  int getTaskId() {
    return _getTaskId(reference.pointer, _id_getTaskId as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isTaskRoot = _class.instanceMethodId(
    r"isTaskRoot",
    r"()Z",
  );

  static final _isTaskRoot = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isTaskRoot()
  bool isTaskRoot() {
    return _isTaskRoot(reference.pointer, _id_isTaskRoot as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveTaskToBack = _class.instanceMethodId(
    r"moveTaskToBack",
    r"(Z)Z",
  );

  static final _moveTaskToBack = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public boolean moveTaskToBack(boolean z)
  bool moveTaskToBack(
    bool z,
  ) {
    return _moveTaskToBack(reference.pointer,
            _id_moveTaskToBack as jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_getLocalClassName = _class.instanceMethodId(
    r"getLocalClassName",
    r"()Ljava/lang/String;",
  );

  static final _getLocalClassName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getLocalClassName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLocalClassName() {
    return _getLocalClassName(
            reference.pointer, _id_getLocalClassName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getComponentName = _class.instanceMethodId(
    r"getComponentName",
    r"()Landroid/content/ComponentName;",
  );

  static final _getComponentName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ComponentName getComponentName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponentName() {
    return _getComponentName(
            reference.pointer, _id_getComponentName as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPreferences = _class.instanceMethodId(
    r"getPreferences",
    r"(I)Landroid/content/SharedPreferences;",
  );

  static final _getPreferences = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.content.SharedPreferences getPreferences(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPreferences(
    int i,
  ) {
    return _getPreferences(
            reference.pointer, _id_getPreferences as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_isLaunchedFromBubble = _class.instanceMethodId(
    r"isLaunchedFromBubble",
    r"()Z",
  );

  static final _isLaunchedFromBubble = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isLaunchedFromBubble()
  bool isLaunchedFromBubble() {
    return _isLaunchedFromBubble(
            reference.pointer, _id_isLaunchedFromBubble as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r"getSystemService",
    r"(Ljava/lang/String;)Ljava/lang/Object;",
  );

  static final _getSystemService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setTitle = _class.instanceMethodId(
    r"setTitle",
    r"(Ljava/lang/CharSequence;)V",
  );

  static final _setTitle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setTitle(java.lang.CharSequence charSequence)
  void setTitle(
    jni.JObject charSequence,
  ) {
    _setTitle(reference.pointer, _id_setTitle as jni.JMethodIDPtr,
            charSequence.reference.pointer)
        .check();
  }

  static final _id_setTitle1 = _class.instanceMethodId(
    r"setTitle",
    r"(I)V",
  );

  static final _setTitle1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTitle(int i)
  void setTitle1(
    int i,
  ) {
    _setTitle1(reference.pointer, _id_setTitle1 as jni.JMethodIDPtr, i).check();
  }

  static final _id_setTitleColor = _class.instanceMethodId(
    r"setTitleColor",
    r"(I)V",
  );

  static final _setTitleColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTitleColor(int i)
  void setTitleColor(
    int i,
  ) {
    _setTitleColor(reference.pointer, _id_setTitleColor as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getTitle = _class.instanceMethodId(
    r"getTitle",
    r"()Ljava/lang/CharSequence;",
  );

  static final _getTitle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.CharSequence getTitle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTitle() {
    return _getTitle(reference.pointer, _id_getTitle as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getTitleColor = _class.instanceMethodId(
    r"getTitleColor",
    r"()I",
  );

  static final _getTitleColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int getTitleColor()
  int getTitleColor() {
    return _getTitleColor(
            reference.pointer, _id_getTitleColor as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_onTitleChanged = _class.instanceMethodId(
    r"onTitleChanged",
    r"(Ljava/lang/CharSequence;I)V",
  );

  static final _onTitleChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: protected void onTitleChanged(java.lang.CharSequence charSequence, int i)
  void onTitleChanged(
    jni.JObject charSequence,
    int i,
  ) {
    _onTitleChanged(reference.pointer, _id_onTitleChanged as jni.JMethodIDPtr,
            charSequence.reference.pointer, i)
        .check();
  }

  static final _id_onChildTitleChanged = _class.instanceMethodId(
    r"onChildTitleChanged",
    r"(Landroid/app/Activity;Ljava/lang/CharSequence;)V",
  );

  static final _onChildTitleChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onChildTitleChanged(android.app.Activity activity, java.lang.CharSequence charSequence)
  void onChildTitleChanged(
    Activity activity,
    jni.JObject charSequence,
  ) {
    _onChildTitleChanged(
            reference.pointer,
            _id_onChildTitleChanged as jni.JMethodIDPtr,
            activity.reference.pointer,
            charSequence.reference.pointer)
        .check();
  }

  static final _id_setTaskDescription = _class.instanceMethodId(
    r"setTaskDescription",
    r"(Landroid/app/ActivityManager$TaskDescription;)V",
  );

  static final _setTaskDescription = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)
  void setTaskDescription(
    jni.JObject taskDescription,
  ) {
    _setTaskDescription(
            reference.pointer,
            _id_setTaskDescription as jni.JMethodIDPtr,
            taskDescription.reference.pointer)
        .check();
  }

  static final _id_setProgressBarVisibility = _class.instanceMethodId(
    r"setProgressBarVisibility",
    r"(Z)V",
  );

  static final _setProgressBarVisibility = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setProgressBarVisibility(boolean z)
  void setProgressBarVisibility(
    bool z,
  ) {
    _setProgressBarVisibility(reference.pointer,
            _id_setProgressBarVisibility as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setProgressBarIndeterminateVisibility =
      _class.instanceMethodId(
    r"setProgressBarIndeterminateVisibility",
    r"(Z)V",
  );

  static final _setProgressBarIndeterminateVisibility =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setProgressBarIndeterminateVisibility(boolean z)
  void setProgressBarIndeterminateVisibility(
    bool z,
  ) {
    _setProgressBarIndeterminateVisibility(
            reference.pointer,
            _id_setProgressBarIndeterminateVisibility as jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setProgressBarIndeterminate = _class.instanceMethodId(
    r"setProgressBarIndeterminate",
    r"(Z)V",
  );

  static final _setProgressBarIndeterminate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setProgressBarIndeterminate(boolean z)
  void setProgressBarIndeterminate(
    bool z,
  ) {
    _setProgressBarIndeterminate(reference.pointer,
            _id_setProgressBarIndeterminate as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setProgress = _class.instanceMethodId(
    r"setProgress",
    r"(I)V",
  );

  static final _setProgress = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setProgress(int i)
  void setProgress(
    int i,
  ) {
    _setProgress(reference.pointer, _id_setProgress as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setSecondaryProgress = _class.instanceMethodId(
    r"setSecondaryProgress",
    r"(I)V",
  );

  static final _setSecondaryProgress = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setSecondaryProgress(int i)
  void setSecondaryProgress(
    int i,
  ) {
    _setSecondaryProgress(
            reference.pointer, _id_setSecondaryProgress as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setVolumeControlStream = _class.instanceMethodId(
    r"setVolumeControlStream",
    r"(I)V",
  );

  static final _setVolumeControlStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setVolumeControlStream(int i)
  void setVolumeControlStream(
    int i,
  ) {
    _setVolumeControlStream(reference.pointer,
            _id_setVolumeControlStream as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getVolumeControlStream = _class.instanceMethodId(
    r"getVolumeControlStream",
    r"()I",
  );

  static final _getVolumeControlStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int getVolumeControlStream()
  int getVolumeControlStream() {
    return _getVolumeControlStream(
            reference.pointer, _id_getVolumeControlStream as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setMediaController = _class.instanceMethodId(
    r"setMediaController",
    r"(Landroid/media/session/MediaController;)V",
  );

  static final _setMediaController = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setMediaController(android.media.session.MediaController mediaController)
  void setMediaController(
    jni.JObject mediaController,
  ) {
    _setMediaController(
            reference.pointer,
            _id_setMediaController as jni.JMethodIDPtr,
            mediaController.reference.pointer)
        .check();
  }

  static final _id_getMediaController = _class.instanceMethodId(
    r"getMediaController",
    r"()Landroid/media/session/MediaController;",
  );

  static final _getMediaController = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.media.session.MediaController getMediaController()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMediaController() {
    return _getMediaController(
            reference.pointer, _id_getMediaController as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_runOnUiThread = _class.instanceMethodId(
    r"runOnUiThread",
    r"(Ljava/lang/Runnable;)V",
  );

  static final _runOnUiThread = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void runOnUiThread(java.lang.Runnable runnable)
  void runOnUiThread(
    Runnable runnable,
  ) {
    _runOnUiThread(reference.pointer, _id_runOnUiThread as jni.JMethodIDPtr,
            runnable.reference.pointer)
        .check();
  }

  static final _id_onCreateView = _class.instanceMethodId(
    r"onCreateView",
    r"(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;",
  );

  static final _onCreateView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView(
    jni.JString string,
    Context context,
    jni.JObject attributeSet,
  ) {
    return _onCreateView(
            reference.pointer,
            _id_onCreateView as jni.JMethodIDPtr,
            string.reference.pointer,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onCreateView1 = _class.instanceMethodId(
    r"onCreateView",
    r"(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;",
  );

  static final _onCreateView1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView1(
    jni.JObject view,
    jni.JString string,
    Context context,
    jni.JObject attributeSet,
  ) {
    return _onCreateView1(
            reference.pointer,
            _id_onCreateView1 as jni.JMethodIDPtr,
            view.reference.pointer,
            string.reference.pointer,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_dump = _class.instanceMethodId(
    r"dump",
    r"(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V",
  );

  static final _dump = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)
  void dump(
    jni.JString string,
    jni.JObject fileDescriptor,
    jni.JObject printWriter,
    jni.JArray<jni.JString> strings,
  ) {
    _dump(
            reference.pointer,
            _id_dump as jni.JMethodIDPtr,
            string.reference.pointer,
            fileDescriptor.reference.pointer,
            printWriter.reference.pointer,
            strings.reference.pointer)
        .check();
  }

  static final _id_isImmersive = _class.instanceMethodId(
    r"isImmersive",
    r"()Z",
  );

  static final _isImmersive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isImmersive()
  bool isImmersive() {
    return _isImmersive(reference.pointer, _id_isImmersive as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setTranslucent = _class.instanceMethodId(
    r"setTranslucent",
    r"(Z)Z",
  );

  static final _setTranslucent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public boolean setTranslucent(boolean z)
  bool setTranslucent(
    bool z,
  ) {
    return _setTranslucent(reference.pointer,
            _id_setTranslucent as jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_requestVisibleBehind = _class.instanceMethodId(
    r"requestVisibleBehind",
    r"(Z)Z",
  );

  static final _requestVisibleBehind = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public boolean requestVisibleBehind(boolean z)
  bool requestVisibleBehind(
    bool z,
  ) {
    return _requestVisibleBehind(reference.pointer,
            _id_requestVisibleBehind as jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_onVisibleBehindCanceled = _class.instanceMethodId(
    r"onVisibleBehindCanceled",
    r"()V",
  );

  static final _onVisibleBehindCanceled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onVisibleBehindCanceled()
  void onVisibleBehindCanceled() {
    _onVisibleBehindCanceled(
            reference.pointer, _id_onVisibleBehindCanceled as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onEnterAnimationComplete = _class.instanceMethodId(
    r"onEnterAnimationComplete",
    r"()V",
  );

  static final _onEnterAnimationComplete = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onEnterAnimationComplete()
  void onEnterAnimationComplete() {
    _onEnterAnimationComplete(
            reference.pointer, _id_onEnterAnimationComplete as jni.JMethodIDPtr)
        .check();
  }

  static final _id_setImmersive = _class.instanceMethodId(
    r"setImmersive",
    r"(Z)V",
  );

  static final _setImmersive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setImmersive(boolean z)
  void setImmersive(
    bool z,
  ) {
    _setImmersive(
            reference.pointer, _id_setImmersive as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setVrModeEnabled = _class.instanceMethodId(
    r"setVrModeEnabled",
    r"(ZLandroid/content/ComponentName;)V",
  );

  static final _setVrModeEnabled = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)
  void setVrModeEnabled(
    bool z,
    jni.JObject componentName,
  ) {
    _setVrModeEnabled(
            reference.pointer,
            _id_setVrModeEnabled as jni.JMethodIDPtr,
            z ? 1 : 0,
            componentName.reference.pointer)
        .check();
  }

  static final _id_startActionMode = _class.instanceMethodId(
    r"startActionMode",
    r"(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;",
  );

  static final _startActionMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode(
    jni.JObject callback,
  ) {
    return _startActionMode(reference.pointer,
            _id_startActionMode as jni.JMethodIDPtr, callback.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startActionMode1 = _class.instanceMethodId(
    r"startActionMode",
    r"(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;",
  );

  static final _startActionMode1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return _startActionMode1(
            reference.pointer,
            _id_startActionMode1 as jni.JMethodIDPtr,
            callback.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_onWindowStartingActionMode = _class.instanceMethodId(
    r"onWindowStartingActionMode",
    r"(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;",
  );

  static final _onWindowStartingActionMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode(
    jni.JObject callback,
  ) {
    return _onWindowStartingActionMode(
            reference.pointer,
            _id_onWindowStartingActionMode as jni.JMethodIDPtr,
            callback.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onWindowStartingActionMode1 = _class.instanceMethodId(
    r"onWindowStartingActionMode",
    r"(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;",
  );

  static final _onWindowStartingActionMode1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return _onWindowStartingActionMode1(
            reference.pointer,
            _id_onWindowStartingActionMode1 as jni.JMethodIDPtr,
            callback.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_onActionModeStarted = _class.instanceMethodId(
    r"onActionModeStarted",
    r"(Landroid/view/ActionMode;)V",
  );

  static final _onActionModeStarted = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onActionModeStarted(android.view.ActionMode actionMode)
  void onActionModeStarted(
    jni.JObject actionMode,
  ) {
    _onActionModeStarted(
            reference.pointer,
            _id_onActionModeStarted as jni.JMethodIDPtr,
            actionMode.reference.pointer)
        .check();
  }

  static final _id_onActionModeFinished = _class.instanceMethodId(
    r"onActionModeFinished",
    r"(Landroid/view/ActionMode;)V",
  );

  static final _onActionModeFinished = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onActionModeFinished(android.view.ActionMode actionMode)
  void onActionModeFinished(
    jni.JObject actionMode,
  ) {
    _onActionModeFinished(
            reference.pointer,
            _id_onActionModeFinished as jni.JMethodIDPtr,
            actionMode.reference.pointer)
        .check();
  }

  static final _id_shouldUpRecreateTask = _class.instanceMethodId(
    r"shouldUpRecreateTask",
    r"(Landroid/content/Intent;)Z",
  );

  static final _shouldUpRecreateTask = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean shouldUpRecreateTask(android.content.Intent intent)
  bool shouldUpRecreateTask(
    jni.JObject intent,
  ) {
    return _shouldUpRecreateTask(
            reference.pointer,
            _id_shouldUpRecreateTask as jni.JMethodIDPtr,
            intent.reference.pointer)
        .boolean;
  }

  static final _id_navigateUpTo = _class.instanceMethodId(
    r"navigateUpTo",
    r"(Landroid/content/Intent;)Z",
  );

  static final _navigateUpTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean navigateUpTo(android.content.Intent intent)
  bool navigateUpTo(
    jni.JObject intent,
  ) {
    return _navigateUpTo(reference.pointer,
            _id_navigateUpTo as jni.JMethodIDPtr, intent.reference.pointer)
        .boolean;
  }

  static final _id_navigateUpToFromChild = _class.instanceMethodId(
    r"navigateUpToFromChild",
    r"(Landroid/app/Activity;Landroid/content/Intent;)Z",
  );

  static final _navigateUpToFromChild = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)
  bool navigateUpToFromChild(
    Activity activity,
    jni.JObject intent,
  ) {
    return _navigateUpToFromChild(
            reference.pointer,
            _id_navigateUpToFromChild as jni.JMethodIDPtr,
            activity.reference.pointer,
            intent.reference.pointer)
        .boolean;
  }

  static final _id_getParentActivityIntent = _class.instanceMethodId(
    r"getParentActivityIntent",
    r"()Landroid/content/Intent;",
  );

  static final _getParentActivityIntent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.Intent getParentActivityIntent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParentActivityIntent() {
    return _getParentActivityIntent(
            reference.pointer, _id_getParentActivityIntent as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setEnterSharedElementCallback = _class.instanceMethodId(
    r"setEnterSharedElementCallback",
    r"(Landroid/app/SharedElementCallback;)V",
  );

  static final _setEnterSharedElementCallback = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setEnterSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    _setEnterSharedElementCallback(
            reference.pointer,
            _id_setEnterSharedElementCallback as jni.JMethodIDPtr,
            sharedElementCallback.reference.pointer)
        .check();
  }

  static final _id_setExitSharedElementCallback = _class.instanceMethodId(
    r"setExitSharedElementCallback",
    r"(Landroid/app/SharedElementCallback;)V",
  );

  static final _setExitSharedElementCallback = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setExitSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    _setExitSharedElementCallback(
            reference.pointer,
            _id_setExitSharedElementCallback as jni.JMethodIDPtr,
            sharedElementCallback.reference.pointer)
        .check();
  }

  static final _id_postponeEnterTransition = _class.instanceMethodId(
    r"postponeEnterTransition",
    r"()V",
  );

  static final _postponeEnterTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void postponeEnterTransition()
  void postponeEnterTransition() {
    _postponeEnterTransition(
            reference.pointer, _id_postponeEnterTransition as jni.JMethodIDPtr)
        .check();
  }

  static final _id_startPostponedEnterTransition = _class.instanceMethodId(
    r"startPostponedEnterTransition",
    r"()V",
  );

  static final _startPostponedEnterTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void startPostponedEnterTransition()
  void startPostponedEnterTransition() {
    _startPostponedEnterTransition(reference.pointer,
            _id_startPostponedEnterTransition as jni.JMethodIDPtr)
        .check();
  }

  static final _id_requestDragAndDropPermissions = _class.instanceMethodId(
    r"requestDragAndDropPermissions",
    r"(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;",
  );

  static final _requestDragAndDropPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject requestDragAndDropPermissions(
    jni.JObject dragEvent,
  ) {
    return _requestDragAndDropPermissions(
            reference.pointer,
            _id_requestDragAndDropPermissions as jni.JMethodIDPtr,
            dragEvent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startLockTask = _class.instanceMethodId(
    r"startLockTask",
    r"()V",
  );

  static final _startLockTask = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void startLockTask()
  void startLockTask() {
    _startLockTask(reference.pointer, _id_startLockTask as jni.JMethodIDPtr)
        .check();
  }

  static final _id_stopLockTask = _class.instanceMethodId(
    r"stopLockTask",
    r"()V",
  );

  static final _stopLockTask = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void stopLockTask()
  void stopLockTask() {
    _stopLockTask(reference.pointer, _id_stopLockTask as jni.JMethodIDPtr)
        .check();
  }

  static final _id_showLockTaskEscapeMessage = _class.instanceMethodId(
    r"showLockTaskEscapeMessage",
    r"()V",
  );

  static final _showLockTaskEscapeMessage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void showLockTaskEscapeMessage()
  void showLockTaskEscapeMessage() {
    _showLockTaskEscapeMessage(reference.pointer,
            _id_showLockTaskEscapeMessage as jni.JMethodIDPtr)
        .check();
  }

  static final _id_setRecentsScreenshotEnabled = _class.instanceMethodId(
    r"setRecentsScreenshotEnabled",
    r"(Z)V",
  );

  static final _setRecentsScreenshotEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setRecentsScreenshotEnabled(boolean z)
  void setRecentsScreenshotEnabled(
    bool z,
  ) {
    _setRecentsScreenshotEnabled(reference.pointer,
            _id_setRecentsScreenshotEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setShowWhenLocked = _class.instanceMethodId(
    r"setShowWhenLocked",
    r"(Z)V",
  );

  static final _setShowWhenLocked = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setShowWhenLocked(boolean z)
  void setShowWhenLocked(
    bool z,
  ) {
    _setShowWhenLocked(reference.pointer,
            _id_setShowWhenLocked as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setInheritShowWhenLocked = _class.instanceMethodId(
    r"setInheritShowWhenLocked",
    r"(Z)V",
  );

  static final _setInheritShowWhenLocked = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setInheritShowWhenLocked(boolean z)
  void setInheritShowWhenLocked(
    bool z,
  ) {
    _setInheritShowWhenLocked(reference.pointer,
            _id_setInheritShowWhenLocked as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setTurnScreenOn = _class.instanceMethodId(
    r"setTurnScreenOn",
    r"(Z)V",
  );

  static final _setTurnScreenOn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTurnScreenOn(boolean z)
  void setTurnScreenOn(
    bool z,
  ) {
    _setTurnScreenOn(reference.pointer, _id_setTurnScreenOn as jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_getOnBackInvokedDispatcher = _class.instanceMethodId(
    r"getOnBackInvokedDispatcher",
    r"()Landroid/window/OnBackInvokedDispatcher;",
  );

  static final _getOnBackInvokedDispatcher = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getOnBackInvokedDispatcher() {
    return _getOnBackInvokedDispatcher(reference.pointer,
            _id_getOnBackInvokedDispatcher as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_registerScreenCaptureCallback = _class.instanceMethodId(
    r"registerScreenCaptureCallback",
    r"(Ljava/util/concurrent/Executor;Landroid/app/Activity$ScreenCaptureCallback;)V",
  );

  static final _registerScreenCaptureCallback = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerScreenCaptureCallback(java.util.concurrent.Executor executor, android.app.Activity$ScreenCaptureCallback screenCaptureCallback)
  void registerScreenCaptureCallback(
    Executor executor,
    Activity_ScreenCaptureCallback screenCaptureCallback,
  ) {
    _registerScreenCaptureCallback(
            reference.pointer,
            _id_registerScreenCaptureCallback as jni.JMethodIDPtr,
            executor.reference.pointer,
            screenCaptureCallback.reference.pointer)
        .check();
  }

  static final _id_unregisterScreenCaptureCallback = _class.instanceMethodId(
    r"unregisterScreenCaptureCallback",
    r"(Landroid/app/Activity$ScreenCaptureCallback;)V",
  );

  static final _unregisterScreenCaptureCallback = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterScreenCaptureCallback(android.app.Activity$ScreenCaptureCallback screenCaptureCallback)
  void unregisterScreenCaptureCallback(
    Activity_ScreenCaptureCallback screenCaptureCallback,
  ) {
    _unregisterScreenCaptureCallback(
            reference.pointer,
            _id_unregisterScreenCaptureCallback as jni.JMethodIDPtr,
            screenCaptureCallback.reference.pointer)
        .check();
  }
}

final class $ActivityType extends jni.JObjType<Activity> {
  const $ActivityType();

  @override
  String get signature => r"Landroid/app/Activity;";

  @override
  Activity fromReference(jni.JReference reference) =>
      Activity.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ActivityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityType) && other is $ActivityType;
  }
}

/// from: android.content.Context$BindServiceFlags
class Context_BindServiceFlags extends jni.JObject {
  @override
  late final jni.JObjType<Context_BindServiceFlags> $type = type;

  Context_BindServiceFlags.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/content/Context$BindServiceFlags");

  /// The type which includes information such as the signature of this class.
  static const type = $Context_BindServiceFlagsType();
  static final _id_of = _class.staticMethodId(
    r"of",
    r"(J)Landroid/content/Context$BindServiceFlags;",
  );

  static final _of = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.content.Context$BindServiceFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Context_BindServiceFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as jni.JMethodIDPtr, j)
        .object(const $Context_BindServiceFlagsType());
  }
}

final class $Context_BindServiceFlagsType
    extends jni.JObjType<Context_BindServiceFlags> {
  const $Context_BindServiceFlagsType();

  @override
  String get signature => r"Landroid/content/Context$BindServiceFlags;";

  @override
  Context_BindServiceFlags fromReference(jni.JReference reference) =>
      Context_BindServiceFlags.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Context_BindServiceFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context_BindServiceFlagsType) &&
        other is $Context_BindServiceFlagsType;
  }
}

/// from: android.content.Context
class Context extends jni.JObject {
  @override
  late final jni.JObjType<Context> $type = type;

  Context.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/content/Context");

  /// The type which includes information such as the signature of this class.
  static const type = $ContextType();
  static final _id_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r"ACCESSIBILITY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACCESSIBILITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACCESSIBILITY_SERVICE =>
      _id_ACCESSIBILITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_ACCOUNT_SERVICE = _class.staticFieldId(
    r"ACCOUNT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACCOUNT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACCOUNT_SERVICE =>
      _id_ACCOUNT_SERVICE.get(_class, const jni.JStringType());

  static final _id_ACTIVITY_SERVICE = _class.staticFieldId(
    r"ACTIVITY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTIVITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTIVITY_SERVICE =>
      _id_ACTIVITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_ALARM_SERVICE = _class.staticFieldId(
    r"ALARM_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ALARM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALARM_SERVICE =>
      _id_ALARM_SERVICE.get(_class, const jni.JStringType());

  static final _id_APPWIDGET_SERVICE = _class.staticFieldId(
    r"APPWIDGET_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String APPWIDGET_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APPWIDGET_SERVICE =>
      _id_APPWIDGET_SERVICE.get(_class, const jni.JStringType());

  static final _id_APP_OPS_SERVICE = _class.staticFieldId(
    r"APP_OPS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String APP_OPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APP_OPS_SERVICE =>
      _id_APP_OPS_SERVICE.get(_class, const jni.JStringType());

  static final _id_APP_SEARCH_SERVICE = _class.staticFieldId(
    r"APP_SEARCH_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String APP_SEARCH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APP_SEARCH_SERVICE =>
      _id_APP_SEARCH_SERVICE.get(_class, const jni.JStringType());

  static final _id_AUDIO_SERVICE = _class.staticFieldId(
    r"AUDIO_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String AUDIO_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUDIO_SERVICE =>
      _id_AUDIO_SERVICE.get(_class, const jni.JStringType());

  static final _id_BATTERY_SERVICE = _class.staticFieldId(
    r"BATTERY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BATTERY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BATTERY_SERVICE =>
      _id_BATTERY_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int BIND_ABOVE_CLIENT
  static const BIND_ABOVE_CLIENT = 8;

  /// from: static public final int BIND_ADJUST_WITH_ACTIVITY
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: static public final int BIND_ALLOW_ACTIVITY_STARTS
  static const BIND_ALLOW_ACTIVITY_STARTS = 512;

  /// from: static public final int BIND_ALLOW_OOM_MANAGEMENT
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: static public final int BIND_AUTO_CREATE
  static const BIND_AUTO_CREATE = 1;

  /// from: static public final int BIND_DEBUG_UNBIND
  static const BIND_DEBUG_UNBIND = 2;

  /// from: static public final int BIND_EXTERNAL_SERVICE
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: static public final long BIND_EXTERNAL_SERVICE_LONG
  static const BIND_EXTERNAL_SERVICE_LONG = 4611686018427387904;

  /// from: static public final int BIND_IMPORTANT
  static const BIND_IMPORTANT = 64;

  /// from: static public final int BIND_INCLUDE_CAPABILITIES
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: static public final int BIND_NOT_FOREGROUND
  static const BIND_NOT_FOREGROUND = 4;

  /// from: static public final int BIND_NOT_PERCEPTIBLE
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: static public final int BIND_SHARED_ISOLATED_PROCESS
  static const BIND_SHARED_ISOLATED_PROCESS = 8192;

  /// from: static public final int BIND_WAIVE_PRIORITY
  static const BIND_WAIVE_PRIORITY = 32;
  static final _id_BIOMETRIC_SERVICE = _class.staticFieldId(
    r"BIOMETRIC_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BIOMETRIC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BIOMETRIC_SERVICE =>
      _id_BIOMETRIC_SERVICE.get(_class, const jni.JStringType());

  static final _id_BLOB_STORE_SERVICE = _class.staticFieldId(
    r"BLOB_STORE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BLOB_STORE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BLOB_STORE_SERVICE =>
      _id_BLOB_STORE_SERVICE.get(_class, const jni.JStringType());

  static final _id_BLUETOOTH_SERVICE = _class.staticFieldId(
    r"BLUETOOTH_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BLUETOOTH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BLUETOOTH_SERVICE =>
      _id_BLUETOOTH_SERVICE.get(_class, const jni.JStringType());

  static final _id_BUGREPORT_SERVICE = _class.staticFieldId(
    r"BUGREPORT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BUGREPORT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BUGREPORT_SERVICE =>
      _id_BUGREPORT_SERVICE.get(_class, const jni.JStringType());

  static final _id_CAMERA_SERVICE = _class.staticFieldId(
    r"CAMERA_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CAMERA_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAMERA_SERVICE =>
      _id_CAMERA_SERVICE.get(_class, const jni.JStringType());

  static final _id_CAPTIONING_SERVICE = _class.staticFieldId(
    r"CAPTIONING_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CAPTIONING_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAPTIONING_SERVICE =>
      _id_CAPTIONING_SERVICE.get(_class, const jni.JStringType());

  static final _id_CARRIER_CONFIG_SERVICE = _class.staticFieldId(
    r"CARRIER_CONFIG_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CARRIER_CONFIG_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CARRIER_CONFIG_SERVICE =>
      _id_CARRIER_CONFIG_SERVICE.get(_class, const jni.JStringType());

  static final _id_CLIPBOARD_SERVICE = _class.staticFieldId(
    r"CLIPBOARD_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CLIPBOARD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CLIPBOARD_SERVICE =>
      _id_CLIPBOARD_SERVICE.get(_class, const jni.JStringType());

  static final _id_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r"COMPANION_DEVICE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String COMPANION_DEVICE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COMPANION_DEVICE_SERVICE =>
      _id_COMPANION_DEVICE_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONNECTIVITY_DIAGNOSTICS_SERVICE = _class.staticFieldId(
    r"CONNECTIVITY_DIAGNOSTICS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _id_CONNECTIVITY_DIAGNOSTICS_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONNECTIVITY_SERVICE = _class.staticFieldId(
    r"CONNECTIVITY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONNECTIVITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONNECTIVITY_SERVICE =>
      _id_CONNECTIVITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONSUMER_IR_SERVICE = _class.staticFieldId(
    r"CONSUMER_IR_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONSUMER_IR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONSUMER_IR_SERVICE =>
      _id_CONSUMER_IR_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int CONTEXT_IGNORE_SECURITY
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: static public final int CONTEXT_INCLUDE_CODE
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: static public final int CONTEXT_RESTRICTED
  static const CONTEXT_RESTRICTED = 4;
  static final _id_CREDENTIAL_SERVICE = _class.staticFieldId(
    r"CREDENTIAL_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CREDENTIAL_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CREDENTIAL_SERVICE =>
      _id_CREDENTIAL_SERVICE.get(_class, const jni.JStringType());

  static final _id_CROSS_PROFILE_APPS_SERVICE = _class.staticFieldId(
    r"CROSS_PROFILE_APPS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CROSS_PROFILE_APPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CROSS_PROFILE_APPS_SERVICE =>
      _id_CROSS_PROFILE_APPS_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int DEVICE_ID_DEFAULT
  static const DEVICE_ID_DEFAULT = 0;

  /// from: static public final int DEVICE_ID_INVALID
  static const DEVICE_ID_INVALID = -1;
  static final _id_DEVICE_LOCK_SERVICE = _class.staticFieldId(
    r"DEVICE_LOCK_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEVICE_LOCK_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEVICE_LOCK_SERVICE =>
      _id_DEVICE_LOCK_SERVICE.get(_class, const jni.JStringType());

  static final _id_DEVICE_POLICY_SERVICE = _class.staticFieldId(
    r"DEVICE_POLICY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEVICE_POLICY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEVICE_POLICY_SERVICE =>
      _id_DEVICE_POLICY_SERVICE.get(_class, const jni.JStringType());

  static final _id_DISPLAY_HASH_SERVICE = _class.staticFieldId(
    r"DISPLAY_HASH_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DISPLAY_HASH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_HASH_SERVICE =>
      _id_DISPLAY_HASH_SERVICE.get(_class, const jni.JStringType());

  static final _id_DISPLAY_SERVICE = _class.staticFieldId(
    r"DISPLAY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DISPLAY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_SERVICE =>
      _id_DISPLAY_SERVICE.get(_class, const jni.JStringType());

  static final _id_DOMAIN_VERIFICATION_SERVICE = _class.staticFieldId(
    r"DOMAIN_VERIFICATION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DOMAIN_VERIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOMAIN_VERIFICATION_SERVICE =>
      _id_DOMAIN_VERIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_DOWNLOAD_SERVICE = _class.staticFieldId(
    r"DOWNLOAD_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DOWNLOAD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOWNLOAD_SERVICE =>
      _id_DOWNLOAD_SERVICE.get(_class, const jni.JStringType());

  static final _id_DROPBOX_SERVICE = _class.staticFieldId(
    r"DROPBOX_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DROPBOX_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DROPBOX_SERVICE =>
      _id_DROPBOX_SERVICE.get(_class, const jni.JStringType());

  static final _id_EUICC_SERVICE = _class.staticFieldId(
    r"EUICC_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EUICC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EUICC_SERVICE =>
      _id_EUICC_SERVICE.get(_class, const jni.JStringType());

  static final _id_FILE_INTEGRITY_SERVICE = _class.staticFieldId(
    r"FILE_INTEGRITY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String FILE_INTEGRITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FILE_INTEGRITY_SERVICE =>
      _id_FILE_INTEGRITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_FINGERPRINT_SERVICE = _class.staticFieldId(
    r"FINGERPRINT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String FINGERPRINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FINGERPRINT_SERVICE =>
      _id_FINGERPRINT_SERVICE.get(_class, const jni.JStringType());

  static final _id_GAME_SERVICE = _class.staticFieldId(
    r"GAME_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String GAME_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GAME_SERVICE =>
      _id_GAME_SERVICE.get(_class, const jni.JStringType());

  static final _id_GRAMMATICAL_INFLECTION_SERVICE = _class.staticFieldId(
    r"GRAMMATICAL_INFLECTION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String GRAMMATICAL_INFLECTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GRAMMATICAL_INFLECTION_SERVICE =>
      _id_GRAMMATICAL_INFLECTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_HARDWARE_PROPERTIES_SERVICE = _class.staticFieldId(
    r"HARDWARE_PROPERTIES_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String HARDWARE_PROPERTIES_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HARDWARE_PROPERTIES_SERVICE =>
      _id_HARDWARE_PROPERTIES_SERVICE.get(_class, const jni.JStringType());

  static final _id_HEALTHCONNECT_SERVICE = _class.staticFieldId(
    r"HEALTHCONNECT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String HEALTHCONNECT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEALTHCONNECT_SERVICE =>
      _id_HEALTHCONNECT_SERVICE.get(_class, const jni.JStringType());

  static final _id_INPUT_METHOD_SERVICE = _class.staticFieldId(
    r"INPUT_METHOD_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INPUT_METHOD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INPUT_METHOD_SERVICE =>
      _id_INPUT_METHOD_SERVICE.get(_class, const jni.JStringType());

  static final _id_INPUT_SERVICE = _class.staticFieldId(
    r"INPUT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INPUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INPUT_SERVICE =>
      _id_INPUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_IPSEC_SERVICE = _class.staticFieldId(
    r"IPSEC_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IPSEC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IPSEC_SERVICE =>
      _id_IPSEC_SERVICE.get(_class, const jni.JStringType());

  static final _id_JOB_SCHEDULER_SERVICE = _class.staticFieldId(
    r"JOB_SCHEDULER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String JOB_SCHEDULER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get JOB_SCHEDULER_SERVICE =>
      _id_JOB_SCHEDULER_SERVICE.get(_class, const jni.JStringType());

  static final _id_KEYGUARD_SERVICE = _class.staticFieldId(
    r"KEYGUARD_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String KEYGUARD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get KEYGUARD_SERVICE =>
      _id_KEYGUARD_SERVICE.get(_class, const jni.JStringType());

  static final _id_LAUNCHER_APPS_SERVICE = _class.staticFieldId(
    r"LAUNCHER_APPS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LAUNCHER_APPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAUNCHER_APPS_SERVICE =>
      _id_LAUNCHER_APPS_SERVICE.get(_class, const jni.JStringType());

  static final _id_LAYOUT_INFLATER_SERVICE = _class.staticFieldId(
    r"LAYOUT_INFLATER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LAYOUT_INFLATER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAYOUT_INFLATER_SERVICE =>
      _id_LAYOUT_INFLATER_SERVICE.get(_class, const jni.JStringType());

  static final _id_LOCALE_SERVICE = _class.staticFieldId(
    r"LOCALE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LOCALE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LOCALE_SERVICE =>
      _id_LOCALE_SERVICE.get(_class, const jni.JStringType());

  static final _id_LOCATION_SERVICE = _class.staticFieldId(
    r"LOCATION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LOCATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LOCATION_SERVICE =>
      _id_LOCATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_COMMUNICATION_SERVICE = _class.staticFieldId(
    r"MEDIA_COMMUNICATION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_COMMUNICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_COMMUNICATION_SERVICE =>
      _id_MEDIA_COMMUNICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_METRICS_SERVICE = _class.staticFieldId(
    r"MEDIA_METRICS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_METRICS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_METRICS_SERVICE =>
      _id_MEDIA_METRICS_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_PROJECTION_SERVICE = _class.staticFieldId(
    r"MEDIA_PROJECTION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_PROJECTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_PROJECTION_SERVICE =>
      _id_MEDIA_PROJECTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_ROUTER_SERVICE = _class.staticFieldId(
    r"MEDIA_ROUTER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_ROUTER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_ROUTER_SERVICE =>
      _id_MEDIA_ROUTER_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_SESSION_SERVICE = _class.staticFieldId(
    r"MEDIA_SESSION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_SESSION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_SESSION_SERVICE =>
      _id_MEDIA_SESSION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MIDI_SERVICE = _class.staticFieldId(
    r"MIDI_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MIDI_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIDI_SERVICE =>
      _id_MIDI_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int MODE_APPEND
  static const MODE_APPEND = 32768;

  /// from: static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: static public final int MODE_MULTI_PROCESS
  static const MODE_MULTI_PROCESS = 4;

  /// from: static public final int MODE_NO_LOCALIZED_COLLATORS
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: static public final int MODE_PRIVATE
  static const MODE_PRIVATE = 0;

  /// from: static public final int MODE_WORLD_READABLE
  static const MODE_WORLD_READABLE = 1;

  /// from: static public final int MODE_WORLD_WRITEABLE
  static const MODE_WORLD_WRITEABLE = 2;
  static final _id_NETWORK_STATS_SERVICE = _class.staticFieldId(
    r"NETWORK_STATS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NETWORK_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NETWORK_STATS_SERVICE =>
      _id_NETWORK_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_NFC_SERVICE = _class.staticFieldId(
    r"NFC_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NFC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NFC_SERVICE =>
      _id_NFC_SERVICE.get(_class, const jni.JStringType());

  static final _id_NOTIFICATION_SERVICE = _class.staticFieldId(
    r"NOTIFICATION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NOTIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NOTIFICATION_SERVICE =>
      _id_NOTIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_NSD_SERVICE = _class.staticFieldId(
    r"NSD_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NSD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NSD_SERVICE =>
      _id_NSD_SERVICE.get(_class, const jni.JStringType());

  static final _id_OVERLAY_SERVICE = _class.staticFieldId(
    r"OVERLAY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String OVERLAY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get OVERLAY_SERVICE =>
      _id_OVERLAY_SERVICE.get(_class, const jni.JStringType());

  static final _id_PEOPLE_SERVICE = _class.staticFieldId(
    r"PEOPLE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String PEOPLE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PEOPLE_SERVICE =>
      _id_PEOPLE_SERVICE.get(_class, const jni.JStringType());

  static final _id_PERFORMANCE_HINT_SERVICE = _class.staticFieldId(
    r"PERFORMANCE_HINT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String PERFORMANCE_HINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PERFORMANCE_HINT_SERVICE =>
      _id_PERFORMANCE_HINT_SERVICE.get(_class, const jni.JStringType());

  static final _id_POWER_SERVICE = _class.staticFieldId(
    r"POWER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String POWER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get POWER_SERVICE =>
      _id_POWER_SERVICE.get(_class, const jni.JStringType());

  static final _id_PRINT_SERVICE = _class.staticFieldId(
    r"PRINT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String PRINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PRINT_SERVICE =>
      _id_PRINT_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int RECEIVER_EXPORTED
  static const RECEIVER_EXPORTED = 2;

  /// from: static public final int RECEIVER_NOT_EXPORTED
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _id_RESTRICTIONS_SERVICE = _class.staticFieldId(
    r"RESTRICTIONS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String RESTRICTIONS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RESTRICTIONS_SERVICE =>
      _id_RESTRICTIONS_SERVICE.get(_class, const jni.JStringType());

  static final _id_ROLE_SERVICE = _class.staticFieldId(
    r"ROLE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ROLE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ROLE_SERVICE =>
      _id_ROLE_SERVICE.get(_class, const jni.JStringType());

  static final _id_SEARCH_SERVICE = _class.staticFieldId(
    r"SEARCH_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SEARCH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SEARCH_SERVICE =>
      _id_SEARCH_SERVICE.get(_class, const jni.JStringType());

  static final _id_SENSOR_SERVICE = _class.staticFieldId(
    r"SENSOR_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SENSOR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SENSOR_SERVICE =>
      _id_SENSOR_SERVICE.get(_class, const jni.JStringType());

  static final _id_SHORTCUT_SERVICE = _class.staticFieldId(
    r"SHORTCUT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SHORTCUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SHORTCUT_SERVICE =>
      _id_SHORTCUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_STATUS_BAR_SERVICE = _class.staticFieldId(
    r"STATUS_BAR_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String STATUS_BAR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STATUS_BAR_SERVICE =>
      _id_STATUS_BAR_SERVICE.get(_class, const jni.JStringType());

  static final _id_STORAGE_SERVICE = _class.staticFieldId(
    r"STORAGE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String STORAGE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STORAGE_SERVICE =>
      _id_STORAGE_SERVICE.get(_class, const jni.JStringType());

  static final _id_STORAGE_STATS_SERVICE = _class.staticFieldId(
    r"STORAGE_STATS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String STORAGE_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STORAGE_STATS_SERVICE =>
      _id_STORAGE_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_SYSTEM_HEALTH_SERVICE = _class.staticFieldId(
    r"SYSTEM_HEALTH_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYSTEM_HEALTH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYSTEM_HEALTH_SERVICE =>
      _id_SYSTEM_HEALTH_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELECOM_SERVICE = _class.staticFieldId(
    r"TELECOM_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TELECOM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELECOM_SERVICE =>
      _id_TELECOM_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_IMS_SERVICE = _class.staticFieldId(
    r"TELEPHONY_IMS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TELEPHONY_IMS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_IMS_SERVICE =>
      _id_TELEPHONY_IMS_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_SERVICE = _class.staticFieldId(
    r"TELEPHONY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TELEPHONY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_SERVICE =>
      _id_TELEPHONY_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_SUBSCRIPTION_SERVICE = _class.staticFieldId(
    r"TELEPHONY_SUBSCRIPTION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _id_TELEPHONY_SUBSCRIPTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_TEXT_CLASSIFICATION_SERVICE = _class.staticFieldId(
    r"TEXT_CLASSIFICATION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TEXT_CLASSIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TEXT_CLASSIFICATION_SERVICE =>
      _id_TEXT_CLASSIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_TEXT_SERVICES_MANAGER_SERVICE = _class.staticFieldId(
    r"TEXT_SERVICES_MANAGER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TEXT_SERVICES_MANAGER_SERVICE =>
      _id_TEXT_SERVICES_MANAGER_SERVICE.get(_class, const jni.JStringType());

  static final _id_TV_INPUT_SERVICE = _class.staticFieldId(
    r"TV_INPUT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TV_INPUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TV_INPUT_SERVICE =>
      _id_TV_INPUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_TV_INTERACTIVE_APP_SERVICE = _class.staticFieldId(
    r"TV_INTERACTIVE_APP_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TV_INTERACTIVE_APP_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TV_INTERACTIVE_APP_SERVICE =>
      _id_TV_INTERACTIVE_APP_SERVICE.get(_class, const jni.JStringType());

  static final _id_UI_MODE_SERVICE = _class.staticFieldId(
    r"UI_MODE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String UI_MODE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get UI_MODE_SERVICE =>
      _id_UI_MODE_SERVICE.get(_class, const jni.JStringType());

  static final _id_USAGE_STATS_SERVICE = _class.staticFieldId(
    r"USAGE_STATS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String USAGE_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USAGE_STATS_SERVICE =>
      _id_USAGE_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_USB_SERVICE = _class.staticFieldId(
    r"USB_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String USB_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USB_SERVICE =>
      _id_USB_SERVICE.get(_class, const jni.JStringType());

  static final _id_USER_SERVICE = _class.staticFieldId(
    r"USER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String USER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USER_SERVICE =>
      _id_USER_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIBRATOR_MANAGER_SERVICE = _class.staticFieldId(
    r"VIBRATOR_MANAGER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VIBRATOR_MANAGER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATOR_MANAGER_SERVICE =>
      _id_VIBRATOR_MANAGER_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIBRATOR_SERVICE = _class.staticFieldId(
    r"VIBRATOR_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VIBRATOR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATOR_SERVICE =>
      _id_VIBRATOR_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIRTUAL_DEVICE_SERVICE = _class.staticFieldId(
    r"VIRTUAL_DEVICE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VIRTUAL_DEVICE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIRTUAL_DEVICE_SERVICE =>
      _id_VIRTUAL_DEVICE_SERVICE.get(_class, const jni.JStringType());

  static final _id_VPN_MANAGEMENT_SERVICE = _class.staticFieldId(
    r"VPN_MANAGEMENT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VPN_MANAGEMENT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VPN_MANAGEMENT_SERVICE =>
      _id_VPN_MANAGEMENT_SERVICE.get(_class, const jni.JStringType());

  static final _id_WALLPAPER_SERVICE = _class.staticFieldId(
    r"WALLPAPER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WALLPAPER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WALLPAPER_SERVICE =>
      _id_WALLPAPER_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_AWARE_SERVICE = _class.staticFieldId(
    r"WIFI_AWARE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIFI_AWARE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_AWARE_SERVICE =>
      _id_WIFI_AWARE_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_P2P_SERVICE = _class.staticFieldId(
    r"WIFI_P2P_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIFI_P2P_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_P2P_SERVICE =>
      _id_WIFI_P2P_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_RTT_RANGING_SERVICE = _class.staticFieldId(
    r"WIFI_RTT_RANGING_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIFI_RTT_RANGING_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_RTT_RANGING_SERVICE =>
      _id_WIFI_RTT_RANGING_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_SERVICE = _class.staticFieldId(
    r"WIFI_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIFI_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_SERVICE =>
      _id_WIFI_SERVICE.get(_class, const jni.JStringType());

  static final _id_WINDOW_SERVICE = _class.staticFieldId(
    r"WINDOW_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WINDOW_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WINDOW_SERVICE =>
      _id_WINDOW_SERVICE.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Context() {
    return Context.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getAssets = _class.instanceMethodId(
    r"getAssets",
    r"()Landroid/content/res/AssetManager;",
  );

  static final _getAssets = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.AssetManager getAssets()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAssets() {
    return _getAssets(reference.pointer, _id_getAssets as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getResources = _class.instanceMethodId(
    r"getResources",
    r"()Landroid/content/res/Resources;",
  );

  static final _getResources = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.Resources getResources()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResources() {
    return _getResources(
            reference.pointer, _id_getResources as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageManager = _class.instanceMethodId(
    r"getPackageManager",
    r"()Landroid/content/pm/PackageManager;",
  );

  static final _getPackageManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.pm.PackageManager getPackageManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageManager() {
    return _getPackageManager(
            reference.pointer, _id_getPackageManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r"getContentResolver",
    r"()Landroid/content/ContentResolver;",
  );

  static final _getContentResolver = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.ContentResolver getContentResolver()
  /// The returned object must be released after use, by calling the [release] method.
  ContentResolver getContentResolver() {
    return _getContentResolver(
            reference.pointer, _id_getContentResolver as jni.JMethodIDPtr)
        .object(const $ContentResolverType());
  }

  static final _id_getMainLooper = _class.instanceMethodId(
    r"getMainLooper",
    r"()Landroid/os/Looper;",
  );

  static final _getMainLooper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.os.Looper getMainLooper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainLooper() {
    return _getMainLooper(
            reference.pointer, _id_getMainLooper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMainExecutor = _class.instanceMethodId(
    r"getMainExecutor",
    r"()Ljava/util/concurrent/Executor;",
  );

  static final _getMainExecutor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.concurrent.Executor getMainExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  Executor getMainExecutor() {
    return _getMainExecutor(
            reference.pointer, _id_getMainExecutor as jni.JMethodIDPtr)
        .object(const $ExecutorType());
  }

  static final _id_getApplicationContext = _class.instanceMethodId(
    r"getApplicationContext",
    r"()Landroid/content/Context;",
  );

  static final _getApplicationContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.Context getApplicationContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context getApplicationContext() {
    return _getApplicationContext(
            reference.pointer, _id_getApplicationContext as jni.JMethodIDPtr)
        .object(const $ContextType());
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r"registerComponentCallbacks",
    r"(Landroid/content/ComponentCallbacks;)V",
  );

  static final _registerComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r"unregisterComponentCallbacks",
    r"(Landroid/content/ComponentCallbacks;)V",
  );

  static final _unregisterComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_getText = _class.instanceMethodId(
    r"getText",
    r"(I)Ljava/lang/CharSequence;",
  );

  static final _getText = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.CharSequence getText(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getText(
    int i,
  ) {
    return _getText(reference.pointer, _id_getText as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_getString = _class.instanceMethodId(
    r"getString",
    r"(I)Ljava/lang/String;",
  );

  static final _getString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.String getString(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString(
    int i,
  ) {
    return _getString(reference.pointer, _id_getString as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_getString1 = _class.instanceMethodId(
    r"getString",
    r"(I[Ljava/lang/Object;)Ljava/lang/String;",
  );

  static final _getString1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getString(int i, java.lang.Object[] objects)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString1(
    int i,
    jni.JArray<jni.JObject> objects,
  ) {
    return _getString1(reference.pointer, _id_getString1 as jni.JMethodIDPtr, i,
            objects.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getColor = _class.instanceMethodId(
    r"getColor",
    r"(I)I",
  );

  static final _getColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final int getColor(int i)
  int getColor(
    int i,
  ) {
    return _getColor(reference.pointer, _id_getColor as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r"getDrawable",
    r"(I)Landroid/graphics/drawable/Drawable;",
  );

  static final _getDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.graphics.drawable.Drawable getDrawable(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDrawable(
    int i,
  ) {
    return _getDrawable(
            reference.pointer, _id_getDrawable as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_getColorStateList = _class.instanceMethodId(
    r"getColorStateList",
    r"(I)Landroid/content/res/ColorStateList;",
  );

  static final _getColorStateList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.content.res.ColorStateList getColorStateList(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getColorStateList(
    int i,
  ) {
    return _getColorStateList(
            reference.pointer, _id_getColorStateList as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r"setTheme",
    r"(I)V",
  );

  static final _setTheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract void setTheme(int i)
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni.JMethodIDPtr, i).check();
  }

  static final _id_getTheme = _class.instanceMethodId(
    r"getTheme",
    r"()Landroid/content/res/Resources$Theme;",
  );

  static final _getTheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.Resources$Theme getTheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTheme() {
    return _getTheme(reference.pointer, _id_getTheme as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes = _class.instanceMethodId(
    r"obtainStyledAttributes",
    r"([I)Landroid/content/res/TypedArray;",
  );

  static final _obtainStyledAttributes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes(
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes(
            reference.pointer,
            _id_obtainStyledAttributes as jni.JMethodIDPtr,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes1 = _class.instanceMethodId(
    r"obtainStyledAttributes",
    r"(I[I)Landroid/content/res/TypedArray;",
  );

  static final _obtainStyledAttributes1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes1(
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes1(
            reference.pointer,
            _id_obtainStyledAttributes1 as jni.JMethodIDPtr,
            i,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes2 = _class.instanceMethodId(
    r"obtainStyledAttributes",
    r"(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;",
  );

  static final _obtainStyledAttributes2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes2(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes2(
            reference.pointer,
            _id_obtainStyledAttributes2 as jni.JMethodIDPtr,
            attributeSet.reference.pointer,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes3 = _class.instanceMethodId(
    r"obtainStyledAttributes",
    r"(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;",
  );

  static final _obtainStyledAttributes3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes3(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
  ) {
    return _obtainStyledAttributes3(
            reference.pointer,
            _id_obtainStyledAttributes3 as jni.JMethodIDPtr,
            attributeSet.reference.pointer,
            is0.reference.pointer,
            i,
            i1)
        .object(const jni.JObjectType());
  }

  static final _id_getClassLoader = _class.instanceMethodId(
    r"getClassLoader",
    r"()Ljava/lang/ClassLoader;",
  );

  static final _getClassLoader = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.ClassLoader getClassLoader()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClassLoader() {
    return _getClassLoader(
            reference.pointer, _id_getClassLoader as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r"getPackageName",
    r"()Ljava/lang/String;",
  );

  static final _getPackageName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageName() {
    return _getPackageName(
            reference.pointer, _id_getPackageName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getOpPackageName = _class.instanceMethodId(
    r"getOpPackageName",
    r"()Ljava/lang/String;",
  );

  static final _getOpPackageName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getOpPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOpPackageName() {
    return _getOpPackageName(
            reference.pointer, _id_getOpPackageName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAttributionTag = _class.instanceMethodId(
    r"getAttributionTag",
    r"()Ljava/lang/String;",
  );

  static final _getAttributionTag = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getAttributionTag()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAttributionTag() {
    return _getAttributionTag(
            reference.pointer, _id_getAttributionTag as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAttributionSource = _class.instanceMethodId(
    r"getAttributionSource",
    r"()Landroid/content/AttributionSource;",
  );

  static final _getAttributionSource = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.AttributionSource getAttributionSource()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAttributionSource() {
    return _getAttributionSource(
            reference.pointer, _id_getAttributionSource as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getParams = _class.instanceMethodId(
    r"getParams",
    r"()Landroid/content/ContextParams;",
  );

  static final _getParams = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ContextParams getParams()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParams() {
    return _getParams(reference.pointer, _id_getParams as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r"getApplicationInfo",
    r"()Landroid/content/pm/ApplicationInfo;",
  );

  static final _getApplicationInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.pm.ApplicationInfo getApplicationInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationInfo() {
    return _getApplicationInfo(
            reference.pointer, _id_getApplicationInfo as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageResourcePath = _class.instanceMethodId(
    r"getPackageResourcePath",
    r"()Ljava/lang/String;",
  );

  static final _getPackageResourcePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageResourcePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageResourcePath() {
    return _getPackageResourcePath(
            reference.pointer, _id_getPackageResourcePath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPackageCodePath = _class.instanceMethodId(
    r"getPackageCodePath",
    r"()Ljava/lang/String;",
  );

  static final _getPackageCodePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageCodePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageCodePath() {
    return _getPackageCodePath(
            reference.pointer, _id_getPackageCodePath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSharedPreferences = _class.instanceMethodId(
    r"getSharedPreferences",
    r"(Ljava/lang/String;I)Landroid/content/SharedPreferences;",
  );

  static final _getSharedPreferences = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSharedPreferences(
    jni.JString string,
    int i,
  ) {
    return _getSharedPreferences(
            reference.pointer,
            _id_getSharedPreferences as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_moveSharedPreferencesFrom = _class.instanceMethodId(
    r"moveSharedPreferencesFrom",
    r"(Landroid/content/Context;Ljava/lang/String;)Z",
  );

  static final _moveSharedPreferencesFrom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)
  bool moveSharedPreferencesFrom(
    Context context,
    jni.JString string,
  ) {
    return _moveSharedPreferencesFrom(
            reference.pointer,
            _id_moveSharedPreferencesFrom as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_deleteSharedPreferences = _class.instanceMethodId(
    r"deleteSharedPreferences",
    r"(Ljava/lang/String;)Z",
  );

  static final _deleteSharedPreferences = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteSharedPreferences(java.lang.String string)
  bool deleteSharedPreferences(
    jni.JString string,
  ) {
    return _deleteSharedPreferences(
            reference.pointer,
            _id_deleteSharedPreferences as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_openFileInput = _class.instanceMethodId(
    r"openFileInput",
    r"(Ljava/lang/String;)Ljava/io/FileInputStream;",
  );

  static final _openFileInput = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.FileInputStream openFileInput(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileInput(
    jni.JString string,
  ) {
    return _openFileInput(reference.pointer,
            _id_openFileInput as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openFileOutput = _class.instanceMethodId(
    r"openFileOutput",
    r"(Ljava/lang/String;I)Ljava/io/FileOutputStream;",
  );

  static final _openFileOutput = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileOutput(
    jni.JString string,
    int i,
  ) {
    return _openFileOutput(reference.pointer,
            _id_openFileOutput as jni.JMethodIDPtr, string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r"deleteFile",
    r"(Ljava/lang/String;)Z",
  );

  static final _deleteFile = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteFile(java.lang.String string)
  bool deleteFile(
    jni.JString string,
  ) {
    return _deleteFile(reference.pointer, _id_deleteFile as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getFileStreamPath = _class.instanceMethodId(
    r"getFileStreamPath",
    r"(Ljava/lang/String;)Ljava/io/File;",
  );

  static final _getFileStreamPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getFileStreamPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFileStreamPath(
    jni.JString string,
  ) {
    return _getFileStreamPath(reference.pointer,
            _id_getFileStreamPath as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getDataDir = _class.instanceMethodId(
    r"getDataDir",
    r"()Ljava/io/File;",
  );

  static final _getDataDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getDataDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataDir() {
    return _getDataDir(reference.pointer, _id_getDataDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getFilesDir = _class.instanceMethodId(
    r"getFilesDir",
    r"()Ljava/io/File;",
  );

  static final _getFilesDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFilesDir() {
    return _getFilesDir(reference.pointer, _id_getFilesDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getNoBackupFilesDir = _class.instanceMethodId(
    r"getNoBackupFilesDir",
    r"()Ljava/io/File;",
  );

  static final _getNoBackupFilesDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getNoBackupFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getNoBackupFilesDir() {
    return _getNoBackupFilesDir(
            reference.pointer, _id_getNoBackupFilesDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalFilesDir = _class.instanceMethodId(
    r"getExternalFilesDir",
    r"(Ljava/lang/String;)Ljava/io/File;",
  );

  static final _getExternalFilesDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getExternalFilesDir(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalFilesDir(
    jni.JString string,
  ) {
    return _getExternalFilesDir(
            reference.pointer,
            _id_getExternalFilesDir as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalFilesDirs = _class.instanceMethodId(
    r"getExternalFilesDirs",
    r"(Ljava/lang/String;)[Ljava/io/File;",
  );

  static final _getExternalFilesDirs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalFilesDirs(
    jni.JString string,
  ) {
    return _getExternalFilesDirs(
            reference.pointer,
            _id_getExternalFilesDirs as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getObbDir = _class.instanceMethodId(
    r"getObbDir",
    r"()Ljava/io/File;",
  );

  static final _getObbDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getObbDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObbDir() {
    return _getObbDir(reference.pointer, _id_getObbDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getObbDirs = _class.instanceMethodId(
    r"getObbDirs",
    r"()[Ljava/io/File;",
  );

  static final _getObbDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getObbDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getObbDirs() {
    return _getObbDirs(reference.pointer, _id_getObbDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getCacheDir = _class.instanceMethodId(
    r"getCacheDir",
    r"()Ljava/io/File;",
  );

  static final _getCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCacheDir() {
    return _getCacheDir(reference.pointer, _id_getCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getCodeCacheDir = _class.instanceMethodId(
    r"getCodeCacheDir",
    r"()Ljava/io/File;",
  );

  static final _getCodeCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getCodeCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCodeCacheDir() {
    return _getCodeCacheDir(
            reference.pointer, _id_getCodeCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalCacheDir = _class.instanceMethodId(
    r"getExternalCacheDir",
    r"()Ljava/io/File;",
  );

  static final _getExternalCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getExternalCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalCacheDir() {
    return _getExternalCacheDir(
            reference.pointer, _id_getExternalCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalCacheDirs = _class.instanceMethodId(
    r"getExternalCacheDirs",
    r"()[Ljava/io/File;",
  );

  static final _getExternalCacheDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getExternalCacheDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalCacheDirs() {
    return _getExternalCacheDirs(
            reference.pointer, _id_getExternalCacheDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getExternalMediaDirs = _class.instanceMethodId(
    r"getExternalMediaDirs",
    r"()[Ljava/io/File;",
  );

  static final _getExternalMediaDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getExternalMediaDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalMediaDirs() {
    return _getExternalMediaDirs(
            reference.pointer, _id_getExternalMediaDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_fileList = _class.instanceMethodId(
    r"fileList",
    r"()[Ljava/lang/String;",
  );

  static final _fileList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] fileList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> fileList() {
    return _fileList(reference.pointer, _id_fileList as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getDir = _class.instanceMethodId(
    r"getDir",
    r"(Ljava/lang/String;I)Ljava/io/File;",
  );

  static final _getDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.File getDir(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDir(
    jni.JString string,
    int i,
  ) {
    return _getDir(reference.pointer, _id_getDir as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _id_openOrCreateDatabase = _class.instanceMethodId(
    r"openOrCreateDatabase",
    r"(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;",
  );

  static final _openOrCreateDatabase = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
  ) {
    return _openOrCreateDatabase(
            reference.pointer,
            _id_openOrCreateDatabase as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            cursorFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openOrCreateDatabase1 = _class.instanceMethodId(
    r"openOrCreateDatabase",
    r"(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;",
  );

  static final _openOrCreateDatabase1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase1(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
    jni.JObject databaseErrorHandler,
  ) {
    return _openOrCreateDatabase1(
            reference.pointer,
            _id_openOrCreateDatabase1 as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            cursorFactory.reference.pointer,
            databaseErrorHandler.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_moveDatabaseFrom = _class.instanceMethodId(
    r"moveDatabaseFrom",
    r"(Landroid/content/Context;Ljava/lang/String;)Z",
  );

  static final _moveDatabaseFrom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)
  bool moveDatabaseFrom(
    Context context,
    jni.JString string,
  ) {
    return _moveDatabaseFrom(
            reference.pointer,
            _id_moveDatabaseFrom as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_deleteDatabase = _class.instanceMethodId(
    r"deleteDatabase",
    r"(Ljava/lang/String;)Z",
  );

  static final _deleteDatabase = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteDatabase(java.lang.String string)
  bool deleteDatabase(
    jni.JString string,
  ) {
    return _deleteDatabase(reference.pointer,
            _id_deleteDatabase as jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r"getDatabasePath",
    r"(Ljava/lang/String;)Ljava/io/File;",
  );

  static final _getDatabasePath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getDatabasePath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDatabasePath(
    jni.JString string,
  ) {
    return _getDatabasePath(reference.pointer,
            _id_getDatabasePath as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_databaseList = _class.instanceMethodId(
    r"databaseList",
    r"()[Ljava/lang/String;",
  );

  static final _databaseList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] databaseList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> databaseList() {
    return _databaseList(
            reference.pointer, _id_databaseList as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getWallpaper = _class.instanceMethodId(
    r"getWallpaper",
    r"()Landroid/graphics/drawable/Drawable;",
  );

  static final _getWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.drawable.Drawable getWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWallpaper() {
    return _getWallpaper(
            reference.pointer, _id_getWallpaper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_peekWallpaper = _class.instanceMethodId(
    r"peekWallpaper",
    r"()Landroid/graphics/drawable/Drawable;",
  );

  static final _peekWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.drawable.Drawable peekWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject peekWallpaper() {
    return _peekWallpaper(
            reference.pointer, _id_peekWallpaper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getWallpaperDesiredMinimumWidth = _class.instanceMethodId(
    r"getWallpaperDesiredMinimumWidth",
    r"()I",
  );

  static final _getWallpaperDesiredMinimumWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getWallpaperDesiredMinimumWidth()
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(reference.pointer,
            _id_getWallpaperDesiredMinimumWidth as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = _class.instanceMethodId(
    r"getWallpaperDesiredMinimumHeight",
    r"()I",
  );

  static final _getWallpaperDesiredMinimumHeight =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallIntMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public abstract int getWallpaperDesiredMinimumHeight()
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(reference.pointer,
            _id_getWallpaperDesiredMinimumHeight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setWallpaper = _class.instanceMethodId(
    r"setWallpaper",
    r"(Landroid/graphics/Bitmap;)V",
  );

  static final _setWallpaper = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(android.graphics.Bitmap bitmap)
  void setWallpaper(
    jni.JObject bitmap,
  ) {
    _setWallpaper(reference.pointer, _id_setWallpaper as jni.JMethodIDPtr,
            bitmap.reference.pointer)
        .check();
  }

  static final _id_setWallpaper1 = _class.instanceMethodId(
    r"setWallpaper",
    r"(Ljava/io/InputStream;)V",
  );

  static final _setWallpaper1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(java.io.InputStream inputStream)
  void setWallpaper1(
    jni.JObject inputStream,
  ) {
    _setWallpaper1(reference.pointer, _id_setWallpaper1 as jni.JMethodIDPtr,
            inputStream.reference.pointer)
        .check();
  }

  static final _id_clearWallpaper = _class.instanceMethodId(
    r"clearWallpaper",
    r"()V",
  );

  static final _clearWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void clearWallpaper()
  void clearWallpaper() {
    _clearWallpaper(reference.pointer, _id_clearWallpaper as jni.JMethodIDPtr)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r"startActivity",
    r"(Landroid/content/Intent;)V",
  );

  static final _startActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent)
  void startActivity(
    jni.JObject intent,
  ) {
    _startActivity(reference.pointer, _id_startActivity as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_startActivity1 = _class.instanceMethodId(
    r"startActivity",
    r"(Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _startActivity1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    _startActivity1(reference.pointer, _id_startActivity1 as jni.JMethodIDPtr,
            intent.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r"startActivities",
    r"([Landroid/content/Intent;)V",
  );

  static final _startActivities = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<jni.JObject> intents,
  ) {
    _startActivities(reference.pointer, _id_startActivities as jni.JMethodIDPtr,
            intents.reference.pointer)
        .check();
  }

  static final _id_startActivities1 = _class.instanceMethodId(
    r"startActivities",
    r"([Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _startActivities1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<jni.JObject> intents,
    jni.JObject bundle,
  ) {
    _startActivities1(
            reference.pointer,
            _id_startActivities1 as jni.JMethodIDPtr,
            intents.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r"startIntentSender",
    r"(Landroid/content/IntentSender;Landroid/content/Intent;III)V",
  );

  static final _startIntentSender = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
  ) {
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender1 = _class.instanceMethodId(
    r"startIntentSender",
    r"(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V",
  );

  static final _startIntentSender1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    jni.JObject intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    _startIntentSender1(
            reference.pointer,
            _id_startIntentSender1 as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast = _class.instanceMethodId(
    r"sendBroadcast",
    r"(Landroid/content/Intent;)V",
  );

  static final _sendBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent)
  void sendBroadcast(
    jni.JObject intent,
  ) {
    _sendBroadcast(reference.pointer, _id_sendBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast1 = _class.instanceMethodId(
    r"sendBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;)V",
  );

  static final _sendBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)
  void sendBroadcast1(
    jni.JObject intent,
    jni.JString string,
  ) {
    _sendBroadcast1(reference.pointer, _id_sendBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastWithMultiplePermissions =
      _class.instanceMethodId(
    r"sendBroadcastWithMultiplePermissions",
    r"(Landroid/content/Intent;[Ljava/lang/String;)V",
  );

  static final _sendBroadcastWithMultiplePermissions =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>("globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)
  void sendBroadcastWithMultiplePermissions(
    jni.JObject intent,
    jni.JArray<jni.JString> strings,
  ) {
    _sendBroadcastWithMultiplePermissions(
            reference.pointer,
            _id_sendBroadcastWithMultiplePermissions as jni.JMethodIDPtr,
            intent.reference.pointer,
            strings.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast2 = _class.instanceMethodId(
    r"sendBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendBroadcast2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)
  void sendBroadcast2(
    jni.JObject intent,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendBroadcast2(
            reference.pointer,
            _id_sendBroadcast2 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast = _class.instanceMethodId(
    r"sendOrderedBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;)V",
  );

  static final _sendOrderedBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)
  void sendOrderedBroadcast(
    jni.JObject intent,
    jni.JString string,
  ) {
    _sendOrderedBroadcast(
            reference.pointer,
            _id_sendOrderedBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast1 = _class.instanceMethodId(
    r"sendOrderedBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendOrderedBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)
  void sendOrderedBroadcast1(
    jni.JObject intent,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast1(
            reference.pointer,
            _id_sendOrderedBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast2 = _class.instanceMethodId(
    r"sendOrderedBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendOrderedBroadcast2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcast2(
    jni.JObject intent,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast2(
            reference.pointer,
            _id_sendOrderedBroadcast2 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast3 = _class.instanceMethodId(
    r"sendOrderedBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendOrderedBroadcast3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle1)
  void sendOrderedBroadcast3(
    jni.JObject intent,
    jni.JString string,
    jni.JObject bundle,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle1,
  ) {
    _sendOrderedBroadcast3(
            reference.pointer,
            _id_sendOrderedBroadcast3 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle1.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser = _class.instanceMethodId(
    r"sendBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;)V",
  );

  static final _sendBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
  ) {
    _sendBroadcastAsUser(
            reference.pointer,
            _id_sendBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser1 = _class.instanceMethodId(
    r"sendBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V",
  );

  static final _sendBroadcastAsUser1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)
  void sendBroadcastAsUser1(
    jni.JObject intent,
    jni.JObject userHandle,
    jni.JString string,
  ) {
    _sendBroadcastAsUser1(
            reference.pointer,
            _id_sendBroadcastAsUser1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcastAsUser = _class.instanceMethodId(
    r"sendOrderedBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendOrderedBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendOrderedBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            string.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast4 = _class.instanceMethodId(
    r"sendOrderedBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendOrderedBroadcast4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)
  void sendOrderedBroadcast4(
    jni.JObject intent,
    jni.JString string,
    jni.JString string1,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string2,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast4(
            reference.pointer,
            _id_sendOrderedBroadcast4 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string2.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast = _class.instanceMethodId(
    r"sendStickyBroadcast",
    r"(Landroid/content/Intent;)V",
  );

  static final _sendStickyBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcast(android.content.Intent intent)
  void sendStickyBroadcast(
    jni.JObject intent,
  ) {
    _sendStickyBroadcast(
            reference.pointer,
            _id_sendStickyBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast1 = _class.instanceMethodId(
    r"sendStickyBroadcast",
    r"(Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _sendStickyBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)
  void sendStickyBroadcast1(
    jni.JObject intent,
    jni.JObject bundle,
  ) {
    _sendStickyBroadcast1(
            reference.pointer,
            _id_sendStickyBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcast = _class.instanceMethodId(
    r"sendStickyOrderedBroadcast",
    r"(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendStickyOrderedBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcast(
    jni.JObject intent,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendStickyOrderedBroadcast(
            reference.pointer,
            _id_sendStickyOrderedBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_removeStickyBroadcast = _class.instanceMethodId(
    r"removeStickyBroadcast",
    r"(Landroid/content/Intent;)V",
  );

  static final _removeStickyBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcast(android.content.Intent intent)
  void removeStickyBroadcast(
    jni.JObject intent,
  ) {
    _removeStickyBroadcast(
            reference.pointer,
            _id_removeStickyBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcastAsUser = _class.instanceMethodId(
    r"sendStickyBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;)V",
  );

  static final _sendStickyBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendStickyBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
  ) {
    _sendStickyBroadcastAsUser(
            reference.pointer,
            _id_sendStickyBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = _class.instanceMethodId(
    r"sendStickyOrderedBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendStickyOrderedBroadcastAsUser =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            $Int32,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>("globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  int,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendStickyOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendStickyOrderedBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_removeStickyBroadcastAsUser = _class.instanceMethodId(
    r"removeStickyBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;)V",
  );

  static final _removeStickyBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void removeStickyBroadcastAsUser(
    jni.JObject intent,
    jni.JObject userHandle,
  ) {
    _removeStickyBroadcastAsUser(
            reference.pointer,
            _id_removeStickyBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_registerReceiver = _class.instanceMethodId(
    r"registerReceiver",
    r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;",
  );

  static final _registerReceiver = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
  ) {
    return _registerReceiver(
            reference.pointer,
            _id_registerReceiver as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_registerReceiver1 = _class.instanceMethodId(
    r"registerReceiver",
    r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;",
  );

  static final _registerReceiver1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver1(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    int i,
  ) {
    return _registerReceiver1(
            reference.pointer,
            _id_registerReceiver1 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_registerReceiver2 = _class.instanceMethodId(
    r"registerReceiver",
    r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;",
  );

  static final _registerReceiver2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver2(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
  ) {
    return _registerReceiver2(
            reference.pointer,
            _id_registerReceiver2 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_registerReceiver3 = _class.instanceMethodId(
    r"registerReceiver",
    r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;",
  );

  static final _registerReceiver3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject registerReceiver3(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
    int i,
  ) {
    return _registerReceiver3(
            reference.pointer,
            _id_registerReceiver3 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_unregisterReceiver = _class.instanceMethodId(
    r"unregisterReceiver",
    r"(Landroid/content/BroadcastReceiver;)V",
  );

  static final _unregisterReceiver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)
  void unregisterReceiver(
    jni.JObject broadcastReceiver,
  ) {
    _unregisterReceiver(
            reference.pointer,
            _id_unregisterReceiver as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer)
        .check();
  }

  static final _id_startService = _class.instanceMethodId(
    r"startService",
    r"(Landroid/content/Intent;)Landroid/content/ComponentName;",
  );

  static final _startService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startService(
    jni.JObject intent,
  ) {
    return _startService(reference.pointer,
            _id_startService as jni.JMethodIDPtr, intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startForegroundService = _class.instanceMethodId(
    r"startForegroundService",
    r"(Landroid/content/Intent;)Landroid/content/ComponentName;",
  );

  static final _startForegroundService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startForegroundService(
    jni.JObject intent,
  ) {
    return _startForegroundService(
            reference.pointer,
            _id_startForegroundService as jni.JMethodIDPtr,
            intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_stopService = _class.instanceMethodId(
    r"stopService",
    r"(Landroid/content/Intent;)Z",
  );

  static final _stopService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean stopService(android.content.Intent intent)
  bool stopService(
    jni.JObject intent,
  ) {
    return _stopService(reference.pointer, _id_stopService as jni.JMethodIDPtr,
            intent.reference.pointer)
        .boolean;
  }

  static final _id_bindService = _class.instanceMethodId(
    r"bindService",
    r"(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z",
  );

  static final _bindService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)
  bool bindService(
    jni.JObject intent,
    jni.JObject serviceConnection,
    int i,
  ) {
    return _bindService(reference.pointer, _id_bindService as jni.JMethodIDPtr,
            intent.reference.pointer, serviceConnection.reference.pointer, i)
        .boolean;
  }

  static final _id_bindService1 = _class.instanceMethodId(
    r"bindService",
    r"(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;)Z",
  );

  static final _bindService1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags)
  bool bindService1(
    jni.JObject intent,
    jni.JObject serviceConnection,
    Context_BindServiceFlags bindServiceFlags,
  ) {
    return _bindService1(
            reference.pointer,
            _id_bindService1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            bindServiceFlags.reference.pointer)
        .boolean;
  }

  static final _id_bindService2 = _class.instanceMethodId(
    r"bindService",
    r"(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z",
  );

  static final _bindService2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService2(
    jni.JObject intent,
    int i,
    Executor executor,
    jni.JObject serviceConnection,
  ) {
    return _bindService2(
            reference.pointer,
            _id_bindService2 as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindService3 = _class.instanceMethodId(
    r"bindService",
    r"(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z",
  );

  static final _bindService3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService3(
    jni.JObject intent,
    Context_BindServiceFlags bindServiceFlags,
    Executor executor,
    jni.JObject serviceConnection,
  ) {
    return _bindService3(
            reference.pointer,
            _id_bindService3 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bindServiceFlags.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService = _class.instanceMethodId(
    r"bindIsolatedService",
    r"(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z",
  );

  static final _bindIsolatedService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService(
    jni.JObject intent,
    int i,
    jni.JString string,
    Executor executor,
    jni.JObject serviceConnection,
  ) {
    return _bindIsolatedService(
            reference.pointer,
            _id_bindIsolatedService as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            string.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService1 = _class.instanceMethodId(
    r"bindIsolatedService",
    r"(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z",
  );

  static final _bindIsolatedService1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindIsolatedService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService1(
    jni.JObject intent,
    Context_BindServiceFlags bindServiceFlags,
    jni.JString string,
    Executor executor,
    jni.JObject serviceConnection,
  ) {
    return _bindIsolatedService1(
            reference.pointer,
            _id_bindIsolatedService1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bindServiceFlags.reference.pointer,
            string.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser = _class.instanceMethodId(
    r"bindServiceAsUser",
    r"(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z",
  );

  static final _bindServiceAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)
  bool bindServiceAsUser(
    jni.JObject intent,
    jni.JObject serviceConnection,
    int i,
    jni.JObject userHandle,
  ) {
    return _bindServiceAsUser(
            reference.pointer,
            _id_bindServiceAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            i,
            userHandle.reference.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser1 = _class.instanceMethodId(
    r"bindServiceAsUser",
    r"(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;Landroid/os/UserHandle;)Z",
  );

  static final _bindServiceAsUser1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags, android.os.UserHandle userHandle)
  bool bindServiceAsUser1(
    jni.JObject intent,
    jni.JObject serviceConnection,
    Context_BindServiceFlags bindServiceFlags,
    jni.JObject userHandle,
  ) {
    return _bindServiceAsUser1(
            reference.pointer,
            _id_bindServiceAsUser1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            bindServiceFlags.reference.pointer,
            userHandle.reference.pointer)
        .boolean;
  }

  static final _id_updateServiceGroup = _class.instanceMethodId(
    r"updateServiceGroup",
    r"(Landroid/content/ServiceConnection;II)V",
  );

  static final _updateServiceGroup = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)
  void updateServiceGroup(
    jni.JObject serviceConnection,
    int i,
    int i1,
  ) {
    _updateServiceGroup(
            reference.pointer,
            _id_updateServiceGroup as jni.JMethodIDPtr,
            serviceConnection.reference.pointer,
            i,
            i1)
        .check();
  }

  static final _id_unbindService = _class.instanceMethodId(
    r"unbindService",
    r"(Landroid/content/ServiceConnection;)V",
  );

  static final _unbindService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unbindService(android.content.ServiceConnection serviceConnection)
  void unbindService(
    jni.JObject serviceConnection,
  ) {
    _unbindService(reference.pointer, _id_unbindService as jni.JMethodIDPtr,
            serviceConnection.reference.pointer)
        .check();
  }

  static final _id_startInstrumentation = _class.instanceMethodId(
    r"startInstrumentation",
    r"(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z",
  );

  static final _startInstrumentation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)
  bool startInstrumentation(
    jni.JObject componentName,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return _startInstrumentation(
            reference.pointer,
            _id_startInstrumentation as jni.JMethodIDPtr,
            componentName.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r"getSystemService",
    r"(Ljava/lang/String;)Ljava/lang/Object;",
  );

  static final _getSystemService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getSystemService1 = _class.instanceMethodId(
    r"getSystemService",
    r"(Ljava/lang/Class;)Ljava/lang/Object;",
  );

  static final _getSystemService1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final T getSystemService(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSystemService1<$T extends jni.JObject>(
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getSystemService1(reference.pointer,
            _id_getSystemService1 as jni.JMethodIDPtr, class0.reference.pointer)
        .object(T);
  }

  static final _id_getSystemServiceName = _class.instanceMethodId(
    r"getSystemServiceName",
    r"(Ljava/lang/Class;)Ljava/lang/String;",
  );

  static final _getSystemServiceName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getSystemServiceName(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSystemServiceName(
    jni.JObject class0,
  ) {
    return _getSystemServiceName(
            reference.pointer,
            _id_getSystemServiceName as jni.JMethodIDPtr,
            class0.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r"checkPermission",
    r"(Ljava/lang/String;II)I",
  );

  static final _checkPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public abstract int checkPermission(java.lang.String string, int i, int i1)
  int checkPermission(
    jni.JString string,
    int i,
    int i1,
  ) {
    return _checkPermission(
            reference.pointer,
            _id_checkPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1)
        .integer;
  }

  static final _id_checkCallingPermission = _class.instanceMethodId(
    r"checkCallingPermission",
    r"(Ljava/lang/String;)I",
  );

  static final _checkCallingPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingPermission(java.lang.String string)
  int checkCallingPermission(
    jni.JString string,
  ) {
    return _checkCallingPermission(
            reference.pointer,
            _id_checkCallingPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_checkCallingOrSelfPermission = _class.instanceMethodId(
    r"checkCallingOrSelfPermission",
    r"(Ljava/lang/String;)I",
  );

  static final _checkCallingOrSelfPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingOrSelfPermission(java.lang.String string)
  int checkCallingOrSelfPermission(
    jni.JString string,
  ) {
    return _checkCallingOrSelfPermission(
            reference.pointer,
            _id_checkCallingOrSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_checkSelfPermission = _class.instanceMethodId(
    r"checkSelfPermission",
    r"(Ljava/lang/String;)I",
  );

  static final _checkSelfPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkSelfPermission(java.lang.String string)
  int checkSelfPermission(
    jni.JString string,
  ) {
    return _checkSelfPermission(
            reference.pointer,
            _id_checkSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_enforcePermission = _class.instanceMethodId(
    r"enforcePermission",
    r"(Ljava/lang/String;IILjava/lang/String;)V",
  );

  static final _enforcePermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)
  void enforcePermission(
    jni.JString string,
    int i,
    int i1,
    jni.JString string1,
  ) {
    _enforcePermission(
            reference.pointer,
            _id_enforcePermission as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1,
            string1.reference.pointer)
        .check();
  }

  static final _id_enforceCallingPermission = _class.instanceMethodId(
    r"enforceCallingPermission",
    r"(Ljava/lang/String;Ljava/lang/String;)V",
  );

  static final _enforceCallingPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    _enforceCallingPermission(
            reference.pointer,
            _id_enforceCallingPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfPermission = _class.instanceMethodId(
    r"enforceCallingOrSelfPermission",
    r"(Ljava/lang/String;Ljava/lang/String;)V",
  );

  static final _enforceCallingOrSelfPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingOrSelfPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    _enforceCallingOrSelfPermission(
            reference.pointer,
            _id_enforceCallingOrSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_grantUriPermission = _class.instanceMethodId(
    r"grantUriPermission",
    r"(Ljava/lang/String;Landroid/net/Uri;I)V",
  );

  static final _grantUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void grantUriPermission(
    jni.JString string,
    Uri uri,
    int i,
  ) {
    _grantUriPermission(
            reference.pointer,
            _id_grantUriPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission = _class.instanceMethodId(
    r"revokeUriPermission",
    r"(Landroid/net/Uri;I)V",
  );

  static final _revokeUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(android.net.Uri uri, int i)
  void revokeUriPermission(
    Uri uri,
    int i,
  ) {
    _revokeUriPermission(
            reference.pointer,
            _id_revokeUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission1 = _class.instanceMethodId(
    r"revokeUriPermission",
    r"(Ljava/lang/String;Landroid/net/Uri;I)V",
  );

  static final _revokeUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void revokeUriPermission1(
    jni.JString string,
    Uri uri,
    int i,
  ) {
    _revokeUriPermission1(
            reference.pointer,
            _id_revokeUriPermission1 as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_checkUriPermission = _class.instanceMethodId(
    r"checkUriPermission",
    r"(Landroid/net/Uri;III)I",
  );

  static final _checkUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)
  int checkUriPermission(
    Uri uri,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermission(
            reference.pointer,
            _id_checkUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_checkUriPermissions = _class.instanceMethodId(
    r"checkUriPermissions",
    r"(Ljava/util/List;III)[I",
  );

  static final _checkUriPermissions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkUriPermissions(
    jni.JList<Uri> list,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermissions(
            reference.pointer,
            _id_checkUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i,
            i1,
            i2)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkCallingUriPermission = _class.instanceMethodId(
    r"checkCallingUriPermission",
    r"(Landroid/net/Uri;I)I",
  );

  static final _checkCallingUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingUriPermission(android.net.Uri uri, int i)
  int checkCallingUriPermission(
    Uri uri,
    int i,
  ) {
    return _checkCallingUriPermission(
            reference.pointer,
            _id_checkCallingUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingUriPermissions = _class.instanceMethodId(
    r"checkCallingUriPermissions",
    r"(Ljava/util/List;I)[I",
  );

  static final _checkCallingUriPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingUriPermissions(
    jni.JList<Uri> list,
    int i,
  ) {
    return _checkCallingUriPermissions(
            reference.pointer,
            _id_checkCallingUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkCallingOrSelfUriPermission = _class.instanceMethodId(
    r"checkCallingOrSelfUriPermission",
    r"(Landroid/net/Uri;I)I",
  );

  static final _checkCallingOrSelfUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)
  int checkCallingOrSelfUriPermission(
    Uri uri,
    int i,
  ) {
    return _checkCallingOrSelfUriPermission(
            reference.pointer,
            _id_checkCallingOrSelfUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = _class.instanceMethodId(
    r"checkCallingOrSelfUriPermissions",
    r"(Ljava/util/List;I)[I",
  );

  static final _checkCallingOrSelfUriPermissions =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
              "globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingOrSelfUriPermissions(
    jni.JList<Uri> list,
    int i,
  ) {
    return _checkCallingOrSelfUriPermissions(
            reference.pointer,
            _id_checkCallingOrSelfUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkUriPermission1 = _class.instanceMethodId(
    r"checkUriPermission",
    r"(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I",
  );

  static final _checkUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)
  int checkUriPermission1(
    Uri uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermission1(
            reference.pointer,
            _id_checkUriPermission1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_enforceUriPermission = _class.instanceMethodId(
    r"enforceUriPermission",
    r"(Landroid/net/Uri;IIILjava/lang/String;)V",
  );

  static final _enforceUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)
  void enforceUriPermission(
    Uri uri,
    int i,
    int i1,
    int i2,
    jni.JString string,
  ) {
    _enforceUriPermission(
            reference.pointer,
            _id_enforceUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            i1,
            i2,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceCallingUriPermission = _class.instanceMethodId(
    r"enforceCallingUriPermission",
    r"(Landroid/net/Uri;ILjava/lang/String;)V",
  );

  static final _enforceCallingUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingUriPermission(
    Uri uri,
    int i,
    jni.JString string,
  ) {
    _enforceCallingUriPermission(
            reference.pointer,
            _id_enforceCallingUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfUriPermission = _class.instanceMethodId(
    r"enforceCallingOrSelfUriPermission",
    r"(Landroid/net/Uri;ILjava/lang/String;)V",
  );

  static final _enforceCallingOrSelfUriPermission =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            $Int32,
                            ffi.Pointer<ffi.Void>
                          )>)>>("globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  int,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingOrSelfUriPermission(
    Uri uri,
    int i,
    jni.JString string,
  ) {
    _enforceCallingOrSelfUriPermission(
            reference.pointer,
            _id_enforceCallingOrSelfUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceUriPermission1 = _class.instanceMethodId(
    r"enforceUriPermission",
    r"(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V",
  );

  static final _enforceUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)
  void enforceUriPermission1(
    Uri uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
    jni.JString string2,
  ) {
    _enforceUriPermission1(
            reference.pointer,
            _id_enforceUriPermission1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            i1,
            i2,
            string2.reference.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionOnKill = _class.instanceMethodId(
    r"revokeSelfPermissionOnKill",
    r"(Ljava/lang/String;)V",
  );

  static final _revokeSelfPermissionOnKill = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionOnKill(java.lang.String string)
  void revokeSelfPermissionOnKill(
    jni.JString string,
  ) {
    _revokeSelfPermissionOnKill(
            reference.pointer,
            _id_revokeSelfPermissionOnKill as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionsOnKill = _class.instanceMethodId(
    r"revokeSelfPermissionsOnKill",
    r"(Ljava/util/Collection;)V",
  );

  static final _revokeSelfPermissionsOnKill = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionsOnKill(java.util.Collection collection)
  void revokeSelfPermissionsOnKill(
    jni.JObject collection,
  ) {
    _revokeSelfPermissionsOnKill(
            reference.pointer,
            _id_revokeSelfPermissionsOnKill as jni.JMethodIDPtr,
            collection.reference.pointer)
        .check();
  }

  static final _id_createPackageContext = _class.instanceMethodId(
    r"createPackageContext",
    r"(Ljava/lang/String;I)Landroid/content/Context;",
  );

  static final _createPackageContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Context createPackageContext(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createPackageContext(
    jni.JString string,
    int i,
  ) {
    return _createPackageContext(
            reference.pointer,
            _id_createPackageContext as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const $ContextType());
  }

  static final _id_createContextForSplit = _class.instanceMethodId(
    r"createContextForSplit",
    r"(Ljava/lang/String;)Landroid/content/Context;",
  );

  static final _createContextForSplit = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createContextForSplit(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContextForSplit(
    jni.JString string,
  ) {
    return _createContextForSplit(
            reference.pointer,
            _id_createContextForSplit as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createConfigurationContext = _class.instanceMethodId(
    r"createConfigurationContext",
    r"(Landroid/content/res/Configuration;)Landroid/content/Context;",
  );

  static final _createConfigurationContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)
  /// The returned object must be released after use, by calling the [release] method.
  Context createConfigurationContext(
    jni.JObject configuration,
  ) {
    return _createConfigurationContext(
            reference.pointer,
            _id_createConfigurationContext as jni.JMethodIDPtr,
            configuration.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDisplayContext = _class.instanceMethodId(
    r"createDisplayContext",
    r"(Landroid/view/Display;)Landroid/content/Context;",
  );

  static final _createDisplayContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createDisplayContext(android.view.Display display)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDisplayContext(
    jni.JObject display,
  ) {
    return _createDisplayContext(
            reference.pointer,
            _id_createDisplayContext as jni.JMethodIDPtr,
            display.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDeviceContext = _class.instanceMethodId(
    r"createDeviceContext",
    r"(I)Landroid/content/Context;",
  );

  static final _createDeviceContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.content.Context createDeviceContext(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceContext(
    int i,
  ) {
    return _createDeviceContext(
            reference.pointer, _id_createDeviceContext as jni.JMethodIDPtr, i)
        .object(const $ContextType());
  }

  static final _id_createWindowContext = _class.instanceMethodId(
    r"createWindowContext",
    r"(ILandroid/os/Bundle;)Landroid/content/Context;",
  );

  static final _createWindowContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext(
    int i,
    jni.JObject bundle,
  ) {
    return _createWindowContext(
            reference.pointer,
            _id_createWindowContext as jni.JMethodIDPtr,
            i,
            bundle.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createWindowContext1 = _class.instanceMethodId(
    r"createWindowContext",
    r"(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;",
  );

  static final _createWindowContext1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext1(
    jni.JObject display,
    int i,
    jni.JObject bundle,
  ) {
    return _createWindowContext1(
            reference.pointer,
            _id_createWindowContext1 as jni.JMethodIDPtr,
            display.reference.pointer,
            i,
            bundle.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createContext = _class.instanceMethodId(
    r"createContext",
    r"(Landroid/content/ContextParams;)Landroid/content/Context;",
  );

  static final _createContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createContext(android.content.ContextParams contextParams)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContext(
    jni.JObject contextParams,
  ) {
    return _createContext(
            reference.pointer,
            _id_createContext as jni.JMethodIDPtr,
            contextParams.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createAttributionContext = _class.instanceMethodId(
    r"createAttributionContext",
    r"(Ljava/lang/String;)Landroid/content/Context;",
  );

  static final _createAttributionContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createAttributionContext(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createAttributionContext(
    jni.JString string,
  ) {
    return _createAttributionContext(
            reference.pointer,
            _id_createAttributionContext as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDeviceProtectedStorageContext =
      _class.instanceMethodId(
    r"createDeviceProtectedStorageContext",
    r"()Landroid/content/Context;",
  );

  static final _createDeviceProtectedStorageContext =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public abstract android.content.Context createDeviceProtectedStorageContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(reference.pointer,
            _id_createDeviceProtectedStorageContext as jni.JMethodIDPtr)
        .object(const $ContextType());
  }

  static final _id_getDisplay = _class.instanceMethodId(
    r"getDisplay",
    r"()Landroid/view/Display;",
  );

  static final _getDisplay = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.Display getDisplay()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDisplay() {
    return _getDisplay(reference.pointer, _id_getDisplay as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getDeviceId = _class.instanceMethodId(
    r"getDeviceId",
    r"()I",
  );

  static final _getDeviceId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getDeviceId()
  int getDeviceId() {
    return _getDeviceId(reference.pointer, _id_getDeviceId as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_registerDeviceIdChangeListener = _class.instanceMethodId(
    r"registerDeviceIdChangeListener",
    r"(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V",
  );

  static final _registerDeviceIdChangeListener = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerDeviceIdChangeListener(java.util.concurrent.Executor executor, java.util.function.IntConsumer intConsumer)
  void registerDeviceIdChangeListener(
    Executor executor,
    jni.JObject intConsumer,
  ) {
    _registerDeviceIdChangeListener(
            reference.pointer,
            _id_registerDeviceIdChangeListener as jni.JMethodIDPtr,
            executor.reference.pointer,
            intConsumer.reference.pointer)
        .check();
  }

  static final _id_unregisterDeviceIdChangeListener = _class.instanceMethodId(
    r"unregisterDeviceIdChangeListener",
    r"(Ljava/util/function/IntConsumer;)V",
  );

  static final _unregisterDeviceIdChangeListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterDeviceIdChangeListener(java.util.function.IntConsumer intConsumer)
  void unregisterDeviceIdChangeListener(
    jni.JObject intConsumer,
  ) {
    _unregisterDeviceIdChangeListener(
            reference.pointer,
            _id_unregisterDeviceIdChangeListener as jni.JMethodIDPtr,
            intConsumer.reference.pointer)
        .check();
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r"isRestricted",
    r"()Z",
  );

  static final _isRestricted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isRestricted()
  bool isRestricted() {
    return _isRestricted(
            reference.pointer, _id_isRestricted as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDeviceProtectedStorage = _class.instanceMethodId(
    r"isDeviceProtectedStorage",
    r"()Z",
  );

  static final _isDeviceProtectedStorage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isDeviceProtectedStorage()
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(
            reference.pointer, _id_isDeviceProtectedStorage as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isUiContext = _class.instanceMethodId(
    r"isUiContext",
    r"()Z",
  );

  static final _isUiContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isUiContext()
  bool isUiContext() {
    return _isUiContext(reference.pointer, _id_isUiContext as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $ContextType extends jni.JObjType<Context> {
  const $ContextType();

  @override
  String get signature => r"Landroid/content/Context;";

  @override
  Context fromReference(jni.JReference reference) =>
      Context.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContextType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextType) && other is $ContextType;
  }
}

/// from: android.content.ContentResolver$MimeTypeInfo
class ContentResolver_MimeTypeInfo extends jni.JObject {
  @override
  late final jni.JObjType<ContentResolver_MimeTypeInfo> $type = type;

  ContentResolver_MimeTypeInfo.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/content/ContentResolver$MimeTypeInfo");

  /// The type which includes information such as the signature of this class.
  static const type = $ContentResolver_MimeTypeInfoType();
  static final _id_getIcon = _class.instanceMethodId(
    r"getIcon",
    r"()Landroid/graphics/drawable/Icon;",
  );

  static final _getIcon = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.drawable.Icon getIcon()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getIcon() {
    return _getIcon(reference.pointer, _id_getIcon as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getLabel = _class.instanceMethodId(
    r"getLabel",
    r"()Ljava/lang/CharSequence;",
  );

  static final _getLabel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.CharSequence getLabel()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLabel() {
    return _getLabel(reference.pointer, _id_getLabel as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getContentDescription = _class.instanceMethodId(
    r"getContentDescription",
    r"()Ljava/lang/CharSequence;",
  );

  static final _getContentDescription = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.CharSequence getContentDescription()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentDescription() {
    return _getContentDescription(
            reference.pointer, _id_getContentDescription as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $ContentResolver_MimeTypeInfoType
    extends jni.JObjType<ContentResolver_MimeTypeInfo> {
  const $ContentResolver_MimeTypeInfoType();

  @override
  String get signature => r"Landroid/content/ContentResolver$MimeTypeInfo;";

  @override
  ContentResolver_MimeTypeInfo fromReference(jni.JReference reference) =>
      ContentResolver_MimeTypeInfo.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContentResolver_MimeTypeInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContentResolver_MimeTypeInfoType) &&
        other is $ContentResolver_MimeTypeInfoType;
  }
}

/// from: android.content.ContentResolver
class ContentResolver extends jni.JObject {
  @override
  late final jni.JObjType<ContentResolver> $type = type;

  ContentResolver.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/content/ContentResolver");

  /// The type which includes information such as the signature of this class.
  static const type = $ContentResolverType();
  static final _id_ANY_CURSOR_ITEM_TYPE = _class.staticFieldId(
    r"ANY_CURSOR_ITEM_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ANY_CURSOR_ITEM_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ANY_CURSOR_ITEM_TYPE =>
      _id_ANY_CURSOR_ITEM_TYPE.get(_class, const jni.JStringType());

  static final _id_CURSOR_DIR_BASE_TYPE = _class.staticFieldId(
    r"CURSOR_DIR_BASE_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CURSOR_DIR_BASE_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CURSOR_DIR_BASE_TYPE =>
      _id_CURSOR_DIR_BASE_TYPE.get(_class, const jni.JStringType());

  static final _id_CURSOR_ITEM_BASE_TYPE = _class.staticFieldId(
    r"CURSOR_ITEM_BASE_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CURSOR_ITEM_BASE_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CURSOR_ITEM_BASE_TYPE =>
      _id_CURSOR_ITEM_BASE_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTRA_HONORED_ARGS = _class.staticFieldId(
    r"EXTRA_HONORED_ARGS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_HONORED_ARGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_HONORED_ARGS =>
      _id_EXTRA_HONORED_ARGS.get(_class, const jni.JStringType());

  static final _id_EXTRA_REFRESH_SUPPORTED = _class.staticFieldId(
    r"EXTRA_REFRESH_SUPPORTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_REFRESH_SUPPORTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REFRESH_SUPPORTED =>
      _id_EXTRA_REFRESH_SUPPORTED.get(_class, const jni.JStringType());

  static final _id_EXTRA_SIZE = _class.staticFieldId(
    r"EXTRA_SIZE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SIZE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SIZE =>
      _id_EXTRA_SIZE.get(_class, const jni.JStringType());

  static final _id_EXTRA_TOTAL_COUNT = _class.staticFieldId(
    r"EXTRA_TOTAL_COUNT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_TOTAL_COUNT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TOTAL_COUNT =>
      _id_EXTRA_TOTAL_COUNT.get(_class, const jni.JStringType());

  /// from: static public final int NOTIFY_DELETE
  static const NOTIFY_DELETE = 16;

  /// from: static public final int NOTIFY_INSERT
  static const NOTIFY_INSERT = 4;

  /// from: static public final int NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS
  static const NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS = 2;

  /// from: static public final int NOTIFY_SYNC_TO_NETWORK
  static const NOTIFY_SYNC_TO_NETWORK = 1;

  /// from: static public final int NOTIFY_UPDATE
  static const NOTIFY_UPDATE = 8;
  static final _id_QUERY_ARG_GROUP_COLUMNS = _class.staticFieldId(
    r"QUERY_ARG_GROUP_COLUMNS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_GROUP_COLUMNS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_GROUP_COLUMNS =>
      _id_QUERY_ARG_GROUP_COLUMNS.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_LIMIT = _class.staticFieldId(
    r"QUERY_ARG_LIMIT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_LIMIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_LIMIT =>
      _id_QUERY_ARG_LIMIT.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_OFFSET = _class.staticFieldId(
    r"QUERY_ARG_OFFSET",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_OFFSET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_OFFSET =>
      _id_QUERY_ARG_OFFSET.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_SORT_COLLATION = _class.staticFieldId(
    r"QUERY_ARG_SORT_COLLATION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_SORT_COLLATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_SORT_COLLATION =>
      _id_QUERY_ARG_SORT_COLLATION.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_SORT_COLUMNS = _class.staticFieldId(
    r"QUERY_ARG_SORT_COLUMNS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_SORT_COLUMNS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_SORT_COLUMNS =>
      _id_QUERY_ARG_SORT_COLUMNS.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_SORT_DIRECTION = _class.staticFieldId(
    r"QUERY_ARG_SORT_DIRECTION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_SORT_DIRECTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_SORT_DIRECTION =>
      _id_QUERY_ARG_SORT_DIRECTION.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_SORT_LOCALE = _class.staticFieldId(
    r"QUERY_ARG_SORT_LOCALE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_SORT_LOCALE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_SORT_LOCALE =>
      _id_QUERY_ARG_SORT_LOCALE.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_SQL_GROUP_BY = _class.staticFieldId(
    r"QUERY_ARG_SQL_GROUP_BY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_SQL_GROUP_BY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_SQL_GROUP_BY =>
      _id_QUERY_ARG_SQL_GROUP_BY.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_SQL_HAVING = _class.staticFieldId(
    r"QUERY_ARG_SQL_HAVING",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_SQL_HAVING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_SQL_HAVING =>
      _id_QUERY_ARG_SQL_HAVING.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_SQL_LIMIT = _class.staticFieldId(
    r"QUERY_ARG_SQL_LIMIT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_SQL_LIMIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_SQL_LIMIT =>
      _id_QUERY_ARG_SQL_LIMIT.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_SQL_SELECTION = _class.staticFieldId(
    r"QUERY_ARG_SQL_SELECTION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_SQL_SELECTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_SQL_SELECTION =>
      _id_QUERY_ARG_SQL_SELECTION.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_SQL_SELECTION_ARGS = _class.staticFieldId(
    r"QUERY_ARG_SQL_SELECTION_ARGS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_SQL_SELECTION_ARGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_SQL_SELECTION_ARGS =>
      _id_QUERY_ARG_SQL_SELECTION_ARGS.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_SQL_SORT_ORDER = _class.staticFieldId(
    r"QUERY_ARG_SQL_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_SQL_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_SQL_SORT_ORDER =>
      _id_QUERY_ARG_SQL_SORT_ORDER.get(_class, const jni.JStringType());

  /// from: static public final int QUERY_SORT_DIRECTION_ASCENDING
  static const QUERY_SORT_DIRECTION_ASCENDING = 0;

  /// from: static public final int QUERY_SORT_DIRECTION_DESCENDING
  static const QUERY_SORT_DIRECTION_DESCENDING = 1;
  static final _id_SCHEME_ANDROID_RESOURCE = _class.staticFieldId(
    r"SCHEME_ANDROID_RESOURCE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SCHEME_ANDROID_RESOURCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SCHEME_ANDROID_RESOURCE =>
      _id_SCHEME_ANDROID_RESOURCE.get(_class, const jni.JStringType());

  static final _id_SCHEME_CONTENT = _class.staticFieldId(
    r"SCHEME_CONTENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SCHEME_CONTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SCHEME_CONTENT =>
      _id_SCHEME_CONTENT.get(_class, const jni.JStringType());

  static final _id_SCHEME_FILE = _class.staticFieldId(
    r"SCHEME_FILE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SCHEME_FILE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SCHEME_FILE =>
      _id_SCHEME_FILE.get(_class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_ACCOUNT = _class.staticFieldId(
    r"SYNC_EXTRAS_ACCOUNT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_ACCOUNT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_ACCOUNT =>
      _id_SYNC_EXTRAS_ACCOUNT.get(_class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS = _class.staticFieldId(
    r"SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS =>
      _id_SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS.get(
          _class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_DO_NOT_RETRY = _class.staticFieldId(
    r"SYNC_EXTRAS_DO_NOT_RETRY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_DO_NOT_RETRY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_DO_NOT_RETRY =>
      _id_SYNC_EXTRAS_DO_NOT_RETRY.get(_class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_EXPEDITED = _class.staticFieldId(
    r"SYNC_EXTRAS_EXPEDITED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_EXPEDITED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_EXPEDITED =>
      _id_SYNC_EXTRAS_EXPEDITED.get(_class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_FORCE = _class.staticFieldId(
    r"SYNC_EXTRAS_FORCE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_FORCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_FORCE =>
      _id_SYNC_EXTRAS_FORCE.get(_class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_IGNORE_BACKOFF = _class.staticFieldId(
    r"SYNC_EXTRAS_IGNORE_BACKOFF",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_IGNORE_BACKOFF
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_IGNORE_BACKOFF =>
      _id_SYNC_EXTRAS_IGNORE_BACKOFF.get(_class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_IGNORE_SETTINGS = _class.staticFieldId(
    r"SYNC_EXTRAS_IGNORE_SETTINGS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_IGNORE_SETTINGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_IGNORE_SETTINGS =>
      _id_SYNC_EXTRAS_IGNORE_SETTINGS.get(_class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_INITIALIZE = _class.staticFieldId(
    r"SYNC_EXTRAS_INITIALIZE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_INITIALIZE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_INITIALIZE =>
      _id_SYNC_EXTRAS_INITIALIZE.get(_class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_MANUAL = _class.staticFieldId(
    r"SYNC_EXTRAS_MANUAL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_MANUAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_MANUAL =>
      _id_SYNC_EXTRAS_MANUAL.get(_class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS =
      _class.staticFieldId(
    r"SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS =>
      _id_SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS.get(
          _class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_REQUIRE_CHARGING = _class.staticFieldId(
    r"SYNC_EXTRAS_REQUIRE_CHARGING",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_REQUIRE_CHARGING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_REQUIRE_CHARGING =>
      _id_SYNC_EXTRAS_REQUIRE_CHARGING.get(_class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB = _class.staticFieldId(
    r"SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB =>
      _id_SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB.get(
          _class, const jni.JStringType());

  static final _id_SYNC_EXTRAS_UPLOAD = _class.staticFieldId(
    r"SYNC_EXTRAS_UPLOAD",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYNC_EXTRAS_UPLOAD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYNC_EXTRAS_UPLOAD =>
      _id_SYNC_EXTRAS_UPLOAD.get(_class, const jni.JStringType());

  /// from: static public final int SYNC_OBSERVER_TYPE_ACTIVE
  static const SYNC_OBSERVER_TYPE_ACTIVE = 4;

  /// from: static public final int SYNC_OBSERVER_TYPE_PENDING
  static const SYNC_OBSERVER_TYPE_PENDING = 2;

  /// from: static public final int SYNC_OBSERVER_TYPE_SETTINGS
  static const SYNC_OBSERVER_TYPE_SETTINGS = 1;
  static final _id_new0 = _class.constructorId(
    r"(Landroid/content/Context;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  factory ContentResolver(
    Context context,
  ) {
    return ContentResolver.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_wrap = _class.staticMethodId(
    r"wrap",
    r"(Landroid/content/ContentProvider;)Landroid/content/ContentResolver;",
  );

  static final _wrap = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.ContentResolver wrap(android.content.ContentProvider contentProvider)
  /// The returned object must be released after use, by calling the [release] method.
  static ContentResolver wrap(
    jni.JObject contentProvider,
  ) {
    return _wrap(_class.reference.pointer, _id_wrap as jni.JMethodIDPtr,
            contentProvider.reference.pointer)
        .object(const $ContentResolverType());
  }

  static final _id_wrap1 = _class.staticMethodId(
    r"wrap",
    r"(Landroid/content/ContentProviderClient;)Landroid/content/ContentResolver;",
  );

  static final _wrap1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.ContentResolver wrap(android.content.ContentProviderClient contentProviderClient)
  /// The returned object must be released after use, by calling the [release] method.
  static ContentResolver wrap1(
    jni.JObject contentProviderClient,
  ) {
    return _wrap1(_class.reference.pointer, _id_wrap1 as jni.JMethodIDPtr,
            contentProviderClient.reference.pointer)
        .object(const $ContentResolverType());
  }

  static final _id_getType = _class.instanceMethodId(
    r"getType",
    r"(Landroid/net/Uri;)Ljava/lang/String;",
  );

  static final _getType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getType(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType(
    Uri uri,
  ) {
    return _getType(reference.pointer, _id_getType as jni.JMethodIDPtr,
            uri.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getStreamTypes = _class.instanceMethodId(
    r"getStreamTypes",
    r"(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;",
  );

  static final _getStreamTypes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] getStreamTypes(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getStreamTypes(
    Uri uri,
    jni.JString string,
  ) {
    return _getStreamTypes(
            reference.pointer,
            _id_getStreamTypes as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_query = _class.instanceMethodId(
    r"query",
    r"(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;",
  );

  static final _query = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.database.Cursor query(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Cursor query(
    Uri uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JArray<jni.JString> strings1,
    jni.JString string1,
  ) {
    return _query(
            reference.pointer,
            _id_query as jni.JMethodIDPtr,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            strings1.reference.pointer,
            string1.reference.pointer)
        .object(const $CursorType());
  }

  static final _id_query1 = _class.instanceMethodId(
    r"query",
    r"(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;",
  );

  static final _query1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.database.Cursor query(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be released after use, by calling the [release] method.
  Cursor query1(
    Uri uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JArray<jni.JString> strings1,
    jni.JString string1,
    jni.JObject cancellationSignal,
  ) {
    return _query1(
            reference.pointer,
            _id_query1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            strings1.reference.pointer,
            string1.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const $CursorType());
  }

  static final _id_query2 = _class.instanceMethodId(
    r"query",
    r"(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;",
  );

  static final _query2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.database.Cursor query(android.net.Uri uri, java.lang.String[] strings, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be released after use, by calling the [release] method.
  Cursor query2(
    Uri uri,
    jni.JArray<jni.JString> strings,
    jni.JObject bundle,
    jni.JObject cancellationSignal,
  ) {
    return _query2(
            reference.pointer,
            _id_query2 as jni.JMethodIDPtr,
            uri.reference.pointer,
            strings.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const $CursorType());
  }

  static final _id_canonicalize = _class.instanceMethodId(
    r"canonicalize",
    r"(Landroid/net/Uri;)Landroid/net/Uri;",
  );

  static final _canonicalize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.net.Uri canonicalize(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  Uri canonicalize(
    Uri uri,
  ) {
    return _canonicalize(reference.pointer,
            _id_canonicalize as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const $UriType());
  }

  static final _id_uncanonicalize = _class.instanceMethodId(
    r"uncanonicalize",
    r"(Landroid/net/Uri;)Landroid/net/Uri;",
  );

  static final _uncanonicalize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.net.Uri uncanonicalize(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  Uri uncanonicalize(
    Uri uri,
  ) {
    return _uncanonicalize(reference.pointer,
            _id_uncanonicalize as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const $UriType());
  }

  static final _id_refresh = _class.instanceMethodId(
    r"refresh",
    r"(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z",
  );

  static final _refresh = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean refresh(android.net.Uri uri, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal)
  bool refresh(
    Uri uri,
    jni.JObject bundle,
    jni.JObject cancellationSignal,
  ) {
    return _refresh(
            reference.pointer,
            _id_refresh as jni.JMethodIDPtr,
            uri.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer)
        .boolean;
  }

  static final _id_openInputStream = _class.instanceMethodId(
    r"openInputStream",
    r"(Landroid/net/Uri;)Ljava/io/InputStream;",
  );

  static final _openInputStream = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.io.InputStream openInputStream(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openInputStream(
    Uri uri,
  ) {
    return _openInputStream(reference.pointer,
            _id_openInputStream as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openOutputStream = _class.instanceMethodId(
    r"openOutputStream",
    r"(Landroid/net/Uri;)Ljava/io/OutputStream;",
  );

  static final _openOutputStream = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.io.OutputStream openOutputStream(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOutputStream(
    Uri uri,
  ) {
    return _openOutputStream(reference.pointer,
            _id_openOutputStream as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openOutputStream1 = _class.instanceMethodId(
    r"openOutputStream",
    r"(Landroid/net/Uri;Ljava/lang/String;)Ljava/io/OutputStream;",
  );

  static final _openOutputStream1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final java.io.OutputStream openOutputStream(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOutputStream1(
    Uri uri,
    jni.JString string,
  ) {
    return _openOutputStream1(
            reference.pointer,
            _id_openOutputStream1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openFile = _class.instanceMethodId(
    r"openFile",
    r"(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;",
  );

  static final _openFile = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.ParcelFileDescriptor openFile(android.net.Uri uri, java.lang.String string, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFile(
    Uri uri,
    jni.JString string,
    jni.JObject cancellationSignal,
  ) {
    return _openFile(
            reference.pointer,
            _id_openFile as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openFileDescriptor = _class.instanceMethodId(
    r"openFileDescriptor",
    r"(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;",
  );

  static final _openFileDescriptor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileDescriptor(
    Uri uri,
    jni.JString string,
  ) {
    return _openFileDescriptor(
            reference.pointer,
            _id_openFileDescriptor as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openFileDescriptor1 = _class.instanceMethodId(
    r"openFileDescriptor",
    r"(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;",
  );

  static final _openFileDescriptor1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri uri, java.lang.String string, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileDescriptor1(
    Uri uri,
    jni.JString string,
    jni.JObject cancellationSignal,
  ) {
    return _openFileDescriptor1(
            reference.pointer,
            _id_openFileDescriptor1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openAssetFile = _class.instanceMethodId(
    r"openAssetFile",
    r"(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;",
  );

  static final _openAssetFile = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri uri, java.lang.String string, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openAssetFile(
    Uri uri,
    jni.JString string,
    jni.JObject cancellationSignal,
  ) {
    return _openAssetFile(
            reference.pointer,
            _id_openAssetFile as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openAssetFileDescriptor = _class.instanceMethodId(
    r"openAssetFileDescriptor",
    r"(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;",
  );

  static final _openAssetFileDescriptor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openAssetFileDescriptor(
    Uri uri,
    jni.JString string,
  ) {
    return _openAssetFileDescriptor(
            reference.pointer,
            _id_openAssetFileDescriptor as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openAssetFileDescriptor1 = _class.instanceMethodId(
    r"openAssetFileDescriptor",
    r"(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;",
  );

  static final _openAssetFileDescriptor1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri uri, java.lang.String string, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openAssetFileDescriptor1(
    Uri uri,
    jni.JString string,
    jni.JObject cancellationSignal,
  ) {
    return _openAssetFileDescriptor1(
            reference.pointer,
            _id_openAssetFileDescriptor1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openTypedAssetFile = _class.instanceMethodId(
    r"openTypedAssetFile",
    r"(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;",
  );

  static final _openTypedAssetFile = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri uri, java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openTypedAssetFile(
    Uri uri,
    jni.JString string,
    jni.JObject bundle,
    jni.JObject cancellationSignal,
  ) {
    return _openTypedAssetFile(
            reference.pointer,
            _id_openTypedAssetFile as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openTypedAssetFileDescriptor = _class.instanceMethodId(
    r"openTypedAssetFileDescriptor",
    r"(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;",
  );

  static final _openTypedAssetFileDescriptor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri uri, java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openTypedAssetFileDescriptor(
    Uri uri,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return _openTypedAssetFileDescriptor(
            reference.pointer,
            _id_openTypedAssetFileDescriptor as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openTypedAssetFileDescriptor1 = _class.instanceMethodId(
    r"openTypedAssetFileDescriptor",
    r"(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;",
  );

  static final _openTypedAssetFileDescriptor1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri uri, java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openTypedAssetFileDescriptor1(
    Uri uri,
    jni.JString string,
    jni.JObject bundle,
    jni.JObject cancellationSignal,
  ) {
    return _openTypedAssetFileDescriptor1(
            reference.pointer,
            _id_openTypedAssetFileDescriptor1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_insert = _class.instanceMethodId(
    r"insert",
    r"(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;",
  );

  static final _insert = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.net.Uri insert(android.net.Uri uri, android.content.ContentValues contentValues)
  /// The returned object must be released after use, by calling the [release] method.
  Uri insert(
    Uri uri,
    ContentValues contentValues,
  ) {
    return _insert(reference.pointer, _id_insert as jni.JMethodIDPtr,
            uri.reference.pointer, contentValues.reference.pointer)
        .object(const $UriType());
  }

  static final _id_insert1 = _class.instanceMethodId(
    r"insert",
    r"(Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)Landroid/net/Uri;",
  );

  static final _insert1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.net.Uri insert(android.net.Uri uri, android.content.ContentValues contentValues, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Uri insert1(
    Uri uri,
    ContentValues contentValues,
    jni.JObject bundle,
  ) {
    return _insert1(
            reference.pointer,
            _id_insert1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            contentValues.reference.pointer,
            bundle.reference.pointer)
        .object(const $UriType());
  }

  static final _id_applyBatch = _class.instanceMethodId(
    r"applyBatch",
    r"(Ljava/lang/String;Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;",
  );

  static final _applyBatch = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object[] applyBatch(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> applyBatch(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _applyBatch(reference.pointer, _id_applyBatch as jni.JMethodIDPtr,
            string.reference.pointer, arrayList.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_bulkInsert = _class.instanceMethodId(
    r"bulkInsert",
    r"(Landroid/net/Uri;[Landroid/content/ContentValues;)I",
  );

  static final _bulkInsert = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final int bulkInsert(android.net.Uri uri, android.content.ContentValues[] contentValuess)
  int bulkInsert(
    Uri uri,
    jni.JArray<ContentValues> contentValuess,
  ) {
    return _bulkInsert(reference.pointer, _id_bulkInsert as jni.JMethodIDPtr,
            uri.reference.pointer, contentValuess.reference.pointer)
        .integer;
  }

  static final _id_delete = _class.instanceMethodId(
    r"delete",
    r"(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I",
  );

  static final _delete = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final int delete(android.net.Uri uri, java.lang.String string, java.lang.String[] strings)
  int delete(
    Uri uri,
    jni.JString string,
    jni.JArray<jni.JString> strings,
  ) {
    return _delete(
            reference.pointer,
            _id_delete as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            strings.reference.pointer)
        .integer;
  }

  static final _id_delete1 = _class.instanceMethodId(
    r"delete",
    r"(Landroid/net/Uri;Landroid/os/Bundle;)I",
  );

  static final _delete1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final int delete(android.net.Uri uri, android.os.Bundle bundle)
  int delete1(
    Uri uri,
    jni.JObject bundle,
  ) {
    return _delete1(reference.pointer, _id_delete1 as jni.JMethodIDPtr,
            uri.reference.pointer, bundle.reference.pointer)
        .integer;
  }

  static final _id_update = _class.instanceMethodId(
    r"update",
    r"(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I",
  );

  static final _update = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final int update(android.net.Uri uri, android.content.ContentValues contentValues, java.lang.String string, java.lang.String[] strings)
  int update(
    Uri uri,
    ContentValues contentValues,
    jni.JString string,
    jni.JArray<jni.JString> strings,
  ) {
    return _update(
            reference.pointer,
            _id_update as jni.JMethodIDPtr,
            uri.reference.pointer,
            contentValues.reference.pointer,
            string.reference.pointer,
            strings.reference.pointer)
        .integer;
  }

  static final _id_update1 = _class.instanceMethodId(
    r"update",
    r"(Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)I",
  );

  static final _update1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final int update(android.net.Uri uri, android.content.ContentValues contentValues, android.os.Bundle bundle)
  int update1(
    Uri uri,
    ContentValues contentValues,
    jni.JObject bundle,
  ) {
    return _update1(
            reference.pointer,
            _id_update1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            contentValues.reference.pointer,
            bundle.reference.pointer)
        .integer;
  }

  static final _id_call = _class.instanceMethodId(
    r"call",
    r"(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;",
  );

  static final _call = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.Bundle call(android.net.Uri uri, java.lang.String string, java.lang.String string1, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject call(
    Uri uri,
    jni.JString string,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    return _call(
            reference.pointer,
            _id_call as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            bundle.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_call1 = _class.instanceMethodId(
    r"call",
    r"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;",
  );

  static final _call1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.Bundle call(java.lang.String string, java.lang.String string1, java.lang.String string2, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject call1(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    jni.JObject bundle,
  ) {
    return _call1(
            reference.pointer,
            _id_call1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            bundle.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_acquireContentProviderClient = _class.instanceMethodId(
    r"acquireContentProviderClient",
    r"(Landroid/net/Uri;)Landroid/content/ContentProviderClient;",
  );

  static final _acquireContentProviderClient = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject acquireContentProviderClient(
    Uri uri,
  ) {
    return _acquireContentProviderClient(
            reference.pointer,
            _id_acquireContentProviderClient as jni.JMethodIDPtr,
            uri.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_acquireContentProviderClient1 = _class.instanceMethodId(
    r"acquireContentProviderClient",
    r"(Ljava/lang/String;)Landroid/content/ContentProviderClient;",
  );

  static final _acquireContentProviderClient1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.ContentProviderClient acquireContentProviderClient(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject acquireContentProviderClient1(
    jni.JString string,
  ) {
    return _acquireContentProviderClient1(
            reference.pointer,
            _id_acquireContentProviderClient1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_acquireUnstableContentProviderClient =
      _class.instanceMethodId(
    r"acquireUnstableContentProviderClient",
    r"(Landroid/net/Uri;)Landroid/content/ContentProviderClient;",
  );

  static final _acquireUnstableContentProviderClient =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject acquireUnstableContentProviderClient(
    Uri uri,
  ) {
    return _acquireUnstableContentProviderClient(
            reference.pointer,
            _id_acquireUnstableContentProviderClient as jni.JMethodIDPtr,
            uri.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_acquireUnstableContentProviderClient1 =
      _class.instanceMethodId(
    r"acquireUnstableContentProviderClient",
    r"(Ljava/lang/String;)Landroid/content/ContentProviderClient;",
  );

  static final _acquireUnstableContentProviderClient1 =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject acquireUnstableContentProviderClient1(
    jni.JString string,
  ) {
    return _acquireUnstableContentProviderClient1(
            reference.pointer,
            _id_acquireUnstableContentProviderClient1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_registerContentObserver = _class.instanceMethodId(
    r"registerContentObserver",
    r"(Landroid/net/Uri;ZLandroid/database/ContentObserver;)V",
  );

  static final _registerContentObserver = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void registerContentObserver(android.net.Uri uri, boolean z, android.database.ContentObserver contentObserver)
  void registerContentObserver(
    Uri uri,
    bool z,
    jni.JObject contentObserver,
  ) {
    _registerContentObserver(
            reference.pointer,
            _id_registerContentObserver as jni.JMethodIDPtr,
            uri.reference.pointer,
            z ? 1 : 0,
            contentObserver.reference.pointer)
        .check();
  }

  static final _id_unregisterContentObserver = _class.instanceMethodId(
    r"unregisterContentObserver",
    r"(Landroid/database/ContentObserver;)V",
  );

  static final _unregisterContentObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void unregisterContentObserver(android.database.ContentObserver contentObserver)
  void unregisterContentObserver(
    jni.JObject contentObserver,
  ) {
    _unregisterContentObserver(
            reference.pointer,
            _id_unregisterContentObserver as jni.JMethodIDPtr,
            contentObserver.reference.pointer)
        .check();
  }

  static final _id_notifyChange = _class.instanceMethodId(
    r"notifyChange",
    r"(Landroid/net/Uri;Landroid/database/ContentObserver;)V",
  );

  static final _notifyChange = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void notifyChange(android.net.Uri uri, android.database.ContentObserver contentObserver)
  void notifyChange(
    Uri uri,
    jni.JObject contentObserver,
  ) {
    _notifyChange(reference.pointer, _id_notifyChange as jni.JMethodIDPtr,
            uri.reference.pointer, contentObserver.reference.pointer)
        .check();
  }

  static final _id_notifyChange1 = _class.instanceMethodId(
    r"notifyChange",
    r"(Landroid/net/Uri;Landroid/database/ContentObserver;Z)V",
  );

  static final _notifyChange1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void notifyChange(android.net.Uri uri, android.database.ContentObserver contentObserver, boolean z)
  void notifyChange1(
    Uri uri,
    jni.JObject contentObserver,
    bool z,
  ) {
    _notifyChange1(reference.pointer, _id_notifyChange1 as jni.JMethodIDPtr,
            uri.reference.pointer, contentObserver.reference.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_notifyChange2 = _class.instanceMethodId(
    r"notifyChange",
    r"(Landroid/net/Uri;Landroid/database/ContentObserver;I)V",
  );

  static final _notifyChange2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void notifyChange(android.net.Uri uri, android.database.ContentObserver contentObserver, int i)
  void notifyChange2(
    Uri uri,
    jni.JObject contentObserver,
    int i,
  ) {
    _notifyChange2(reference.pointer, _id_notifyChange2 as jni.JMethodIDPtr,
            uri.reference.pointer, contentObserver.reference.pointer, i)
        .check();
  }

  static final _id_notifyChange3 = _class.instanceMethodId(
    r"notifyChange",
    r"(Ljava/util/Collection;Landroid/database/ContentObserver;I)V",
  );

  static final _notifyChange3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void notifyChange(java.util.Collection collection, android.database.ContentObserver contentObserver, int i)
  void notifyChange3(
    jni.JObject collection,
    jni.JObject contentObserver,
    int i,
  ) {
    _notifyChange3(reference.pointer, _id_notifyChange3 as jni.JMethodIDPtr,
            collection.reference.pointer, contentObserver.reference.pointer, i)
        .check();
  }

  static final _id_takePersistableUriPermission = _class.instanceMethodId(
    r"takePersistableUriPermission",
    r"(Landroid/net/Uri;I)V",
  );

  static final _takePersistableUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void takePersistableUriPermission(android.net.Uri uri, int i)
  void takePersistableUriPermission(
    Uri uri,
    int i,
  ) {
    _takePersistableUriPermission(
            reference.pointer,
            _id_takePersistableUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_releasePersistableUriPermission = _class.instanceMethodId(
    r"releasePersistableUriPermission",
    r"(Landroid/net/Uri;I)V",
  );

  static final _releasePersistableUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void releasePersistableUriPermission(android.net.Uri uri, int i)
  void releasePersistableUriPermission(
    Uri uri,
    int i,
  ) {
    _releasePersistableUriPermission(
            reference.pointer,
            _id_releasePersistableUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_getPersistedUriPermissions = _class.instanceMethodId(
    r"getPersistedUriPermissions",
    r"()Ljava/util/List;",
  );

  static final _getPersistedUriPermissions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.List getPersistedUriPermissions()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getPersistedUriPermissions() {
    return _getPersistedUriPermissions(reference.pointer,
            _id_getPersistedUriPermissions as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getOutgoingPersistedUriPermissions = _class.instanceMethodId(
    r"getOutgoingPersistedUriPermissions",
    r"()Ljava/util/List;",
  );

  static final _getOutgoingPersistedUriPermissions =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public java.util.List getOutgoingPersistedUriPermissions()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getOutgoingPersistedUriPermissions() {
    return _getOutgoingPersistedUriPermissions(reference.pointer,
            _id_getOutgoingPersistedUriPermissions as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_startSync = _class.instanceMethodId(
    r"startSync",
    r"(Landroid/net/Uri;Landroid/os/Bundle;)V",
  );

  static final _startSync = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startSync(android.net.Uri uri, android.os.Bundle bundle)
  void startSync(
    Uri uri,
    jni.JObject bundle,
  ) {
    _startSync(reference.pointer, _id_startSync as jni.JMethodIDPtr,
            uri.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_requestSync = _class.staticMethodId(
    r"requestSync",
    r"(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _requestSync = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void requestSync(android.accounts.Account account, java.lang.String string, android.os.Bundle bundle)
  static void requestSync(
    jni.JObject account,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _requestSync(
            _class.reference.pointer,
            _id_requestSync as jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_requestSync1 = _class.staticMethodId(
    r"requestSync",
    r"(Landroid/content/SyncRequest;)V",
  );

  static final _requestSync1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void requestSync(android.content.SyncRequest syncRequest)
  static void requestSync1(
    jni.JObject syncRequest,
  ) {
    _requestSync1(_class.reference.pointer,
            _id_requestSync1 as jni.JMethodIDPtr, syncRequest.reference.pointer)
        .check();
  }

  static final _id_validateSyncExtrasBundle = _class.staticMethodId(
    r"validateSyncExtrasBundle",
    r"(Landroid/os/Bundle;)V",
  );

  static final _validateSyncExtrasBundle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void validateSyncExtrasBundle(android.os.Bundle bundle)
  static void validateSyncExtrasBundle(
    jni.JObject bundle,
  ) {
    _validateSyncExtrasBundle(
            _class.reference.pointer,
            _id_validateSyncExtrasBundle as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_cancelSync = _class.instanceMethodId(
    r"cancelSync",
    r"(Landroid/net/Uri;)V",
  );

  static final _cancelSync = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void cancelSync(android.net.Uri uri)
  void cancelSync(
    Uri uri,
  ) {
    _cancelSync(reference.pointer, _id_cancelSync as jni.JMethodIDPtr,
            uri.reference.pointer)
        .check();
  }

  static final _id_cancelSync1 = _class.staticMethodId(
    r"cancelSync",
    r"(Landroid/accounts/Account;Ljava/lang/String;)V",
  );

  static final _cancelSync1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void cancelSync(android.accounts.Account account, java.lang.String string)
  static void cancelSync1(
    jni.JObject account,
    jni.JString string,
  ) {
    _cancelSync1(_class.reference.pointer, _id_cancelSync1 as jni.JMethodIDPtr,
            account.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_getSyncAdapterTypes = _class.staticMethodId(
    r"getSyncAdapterTypes",
    r"()[Landroid/content/SyncAdapterType;",
  );

  static final _getSyncAdapterTypes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public android.content.SyncAdapterType[] getSyncAdapterTypes()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.JObject> getSyncAdapterTypes() {
    return _getSyncAdapterTypes(_class.reference.pointer,
            _id_getSyncAdapterTypes as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getSyncAutomatically = _class.staticMethodId(
    r"getSyncAutomatically",
    r"(Landroid/accounts/Account;Ljava/lang/String;)Z",
  );

  static final _getSyncAutomatically = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean getSyncAutomatically(android.accounts.Account account, java.lang.String string)
  static bool getSyncAutomatically(
    jni.JObject account,
    jni.JString string,
  ) {
    return _getSyncAutomatically(
            _class.reference.pointer,
            _id_getSyncAutomatically as jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_setSyncAutomatically = _class.staticMethodId(
    r"setSyncAutomatically",
    r"(Landroid/accounts/Account;Ljava/lang/String;Z)V",
  );

  static final _setSyncAutomatically = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public void setSyncAutomatically(android.accounts.Account account, java.lang.String string, boolean z)
  static void setSyncAutomatically(
    jni.JObject account,
    jni.JString string,
    bool z,
  ) {
    _setSyncAutomatically(
            _class.reference.pointer,
            _id_setSyncAutomatically as jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_addPeriodicSync = _class.staticMethodId(
    r"addPeriodicSync",
    r"(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V",
  );

  static final _addPeriodicSync = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: static public void addPeriodicSync(android.accounts.Account account, java.lang.String string, android.os.Bundle bundle, long j)
  static void addPeriodicSync(
    jni.JObject account,
    jni.JString string,
    jni.JObject bundle,
    int j,
  ) {
    _addPeriodicSync(
            _class.reference.pointer,
            _id_addPeriodicSync as jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer,
            j)
        .check();
  }

  static final _id_removePeriodicSync = _class.staticMethodId(
    r"removePeriodicSync",
    r"(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _removePeriodicSync = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void removePeriodicSync(android.accounts.Account account, java.lang.String string, android.os.Bundle bundle)
  static void removePeriodicSync(
    jni.JObject account,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _removePeriodicSync(
            _class.reference.pointer,
            _id_removePeriodicSync as jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_cancelSync2 = _class.staticMethodId(
    r"cancelSync",
    r"(Landroid/content/SyncRequest;)V",
  );

  static final _cancelSync2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void cancelSync(android.content.SyncRequest syncRequest)
  static void cancelSync2(
    jni.JObject syncRequest,
  ) {
    _cancelSync2(_class.reference.pointer, _id_cancelSync2 as jni.JMethodIDPtr,
            syncRequest.reference.pointer)
        .check();
  }

  static final _id_getPeriodicSyncs = _class.staticMethodId(
    r"getPeriodicSyncs",
    r"(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;",
  );

  static final _getPeriodicSyncs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List getPeriodicSyncs(android.accounts.Account account, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JList<jni.JObject> getPeriodicSyncs(
    jni.JObject account,
    jni.JString string,
  ) {
    return _getPeriodicSyncs(
            _class.reference.pointer,
            _id_getPeriodicSyncs as jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getIsSyncable = _class.staticMethodId(
    r"getIsSyncable",
    r"(Landroid/accounts/Account;Ljava/lang/String;)I",
  );

  static final _getIsSyncable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public int getIsSyncable(android.accounts.Account account, java.lang.String string)
  static int getIsSyncable(
    jni.JObject account,
    jni.JString string,
  ) {
    return _getIsSyncable(
            _class.reference.pointer,
            _id_getIsSyncable as jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .integer;
  }

  static final _id_setIsSyncable = _class.staticMethodId(
    r"setIsSyncable",
    r"(Landroid/accounts/Account;Ljava/lang/String;I)V",
  );

  static final _setIsSyncable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public void setIsSyncable(android.accounts.Account account, java.lang.String string, int i)
  static void setIsSyncable(
    jni.JObject account,
    jni.JString string,
    int i,
  ) {
    _setIsSyncable(
            _class.reference.pointer,
            _id_setIsSyncable as jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer,
            i)
        .check();
  }

  static final _id_getMasterSyncAutomatically = _class.staticMethodId(
    r"getMasterSyncAutomatically",
    r"()Z",
  );

  static final _getMasterSyncAutomatically = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public boolean getMasterSyncAutomatically()
  static bool getMasterSyncAutomatically() {
    return _getMasterSyncAutomatically(_class.reference.pointer,
            _id_getMasterSyncAutomatically as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setMasterSyncAutomatically = _class.staticMethodId(
    r"setMasterSyncAutomatically",
    r"(Z)V",
  );

  static final _setMasterSyncAutomatically = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public void setMasterSyncAutomatically(boolean z)
  static void setMasterSyncAutomatically(
    bool z,
  ) {
    _setMasterSyncAutomatically(_class.reference.pointer,
            _id_setMasterSyncAutomatically as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isSyncActive = _class.staticMethodId(
    r"isSyncActive",
    r"(Landroid/accounts/Account;Ljava/lang/String;)Z",
  );

  static final _isSyncActive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isSyncActive(android.accounts.Account account, java.lang.String string)
  static bool isSyncActive(
    jni.JObject account,
    jni.JString string,
  ) {
    return _isSyncActive(
            _class.reference.pointer,
            _id_isSyncActive as jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getCurrentSync = _class.staticMethodId(
    r"getCurrentSync",
    r"()Landroid/content/SyncInfo;",
  );

  static final _getCurrentSync = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public android.content.SyncInfo getCurrentSync()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getCurrentSync() {
    return _getCurrentSync(
            _class.reference.pointer, _id_getCurrentSync as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getCurrentSyncs = _class.staticMethodId(
    r"getCurrentSyncs",
    r"()Ljava/util/List;",
  );

  static final _getCurrentSyncs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.List getCurrentSyncs()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JList<jni.JObject> getCurrentSyncs() {
    return _getCurrentSyncs(
            _class.reference.pointer, _id_getCurrentSyncs as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_isSyncPending = _class.staticMethodId(
    r"isSyncPending",
    r"(Landroid/accounts/Account;Ljava/lang/String;)Z",
  );

  static final _isSyncPending = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isSyncPending(android.accounts.Account account, java.lang.String string)
  static bool isSyncPending(
    jni.JObject account,
    jni.JString string,
  ) {
    return _isSyncPending(
            _class.reference.pointer,
            _id_isSyncPending as jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_addStatusChangeListener = _class.staticMethodId(
    r"addStatusChangeListener",
    r"(ILandroid/content/SyncStatusObserver;)Ljava/lang/Object;",
  );

  static final _addStatusChangeListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.Object addStatusChangeListener(int i, android.content.SyncStatusObserver syncStatusObserver)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject addStatusChangeListener(
    int i,
    jni.JObject syncStatusObserver,
  ) {
    return _addStatusChangeListener(
            _class.reference.pointer,
            _id_addStatusChangeListener as jni.JMethodIDPtr,
            i,
            syncStatusObserver.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_removeStatusChangeListener = _class.staticMethodId(
    r"removeStatusChangeListener",
    r"(Ljava/lang/Object;)V",
  );

  static final _removeStatusChangeListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void removeStatusChangeListener(java.lang.Object object)
  static void removeStatusChangeListener(
    jni.JObject object,
  ) {
    _removeStatusChangeListener(
            _class.reference.pointer,
            _id_removeStatusChangeListener as jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  static final _id_getTypeInfo = _class.instanceMethodId(
    r"getTypeInfo",
    r"(Ljava/lang/String;)Landroid/content/ContentResolver$MimeTypeInfo;",
  );

  static final _getTypeInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.ContentResolver$MimeTypeInfo getTypeInfo(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  ContentResolver_MimeTypeInfo getTypeInfo(
    jni.JString string,
  ) {
    return _getTypeInfo(reference.pointer, _id_getTypeInfo as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ContentResolver_MimeTypeInfoType());
  }

  static final _id_loadThumbnail = _class.instanceMethodId(
    r"loadThumbnail",
    r"(Landroid/net/Uri;Landroid/util/Size;Landroid/os/CancellationSignal;)Landroid/graphics/Bitmap;",
  );

  static final _loadThumbnail = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Bitmap loadThumbnail(android.net.Uri uri, android.util.Size size, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject loadThumbnail(
    Uri uri,
    jni.JObject size,
    jni.JObject cancellationSignal,
  ) {
    return _loadThumbnail(
            reference.pointer,
            _id_loadThumbnail as jni.JMethodIDPtr,
            uri.reference.pointer,
            size.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $ContentResolverType extends jni.JObjType<ContentResolver> {
  const $ContentResolverType();

  @override
  String get signature => r"Landroid/content/ContentResolver;";

  @override
  ContentResolver fromReference(jni.JReference reference) =>
      ContentResolver.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContentResolverType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContentResolverType) &&
        other is $ContentResolverType;
  }
}

/// from: android.content.ContentValues
class ContentValues extends jni.JObject {
  @override
  late final jni.JObjType<ContentValues> $type = type;

  ContentValues.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/content/ContentValues");

  /// The type which includes information such as the signature of this class.
  static const type = $ContentValuesType();
  static final _id_CREATOR = _class.staticFieldId(
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_TAG = _class.staticFieldId(
    r"TAG",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TAG
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TAG => _id_TAG.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ContentValues() {
    return ContentValues.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(I)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void <init>(int i)
  /// The returned object must be released after use, by calling the [release] method.
  factory ContentValues.new1(
    int i,
  ) {
    return ContentValues.fromReference(
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr, i)
            .reference);
  }

  static final _id_new2 = _class.constructorId(
    r"(Landroid/content/ContentValues;)V",
  );

  static final _new2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.ContentValues contentValues)
  /// The returned object must be released after use, by calling the [release] method.
  factory ContentValues.new2(
    ContentValues contentValues,
  ) {
    return ContentValues.fromReference(_new2(_class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr, contentValues.reference.pointer)
        .reference);
  }

  static final _id_equals = _class.instanceMethodId(
    r"equals",
    r"(Ljava/lang/Object;)Z",
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r"hashCode",
    r"()I",
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_put = _class.instanceMethodId(
    r"put",
    r"(Ljava/lang/String;Ljava/lang/String;)V",
  );

  static final _put = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.String string1)
  void put(
    jni.JString string,
    jni.JString string1,
  ) {
    _put(reference.pointer, _id_put as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_putAll = _class.instanceMethodId(
    r"putAll",
    r"(Landroid/content/ContentValues;)V",
  );

  static final _putAll = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putAll(android.content.ContentValues contentValues)
  void putAll(
    ContentValues contentValues,
  ) {
    _putAll(reference.pointer, _id_putAll as jni.JMethodIDPtr,
            contentValues.reference.pointer)
        .check();
  }

  static final _id_put1 = _class.instanceMethodId(
    r"put",
    r"(Ljava/lang/String;Ljava/lang/Byte;)V",
  );

  static final _put1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Byte byte)
  void put1(
    jni.JString string,
    jni.JByte byte,
  ) {
    _put1(reference.pointer, _id_put1 as jni.JMethodIDPtr,
            string.reference.pointer, byte.reference.pointer)
        .check();
  }

  static final _id_put2 = _class.instanceMethodId(
    r"put",
    r"(Ljava/lang/String;Ljava/lang/Short;)V",
  );

  static final _put2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Short short)
  void put2(
    jni.JString string,
    jni.JShort short,
  ) {
    _put2(reference.pointer, _id_put2 as jni.JMethodIDPtr,
            string.reference.pointer, short.reference.pointer)
        .check();
  }

  static final _id_put3 = _class.instanceMethodId(
    r"put",
    r"(Ljava/lang/String;Ljava/lang/Integer;)V",
  );

  static final _put3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Integer integer)
  void put3(
    jni.JString string,
    jni.JInteger integer,
  ) {
    _put3(reference.pointer, _id_put3 as jni.JMethodIDPtr,
            string.reference.pointer, integer.reference.pointer)
        .check();
  }

  static final _id_put4 = _class.instanceMethodId(
    r"put",
    r"(Ljava/lang/String;Ljava/lang/Long;)V",
  );

  static final _put4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Long long)
  void put4(
    jni.JString string,
    jni.JLong long,
  ) {
    _put4(reference.pointer, _id_put4 as jni.JMethodIDPtr,
            string.reference.pointer, long.reference.pointer)
        .check();
  }

  static final _id_put5 = _class.instanceMethodId(
    r"put",
    r"(Ljava/lang/String;Ljava/lang/Float;)V",
  );

  static final _put5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Float float)
  void put5(
    jni.JString string,
    jni.JFloat float,
  ) {
    _put5(reference.pointer, _id_put5 as jni.JMethodIDPtr,
            string.reference.pointer, float.reference.pointer)
        .check();
  }

  static final _id_put6 = _class.instanceMethodId(
    r"put",
    r"(Ljava/lang/String;Ljava/lang/Double;)V",
  );

  static final _put6 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Double double)
  void put6(
    jni.JString string,
    jni.JDouble double,
  ) {
    _put6(reference.pointer, _id_put6 as jni.JMethodIDPtr,
            string.reference.pointer, double.reference.pointer)
        .check();
  }

  static final _id_put7 = _class.instanceMethodId(
    r"put",
    r"(Ljava/lang/String;Ljava/lang/Boolean;)V",
  );

  static final _put7 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, java.lang.Boolean boolean)
  void put7(
    jni.JString string,
    jni.JBoolean boolean,
  ) {
    _put7(reference.pointer, _id_put7 as jni.JMethodIDPtr,
            string.reference.pointer, boolean.reference.pointer)
        .check();
  }

  static final _id_put8 = _class.instanceMethodId(
    r"put",
    r"(Ljava/lang/String;[B)V",
  );

  static final _put8 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void put(java.lang.String string, byte[] bs)
  void put8(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    _put8(reference.pointer, _id_put8 as jni.JMethodIDPtr,
            string.reference.pointer, bs.reference.pointer)
        .check();
  }

  static final _id_putNull = _class.instanceMethodId(
    r"putNull",
    r"(Ljava/lang/String;)V",
  );

  static final _putNull = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putNull(java.lang.String string)
  void putNull(
    jni.JString string,
  ) {
    _putNull(reference.pointer, _id_putNull as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_size = _class.instanceMethodId(
    r"size",
    r"()I",
  );

  static final _size = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int size()
  int size() {
    return _size(reference.pointer, _id_size as jni.JMethodIDPtr).integer;
  }

  static final _id_isEmpty = _class.instanceMethodId(
    r"isEmpty",
    r"()Z",
  );

  static final _isEmpty = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isEmpty()
  bool isEmpty() {
    return _isEmpty(reference.pointer, _id_isEmpty as jni.JMethodIDPtr).boolean;
  }

  static final _id_remove = _class.instanceMethodId(
    r"remove",
    r"(Ljava/lang/String;)V",
  );

  static final _remove = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void remove(java.lang.String string)
  void remove(
    jni.JString string,
  ) {
    _remove(reference.pointer, _id_remove as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_clear = _class.instanceMethodId(
    r"clear",
    r"()V",
  );

  static final _clear = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void clear()
  void clear() {
    _clear(reference.pointer, _id_clear as jni.JMethodIDPtr).check();
  }

  static final _id_containsKey = _class.instanceMethodId(
    r"containsKey",
    r"(Ljava/lang/String;)Z",
  );

  static final _containsKey = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean containsKey(java.lang.String string)
  bool containsKey(
    jni.JString string,
  ) {
    return _containsKey(reference.pointer, _id_containsKey as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_get0 = _class.instanceMethodId(
    r"get",
    r"(Ljava/lang/String;)Ljava/lang/Object;",
  );

  static final _get0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object get(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get0(
    jni.JString string,
  ) {
    return _get0(reference.pointer, _id_get0 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getAsString = _class.instanceMethodId(
    r"getAsString",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _getAsString = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAsString(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAsString(
    jni.JString string,
  ) {
    return _getAsString(reference.pointer, _id_getAsString as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getAsLong = _class.instanceMethodId(
    r"getAsLong",
    r"(Ljava/lang/String;)Ljava/lang/Long;",
  );

  static final _getAsLong = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Long getAsLong(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JLong getAsLong(
    jni.JString string,
  ) {
    return _getAsLong(reference.pointer, _id_getAsLong as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JLongType());
  }

  static final _id_getAsInteger = _class.instanceMethodId(
    r"getAsInteger",
    r"(Ljava/lang/String;)Ljava/lang/Integer;",
  );

  static final _getAsInteger = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Integer getAsInteger(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger getAsInteger(
    jni.JString string,
  ) {
    return _getAsInteger(reference.pointer,
            _id_getAsInteger as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JIntegerType());
  }

  static final _id_getAsShort = _class.instanceMethodId(
    r"getAsShort",
    r"(Ljava/lang/String;)Ljava/lang/Short;",
  );

  static final _getAsShort = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Short getAsShort(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JShort getAsShort(
    jni.JString string,
  ) {
    return _getAsShort(reference.pointer, _id_getAsShort as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JShortType());
  }

  static final _id_getAsByte = _class.instanceMethodId(
    r"getAsByte",
    r"(Ljava/lang/String;)Ljava/lang/Byte;",
  );

  static final _getAsByte = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Byte getAsByte(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JByte getAsByte(
    jni.JString string,
  ) {
    return _getAsByte(reference.pointer, _id_getAsByte as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JByteType());
  }

  static final _id_getAsDouble = _class.instanceMethodId(
    r"getAsDouble",
    r"(Ljava/lang/String;)Ljava/lang/Double;",
  );

  static final _getAsDouble = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Double getAsDouble(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JDouble getAsDouble(
    jni.JString string,
  ) {
    return _getAsDouble(reference.pointer, _id_getAsDouble as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JDoubleType());
  }

  static final _id_getAsFloat = _class.instanceMethodId(
    r"getAsFloat",
    r"(Ljava/lang/String;)Ljava/lang/Float;",
  );

  static final _getAsFloat = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Float getAsFloat(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JFloat getAsFloat(
    jni.JString string,
  ) {
    return _getAsFloat(reference.pointer, _id_getAsFloat as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JFloatType());
  }

  static final _id_getAsBoolean = _class.instanceMethodId(
    r"getAsBoolean",
    r"(Ljava/lang/String;)Ljava/lang/Boolean;",
  );

  static final _getAsBoolean = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Boolean getAsBoolean(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getAsBoolean(
    jni.JString string,
  ) {
    return _getAsBoolean(reference.pointer,
            _id_getAsBoolean as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JBooleanType());
  }

  static final _id_getAsByteArray = _class.instanceMethodId(
    r"getAsByteArray",
    r"(Ljava/lang/String;)[B",
  );

  static final _getAsByteArray = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] getAsByteArray(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getAsByteArray(
    jni.JString string,
  ) {
    return _getAsByteArray(reference.pointer,
            _id_getAsByteArray as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_valueSet = _class.instanceMethodId(
    r"valueSet",
    r"()Ljava/util/Set;",
  );

  static final _valueSet = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set valueSet()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JObject> valueSet() {
    return _valueSet(reference.pointer, _id_valueSet as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JObjectType()));
  }

  static final _id_keySet = _class.instanceMethodId(
    r"keySet",
    r"()Ljava/util/Set;",
  );

  static final _keySet = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set keySet()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> keySet() {
    return _keySet(reference.pointer, _id_keySet as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_describeContents = _class.instanceMethodId(
    r"describeContents",
    r"()I",
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r"writeToParcel",
    r"(Landroid/os/Parcel;I)V",
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $ContentValuesType extends jni.JObjType<ContentValues> {
  const $ContentValuesType();

  @override
  String get signature => r"Landroid/content/ContentValues;";

  @override
  ContentValues fromReference(jni.JReference reference) =>
      ContentValues.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContentValuesType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContentValuesType) &&
        other is $ContentValuesType;
  }
}

/// from: android.database.Cursor
class Cursor extends jni.JObject {
  @override
  late final jni.JObjType<Cursor> $type = type;

  Cursor.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/database/Cursor");

  /// The type which includes information such as the signature of this class.
  static const type = $CursorType();

  /// from: static public final int FIELD_TYPE_BLOB
  static const FIELD_TYPE_BLOB = 4;

  /// from: static public final int FIELD_TYPE_FLOAT
  static const FIELD_TYPE_FLOAT = 2;

  /// from: static public final int FIELD_TYPE_INTEGER
  static const FIELD_TYPE_INTEGER = 1;

  /// from: static public final int FIELD_TYPE_NULL
  static const FIELD_TYPE_NULL = 0;

  /// from: static public final int FIELD_TYPE_STRING
  static const FIELD_TYPE_STRING = 3;
  static final _id_getCount = _class.instanceMethodId(
    r"getCount",
    r"()I",
  );

  static final _getCount = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getCount()
  int getCount() {
    return _getCount(reference.pointer, _id_getCount as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPosition = _class.instanceMethodId(
    r"getPosition",
    r"()I",
  );

  static final _getPosition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getPosition()
  int getPosition() {
    return _getPosition(reference.pointer, _id_getPosition as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_move = _class.instanceMethodId(
    r"move",
    r"(I)Z",
  );

  static final _move = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract boolean move(int i)
  bool move(
    int i,
  ) {
    return _move(reference.pointer, _id_move as jni.JMethodIDPtr, i).boolean;
  }

  static final _id_moveToPosition = _class.instanceMethodId(
    r"moveToPosition",
    r"(I)Z",
  );

  static final _moveToPosition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract boolean moveToPosition(int i)
  bool moveToPosition(
    int i,
  ) {
    return _moveToPosition(
            reference.pointer, _id_moveToPosition as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_moveToFirst = _class.instanceMethodId(
    r"moveToFirst",
    r"()Z",
  );

  static final _moveToFirst = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean moveToFirst()
  bool moveToFirst() {
    return _moveToFirst(reference.pointer, _id_moveToFirst as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveToLast = _class.instanceMethodId(
    r"moveToLast",
    r"()Z",
  );

  static final _moveToLast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean moveToLast()
  bool moveToLast() {
    return _moveToLast(reference.pointer, _id_moveToLast as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveToNext = _class.instanceMethodId(
    r"moveToNext",
    r"()Z",
  );

  static final _moveToNext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean moveToNext()
  bool moveToNext() {
    return _moveToNext(reference.pointer, _id_moveToNext as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveToPrevious = _class.instanceMethodId(
    r"moveToPrevious",
    r"()Z",
  );

  static final _moveToPrevious = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean moveToPrevious()
  bool moveToPrevious() {
    return _moveToPrevious(
            reference.pointer, _id_moveToPrevious as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isFirst = _class.instanceMethodId(
    r"isFirst",
    r"()Z",
  );

  static final _isFirst = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isFirst()
  bool isFirst() {
    return _isFirst(reference.pointer, _id_isFirst as jni.JMethodIDPtr).boolean;
  }

  static final _id_isLast = _class.instanceMethodId(
    r"isLast",
    r"()Z",
  );

  static final _isLast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isLast()
  bool isLast() {
    return _isLast(reference.pointer, _id_isLast as jni.JMethodIDPtr).boolean;
  }

  static final _id_isBeforeFirst = _class.instanceMethodId(
    r"isBeforeFirst",
    r"()Z",
  );

  static final _isBeforeFirst = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isBeforeFirst()
  bool isBeforeFirst() {
    return _isBeforeFirst(
            reference.pointer, _id_isBeforeFirst as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isAfterLast = _class.instanceMethodId(
    r"isAfterLast",
    r"()Z",
  );

  static final _isAfterLast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isAfterLast()
  bool isAfterLast() {
    return _isAfterLast(reference.pointer, _id_isAfterLast as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getColumnIndex = _class.instanceMethodId(
    r"getColumnIndex",
    r"(Ljava/lang/String;)I",
  );

  static final _getColumnIndex = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getColumnIndex(java.lang.String string)
  int getColumnIndex(
    jni.JString string,
  ) {
    return _getColumnIndex(reference.pointer,
            _id_getColumnIndex as jni.JMethodIDPtr, string.reference.pointer)
        .integer;
  }

  static final _id_getColumnIndexOrThrow = _class.instanceMethodId(
    r"getColumnIndexOrThrow",
    r"(Ljava/lang/String;)I",
  );

  static final _getColumnIndexOrThrow = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getColumnIndexOrThrow(java.lang.String string)
  int getColumnIndexOrThrow(
    jni.JString string,
  ) {
    return _getColumnIndexOrThrow(
            reference.pointer,
            _id_getColumnIndexOrThrow as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_getColumnName = _class.instanceMethodId(
    r"getColumnName",
    r"(I)Ljava/lang/String;",
  );

  static final _getColumnName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.lang.String getColumnName(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getColumnName(
    int i,
  ) {
    return _getColumnName(
            reference.pointer, _id_getColumnName as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_getColumnNames = _class.instanceMethodId(
    r"getColumnNames",
    r"()[Ljava/lang/String;",
  );

  static final _getColumnNames = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] getColumnNames()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getColumnNames() {
    return _getColumnNames(
            reference.pointer, _id_getColumnNames as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getColumnCount = _class.instanceMethodId(
    r"getColumnCount",
    r"()I",
  );

  static final _getColumnCount = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getColumnCount()
  int getColumnCount() {
    return _getColumnCount(
            reference.pointer, _id_getColumnCount as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getBlob = _class.instanceMethodId(
    r"getBlob",
    r"(I)[B",
  );

  static final _getBlob = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract byte[] getBlob(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getBlob(
    int i,
  ) {
    return _getBlob(reference.pointer, _id_getBlob as jni.JMethodIDPtr, i)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_getString = _class.instanceMethodId(
    r"getString",
    r"(I)Ljava/lang/String;",
  );

  static final _getString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract java.lang.String getString(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString(
    int i,
  ) {
    return _getString(reference.pointer, _id_getString as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_copyStringToBuffer = _class.instanceMethodId(
    r"copyStringToBuffer",
    r"(ILandroid/database/CharArrayBuffer;)V",
  );

  static final _copyStringToBuffer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void copyStringToBuffer(int i, android.database.CharArrayBuffer charArrayBuffer)
  void copyStringToBuffer(
    int i,
    jni.JObject charArrayBuffer,
  ) {
    _copyStringToBuffer(
            reference.pointer,
            _id_copyStringToBuffer as jni.JMethodIDPtr,
            i,
            charArrayBuffer.reference.pointer)
        .check();
  }

  static final _id_getShort = _class.instanceMethodId(
    r"getShort",
    r"(I)S",
  );

  static final _getShort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallShortMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract short getShort(int i)
  int getShort(
    int i,
  ) {
    return _getShort(reference.pointer, _id_getShort as jni.JMethodIDPtr, i)
        .short;
  }

  static final _id_getInt = _class.instanceMethodId(
    r"getInt",
    r"(I)I",
  );

  static final _getInt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract int getInt(int i)
  int getInt(
    int i,
  ) {
    return _getInt(reference.pointer, _id_getInt as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getLong = _class.instanceMethodId(
    r"getLong",
    r"(I)J",
  );

  static final _getLong = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract long getLong(int i)
  int getLong(
    int i,
  ) {
    return _getLong(reference.pointer, _id_getLong as jni.JMethodIDPtr, i).long;
  }

  static final _id_getFloat = _class.instanceMethodId(
    r"getFloat",
    r"(I)F",
  );

  static final _getFloat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallFloatMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract float getFloat(int i)
  double getFloat(
    int i,
  ) {
    return _getFloat(reference.pointer, _id_getFloat as jni.JMethodIDPtr, i)
        .float;
  }

  static final _id_getDouble = _class.instanceMethodId(
    r"getDouble",
    r"(I)D",
  );

  static final _getDouble = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallDoubleMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract double getDouble(int i)
  double getDouble(
    int i,
  ) {
    return _getDouble(reference.pointer, _id_getDouble as jni.JMethodIDPtr, i)
        .doubleFloat;
  }

  static final _id_getType = _class.instanceMethodId(
    r"getType",
    r"(I)I",
  );

  static final _getType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract int getType(int i)
  int getType(
    int i,
  ) {
    return _getType(reference.pointer, _id_getType as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_isNull1 = _class.instanceMethodId(
    r"isNull",
    r"(I)Z",
  );

  static final _isNull1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract boolean isNull(int i)
  bool isNull1(
    int i,
  ) {
    return _isNull1(reference.pointer, _id_isNull1 as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_deactivate = _class.instanceMethodId(
    r"deactivate",
    r"()V",
  );

  static final _deactivate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void deactivate()
  void deactivate() {
    _deactivate(reference.pointer, _id_deactivate as jni.JMethodIDPtr).check();
  }

  static final _id_requery = _class.instanceMethodId(
    r"requery",
    r"()Z",
  );

  static final _requery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean requery()
  bool requery() {
    return _requery(reference.pointer, _id_requery as jni.JMethodIDPtr).boolean;
  }

  static final _id_close = _class.instanceMethodId(
    r"close",
    r"()V",
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }

  static final _id_isClosed = _class.instanceMethodId(
    r"isClosed",
    r"()Z",
  );

  static final _isClosed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isClosed()
  bool isClosed() {
    return _isClosed(reference.pointer, _id_isClosed as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_registerContentObserver = _class.instanceMethodId(
    r"registerContentObserver",
    r"(Landroid/database/ContentObserver;)V",
  );

  static final _registerContentObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void registerContentObserver(android.database.ContentObserver contentObserver)
  void registerContentObserver(
    jni.JObject contentObserver,
  ) {
    _registerContentObserver(
            reference.pointer,
            _id_registerContentObserver as jni.JMethodIDPtr,
            contentObserver.reference.pointer)
        .check();
  }

  static final _id_unregisterContentObserver = _class.instanceMethodId(
    r"unregisterContentObserver",
    r"(Landroid/database/ContentObserver;)V",
  );

  static final _unregisterContentObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unregisterContentObserver(android.database.ContentObserver contentObserver)
  void unregisterContentObserver(
    jni.JObject contentObserver,
  ) {
    _unregisterContentObserver(
            reference.pointer,
            _id_unregisterContentObserver as jni.JMethodIDPtr,
            contentObserver.reference.pointer)
        .check();
  }

  static final _id_registerDataSetObserver = _class.instanceMethodId(
    r"registerDataSetObserver",
    r"(Landroid/database/DataSetObserver;)V",
  );

  static final _registerDataSetObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void registerDataSetObserver(android.database.DataSetObserver dataSetObserver)
  void registerDataSetObserver(
    jni.JObject dataSetObserver,
  ) {
    _registerDataSetObserver(
            reference.pointer,
            _id_registerDataSetObserver as jni.JMethodIDPtr,
            dataSetObserver.reference.pointer)
        .check();
  }

  static final _id_unregisterDataSetObserver = _class.instanceMethodId(
    r"unregisterDataSetObserver",
    r"(Landroid/database/DataSetObserver;)V",
  );

  static final _unregisterDataSetObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unregisterDataSetObserver(android.database.DataSetObserver dataSetObserver)
  void unregisterDataSetObserver(
    jni.JObject dataSetObserver,
  ) {
    _unregisterDataSetObserver(
            reference.pointer,
            _id_unregisterDataSetObserver as jni.JMethodIDPtr,
            dataSetObserver.reference.pointer)
        .check();
  }

  static final _id_setNotificationUri = _class.instanceMethodId(
    r"setNotificationUri",
    r"(Landroid/content/ContentResolver;Landroid/net/Uri;)V",
  );

  static final _setNotificationUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setNotificationUri(android.content.ContentResolver contentResolver, android.net.Uri uri)
  void setNotificationUri(
    ContentResolver contentResolver,
    Uri uri,
  ) {
    _setNotificationUri(
            reference.pointer,
            _id_setNotificationUri as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer)
        .check();
  }

  static final _id_setNotificationUris = _class.instanceMethodId(
    r"setNotificationUris",
    r"(Landroid/content/ContentResolver;Ljava/util/List;)V",
  );

  static final _setNotificationUris = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setNotificationUris(android.content.ContentResolver contentResolver, java.util.List list)
  void setNotificationUris(
    ContentResolver contentResolver,
    jni.JList<Uri> list,
  ) {
    _setNotificationUris(
            reference.pointer,
            _id_setNotificationUris as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            list.reference.pointer)
        .check();
  }

  static final _id_getNotificationUri = _class.instanceMethodId(
    r"getNotificationUri",
    r"()Landroid/net/Uri;",
  );

  static final _getNotificationUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.net.Uri getNotificationUri()
  /// The returned object must be released after use, by calling the [release] method.
  Uri getNotificationUri() {
    return _getNotificationUri(
            reference.pointer, _id_getNotificationUri as jni.JMethodIDPtr)
        .object(const $UriType());
  }

  static final _id_getNotificationUris = _class.instanceMethodId(
    r"getNotificationUris",
    r"()Ljava/util/List;",
  );

  static final _getNotificationUris = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.List getNotificationUris()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<Uri> getNotificationUris() {
    return _getNotificationUris(
            reference.pointer, _id_getNotificationUris as jni.JMethodIDPtr)
        .object(const jni.JListType($UriType()));
  }

  static final _id_getWantsAllOnMoveCalls = _class.instanceMethodId(
    r"getWantsAllOnMoveCalls",
    r"()Z",
  );

  static final _getWantsAllOnMoveCalls = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean getWantsAllOnMoveCalls()
  bool getWantsAllOnMoveCalls() {
    return _getWantsAllOnMoveCalls(
            reference.pointer, _id_getWantsAllOnMoveCalls as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setExtras = _class.instanceMethodId(
    r"setExtras",
    r"(Landroid/os/Bundle;)V",
  );

  static final _setExtras = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setExtras(android.os.Bundle bundle)
  void setExtras(
    jni.JObject bundle,
  ) {
    _setExtras(reference.pointer, _id_setExtras as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_getExtras = _class.instanceMethodId(
    r"getExtras",
    r"()Landroid/os/Bundle;",
  );

  static final _getExtras = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.os.Bundle getExtras()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExtras() {
    return _getExtras(reference.pointer, _id_getExtras as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_respond = _class.instanceMethodId(
    r"respond",
    r"(Landroid/os/Bundle;)Landroid/os/Bundle;",
  );

  static final _respond = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.os.Bundle respond(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject respond(
    jni.JObject bundle,
  ) {
    return _respond(reference.pointer, _id_respond as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .object(const jni.JObjectType());
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CursorImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"getCount()I") {
        final $r = _$impls[$p]!.getCount();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"getPosition()I") {
        final $r = _$impls[$p]!.getPosition();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"move(I)Z") {
        final $r = _$impls[$p]!.move(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"moveToPosition(I)Z") {
        final $r = _$impls[$p]!.moveToPosition(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"moveToFirst()Z") {
        final $r = _$impls[$p]!.moveToFirst();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"moveToLast()Z") {
        final $r = _$impls[$p]!.moveToLast();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"moveToNext()Z") {
        final $r = _$impls[$p]!.moveToNext();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"moveToPrevious()Z") {
        final $r = _$impls[$p]!.moveToPrevious();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"isFirst()Z") {
        final $r = _$impls[$p]!.isFirst();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"isLast()Z") {
        final $r = _$impls[$p]!.isLast();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"isBeforeFirst()Z") {
        final $r = _$impls[$p]!.isBeforeFirst();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"isAfterLast()Z") {
        final $r = _$impls[$p]!.isAfterLast();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"getColumnIndex(Ljava/lang/String;)I") {
        final $r = _$impls[$p]!.getColumnIndex(
          $a[0].castTo(const jni.JStringType(), releaseOriginal: true),
        );
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"getColumnIndexOrThrow(Ljava/lang/String;)I") {
        final $r = _$impls[$p]!.getColumnIndexOrThrow(
          $a[0].castTo(const jni.JStringType(), releaseOriginal: true),
        );
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"getColumnName(I)Ljava/lang/String;") {
        final $r = _$impls[$p]!.getColumnName(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"getColumnNames()[Ljava/lang/String;") {
        final $r = _$impls[$p]!.getColumnNames();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"getColumnCount()I") {
        final $r = _$impls[$p]!.getColumnCount();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"getBlob(I)[B") {
        final $r = _$impls[$p]!.getBlob(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"getString(I)Ljava/lang/String;") {
        final $r = _$impls[$p]!.getString(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"copyStringToBuffer(ILandroid/database/CharArrayBuffer;)V") {
        _$impls[$p]!.copyStringToBuffer(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"getShort(I)S") {
        final $r = _$impls[$p]!.getShort(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JShort($r).reference.toPointer();
      }
      if ($d == r"getInt(I)I") {
        final $r = _$impls[$p]!.getInt(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"getLong(I)J") {
        final $r = _$impls[$p]!.getLong(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JLong($r).reference.toPointer();
      }
      if ($d == r"getFloat(I)F") {
        final $r = _$impls[$p]!.getFloat(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JFloat($r).reference.toPointer();
      }
      if ($d == r"getDouble(I)D") {
        final $r = _$impls[$p]!.getDouble(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JDouble($r).reference.toPointer();
      }
      if ($d == r"getType(I)I") {
        final $r = _$impls[$p]!.getType(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"isNull(I)Z") {
        final $r = _$impls[$p]!.isNull1(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"deactivate()V") {
        _$impls[$p]!.deactivate();
        return jni.nullptr;
      }
      if ($d == r"requery()Z") {
        final $r = _$impls[$p]!.requery();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"close()V") {
        _$impls[$p]!.close();
        return jni.nullptr;
      }
      if ($d == r"isClosed()Z") {
        final $r = _$impls[$p]!.isClosed();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d ==
          r"registerContentObserver(Landroid/database/ContentObserver;)V") {
        _$impls[$p]!.registerContentObserver(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"unregisterContentObserver(Landroid/database/ContentObserver;)V") {
        _$impls[$p]!.unregisterContentObserver(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"registerDataSetObserver(Landroid/database/DataSetObserver;)V") {
        _$impls[$p]!.registerDataSetObserver(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"unregisterDataSetObserver(Landroid/database/DataSetObserver;)V") {
        _$impls[$p]!.unregisterDataSetObserver(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"setNotificationUri(Landroid/content/ContentResolver;Landroid/net/Uri;)V") {
        _$impls[$p]!.setNotificationUri(
          $a[0].castTo(const $ContentResolverType(), releaseOriginal: true),
          $a[1].castTo(const $UriType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"setNotificationUris(Landroid/content/ContentResolver;Ljava/util/List;)V") {
        _$impls[$p]!.setNotificationUris(
          $a[0].castTo(const $ContentResolverType(), releaseOriginal: true),
          $a[1].castTo(const jni.JListType($UriType()), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"getNotificationUri()Landroid/net/Uri;") {
        final $r = _$impls[$p]!.getNotificationUri();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"getNotificationUris()Ljava/util/List;") {
        final $r = _$impls[$p]!.getNotificationUris();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"getWantsAllOnMoveCalls()Z") {
        final $r = _$impls[$p]!.getWantsAllOnMoveCalls();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"setExtras(Landroid/os/Bundle;)V") {
        _$impls[$p]!.setExtras(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"getExtras()Landroid/os/Bundle;") {
        final $r = _$impls[$p]!.getExtras();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"respond(Landroid/os/Bundle;)Landroid/os/Bundle;") {
        final $r = _$impls[$p]!.respond(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Cursor.implement(
    $CursorImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Cursor.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.database.Cursor",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $CursorImpl {
  factory $CursorImpl({
    required int Function() getCount,
    required int Function() getPosition,
    required bool Function(int i) move,
    required bool Function(int i) moveToPosition,
    required bool Function() moveToFirst,
    required bool Function() moveToLast,
    required bool Function() moveToNext,
    required bool Function() moveToPrevious,
    required bool Function() isFirst,
    required bool Function() isLast,
    required bool Function() isBeforeFirst,
    required bool Function() isAfterLast,
    required int Function(jni.JString string) getColumnIndex,
    required int Function(jni.JString string) getColumnIndexOrThrow,
    required jni.JString Function(int i) getColumnName,
    required jni.JArray<jni.JString> Function() getColumnNames,
    required int Function() getColumnCount,
    required jni.JArray<jni.jbyte> Function(int i) getBlob,
    required jni.JString Function(int i) getString,
    required void Function(int i, jni.JObject charArrayBuffer)
        copyStringToBuffer,
    required int Function(int i) getShort,
    required int Function(int i) getInt,
    required int Function(int i) getLong,
    required double Function(int i) getFloat,
    required double Function(int i) getDouble,
    required int Function(int i) getType,
    required bool Function(int i) isNull1,
    required void Function() deactivate,
    required bool Function() requery,
    required void Function() close,
    required bool Function() isClosed,
    required void Function(jni.JObject contentObserver) registerContentObserver,
    required void Function(jni.JObject contentObserver)
        unregisterContentObserver,
    required void Function(jni.JObject dataSetObserver) registerDataSetObserver,
    required void Function(jni.JObject dataSetObserver)
        unregisterDataSetObserver,
    required void Function(ContentResolver contentResolver, Uri uri)
        setNotificationUri,
    required void Function(ContentResolver contentResolver, jni.JList<Uri> list)
        setNotificationUris,
    required Uri Function() getNotificationUri,
    required jni.JList<Uri> Function() getNotificationUris,
    required bool Function() getWantsAllOnMoveCalls,
    required void Function(jni.JObject bundle) setExtras,
    required jni.JObject Function() getExtras,
    required jni.JObject Function(jni.JObject bundle) respond,
  }) = _$CursorImpl;

  int getCount();
  int getPosition();
  bool move(int i);
  bool moveToPosition(int i);
  bool moveToFirst();
  bool moveToLast();
  bool moveToNext();
  bool moveToPrevious();
  bool isFirst();
  bool isLast();
  bool isBeforeFirst();
  bool isAfterLast();
  int getColumnIndex(jni.JString string);
  int getColumnIndexOrThrow(jni.JString string);
  jni.JString getColumnName(int i);
  jni.JArray<jni.JString> getColumnNames();
  int getColumnCount();
  jni.JArray<jni.jbyte> getBlob(int i);
  jni.JString getString(int i);
  void copyStringToBuffer(int i, jni.JObject charArrayBuffer);
  int getShort(int i);
  int getInt(int i);
  int getLong(int i);
  double getFloat(int i);
  double getDouble(int i);
  int getType(int i);
  bool isNull1(int i);
  void deactivate();
  bool requery();
  void close();
  bool isClosed();
  void registerContentObserver(jni.JObject contentObserver);
  void unregisterContentObserver(jni.JObject contentObserver);
  void registerDataSetObserver(jni.JObject dataSetObserver);
  void unregisterDataSetObserver(jni.JObject dataSetObserver);
  void setNotificationUri(ContentResolver contentResolver, Uri uri);
  void setNotificationUris(
      ContentResolver contentResolver, jni.JList<Uri> list);
  Uri getNotificationUri();
  jni.JList<Uri> getNotificationUris();
  bool getWantsAllOnMoveCalls();
  void setExtras(jni.JObject bundle);
  jni.JObject getExtras();
  jni.JObject respond(jni.JObject bundle);
}

class _$CursorImpl implements $CursorImpl {
  _$CursorImpl({
    required int Function() getCount,
    required int Function() getPosition,
    required bool Function(int i) move,
    required bool Function(int i) moveToPosition,
    required bool Function() moveToFirst,
    required bool Function() moveToLast,
    required bool Function() moveToNext,
    required bool Function() moveToPrevious,
    required bool Function() isFirst,
    required bool Function() isLast,
    required bool Function() isBeforeFirst,
    required bool Function() isAfterLast,
    required int Function(jni.JString string) getColumnIndex,
    required int Function(jni.JString string) getColumnIndexOrThrow,
    required jni.JString Function(int i) getColumnName,
    required jni.JArray<jni.JString> Function() getColumnNames,
    required int Function() getColumnCount,
    required jni.JArray<jni.jbyte> Function(int i) getBlob,
    required jni.JString Function(int i) getString,
    required void Function(int i, jni.JObject charArrayBuffer)
        copyStringToBuffer,
    required int Function(int i) getShort,
    required int Function(int i) getInt,
    required int Function(int i) getLong,
    required double Function(int i) getFloat,
    required double Function(int i) getDouble,
    required int Function(int i) getType,
    required bool Function(int i) isNull1,
    required void Function() deactivate,
    required bool Function() requery,
    required void Function() close,
    required bool Function() isClosed,
    required void Function(jni.JObject contentObserver) registerContentObserver,
    required void Function(jni.JObject contentObserver)
        unregisterContentObserver,
    required void Function(jni.JObject dataSetObserver) registerDataSetObserver,
    required void Function(jni.JObject dataSetObserver)
        unregisterDataSetObserver,
    required void Function(ContentResolver contentResolver, Uri uri)
        setNotificationUri,
    required void Function(ContentResolver contentResolver, jni.JList<Uri> list)
        setNotificationUris,
    required Uri Function() getNotificationUri,
    required jni.JList<Uri> Function() getNotificationUris,
    required bool Function() getWantsAllOnMoveCalls,
    required void Function(jni.JObject bundle) setExtras,
    required jni.JObject Function() getExtras,
    required jni.JObject Function(jni.JObject bundle) respond,
  })  : _getCount = getCount,
        _getPosition = getPosition,
        _move = move,
        _moveToPosition = moveToPosition,
        _moveToFirst = moveToFirst,
        _moveToLast = moveToLast,
        _moveToNext = moveToNext,
        _moveToPrevious = moveToPrevious,
        _isFirst = isFirst,
        _isLast = isLast,
        _isBeforeFirst = isBeforeFirst,
        _isAfterLast = isAfterLast,
        _getColumnIndex = getColumnIndex,
        _getColumnIndexOrThrow = getColumnIndexOrThrow,
        _getColumnName = getColumnName,
        _getColumnNames = getColumnNames,
        _getColumnCount = getColumnCount,
        _getBlob = getBlob,
        _getString = getString,
        _copyStringToBuffer = copyStringToBuffer,
        _getShort = getShort,
        _getInt = getInt,
        _getLong = getLong,
        _getFloat = getFloat,
        _getDouble = getDouble,
        _getType = getType,
        _isNull1 = isNull1,
        _deactivate = deactivate,
        _requery = requery,
        _close = close,
        _isClosed = isClosed,
        _registerContentObserver = registerContentObserver,
        _unregisterContentObserver = unregisterContentObserver,
        _registerDataSetObserver = registerDataSetObserver,
        _unregisterDataSetObserver = unregisterDataSetObserver,
        _setNotificationUri = setNotificationUri,
        _setNotificationUris = setNotificationUris,
        _getNotificationUri = getNotificationUri,
        _getNotificationUris = getNotificationUris,
        _getWantsAllOnMoveCalls = getWantsAllOnMoveCalls,
        _setExtras = setExtras,
        _getExtras = getExtras,
        _respond = respond;

  final int Function() _getCount;
  final int Function() _getPosition;
  final bool Function(int i) _move;
  final bool Function(int i) _moveToPosition;
  final bool Function() _moveToFirst;
  final bool Function() _moveToLast;
  final bool Function() _moveToNext;
  final bool Function() _moveToPrevious;
  final bool Function() _isFirst;
  final bool Function() _isLast;
  final bool Function() _isBeforeFirst;
  final bool Function() _isAfterLast;
  final int Function(jni.JString string) _getColumnIndex;
  final int Function(jni.JString string) _getColumnIndexOrThrow;
  final jni.JString Function(int i) _getColumnName;
  final jni.JArray<jni.JString> Function() _getColumnNames;
  final int Function() _getColumnCount;
  final jni.JArray<jni.jbyte> Function(int i) _getBlob;
  final jni.JString Function(int i) _getString;
  final void Function(int i, jni.JObject charArrayBuffer) _copyStringToBuffer;
  final int Function(int i) _getShort;
  final int Function(int i) _getInt;
  final int Function(int i) _getLong;
  final double Function(int i) _getFloat;
  final double Function(int i) _getDouble;
  final int Function(int i) _getType;
  final bool Function(int i) _isNull1;
  final void Function() _deactivate;
  final bool Function() _requery;
  final void Function() _close;
  final bool Function() _isClosed;
  final void Function(jni.JObject contentObserver) _registerContentObserver;
  final void Function(jni.JObject contentObserver) _unregisterContentObserver;
  final void Function(jni.JObject dataSetObserver) _registerDataSetObserver;
  final void Function(jni.JObject dataSetObserver) _unregisterDataSetObserver;
  final void Function(ContentResolver contentResolver, Uri uri)
      _setNotificationUri;
  final void Function(ContentResolver contentResolver, jni.JList<Uri> list)
      _setNotificationUris;
  final Uri Function() _getNotificationUri;
  final jni.JList<Uri> Function() _getNotificationUris;
  final bool Function() _getWantsAllOnMoveCalls;
  final void Function(jni.JObject bundle) _setExtras;
  final jni.JObject Function() _getExtras;
  final jni.JObject Function(jni.JObject bundle) _respond;

  int getCount() {
    return _getCount();
  }

  int getPosition() {
    return _getPosition();
  }

  bool move(int i) {
    return _move(i);
  }

  bool moveToPosition(int i) {
    return _moveToPosition(i);
  }

  bool moveToFirst() {
    return _moveToFirst();
  }

  bool moveToLast() {
    return _moveToLast();
  }

  bool moveToNext() {
    return _moveToNext();
  }

  bool moveToPrevious() {
    return _moveToPrevious();
  }

  bool isFirst() {
    return _isFirst();
  }

  bool isLast() {
    return _isLast();
  }

  bool isBeforeFirst() {
    return _isBeforeFirst();
  }

  bool isAfterLast() {
    return _isAfterLast();
  }

  int getColumnIndex(jni.JString string) {
    return _getColumnIndex(string);
  }

  int getColumnIndexOrThrow(jni.JString string) {
    return _getColumnIndexOrThrow(string);
  }

  jni.JString getColumnName(int i) {
    return _getColumnName(i);
  }

  jni.JArray<jni.JString> getColumnNames() {
    return _getColumnNames();
  }

  int getColumnCount() {
    return _getColumnCount();
  }

  jni.JArray<jni.jbyte> getBlob(int i) {
    return _getBlob(i);
  }

  jni.JString getString(int i) {
    return _getString(i);
  }

  void copyStringToBuffer(int i, jni.JObject charArrayBuffer) {
    return _copyStringToBuffer(i, charArrayBuffer);
  }

  int getShort(int i) {
    return _getShort(i);
  }

  int getInt(int i) {
    return _getInt(i);
  }

  int getLong(int i) {
    return _getLong(i);
  }

  double getFloat(int i) {
    return _getFloat(i);
  }

  double getDouble(int i) {
    return _getDouble(i);
  }

  int getType(int i) {
    return _getType(i);
  }

  bool isNull1(int i) {
    return _isNull1(i);
  }

  void deactivate() {
    return _deactivate();
  }

  bool requery() {
    return _requery();
  }

  void close() {
    return _close();
  }

  bool isClosed() {
    return _isClosed();
  }

  void registerContentObserver(jni.JObject contentObserver) {
    return _registerContentObserver(contentObserver);
  }

  void unregisterContentObserver(jni.JObject contentObserver) {
    return _unregisterContentObserver(contentObserver);
  }

  void registerDataSetObserver(jni.JObject dataSetObserver) {
    return _registerDataSetObserver(dataSetObserver);
  }

  void unregisterDataSetObserver(jni.JObject dataSetObserver) {
    return _unregisterDataSetObserver(dataSetObserver);
  }

  void setNotificationUri(ContentResolver contentResolver, Uri uri) {
    return _setNotificationUri(contentResolver, uri);
  }

  void setNotificationUris(
      ContentResolver contentResolver, jni.JList<Uri> list) {
    return _setNotificationUris(contentResolver, list);
  }

  Uri getNotificationUri() {
    return _getNotificationUri();
  }

  jni.JList<Uri> getNotificationUris() {
    return _getNotificationUris();
  }

  bool getWantsAllOnMoveCalls() {
    return _getWantsAllOnMoveCalls();
  }

  void setExtras(jni.JObject bundle) {
    return _setExtras(bundle);
  }

  jni.JObject getExtras() {
    return _getExtras();
  }

  jni.JObject respond(jni.JObject bundle) {
    return _respond(bundle);
  }
}

final class $CursorType extends jni.JObjType<Cursor> {
  const $CursorType();

  @override
  String get signature => r"Landroid/database/Cursor;";

  @override
  Cursor fromReference(jni.JReference reference) =>
      Cursor.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CursorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CursorType) && other is $CursorType;
  }
}

/// from: android.net.Uri$Builder
class Uri_Builder extends jni.JObject {
  @override
  late final jni.JObjType<Uri_Builder> $type = type;

  Uri_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/net/Uri$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $Uri_BuilderType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Uri_Builder() {
    return Uri_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_scheme = _class.instanceMethodId(
    r"scheme",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _scheme = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder scheme(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder scheme(
    jni.JString string,
  ) {
    return _scheme(reference.pointer, _id_scheme as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_opaquePart = _class.instanceMethodId(
    r"opaquePart",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _opaquePart = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder opaquePart(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder opaquePart(
    jni.JString string,
  ) {
    return _opaquePart(reference.pointer, _id_opaquePart as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_encodedOpaquePart = _class.instanceMethodId(
    r"encodedOpaquePart",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _encodedOpaquePart = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder encodedOpaquePart(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedOpaquePart(
    jni.JString string,
  ) {
    return _encodedOpaquePart(reference.pointer,
            _id_encodedOpaquePart as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_authority = _class.instanceMethodId(
    r"authority",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _authority = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder authority(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder authority(
    jni.JString string,
  ) {
    return _authority(reference.pointer, _id_authority as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_encodedAuthority = _class.instanceMethodId(
    r"encodedAuthority",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _encodedAuthority = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder encodedAuthority(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedAuthority(
    jni.JString string,
  ) {
    return _encodedAuthority(reference.pointer,
            _id_encodedAuthority as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_path = _class.instanceMethodId(
    r"path",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _path = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder path(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder path(
    jni.JString string,
  ) {
    return _path(reference.pointer, _id_path as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_encodedPath = _class.instanceMethodId(
    r"encodedPath",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _encodedPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder encodedPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedPath(
    jni.JString string,
  ) {
    return _encodedPath(reference.pointer, _id_encodedPath as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_appendPath = _class.instanceMethodId(
    r"appendPath",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _appendPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder appendPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder appendPath(
    jni.JString string,
  ) {
    return _appendPath(reference.pointer, _id_appendPath as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_appendEncodedPath = _class.instanceMethodId(
    r"appendEncodedPath",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _appendEncodedPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder appendEncodedPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder appendEncodedPath(
    jni.JString string,
  ) {
    return _appendEncodedPath(reference.pointer,
            _id_appendEncodedPath as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_query = _class.instanceMethodId(
    r"query",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _query = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder query(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder query(
    jni.JString string,
  ) {
    return _query(reference.pointer, _id_query as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_encodedQuery = _class.instanceMethodId(
    r"encodedQuery",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _encodedQuery = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder encodedQuery(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedQuery(
    jni.JString string,
  ) {
    return _encodedQuery(reference.pointer,
            _id_encodedQuery as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_fragment = _class.instanceMethodId(
    r"fragment",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _fragment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder fragment(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder fragment(
    jni.JString string,
  ) {
    return _fragment(reference.pointer, _id_fragment as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_encodedFragment = _class.instanceMethodId(
    r"encodedFragment",
    r"(Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _encodedFragment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder encodedFragment(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder encodedFragment(
    jni.JString string,
  ) {
    return _encodedFragment(reference.pointer,
            _id_encodedFragment as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_appendQueryParameter = _class.instanceMethodId(
    r"appendQueryParameter",
    r"(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri$Builder;",
  );

  static final _appendQueryParameter = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri$Builder appendQueryParameter(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder appendQueryParameter(
    jni.JString string,
    jni.JString string1,
  ) {
    return _appendQueryParameter(
            reference.pointer,
            _id_appendQueryParameter as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const $Uri_BuilderType());
  }

  static final _id_clearQuery = _class.instanceMethodId(
    r"clearQuery",
    r"()Landroid/net/Uri$Builder;",
  );

  static final _clearQuery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri$Builder clearQuery()
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder clearQuery() {
    return _clearQuery(reference.pointer, _id_clearQuery as jni.JMethodIDPtr)
        .object(const $Uri_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r"build",
    r"()Landroid/net/Uri;",
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri build()
  /// The returned object must be released after use, by calling the [release] method.
  Uri build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $UriType());
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $Uri_BuilderType extends jni.JObjType<Uri_Builder> {
  const $Uri_BuilderType();

  @override
  String get signature => r"Landroid/net/Uri$Builder;";

  @override
  Uri_Builder fromReference(jni.JReference reference) =>
      Uri_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Uri_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri_BuilderType) && other is $Uri_BuilderType;
  }
}

/// from: android.net.Uri
class Uri extends jni.JObject {
  @override
  late final jni.JObjType<Uri> $type = type;

  Uri.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/net/Uri");

  /// The type which includes information such as the signature of this class.
  static const type = $UriType();
  static final _id_CREATOR = _class.staticFieldId(
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_EMPTY = _class.staticFieldId(
    r"EMPTY",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EMPTY
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EMPTY => _id_EMPTY.get(_class, const $UriType());

  static final _id_isHierarchical = _class.instanceMethodId(
    r"isHierarchical",
    r"()Z",
  );

  static final _isHierarchical = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isHierarchical()
  bool isHierarchical() {
    return _isHierarchical(
            reference.pointer, _id_isHierarchical as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isOpaque = _class.instanceMethodId(
    r"isOpaque",
    r"()Z",
  );

  static final _isOpaque = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isOpaque()
  bool isOpaque() {
    return _isOpaque(reference.pointer, _id_isOpaque as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isRelative = _class.instanceMethodId(
    r"isRelative",
    r"()Z",
  );

  static final _isRelative = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isRelative()
  bool isRelative() {
    return _isRelative(reference.pointer, _id_isRelative as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isAbsolute = _class.instanceMethodId(
    r"isAbsolute",
    r"()Z",
  );

  static final _isAbsolute = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isAbsolute()
  bool isAbsolute() {
    return _isAbsolute(reference.pointer, _id_isAbsolute as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getScheme = _class.instanceMethodId(
    r"getScheme",
    r"()Ljava/lang/String;",
  );

  static final _getScheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getScheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getScheme() {
    return _getScheme(reference.pointer, _id_getScheme as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSchemeSpecificPart = _class.instanceMethodId(
    r"getSchemeSpecificPart",
    r"()Ljava/lang/String;",
  );

  static final _getSchemeSpecificPart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getSchemeSpecificPart()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSchemeSpecificPart() {
    return _getSchemeSpecificPart(
            reference.pointer, _id_getSchemeSpecificPart as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getEncodedSchemeSpecificPart = _class.instanceMethodId(
    r"getEncodedSchemeSpecificPart",
    r"()Ljava/lang/String;",
  );

  static final _getEncodedSchemeSpecificPart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getEncodedSchemeSpecificPart()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedSchemeSpecificPart() {
    return _getEncodedSchemeSpecificPart(reference.pointer,
            _id_getEncodedSchemeSpecificPart as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAuthority = _class.instanceMethodId(
    r"getAuthority",
    r"()Ljava/lang/String;",
  );

  static final _getAuthority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getAuthority()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAuthority() {
    return _getAuthority(
            reference.pointer, _id_getAuthority as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getEncodedAuthority = _class.instanceMethodId(
    r"getEncodedAuthority",
    r"()Ljava/lang/String;",
  );

  static final _getEncodedAuthority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getEncodedAuthority()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedAuthority() {
    return _getEncodedAuthority(
            reference.pointer, _id_getEncodedAuthority as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getUserInfo = _class.instanceMethodId(
    r"getUserInfo",
    r"()Ljava/lang/String;",
  );

  static final _getUserInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getUserInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUserInfo() {
    return _getUserInfo(reference.pointer, _id_getUserInfo as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getEncodedUserInfo = _class.instanceMethodId(
    r"getEncodedUserInfo",
    r"()Ljava/lang/String;",
  );

  static final _getEncodedUserInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getEncodedUserInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedUserInfo() {
    return _getEncodedUserInfo(
            reference.pointer, _id_getEncodedUserInfo as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getHost = _class.instanceMethodId(
    r"getHost",
    r"()Ljava/lang/String;",
  );

  static final _getHost = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getHost()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getHost() {
    return _getHost(reference.pointer, _id_getHost as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPort = _class.instanceMethodId(
    r"getPort",
    r"()I",
  );

  static final _getPort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getPort()
  int getPort() {
    return _getPort(reference.pointer, _id_getPort as jni.JMethodIDPtr).integer;
  }

  static final _id_getPath = _class.instanceMethodId(
    r"getPath",
    r"()Ljava/lang/String;",
  );

  static final _getPath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPath() {
    return _getPath(reference.pointer, _id_getPath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getEncodedPath = _class.instanceMethodId(
    r"getEncodedPath",
    r"()Ljava/lang/String;",
  );

  static final _getEncodedPath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getEncodedPath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedPath() {
    return _getEncodedPath(
            reference.pointer, _id_getEncodedPath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getQuery = _class.instanceMethodId(
    r"getQuery",
    r"()Ljava/lang/String;",
  );

  static final _getQuery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getQuery()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getQuery() {
    return _getQuery(reference.pointer, _id_getQuery as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getEncodedQuery = _class.instanceMethodId(
    r"getEncodedQuery",
    r"()Ljava/lang/String;",
  );

  static final _getEncodedQuery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getEncodedQuery()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedQuery() {
    return _getEncodedQuery(
            reference.pointer, _id_getEncodedQuery as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getFragment = _class.instanceMethodId(
    r"getFragment",
    r"()Ljava/lang/String;",
  );

  static final _getFragment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getFragment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getFragment() {
    return _getFragment(reference.pointer, _id_getFragment as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getEncodedFragment = _class.instanceMethodId(
    r"getEncodedFragment",
    r"()Ljava/lang/String;",
  );

  static final _getEncodedFragment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getEncodedFragment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedFragment() {
    return _getEncodedFragment(
            reference.pointer, _id_getEncodedFragment as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPathSegments = _class.instanceMethodId(
    r"getPathSegments",
    r"()Ljava/util/List;",
  );

  static final _getPathSegments = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.util.List getPathSegments()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> getPathSegments() {
    return _getPathSegments(
            reference.pointer, _id_getPathSegments as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JStringType()));
  }

  static final _id_getLastPathSegment = _class.instanceMethodId(
    r"getLastPathSegment",
    r"()Ljava/lang/String;",
  );

  static final _getLastPathSegment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getLastPathSegment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLastPathSegment() {
    return _getLastPathSegment(
            reference.pointer, _id_getLastPathSegment as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r"equals",
    r"(Ljava/lang/Object;)Z",
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r"hashCode",
    r"()I",
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_compareTo = _class.instanceMethodId(
    r"compareTo",
    r"(Landroid/net/Uri;)I",
  );

  static final _compareTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(android.net.Uri uri)
  int compareTo(
    Uri uri,
  ) {
    return _compareTo(reference.pointer, _id_compareTo as jni.JMethodIDPtr,
            uri.reference.pointer)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_buildUpon = _class.instanceMethodId(
    r"buildUpon",
    r"()Landroid/net/Uri$Builder;",
  );

  static final _buildUpon = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.net.Uri$Builder buildUpon()
  /// The returned object must be released after use, by calling the [release] method.
  Uri_Builder buildUpon() {
    return _buildUpon(reference.pointer, _id_buildUpon as jni.JMethodIDPtr)
        .object(const $Uri_BuilderType());
  }

  static final _id_parse = _class.staticMethodId(
    r"parse",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _parse = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri parse(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri parse(
    jni.JString string,
  ) {
    return _parse(_class.reference.pointer, _id_parse as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $UriType());
  }

  static final _id_fromFile = _class.staticMethodId(
    r"fromFile",
    r"(Ljava/io/File;)Landroid/net/Uri;",
  );

  static final _fromFile = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri fromFile(java.io.File file)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri fromFile(
    jni.JObject file,
  ) {
    return _fromFile(_class.reference.pointer, _id_fromFile as jni.JMethodIDPtr,
            file.reference.pointer)
        .object(const $UriType());
  }

  static final _id_fromParts = _class.staticMethodId(
    r"fromParts",
    r"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _fromParts = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri fromParts(java.lang.String string, java.lang.String string1, java.lang.String string2)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri fromParts(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    return _fromParts(
            _class.reference.pointer,
            _id_fromParts as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getQueryParameterNames = _class.instanceMethodId(
    r"getQueryParameterNames",
    r"()Ljava/util/Set;",
  );

  static final _getQueryParameterNames = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set getQueryParameterNames()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getQueryParameterNames() {
    return _getQueryParameterNames(
            reference.pointer, _id_getQueryParameterNames as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_getQueryParameters = _class.instanceMethodId(
    r"getQueryParameters",
    r"(Ljava/lang/String;)Ljava/util/List;",
  );

  static final _getQueryParameters = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getQueryParameters(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JString> getQueryParameters(
    jni.JString string,
  ) {
    return _getQueryParameters(
            reference.pointer,
            _id_getQueryParameters as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JListType(jni.JStringType()));
  }

  static final _id_getQueryParameter = _class.instanceMethodId(
    r"getQueryParameter",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _getQueryParameter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getQueryParameter(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getQueryParameter(
    jni.JString string,
  ) {
    return _getQueryParameter(reference.pointer,
            _id_getQueryParameter as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getBooleanQueryParameter = _class.instanceMethodId(
    r"getBooleanQueryParameter",
    r"(Ljava/lang/String;Z)Z",
  );

  static final _getBooleanQueryParameter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean getBooleanQueryParameter(java.lang.String string, boolean z)
  bool getBooleanQueryParameter(
    jni.JString string,
    bool z,
  ) {
    return _getBooleanQueryParameter(
            reference.pointer,
            _id_getBooleanQueryParameter as jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_normalizeScheme = _class.instanceMethodId(
    r"normalizeScheme",
    r"()Landroid/net/Uri;",
  );

  static final _normalizeScheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri normalizeScheme()
  /// The returned object must be released after use, by calling the [release] method.
  Uri normalizeScheme() {
    return _normalizeScheme(
            reference.pointer, _id_normalizeScheme as jni.JMethodIDPtr)
        .object(const $UriType());
  }

  static final _id_writeToParcel = _class.staticMethodId(
    r"writeToParcel",
    r"(Landroid/os/Parcel;Landroid/net/Uri;)V",
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void writeToParcel(android.os.Parcel parcel, android.net.Uri uri)
  static void writeToParcel(
    jni.JObject parcel,
    Uri uri,
  ) {
    _writeToParcel(
            _class.reference.pointer,
            _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer,
            uri.reference.pointer)
        .check();
  }

  static final _id_encode = _class.staticMethodId(
    r"encode",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _encode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String encode(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString encode(
    jni.JString string,
  ) {
    return _encode(_class.reference.pointer, _id_encode as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_encode1 = _class.staticMethodId(
    r"encode",
    r"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _encode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String encode(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString encode1(
    jni.JString string,
    jni.JString string1,
  ) {
    return _encode1(_class.reference.pointer, _id_encode1 as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_decode = _class.staticMethodId(
    r"decode",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _decode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String decode(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString decode(
    jni.JString string,
  ) {
    return _decode(_class.reference.pointer, _id_decode as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_withAppendedPath = _class.staticMethodId(
    r"withAppendedPath",
    r"(Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _withAppendedPath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri withAppendedPath(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri withAppendedPath(
    Uri uri,
    jni.JString string,
  ) {
    return _withAppendedPath(
            _class.reference.pointer,
            _id_withAppendedPath as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const $UriType());
  }

  static final _id_compareTo1 = _class.instanceMethodId(
    r"compareTo",
    r"(Ljava/lang/Object;)I",
  );

  static final _compareTo1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.lang.Object object)
  int compareTo1(
    jni.JObject object,
  ) {
    return _compareTo1(reference.pointer, _id_compareTo1 as jni.JMethodIDPtr,
            object.reference.pointer)
        .integer;
  }
}

final class $UriType extends jni.JObjType<Uri> {
  const $UriType();

  @override
  String get signature => r"Landroid/net/Uri;";

  @override
  Uri fromReference(jni.JReference reference) => Uri.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UriType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UriType) && other is $UriType;
  }
}

/// from: android.provider.MediaStore$Audio$AlbumColumns
class MediaStore_Audio_AlbumColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_AlbumColumns> $type = type;

  MediaStore_Audio_AlbumColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$AlbumColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_AlbumColumnsType();
  static final _id_ALBUM = _class.staticFieldId(
    r"ALBUM",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ALBUM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM =>
      _id_ALBUM.get(_class, const jni.JStringType());

  static final _id_ALBUM_ART = _class.staticFieldId(
    r"ALBUM_ART",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ALBUM_ART
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_ART =>
      _id_ALBUM_ART.get(_class, const jni.JStringType());

  static final _id_ALBUM_ID = _class.staticFieldId(
    r"ALBUM_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ALBUM_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_ID =>
      _id_ALBUM_ID.get(_class, const jni.JStringType());

  static final _id_ALBUM_KEY = _class.staticFieldId(
    r"ALBUM_KEY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ALBUM_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_KEY =>
      _id_ALBUM_KEY.get(_class, const jni.JStringType());

  static final _id_ARTIST = _class.staticFieldId(
    r"ARTIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST =>
      _id_ARTIST.get(_class, const jni.JStringType());

  static final _id_ARTIST_ID = _class.staticFieldId(
    r"ARTIST_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ARTIST_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST_ID =>
      _id_ARTIST_ID.get(_class, const jni.JStringType());

  static final _id_ARTIST_KEY = _class.staticFieldId(
    r"ARTIST_KEY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ARTIST_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST_KEY =>
      _id_ARTIST_KEY.get(_class, const jni.JStringType());

  static final _id_FIRST_YEAR = _class.staticFieldId(
    r"FIRST_YEAR",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String FIRST_YEAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FIRST_YEAR =>
      _id_FIRST_YEAR.get(_class, const jni.JStringType());

  static final _id_LAST_YEAR = _class.staticFieldId(
    r"LAST_YEAR",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LAST_YEAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAST_YEAR =>
      _id_LAST_YEAR.get(_class, const jni.JStringType());

  static final _id_NUMBER_OF_SONGS = _class.staticFieldId(
    r"NUMBER_OF_SONGS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NUMBER_OF_SONGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NUMBER_OF_SONGS =>
      _id_NUMBER_OF_SONGS.get(_class, const jni.JStringType());

  static final _id_NUMBER_OF_SONGS_FOR_ARTIST = _class.staticFieldId(
    r"NUMBER_OF_SONGS_FOR_ARTIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NUMBER_OF_SONGS_FOR_ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NUMBER_OF_SONGS_FOR_ARTIST =>
      _id_NUMBER_OF_SONGS_FOR_ARTIST.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Audio_AlbumColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Audio_AlbumColumns.implement(
    $MediaStore_Audio_AlbumColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Audio_AlbumColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.provider.MediaStore$Audio$AlbumColumns",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Audio_AlbumColumnsImpl {
  factory $MediaStore_Audio_AlbumColumnsImpl() =
      _$MediaStore_Audio_AlbumColumnsImpl;
}

class _$MediaStore_Audio_AlbumColumnsImpl
    implements $MediaStore_Audio_AlbumColumnsImpl {
  _$MediaStore_Audio_AlbumColumnsImpl();
}

final class $MediaStore_Audio_AlbumColumnsType
    extends jni.JObjType<MediaStore_Audio_AlbumColumns> {
  const $MediaStore_Audio_AlbumColumnsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$AlbumColumns;";

  @override
  MediaStore_Audio_AlbumColumns fromReference(jni.JReference reference) =>
      MediaStore_Audio_AlbumColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_AlbumColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_AlbumColumnsType) &&
        other is $MediaStore_Audio_AlbumColumnsType;
  }
}

/// from: android.provider.MediaStore$Audio$Albums
class MediaStore_Audio_Albums extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Albums> $type = type;

  MediaStore_Audio_Albums.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$Albums");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_AlbumsType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r"CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r"ENTRY_CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r"EXTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r"INTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Albums() {
    return MediaStore_Audio_Albums.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }
}

final class $MediaStore_Audio_AlbumsType
    extends jni.JObjType<MediaStore_Audio_Albums> {
  const $MediaStore_Audio_AlbumsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$Albums;";

  @override
  MediaStore_Audio_Albums fromReference(jni.JReference reference) =>
      MediaStore_Audio_Albums.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_AlbumsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_AlbumsType) &&
        other is $MediaStore_Audio_AlbumsType;
  }
}

/// from: android.provider.MediaStore$Audio$ArtistColumns
class MediaStore_Audio_ArtistColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_ArtistColumns> $type = type;

  MediaStore_Audio_ArtistColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$ArtistColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_ArtistColumnsType();
  static final _id_ARTIST = _class.staticFieldId(
    r"ARTIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST =>
      _id_ARTIST.get(_class, const jni.JStringType());

  static final _id_ARTIST_KEY = _class.staticFieldId(
    r"ARTIST_KEY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ARTIST_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST_KEY =>
      _id_ARTIST_KEY.get(_class, const jni.JStringType());

  static final _id_NUMBER_OF_ALBUMS = _class.staticFieldId(
    r"NUMBER_OF_ALBUMS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NUMBER_OF_ALBUMS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NUMBER_OF_ALBUMS =>
      _id_NUMBER_OF_ALBUMS.get(_class, const jni.JStringType());

  static final _id_NUMBER_OF_TRACKS = _class.staticFieldId(
    r"NUMBER_OF_TRACKS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NUMBER_OF_TRACKS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NUMBER_OF_TRACKS =>
      _id_NUMBER_OF_TRACKS.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Audio_ArtistColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Audio_ArtistColumns.implement(
    $MediaStore_Audio_ArtistColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Audio_ArtistColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.provider.MediaStore$Audio$ArtistColumns",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Audio_ArtistColumnsImpl {
  factory $MediaStore_Audio_ArtistColumnsImpl() =
      _$MediaStore_Audio_ArtistColumnsImpl;
}

class _$MediaStore_Audio_ArtistColumnsImpl
    implements $MediaStore_Audio_ArtistColumnsImpl {
  _$MediaStore_Audio_ArtistColumnsImpl();
}

final class $MediaStore_Audio_ArtistColumnsType
    extends jni.JObjType<MediaStore_Audio_ArtistColumns> {
  const $MediaStore_Audio_ArtistColumnsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$ArtistColumns;";

  @override
  MediaStore_Audio_ArtistColumns fromReference(jni.JReference reference) =>
      MediaStore_Audio_ArtistColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_ArtistColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_ArtistColumnsType) &&
        other is $MediaStore_Audio_ArtistColumnsType;
  }
}

/// from: android.provider.MediaStore$Audio$Artists$Albums
class MediaStore_Audio_Artists_Albums extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Artists_Albums> $type = type;

  MediaStore_Audio_Artists_Albums.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$Artists$Albums");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_Artists_AlbumsType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Artists_Albums() {
    return MediaStore_Audio_Artists_Albums.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;J)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
    int j,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const $UriType());
  }
}

final class $MediaStore_Audio_Artists_AlbumsType
    extends jni.JObjType<MediaStore_Audio_Artists_Albums> {
  const $MediaStore_Audio_Artists_AlbumsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$Artists$Albums;";

  @override
  MediaStore_Audio_Artists_Albums fromReference(jni.JReference reference) =>
      MediaStore_Audio_Artists_Albums.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_Artists_AlbumsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_Artists_AlbumsType) &&
        other is $MediaStore_Audio_Artists_AlbumsType;
  }
}

/// from: android.provider.MediaStore$Audio$Artists
class MediaStore_Audio_Artists extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Artists> $type = type;

  MediaStore_Audio_Artists.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$Artists");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_ArtistsType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r"CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r"ENTRY_CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r"EXTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r"INTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Artists() {
    return MediaStore_Audio_Artists.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }
}

final class $MediaStore_Audio_ArtistsType
    extends jni.JObjType<MediaStore_Audio_Artists> {
  const $MediaStore_Audio_ArtistsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$Artists;";

  @override
  MediaStore_Audio_Artists fromReference(jni.JReference reference) =>
      MediaStore_Audio_Artists.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_ArtistsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_ArtistsType) &&
        other is $MediaStore_Audio_ArtistsType;
  }
}

/// from: android.provider.MediaStore$Audio$AudioColumns
class MediaStore_Audio_AudioColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_AudioColumns> $type = type;

  MediaStore_Audio_AudioColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$AudioColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_AudioColumnsType();
  static final _id_ALBUM_ID = _class.staticFieldId(
    r"ALBUM_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ALBUM_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_ID =>
      _id_ALBUM_ID.get(_class, const jni.JStringType());

  static final _id_ALBUM_KEY = _class.staticFieldId(
    r"ALBUM_KEY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ALBUM_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_KEY =>
      _id_ALBUM_KEY.get(_class, const jni.JStringType());

  static final _id_ARTIST_ID = _class.staticFieldId(
    r"ARTIST_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ARTIST_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST_ID =>
      _id_ARTIST_ID.get(_class, const jni.JStringType());

  static final _id_ARTIST_KEY = _class.staticFieldId(
    r"ARTIST_KEY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ARTIST_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST_KEY =>
      _id_ARTIST_KEY.get(_class, const jni.JStringType());

  static final _id_BOOKMARK = _class.staticFieldId(
    r"BOOKMARK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BOOKMARK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BOOKMARK =>
      _id_BOOKMARK.get(_class, const jni.JStringType());

  static final _id_GENRE = _class.staticFieldId(
    r"GENRE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String GENRE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENRE =>
      _id_GENRE.get(_class, const jni.JStringType());

  static final _id_GENRE_ID = _class.staticFieldId(
    r"GENRE_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String GENRE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENRE_ID =>
      _id_GENRE_ID.get(_class, const jni.JStringType());

  static final _id_GENRE_KEY = _class.staticFieldId(
    r"GENRE_KEY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String GENRE_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENRE_KEY =>
      _id_GENRE_KEY.get(_class, const jni.JStringType());

  static final _id_IS_ALARM = _class.staticFieldId(
    r"IS_ALARM",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_ALARM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_ALARM =>
      _id_IS_ALARM.get(_class, const jni.JStringType());

  static final _id_IS_AUDIOBOOK = _class.staticFieldId(
    r"IS_AUDIOBOOK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_AUDIOBOOK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_AUDIOBOOK =>
      _id_IS_AUDIOBOOK.get(_class, const jni.JStringType());

  static final _id_IS_MUSIC = _class.staticFieldId(
    r"IS_MUSIC",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_MUSIC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_MUSIC =>
      _id_IS_MUSIC.get(_class, const jni.JStringType());

  static final _id_IS_NOTIFICATION = _class.staticFieldId(
    r"IS_NOTIFICATION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_NOTIFICATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_NOTIFICATION =>
      _id_IS_NOTIFICATION.get(_class, const jni.JStringType());

  static final _id_IS_PODCAST = _class.staticFieldId(
    r"IS_PODCAST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_PODCAST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_PODCAST =>
      _id_IS_PODCAST.get(_class, const jni.JStringType());

  static final _id_IS_RECORDING = _class.staticFieldId(
    r"IS_RECORDING",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_RECORDING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_RECORDING =>
      _id_IS_RECORDING.get(_class, const jni.JStringType());

  static final _id_IS_RINGTONE = _class.staticFieldId(
    r"IS_RINGTONE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_RINGTONE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_RINGTONE =>
      _id_IS_RINGTONE.get(_class, const jni.JStringType());

  static final _id_TITLE_KEY = _class.staticFieldId(
    r"TITLE_KEY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TITLE_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TITLE_KEY =>
      _id_TITLE_KEY.get(_class, const jni.JStringType());

  static final _id_TITLE_RESOURCE_URI = _class.staticFieldId(
    r"TITLE_RESOURCE_URI",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TITLE_RESOURCE_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TITLE_RESOURCE_URI =>
      _id_TITLE_RESOURCE_URI.get(_class, const jni.JStringType());

  static final _id_TRACK = _class.staticFieldId(
    r"TRACK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TRACK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TRACK =>
      _id_TRACK.get(_class, const jni.JStringType());

  static final _id_YEAR = _class.staticFieldId(
    r"YEAR",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String YEAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get YEAR => _id_YEAR.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Audio_AudioColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Audio_AudioColumns.implement(
    $MediaStore_Audio_AudioColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Audio_AudioColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.provider.MediaStore$Audio$AudioColumns",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Audio_AudioColumnsImpl {
  factory $MediaStore_Audio_AudioColumnsImpl() =
      _$MediaStore_Audio_AudioColumnsImpl;
}

class _$MediaStore_Audio_AudioColumnsImpl
    implements $MediaStore_Audio_AudioColumnsImpl {
  _$MediaStore_Audio_AudioColumnsImpl();
}

final class $MediaStore_Audio_AudioColumnsType
    extends jni.JObjType<MediaStore_Audio_AudioColumns> {
  const $MediaStore_Audio_AudioColumnsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$AudioColumns;";

  @override
  MediaStore_Audio_AudioColumns fromReference(jni.JReference reference) =>
      MediaStore_Audio_AudioColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_AudioColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_AudioColumnsType) &&
        other is $MediaStore_Audio_AudioColumnsType;
  }
}

/// from: android.provider.MediaStore$Audio$Genres$Members
class MediaStore_Audio_Genres_Members extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Genres_Members> $type = type;

  MediaStore_Audio_Genres_Members.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$Genres$Members");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_Genres_MembersType();
  static final _id_AUDIO_ID = _class.staticFieldId(
    r"AUDIO_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String AUDIO_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUDIO_ID =>
      _id_AUDIO_ID.get(_class, const jni.JStringType());

  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r"CONTENT_DIRECTORY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_DIRECTORY =>
      _id_CONTENT_DIRECTORY.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_GENRE_ID = _class.staticFieldId(
    r"GENRE_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String GENRE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENRE_ID =>
      _id_GENRE_ID.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Genres_Members() {
    return MediaStore_Audio_Genres_Members.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;J)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
    int j,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const $UriType());
  }
}

final class $MediaStore_Audio_Genres_MembersType
    extends jni.JObjType<MediaStore_Audio_Genres_Members> {
  const $MediaStore_Audio_Genres_MembersType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$Genres$Members;";

  @override
  MediaStore_Audio_Genres_Members fromReference(jni.JReference reference) =>
      MediaStore_Audio_Genres_Members.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_Genres_MembersType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_Genres_MembersType) &&
        other is $MediaStore_Audio_Genres_MembersType;
  }
}

/// from: android.provider.MediaStore$Audio$Genres
class MediaStore_Audio_Genres extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Genres> $type = type;

  MediaStore_Audio_Genres.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$Genres");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_GenresType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r"CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r"ENTRY_CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r"EXTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r"INTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Genres() {
    return MediaStore_Audio_Genres.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getContentUriForAudioId = _class.staticMethodId(
    r"getContentUriForAudioId",
    r"(Ljava/lang/String;I)Landroid/net/Uri;",
  );

  static final _getContentUriForAudioId = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUriForAudioId(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUriForAudioId(
    jni.JString string,
    int i,
  ) {
    return _getContentUriForAudioId(
            _class.reference.pointer,
            _id_getContentUriForAudioId as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const $UriType());
  }
}

final class $MediaStore_Audio_GenresType
    extends jni.JObjType<MediaStore_Audio_Genres> {
  const $MediaStore_Audio_GenresType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$Genres;";

  @override
  MediaStore_Audio_Genres fromReference(jni.JReference reference) =>
      MediaStore_Audio_Genres.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_GenresType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_GenresType) &&
        other is $MediaStore_Audio_GenresType;
  }
}

/// from: android.provider.MediaStore$Audio$GenresColumns
class MediaStore_Audio_GenresColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_GenresColumns> $type = type;

  MediaStore_Audio_GenresColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$GenresColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_GenresColumnsType();
  static final _id_NAME = _class.staticFieldId(
    r"NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NAME => _id_NAME.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Audio_GenresColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Audio_GenresColumns.implement(
    $MediaStore_Audio_GenresColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Audio_GenresColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.provider.MediaStore$Audio$GenresColumns",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Audio_GenresColumnsImpl {
  factory $MediaStore_Audio_GenresColumnsImpl() =
      _$MediaStore_Audio_GenresColumnsImpl;
}

class _$MediaStore_Audio_GenresColumnsImpl
    implements $MediaStore_Audio_GenresColumnsImpl {
  _$MediaStore_Audio_GenresColumnsImpl();
}

final class $MediaStore_Audio_GenresColumnsType
    extends jni.JObjType<MediaStore_Audio_GenresColumns> {
  const $MediaStore_Audio_GenresColumnsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$GenresColumns;";

  @override
  MediaStore_Audio_GenresColumns fromReference(jni.JReference reference) =>
      MediaStore_Audio_GenresColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_GenresColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_GenresColumnsType) &&
        other is $MediaStore_Audio_GenresColumnsType;
  }
}

/// from: android.provider.MediaStore$Audio$Media
class MediaStore_Audio_Media extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Media> $type = type;

  MediaStore_Audio_Media.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$Media");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_MediaType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r"CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r"ENTRY_CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r"EXTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_EXTRA_MAX_BYTES = _class.staticFieldId(
    r"EXTRA_MAX_BYTES",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MAX_BYTES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MAX_BYTES =>
      _id_EXTRA_MAX_BYTES.get(_class, const jni.JStringType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r"INTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_RECORD_SOUND_ACTION = _class.staticFieldId(
    r"RECORD_SOUND_ACTION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String RECORD_SOUND_ACTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RECORD_SOUND_ACTION =>
      _id_RECORD_SOUND_ACTION.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Media() {
    return MediaStore_Audio_Media.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getContentUri1 = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;J)Landroid/net/Uri;",
  );

  static final _getContentUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri1(
    jni.JString string,
    int j,
  ) {
    return _getContentUri1(_class.reference.pointer,
            _id_getContentUri1 as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const $UriType());
  }

  static final _id_getContentUriForPath = _class.staticMethodId(
    r"getContentUriForPath",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUriForPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUriForPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUriForPath(
    jni.JString string,
  ) {
    return _getContentUriForPath(
            _class.reference.pointer,
            _id_getContentUriForPath as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $UriType());
  }
}

final class $MediaStore_Audio_MediaType
    extends jni.JObjType<MediaStore_Audio_Media> {
  const $MediaStore_Audio_MediaType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$Media;";

  @override
  MediaStore_Audio_Media fromReference(jni.JReference reference) =>
      MediaStore_Audio_Media.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_MediaType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_MediaType) &&
        other is $MediaStore_Audio_MediaType;
  }
}

/// from: android.provider.MediaStore$Audio$Playlists$Members
class MediaStore_Audio_Playlists_Members extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Playlists_Members> $type = type;

  MediaStore_Audio_Playlists_Members.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"android/provider/MediaStore$Audio$Playlists$Members");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_Playlists_MembersType();
  static final _id_AUDIO_ID = _class.staticFieldId(
    r"AUDIO_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String AUDIO_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUDIO_ID =>
      _id_AUDIO_ID.get(_class, const jni.JStringType());

  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r"CONTENT_DIRECTORY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_DIRECTORY =>
      _id_CONTENT_DIRECTORY.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_PLAYLIST_ID = _class.staticFieldId(
    r"PLAYLIST_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String PLAYLIST_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PLAYLIST_ID =>
      _id_PLAYLIST_ID.get(_class, const jni.JStringType());

  static final _id_PLAY_ORDER = _class.staticFieldId(
    r"PLAY_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String PLAY_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PLAY_ORDER =>
      _id_PLAY_ORDER.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Playlists_Members() {
    return MediaStore_Audio_Playlists_Members.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;J)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
    int j,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const $UriType());
  }

  static final _id_moveItem = _class.staticMethodId(
    r"moveItem",
    r"(Landroid/content/ContentResolver;JII)Z",
  );

  static final _moveItem = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        $Int32,
                        $Int32
                      )>)>>("globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: static public boolean moveItem(android.content.ContentResolver contentResolver, long j, int i, int i1)
  static bool moveItem(
    ContentResolver contentResolver,
    int j,
    int i,
    int i1,
  ) {
    return _moveItem(_class.reference.pointer, _id_moveItem as jni.JMethodIDPtr,
            contentResolver.reference.pointer, j, i, i1)
        .boolean;
  }
}

final class $MediaStore_Audio_Playlists_MembersType
    extends jni.JObjType<MediaStore_Audio_Playlists_Members> {
  const $MediaStore_Audio_Playlists_MembersType();

  @override
  String get signature =>
      r"Landroid/provider/MediaStore$Audio$Playlists$Members;";

  @override
  MediaStore_Audio_Playlists_Members fromReference(jni.JReference reference) =>
      MediaStore_Audio_Playlists_Members.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_Playlists_MembersType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_Playlists_MembersType) &&
        other is $MediaStore_Audio_Playlists_MembersType;
  }
}

/// from: android.provider.MediaStore$Audio$Playlists
class MediaStore_Audio_Playlists extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Playlists> $type = type;

  MediaStore_Audio_Playlists.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$Playlists");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_PlaylistsType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r"CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r"ENTRY_CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r"EXTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r"INTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio_Playlists() {
    return MediaStore_Audio_Playlists.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }
}

final class $MediaStore_Audio_PlaylistsType
    extends jni.JObjType<MediaStore_Audio_Playlists> {
  const $MediaStore_Audio_PlaylistsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$Playlists;";

  @override
  MediaStore_Audio_Playlists fromReference(jni.JReference reference) =>
      MediaStore_Audio_Playlists.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_PlaylistsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_PlaylistsType) &&
        other is $MediaStore_Audio_PlaylistsType;
  }
}

/// from: android.provider.MediaStore$Audio$PlaylistsColumns
class MediaStore_Audio_PlaylistsColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_PlaylistsColumns> $type = type;

  MediaStore_Audio_PlaylistsColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$PlaylistsColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_PlaylistsColumnsType();
  static final _id_DATA = _class.staticFieldId(
    r"DATA",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATA => _id_DATA.get(_class, const jni.JStringType());

  static final _id_DATE_ADDED = _class.staticFieldId(
    r"DATE_ADDED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_ADDED =>
      _id_DATE_ADDED.get(_class, const jni.JStringType());

  static final _id_DATE_MODIFIED = _class.staticFieldId(
    r"DATE_MODIFIED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATE_MODIFIED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_MODIFIED =>
      _id_DATE_MODIFIED.get(_class, const jni.JStringType());

  static final _id_NAME = _class.staticFieldId(
    r"NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NAME => _id_NAME.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Audio_PlaylistsColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Audio_PlaylistsColumns.implement(
    $MediaStore_Audio_PlaylistsColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Audio_PlaylistsColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.provider.MediaStore$Audio$PlaylistsColumns",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Audio_PlaylistsColumnsImpl {
  factory $MediaStore_Audio_PlaylistsColumnsImpl() =
      _$MediaStore_Audio_PlaylistsColumnsImpl;
}

class _$MediaStore_Audio_PlaylistsColumnsImpl
    implements $MediaStore_Audio_PlaylistsColumnsImpl {
  _$MediaStore_Audio_PlaylistsColumnsImpl();
}

final class $MediaStore_Audio_PlaylistsColumnsType
    extends jni.JObjType<MediaStore_Audio_PlaylistsColumns> {
  const $MediaStore_Audio_PlaylistsColumnsType();

  @override
  String get signature =>
      r"Landroid/provider/MediaStore$Audio$PlaylistsColumns;";

  @override
  MediaStore_Audio_PlaylistsColumns fromReference(jni.JReference reference) =>
      MediaStore_Audio_PlaylistsColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_PlaylistsColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_PlaylistsColumnsType) &&
        other is $MediaStore_Audio_PlaylistsColumnsType;
  }
}

/// from: android.provider.MediaStore$Audio$Radio
class MediaStore_Audio_Radio extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio_Radio> $type = type;

  MediaStore_Audio_Radio.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio$Radio");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Audio_RadioType();
  static final _id_ENTRY_CONTENT_TYPE = _class.staticFieldId(
    r"ENTRY_CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ENTRY_CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ENTRY_CONTENT_TYPE =>
      _id_ENTRY_CONTENT_TYPE.get(_class, const jni.JStringType());
}

final class $MediaStore_Audio_RadioType
    extends jni.JObjType<MediaStore_Audio_Radio> {
  const $MediaStore_Audio_RadioType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio$Radio;";

  @override
  MediaStore_Audio_Radio fromReference(jni.JReference reference) =>
      MediaStore_Audio_Radio.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Audio_RadioType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Audio_RadioType) &&
        other is $MediaStore_Audio_RadioType;
  }
}

/// from: android.provider.MediaStore$Audio
class MediaStore_Audio extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Audio> $type = type;

  MediaStore_Audio.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Audio");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_AudioType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Audio() {
    return MediaStore_Audio.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_keyFor = _class.staticMethodId(
    r"keyFor",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _keyFor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String keyFor(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString keyFor(
    jni.JString string,
  ) {
    return _keyFor(_class.reference.pointer, _id_keyFor as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }
}

final class $MediaStore_AudioType extends jni.JObjType<MediaStore_Audio> {
  const $MediaStore_AudioType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Audio;";

  @override
  MediaStore_Audio fromReference(jni.JReference reference) =>
      MediaStore_Audio.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_AudioType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_AudioType) &&
        other is $MediaStore_AudioType;
  }
}

/// from: android.provider.MediaStore$DownloadColumns
class MediaStore_DownloadColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_DownloadColumns> $type = type;

  MediaStore_DownloadColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$DownloadColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_DownloadColumnsType();
  static final _id_DOWNLOAD_URI = _class.staticFieldId(
    r"DOWNLOAD_URI",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DOWNLOAD_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOWNLOAD_URI =>
      _id_DOWNLOAD_URI.get(_class, const jni.JStringType());

  static final _id_REFERER_URI = _class.staticFieldId(
    r"REFERER_URI",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String REFERER_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get REFERER_URI =>
      _id_REFERER_URI.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_DownloadColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_DownloadColumns.implement(
    $MediaStore_DownloadColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_DownloadColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.provider.MediaStore$DownloadColumns",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_DownloadColumnsImpl {
  factory $MediaStore_DownloadColumnsImpl() = _$MediaStore_DownloadColumnsImpl;
}

class _$MediaStore_DownloadColumnsImpl
    implements $MediaStore_DownloadColumnsImpl {
  _$MediaStore_DownloadColumnsImpl();
}

final class $MediaStore_DownloadColumnsType
    extends jni.JObjType<MediaStore_DownloadColumns> {
  const $MediaStore_DownloadColumnsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$DownloadColumns;";

  @override
  MediaStore_DownloadColumns fromReference(jni.JReference reference) =>
      MediaStore_DownloadColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_DownloadColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_DownloadColumnsType) &&
        other is $MediaStore_DownloadColumnsType;
  }
}

/// from: android.provider.MediaStore$Downloads
class MediaStore_Downloads extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Downloads> $type = type;

  MediaStore_Downloads.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Downloads");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_DownloadsType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r"CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r"EXTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r"INTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getContentUri1 = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;J)Landroid/net/Uri;",
  );

  static final _getContentUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri1(
    jni.JString string,
    int j,
  ) {
    return _getContentUri1(_class.reference.pointer,
            _id_getContentUri1 as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const $UriType());
  }
}

final class $MediaStore_DownloadsType
    extends jni.JObjType<MediaStore_Downloads> {
  const $MediaStore_DownloadsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Downloads;";

  @override
  MediaStore_Downloads fromReference(jni.JReference reference) =>
      MediaStore_Downloads.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_DownloadsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_DownloadsType) &&
        other is $MediaStore_DownloadsType;
  }
}

/// from: android.provider.MediaStore$Files$FileColumns
class MediaStore_Files_FileColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Files_FileColumns> $type = type;

  MediaStore_Files_FileColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Files$FileColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Files_FileColumnsType();
  static final _id_MEDIA_TYPE = _class.staticFieldId(
    r"MEDIA_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_TYPE =>
      _id_MEDIA_TYPE.get(_class, const jni.JStringType());

  /// from: static public final int MEDIA_TYPE_AUDIO
  static const MEDIA_TYPE_AUDIO = 2;

  /// from: static public final int MEDIA_TYPE_DOCUMENT
  static const MEDIA_TYPE_DOCUMENT = 6;

  /// from: static public final int MEDIA_TYPE_IMAGE
  static const MEDIA_TYPE_IMAGE = 1;

  /// from: static public final int MEDIA_TYPE_NONE
  static const MEDIA_TYPE_NONE = 0;

  /// from: static public final int MEDIA_TYPE_PLAYLIST
  static const MEDIA_TYPE_PLAYLIST = 4;

  /// from: static public final int MEDIA_TYPE_SUBTITLE
  static const MEDIA_TYPE_SUBTITLE = 5;

  /// from: static public final int MEDIA_TYPE_VIDEO
  static const MEDIA_TYPE_VIDEO = 3;
  static final _id_MIME_TYPE = _class.staticFieldId(
    r"MIME_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MIME_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIME_TYPE =>
      _id_MIME_TYPE.get(_class, const jni.JStringType());

  static final _id_PARENT = _class.staticFieldId(
    r"PARENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String PARENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PARENT =>
      _id_PARENT.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Files_FileColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Files_FileColumns.implement(
    $MediaStore_Files_FileColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Files_FileColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.provider.MediaStore$Files$FileColumns",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Files_FileColumnsImpl {
  factory $MediaStore_Files_FileColumnsImpl() =
      _$MediaStore_Files_FileColumnsImpl;
}

class _$MediaStore_Files_FileColumnsImpl
    implements $MediaStore_Files_FileColumnsImpl {
  _$MediaStore_Files_FileColumnsImpl();
}

final class $MediaStore_Files_FileColumnsType
    extends jni.JObjType<MediaStore_Files_FileColumns> {
  const $MediaStore_Files_FileColumnsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Files$FileColumns;";

  @override
  MediaStore_Files_FileColumns fromReference(jni.JReference reference) =>
      MediaStore_Files_FileColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Files_FileColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Files_FileColumnsType) &&
        other is $MediaStore_Files_FileColumnsType;
  }
}

/// from: android.provider.MediaStore$Files
class MediaStore_Files extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Files> $type = type;

  MediaStore_Files.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Files");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_FilesType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Files() {
    return MediaStore_Files.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getContentUri1 = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;J)Landroid/net/Uri;",
  );

  static final _getContentUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri1(
    jni.JString string,
    int j,
  ) {
    return _getContentUri1(_class.reference.pointer,
            _id_getContentUri1 as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const $UriType());
  }
}

final class $MediaStore_FilesType extends jni.JObjType<MediaStore_Files> {
  const $MediaStore_FilesType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Files;";

  @override
  MediaStore_Files fromReference(jni.JReference reference) =>
      MediaStore_Files.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_FilesType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_FilesType) &&
        other is $MediaStore_FilesType;
  }
}

/// from: android.provider.MediaStore$Images$ImageColumns
class MediaStore_Images_ImageColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Images_ImageColumns> $type = type;

  MediaStore_Images_ImageColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Images$ImageColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Images_ImageColumnsType();
  static final _id_DESCRIPTION = _class.staticFieldId(
    r"DESCRIPTION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DESCRIPTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DESCRIPTION =>
      _id_DESCRIPTION.get(_class, const jni.JStringType());

  static final _id_EXPOSURE_TIME = _class.staticFieldId(
    r"EXPOSURE_TIME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXPOSURE_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXPOSURE_TIME =>
      _id_EXPOSURE_TIME.get(_class, const jni.JStringType());

  static final _id_F_NUMBER = _class.staticFieldId(
    r"F_NUMBER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String F_NUMBER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get F_NUMBER =>
      _id_F_NUMBER.get(_class, const jni.JStringType());

  static final _id_ISO = _class.staticFieldId(
    r"ISO",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ISO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ISO => _id_ISO.get(_class, const jni.JStringType());

  static final _id_IS_PRIVATE = _class.staticFieldId(
    r"IS_PRIVATE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_PRIVATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_PRIVATE =>
      _id_IS_PRIVATE.get(_class, const jni.JStringType());

  static final _id_LATITUDE = _class.staticFieldId(
    r"LATITUDE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LATITUDE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LATITUDE =>
      _id_LATITUDE.get(_class, const jni.JStringType());

  static final _id_LONGITUDE = _class.staticFieldId(
    r"LONGITUDE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LONGITUDE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LONGITUDE =>
      _id_LONGITUDE.get(_class, const jni.JStringType());

  static final _id_MINI_THUMB_MAGIC = _class.staticFieldId(
    r"MINI_THUMB_MAGIC",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MINI_THUMB_MAGIC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MINI_THUMB_MAGIC =>
      _id_MINI_THUMB_MAGIC.get(_class, const jni.JStringType());

  static final _id_PICASA_ID = _class.staticFieldId(
    r"PICASA_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String PICASA_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PICASA_ID =>
      _id_PICASA_ID.get(_class, const jni.JStringType());

  static final _id_SCENE_CAPTURE_TYPE = _class.staticFieldId(
    r"SCENE_CAPTURE_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SCENE_CAPTURE_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SCENE_CAPTURE_TYPE =>
      _id_SCENE_CAPTURE_TYPE.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Images_ImageColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Images_ImageColumns.implement(
    $MediaStore_Images_ImageColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Images_ImageColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.provider.MediaStore$Images$ImageColumns",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Images_ImageColumnsImpl {
  factory $MediaStore_Images_ImageColumnsImpl() =
      _$MediaStore_Images_ImageColumnsImpl;
}

class _$MediaStore_Images_ImageColumnsImpl
    implements $MediaStore_Images_ImageColumnsImpl {
  _$MediaStore_Images_ImageColumnsImpl();
}

final class $MediaStore_Images_ImageColumnsType
    extends jni.JObjType<MediaStore_Images_ImageColumns> {
  const $MediaStore_Images_ImageColumnsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Images$ImageColumns;";

  @override
  MediaStore_Images_ImageColumns fromReference(jni.JReference reference) =>
      MediaStore_Images_ImageColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Images_ImageColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Images_ImageColumnsType) &&
        other is $MediaStore_Images_ImageColumnsType;
  }
}

/// from: android.provider.MediaStore$Images$Media
class MediaStore_Images_Media extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Images_Media> $type = type;

  MediaStore_Images_Media.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Images$Media");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Images_MediaType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r"CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r"EXTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r"INTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Images_Media() {
    return MediaStore_Images_Media.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_query = _class.staticMethodId(
    r"query",
    r"(Landroid/content/ContentResolver;Landroid/net/Uri;[Ljava/lang/String;)Landroid/database/Cursor;",
  );

  static final _query = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.database.Cursor query(android.content.ContentResolver contentResolver, android.net.Uri uri, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static Cursor query(
    ContentResolver contentResolver,
    Uri uri,
    jni.JArray<jni.JString> strings,
  ) {
    return _query(
            _class.reference.pointer,
            _id_query as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer)
        .object(const $CursorType());
  }

  static final _id_query1 = _class.staticMethodId(
    r"query",
    r"(Landroid/content/ContentResolver;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;",
  );

  static final _query1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.database.Cursor query(android.content.ContentResolver contentResolver, android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static Cursor query1(
    ContentResolver contentResolver,
    Uri uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JString string1,
  ) {
    return _query1(
            _class.reference.pointer,
            _id_query1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const $CursorType());
  }

  static final _id_query2 = _class.staticMethodId(
    r"query",
    r"(Landroid/content/ContentResolver;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;",
  );

  static final _query2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.database.Cursor query(android.content.ContentResolver contentResolver, android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static Cursor query2(
    ContentResolver contentResolver,
    Uri uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JArray<jni.JString> strings1,
    jni.JString string1,
  ) {
    return _query2(
            _class.reference.pointer,
            _id_query2 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            strings1.reference.pointer,
            string1.reference.pointer)
        .object(const $CursorType());
  }

  static final _id_getBitmap = _class.staticMethodId(
    r"getBitmap",
    r"(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/graphics/Bitmap;",
  );

  static final _getBitmap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap getBitmap(android.content.ContentResolver contentResolver, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getBitmap(
    ContentResolver contentResolver,
    Uri uri,
  ) {
    return _getBitmap(
            _class.reference.pointer,
            _id_getBitmap as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_insertImage = _class.staticMethodId(
    r"insertImage",
    r"(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _insertImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String insertImage(android.content.ContentResolver contentResolver, java.lang.String string, java.lang.String string1, java.lang.String string2)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString insertImage(
    ContentResolver contentResolver,
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    return _insertImage(
            _class.reference.pointer,
            _id_insertImage as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_insertImage1 = _class.staticMethodId(
    r"insertImage",
    r"(Landroid/content/ContentResolver;Landroid/graphics/Bitmap;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _insertImage1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String insertImage(android.content.ContentResolver contentResolver, android.graphics.Bitmap bitmap, java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString insertImage1(
    ContentResolver contentResolver,
    jni.JObject bitmap,
    jni.JString string,
    jni.JString string1,
  ) {
    return _insertImage1(
            _class.reference.pointer,
            _id_insertImage1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            bitmap.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getContentUri1 = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;J)Landroid/net/Uri;",
  );

  static final _getContentUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri1(
    jni.JString string,
    int j,
  ) {
    return _getContentUri1(_class.reference.pointer,
            _id_getContentUri1 as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const $UriType());
  }
}

final class $MediaStore_Images_MediaType
    extends jni.JObjType<MediaStore_Images_Media> {
  const $MediaStore_Images_MediaType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Images$Media;";

  @override
  MediaStore_Images_Media fromReference(jni.JReference reference) =>
      MediaStore_Images_Media.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Images_MediaType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Images_MediaType) &&
        other is $MediaStore_Images_MediaType;
  }
}

/// from: android.provider.MediaStore$Images$Thumbnails
class MediaStore_Images_Thumbnails extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Images_Thumbnails> $type = type;

  MediaStore_Images_Thumbnails.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Images$Thumbnails");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Images_ThumbnailsType();
  static final _id_DATA = _class.staticFieldId(
    r"DATA",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATA => _id_DATA.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r"EXTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const $UriType());

  /// from: static public final int FULL_SCREEN_KIND
  static const FULL_SCREEN_KIND = 2;
  static final _id_HEIGHT = _class.staticFieldId(
    r"HEIGHT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String HEIGHT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEIGHT =>
      _id_HEIGHT.get(_class, const jni.JStringType());

  static final _id_IMAGE_ID = _class.staticFieldId(
    r"IMAGE_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IMAGE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IMAGE_ID =>
      _id_IMAGE_ID.get(_class, const jni.JStringType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r"INTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_KIND = _class.staticFieldId(
    r"KIND",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String KIND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get KIND => _id_KIND.get(_class, const jni.JStringType());

  /// from: static public final int MICRO_KIND
  static const MICRO_KIND = 3;

  /// from: static public final int MINI_KIND
  static const MINI_KIND = 1;
  static final _id_THUMB_DATA = _class.staticFieldId(
    r"THUMB_DATA",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String THUMB_DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get THUMB_DATA =>
      _id_THUMB_DATA.get(_class, const jni.JStringType());

  static final _id_WIDTH = _class.staticFieldId(
    r"WIDTH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIDTH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIDTH =>
      _id_WIDTH.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Images_Thumbnails() {
    return MediaStore_Images_Thumbnails.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_query = _class.staticMethodId(
    r"query",
    r"(Landroid/content/ContentResolver;Landroid/net/Uri;[Ljava/lang/String;)Landroid/database/Cursor;",
  );

  static final _query = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final android.database.Cursor query(android.content.ContentResolver contentResolver, android.net.Uri uri, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static Cursor query(
    ContentResolver contentResolver,
    Uri uri,
    jni.JArray<jni.JString> strings,
  ) {
    return _query(
            _class.reference.pointer,
            _id_query as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer)
        .object(const $CursorType());
  }

  static final _id_queryMiniThumbnails = _class.staticMethodId(
    r"queryMiniThumbnails",
    r"(Landroid/content/ContentResolver;Landroid/net/Uri;I[Ljava/lang/String;)Landroid/database/Cursor;",
  );

  static final _queryMiniThumbnails = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final android.database.Cursor queryMiniThumbnails(android.content.ContentResolver contentResolver, android.net.Uri uri, int i, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static Cursor queryMiniThumbnails(
    ContentResolver contentResolver,
    Uri uri,
    int i,
    jni.JArray<jni.JString> strings,
  ) {
    return _queryMiniThumbnails(
            _class.reference.pointer,
            _id_queryMiniThumbnails as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            i,
            strings.reference.pointer)
        .object(const $CursorType());
  }

  static final _id_queryMiniThumbnail = _class.staticMethodId(
    r"queryMiniThumbnail",
    r"(Landroid/content/ContentResolver;JI[Ljava/lang/String;)Landroid/database/Cursor;",
  );

  static final _queryMiniThumbnail = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public final android.database.Cursor queryMiniThumbnail(android.content.ContentResolver contentResolver, long j, int i, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static Cursor queryMiniThumbnail(
    ContentResolver contentResolver,
    int j,
    int i,
    jni.JArray<jni.JString> strings,
  ) {
    return _queryMiniThumbnail(
            _class.reference.pointer,
            _id_queryMiniThumbnail as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            i,
            strings.reference.pointer)
        .object(const $CursorType());
  }

  static final _id_cancelThumbnailRequest = _class.staticMethodId(
    r"cancelThumbnailRequest",
    r"(Landroid/content/ContentResolver;J)V",
  );

  static final _cancelThumbnailRequest = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public void cancelThumbnailRequest(android.content.ContentResolver contentResolver, long j)
  static void cancelThumbnailRequest(
    ContentResolver contentResolver,
    int j,
  ) {
    _cancelThumbnailRequest(
            _class.reference.pointer,
            _id_cancelThumbnailRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j)
        .check();
  }

  static final _id_getThumbnail = _class.staticMethodId(
    r"getThumbnail",
    r"(Landroid/content/ContentResolver;JILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;",
  );

  static final _getThumbnail = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap getThumbnail(android.content.ContentResolver contentResolver, long j, int i, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getThumbnail(
    ContentResolver contentResolver,
    int j,
    int i,
    jni.JObject options,
  ) {
    return _getThumbnail(
            _class.reference.pointer,
            _id_getThumbnail as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            i,
            options.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_cancelThumbnailRequest1 = _class.staticMethodId(
    r"cancelThumbnailRequest",
    r"(Landroid/content/ContentResolver;JJ)V",
  );

  static final _cancelThumbnailRequest1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public void cancelThumbnailRequest(android.content.ContentResolver contentResolver, long j, long j1)
  static void cancelThumbnailRequest1(
    ContentResolver contentResolver,
    int j,
    int j1,
  ) {
    _cancelThumbnailRequest1(
            _class.reference.pointer,
            _id_cancelThumbnailRequest1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            j1)
        .check();
  }

  static final _id_getThumbnail1 = _class.staticMethodId(
    r"getThumbnail",
    r"(Landroid/content/ContentResolver;JJILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;",
  );

  static final _getThumbnail1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap getThumbnail(android.content.ContentResolver contentResolver, long j, long j1, int i, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getThumbnail1(
    ContentResolver contentResolver,
    int j,
    int j1,
    int i,
    jni.JObject options,
  ) {
    return _getThumbnail1(
            _class.reference.pointer,
            _id_getThumbnail1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            j1,
            i,
            options.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getKindSize = _class.staticMethodId(
    r"getKindSize",
    r"(I)Landroid/util/Size;",
  );

  static final _getKindSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.util.Size getKindSize(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getKindSize(
    int i,
  ) {
    return _getKindSize(
            _class.reference.pointer, _id_getKindSize as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }
}

final class $MediaStore_Images_ThumbnailsType
    extends jni.JObjType<MediaStore_Images_Thumbnails> {
  const $MediaStore_Images_ThumbnailsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Images$Thumbnails;";

  @override
  MediaStore_Images_Thumbnails fromReference(jni.JReference reference) =>
      MediaStore_Images_Thumbnails.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Images_ThumbnailsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Images_ThumbnailsType) &&
        other is $MediaStore_Images_ThumbnailsType;
  }
}

/// from: android.provider.MediaStore$Images
class MediaStore_Images extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Images> $type = type;

  MediaStore_Images.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Images");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_ImagesType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Images() {
    return MediaStore_Images.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }
}

final class $MediaStore_ImagesType extends jni.JObjType<MediaStore_Images> {
  const $MediaStore_ImagesType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Images;";

  @override
  MediaStore_Images fromReference(jni.JReference reference) =>
      MediaStore_Images.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_ImagesType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_ImagesType) &&
        other is $MediaStore_ImagesType;
  }
}

/// from: android.provider.MediaStore$MediaColumns
class MediaStore_MediaColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_MediaColumns> $type = type;

  MediaStore_MediaColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$MediaColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_MediaColumnsType();
  static final _id_ALBUM = _class.staticFieldId(
    r"ALBUM",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ALBUM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM =>
      _id_ALBUM.get(_class, const jni.JStringType());

  static final _id_ALBUM_ARTIST = _class.staticFieldId(
    r"ALBUM_ARTIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ALBUM_ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALBUM_ARTIST =>
      _id_ALBUM_ARTIST.get(_class, const jni.JStringType());

  static final _id_ARTIST = _class.staticFieldId(
    r"ARTIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ARTIST =>
      _id_ARTIST.get(_class, const jni.JStringType());

  static final _id_AUTHOR = _class.staticFieldId(
    r"AUTHOR",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String AUTHOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUTHOR =>
      _id_AUTHOR.get(_class, const jni.JStringType());

  static final _id_BITRATE = _class.staticFieldId(
    r"BITRATE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BITRATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BITRATE =>
      _id_BITRATE.get(_class, const jni.JStringType());

  static final _id_BUCKET_DISPLAY_NAME = _class.staticFieldId(
    r"BUCKET_DISPLAY_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BUCKET_DISPLAY_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BUCKET_DISPLAY_NAME =>
      _id_BUCKET_DISPLAY_NAME.get(_class, const jni.JStringType());

  static final _id_BUCKET_ID = _class.staticFieldId(
    r"BUCKET_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BUCKET_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BUCKET_ID =>
      _id_BUCKET_ID.get(_class, const jni.JStringType());

  static final _id_CAPTURE_FRAMERATE = _class.staticFieldId(
    r"CAPTURE_FRAMERATE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CAPTURE_FRAMERATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAPTURE_FRAMERATE =>
      _id_CAPTURE_FRAMERATE.get(_class, const jni.JStringType());

  static final _id_CD_TRACK_NUMBER = _class.staticFieldId(
    r"CD_TRACK_NUMBER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CD_TRACK_NUMBER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CD_TRACK_NUMBER =>
      _id_CD_TRACK_NUMBER.get(_class, const jni.JStringType());

  static final _id_COMPILATION = _class.staticFieldId(
    r"COMPILATION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String COMPILATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COMPILATION =>
      _id_COMPILATION.get(_class, const jni.JStringType());

  static final _id_COMPOSER = _class.staticFieldId(
    r"COMPOSER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String COMPOSER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COMPOSER =>
      _id_COMPOSER.get(_class, const jni.JStringType());

  static final _id_DATA = _class.staticFieldId(
    r"DATA",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATA => _id_DATA.get(_class, const jni.JStringType());

  static final _id_DATE_ADDED = _class.staticFieldId(
    r"DATE_ADDED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_ADDED =>
      _id_DATE_ADDED.get(_class, const jni.JStringType());

  static final _id_DATE_EXPIRES = _class.staticFieldId(
    r"DATE_EXPIRES",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATE_EXPIRES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_EXPIRES =>
      _id_DATE_EXPIRES.get(_class, const jni.JStringType());

  static final _id_DATE_MODIFIED = _class.staticFieldId(
    r"DATE_MODIFIED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATE_MODIFIED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_MODIFIED =>
      _id_DATE_MODIFIED.get(_class, const jni.JStringType());

  static final _id_DATE_TAKEN = _class.staticFieldId(
    r"DATE_TAKEN",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATE_TAKEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_TAKEN =>
      _id_DATE_TAKEN.get(_class, const jni.JStringType());

  static final _id_DISC_NUMBER = _class.staticFieldId(
    r"DISC_NUMBER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DISC_NUMBER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISC_NUMBER =>
      _id_DISC_NUMBER.get(_class, const jni.JStringType());

  static final _id_DISPLAY_NAME = _class.staticFieldId(
    r"DISPLAY_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DISPLAY_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_NAME =>
      _id_DISPLAY_NAME.get(_class, const jni.JStringType());

  static final _id_DOCUMENT_ID = _class.staticFieldId(
    r"DOCUMENT_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DOCUMENT_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOCUMENT_ID =>
      _id_DOCUMENT_ID.get(_class, const jni.JStringType());

  static final _id_DURATION = _class.staticFieldId(
    r"DURATION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DURATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DURATION =>
      _id_DURATION.get(_class, const jni.JStringType());

  static final _id_GENERATION_ADDED = _class.staticFieldId(
    r"GENERATION_ADDED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String GENERATION_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENERATION_ADDED =>
      _id_GENERATION_ADDED.get(_class, const jni.JStringType());

  static final _id_GENERATION_MODIFIED = _class.staticFieldId(
    r"GENERATION_MODIFIED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String GENERATION_MODIFIED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENERATION_MODIFIED =>
      _id_GENERATION_MODIFIED.get(_class, const jni.JStringType());

  static final _id_GENRE = _class.staticFieldId(
    r"GENRE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String GENRE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GENRE =>
      _id_GENRE.get(_class, const jni.JStringType());

  static final _id_HEIGHT = _class.staticFieldId(
    r"HEIGHT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String HEIGHT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEIGHT =>
      _id_HEIGHT.get(_class, const jni.JStringType());

  static final _id_INSTANCE_ID = _class.staticFieldId(
    r"INSTANCE_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INSTANCE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INSTANCE_ID =>
      _id_INSTANCE_ID.get(_class, const jni.JStringType());

  static final _id_IS_DOWNLOAD = _class.staticFieldId(
    r"IS_DOWNLOAD",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_DOWNLOAD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_DOWNLOAD =>
      _id_IS_DOWNLOAD.get(_class, const jni.JStringType());

  static final _id_IS_DRM = _class.staticFieldId(
    r"IS_DRM",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_DRM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_DRM =>
      _id_IS_DRM.get(_class, const jni.JStringType());

  static final _id_IS_FAVORITE = _class.staticFieldId(
    r"IS_FAVORITE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_FAVORITE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_FAVORITE =>
      _id_IS_FAVORITE.get(_class, const jni.JStringType());

  static final _id_IS_PENDING = _class.staticFieldId(
    r"IS_PENDING",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_PENDING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_PENDING =>
      _id_IS_PENDING.get(_class, const jni.JStringType());

  static final _id_IS_TRASHED = _class.staticFieldId(
    r"IS_TRASHED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_TRASHED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_TRASHED =>
      _id_IS_TRASHED.get(_class, const jni.JStringType());

  static final _id_MIME_TYPE = _class.staticFieldId(
    r"MIME_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MIME_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIME_TYPE =>
      _id_MIME_TYPE.get(_class, const jni.JStringType());

  static final _id_NUM_TRACKS = _class.staticFieldId(
    r"NUM_TRACKS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NUM_TRACKS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NUM_TRACKS =>
      _id_NUM_TRACKS.get(_class, const jni.JStringType());

  static final _id_ORIENTATION = _class.staticFieldId(
    r"ORIENTATION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ORIENTATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ORIENTATION =>
      _id_ORIENTATION.get(_class, const jni.JStringType());

  static final _id_ORIGINAL_DOCUMENT_ID = _class.staticFieldId(
    r"ORIGINAL_DOCUMENT_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ORIGINAL_DOCUMENT_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ORIGINAL_DOCUMENT_ID =>
      _id_ORIGINAL_DOCUMENT_ID.get(_class, const jni.JStringType());

  static final _id_OWNER_PACKAGE_NAME = _class.staticFieldId(
    r"OWNER_PACKAGE_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String OWNER_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get OWNER_PACKAGE_NAME =>
      _id_OWNER_PACKAGE_NAME.get(_class, const jni.JStringType());

  static final _id_RELATIVE_PATH = _class.staticFieldId(
    r"RELATIVE_PATH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String RELATIVE_PATH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RELATIVE_PATH =>
      _id_RELATIVE_PATH.get(_class, const jni.JStringType());

  static final _id_RESOLUTION = _class.staticFieldId(
    r"RESOLUTION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String RESOLUTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RESOLUTION =>
      _id_RESOLUTION.get(_class, const jni.JStringType());

  static final _id_SIZE = _class.staticFieldId(
    r"SIZE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SIZE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SIZE => _id_SIZE.get(_class, const jni.JStringType());

  static final _id_TITLE = _class.staticFieldId(
    r"TITLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TITLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TITLE =>
      _id_TITLE.get(_class, const jni.JStringType());

  static final _id_VOLUME_NAME = _class.staticFieldId(
    r"VOLUME_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VOLUME_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VOLUME_NAME =>
      _id_VOLUME_NAME.get(_class, const jni.JStringType());

  static final _id_WIDTH = _class.staticFieldId(
    r"WIDTH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIDTH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIDTH =>
      _id_WIDTH.get(_class, const jni.JStringType());

  static final _id_WRITER = _class.staticFieldId(
    r"WRITER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WRITER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WRITER =>
      _id_WRITER.get(_class, const jni.JStringType());

  static final _id_XMP = _class.staticFieldId(
    r"XMP",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String XMP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get XMP => _id_XMP.get(_class, const jni.JStringType());

  static final _id_YEAR = _class.staticFieldId(
    r"YEAR",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String YEAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get YEAR => _id_YEAR.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_MediaColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_MediaColumns.implement(
    $MediaStore_MediaColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_MediaColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.provider.MediaStore$MediaColumns",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_MediaColumnsImpl {
  factory $MediaStore_MediaColumnsImpl() = _$MediaStore_MediaColumnsImpl;
}

class _$MediaStore_MediaColumnsImpl implements $MediaStore_MediaColumnsImpl {
  _$MediaStore_MediaColumnsImpl();
}

final class $MediaStore_MediaColumnsType
    extends jni.JObjType<MediaStore_MediaColumns> {
  const $MediaStore_MediaColumnsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$MediaColumns;";

  @override
  MediaStore_MediaColumns fromReference(jni.JReference reference) =>
      MediaStore_MediaColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_MediaColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_MediaColumnsType) &&
        other is $MediaStore_MediaColumnsType;
  }
}

/// from: android.provider.MediaStore$PickerMediaColumns
class MediaStore_PickerMediaColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_PickerMediaColumns> $type = type;

  MediaStore_PickerMediaColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$PickerMediaColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_PickerMediaColumnsType();
  static final _id_DATA = _class.staticFieldId(
    r"DATA",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATA => _id_DATA.get(_class, const jni.JStringType());

  static final _id_DATE_TAKEN = _class.staticFieldId(
    r"DATE_TAKEN",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATE_TAKEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATE_TAKEN =>
      _id_DATE_TAKEN.get(_class, const jni.JStringType());

  static final _id_DISPLAY_NAME = _class.staticFieldId(
    r"DISPLAY_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DISPLAY_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_NAME =>
      _id_DISPLAY_NAME.get(_class, const jni.JStringType());

  static final _id_DURATION_MILLIS = _class.staticFieldId(
    r"DURATION_MILLIS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DURATION_MILLIS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DURATION_MILLIS =>
      _id_DURATION_MILLIS.get(_class, const jni.JStringType());

  static final _id_HEIGHT = _class.staticFieldId(
    r"HEIGHT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String HEIGHT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEIGHT =>
      _id_HEIGHT.get(_class, const jni.JStringType());

  static final _id_MIME_TYPE = _class.staticFieldId(
    r"MIME_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MIME_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIME_TYPE =>
      _id_MIME_TYPE.get(_class, const jni.JStringType());

  static final _id_ORIENTATION = _class.staticFieldId(
    r"ORIENTATION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ORIENTATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ORIENTATION =>
      _id_ORIENTATION.get(_class, const jni.JStringType());

  static final _id_SIZE = _class.staticFieldId(
    r"SIZE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SIZE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SIZE => _id_SIZE.get(_class, const jni.JStringType());

  static final _id_WIDTH = _class.staticFieldId(
    r"WIDTH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIDTH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIDTH =>
      _id_WIDTH.get(_class, const jni.JStringType());
}

final class $MediaStore_PickerMediaColumnsType
    extends jni.JObjType<MediaStore_PickerMediaColumns> {
  const $MediaStore_PickerMediaColumnsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$PickerMediaColumns;";

  @override
  MediaStore_PickerMediaColumns fromReference(jni.JReference reference) =>
      MediaStore_PickerMediaColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_PickerMediaColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_PickerMediaColumnsType) &&
        other is $MediaStore_PickerMediaColumnsType;
  }
}

/// from: android.provider.MediaStore$Video$Media
class MediaStore_Video_Media extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Video_Media> $type = type;

  MediaStore_Video_Media.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Video$Media");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Video_MediaType();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r"CONTENT_TYPE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONTENT_TYPE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONTENT_TYPE =>
      _id_CONTENT_TYPE.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r"EXTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r"INTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Video_Media() {
    return MediaStore_Video_Media.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getContentUri1 = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;J)Landroid/net/Uri;",
  );

  static final _getContentUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri1(
    jni.JString string,
    int j,
  ) {
    return _getContentUri1(_class.reference.pointer,
            _id_getContentUri1 as jni.JMethodIDPtr, string.reference.pointer, j)
        .object(const $UriType());
  }
}

final class $MediaStore_Video_MediaType
    extends jni.JObjType<MediaStore_Video_Media> {
  const $MediaStore_Video_MediaType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Video$Media;";

  @override
  MediaStore_Video_Media fromReference(jni.JReference reference) =>
      MediaStore_Video_Media.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Video_MediaType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Video_MediaType) &&
        other is $MediaStore_Video_MediaType;
  }
}

/// from: android.provider.MediaStore$Video$Thumbnails
class MediaStore_Video_Thumbnails extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Video_Thumbnails> $type = type;

  MediaStore_Video_Thumbnails.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Video$Thumbnails");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Video_ThumbnailsType();
  static final _id_DATA = _class.staticFieldId(
    r"DATA",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DATA => _id_DATA.get(_class, const jni.JStringType());

  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_EXTERNAL_CONTENT_URI = _class.staticFieldId(
    r"EXTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri EXTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get EXTERNAL_CONTENT_URI =>
      _id_EXTERNAL_CONTENT_URI.get(_class, const $UriType());

  /// from: static public final int FULL_SCREEN_KIND
  static const FULL_SCREEN_KIND = 2;
  static final _id_HEIGHT = _class.staticFieldId(
    r"HEIGHT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String HEIGHT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEIGHT =>
      _id_HEIGHT.get(_class, const jni.JStringType());

  static final _id_INTERNAL_CONTENT_URI = _class.staticFieldId(
    r"INTERNAL_CONTENT_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri INTERNAL_CONTENT_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get INTERNAL_CONTENT_URI =>
      _id_INTERNAL_CONTENT_URI.get(_class, const $UriType());

  static final _id_KIND = _class.staticFieldId(
    r"KIND",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String KIND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get KIND => _id_KIND.get(_class, const jni.JStringType());

  /// from: static public final int MICRO_KIND
  static const MICRO_KIND = 3;

  /// from: static public final int MINI_KIND
  static const MINI_KIND = 1;
  static final _id_VIDEO_ID = _class.staticFieldId(
    r"VIDEO_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VIDEO_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIDEO_ID =>
      _id_VIDEO_ID.get(_class, const jni.JStringType());

  static final _id_WIDTH = _class.staticFieldId(
    r"WIDTH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIDTH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIDTH =>
      _id_WIDTH.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Video_Thumbnails() {
    return MediaStore_Video_Thumbnails.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_cancelThumbnailRequest = _class.staticMethodId(
    r"cancelThumbnailRequest",
    r"(Landroid/content/ContentResolver;J)V",
  );

  static final _cancelThumbnailRequest = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public void cancelThumbnailRequest(android.content.ContentResolver contentResolver, long j)
  static void cancelThumbnailRequest(
    ContentResolver contentResolver,
    int j,
  ) {
    _cancelThumbnailRequest(
            _class.reference.pointer,
            _id_cancelThumbnailRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j)
        .check();
  }

  static final _id_getThumbnail = _class.staticMethodId(
    r"getThumbnail",
    r"(Landroid/content/ContentResolver;JILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;",
  );

  static final _getThumbnail = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap getThumbnail(android.content.ContentResolver contentResolver, long j, int i, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getThumbnail(
    ContentResolver contentResolver,
    int j,
    int i,
    jni.JObject options,
  ) {
    return _getThumbnail(
            _class.reference.pointer,
            _id_getThumbnail as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            i,
            options.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_cancelThumbnailRequest1 = _class.staticMethodId(
    r"cancelThumbnailRequest",
    r"(Landroid/content/ContentResolver;JJ)V",
  );

  static final _cancelThumbnailRequest1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public void cancelThumbnailRequest(android.content.ContentResolver contentResolver, long j, long j1)
  static void cancelThumbnailRequest1(
    ContentResolver contentResolver,
    int j,
    int j1,
  ) {
    _cancelThumbnailRequest1(
            _class.reference.pointer,
            _id_cancelThumbnailRequest1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            j1)
        .check();
  }

  static final _id_getThumbnail1 = _class.staticMethodId(
    r"getThumbnail",
    r"(Landroid/content/ContentResolver;JJILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;",
  );

  static final _getThumbnail1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.graphics.Bitmap getThumbnail(android.content.ContentResolver contentResolver, long j, long j1, int i, android.graphics.BitmapFactory$Options options)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getThumbnail1(
    ContentResolver contentResolver,
    int j,
    int j1,
    int i,
    jni.JObject options,
  ) {
    return _getThumbnail1(
            _class.reference.pointer,
            _id_getThumbnail1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            j,
            j1,
            i,
            options.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getContentUri = _class.staticMethodId(
    r"getContentUri",
    r"(Ljava/lang/String;)Landroid/net/Uri;",
  );

  static final _getContentUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getContentUri(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getContentUri(
    jni.JString string,
  ) {
    return _getContentUri(_class.reference.pointer,
            _id_getContentUri as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getKindSize = _class.staticMethodId(
    r"getKindSize",
    r"(I)Landroid/util/Size;",
  );

  static final _getKindSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.util.Size getKindSize(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getKindSize(
    int i,
  ) {
    return _getKindSize(
            _class.reference.pointer, _id_getKindSize as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }
}

final class $MediaStore_Video_ThumbnailsType
    extends jni.JObjType<MediaStore_Video_Thumbnails> {
  const $MediaStore_Video_ThumbnailsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Video$Thumbnails;";

  @override
  MediaStore_Video_Thumbnails fromReference(jni.JReference reference) =>
      MediaStore_Video_Thumbnails.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Video_ThumbnailsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Video_ThumbnailsType) &&
        other is $MediaStore_Video_ThumbnailsType;
  }
}

/// from: android.provider.MediaStore$Video$VideoColumns
class MediaStore_Video_VideoColumns extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Video_VideoColumns> $type = type;

  MediaStore_Video_VideoColumns.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Video$VideoColumns");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_Video_VideoColumnsType();
  static final _id_BOOKMARK = _class.staticFieldId(
    r"BOOKMARK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BOOKMARK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BOOKMARK =>
      _id_BOOKMARK.get(_class, const jni.JStringType());

  static final _id_CATEGORY = _class.staticFieldId(
    r"CATEGORY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY =>
      _id_CATEGORY.get(_class, const jni.JStringType());

  static final _id_COLOR_RANGE = _class.staticFieldId(
    r"COLOR_RANGE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String COLOR_RANGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COLOR_RANGE =>
      _id_COLOR_RANGE.get(_class, const jni.JStringType());

  static final _id_COLOR_STANDARD = _class.staticFieldId(
    r"COLOR_STANDARD",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String COLOR_STANDARD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COLOR_STANDARD =>
      _id_COLOR_STANDARD.get(_class, const jni.JStringType());

  static final _id_COLOR_TRANSFER = _class.staticFieldId(
    r"COLOR_TRANSFER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String COLOR_TRANSFER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COLOR_TRANSFER =>
      _id_COLOR_TRANSFER.get(_class, const jni.JStringType());

  static final _id_DESCRIPTION = _class.staticFieldId(
    r"DESCRIPTION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DESCRIPTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DESCRIPTION =>
      _id_DESCRIPTION.get(_class, const jni.JStringType());

  static final _id_IS_PRIVATE = _class.staticFieldId(
    r"IS_PRIVATE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IS_PRIVATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IS_PRIVATE =>
      _id_IS_PRIVATE.get(_class, const jni.JStringType());

  static final _id_LANGUAGE = _class.staticFieldId(
    r"LANGUAGE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LANGUAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LANGUAGE =>
      _id_LANGUAGE.get(_class, const jni.JStringType());

  static final _id_LATITUDE = _class.staticFieldId(
    r"LATITUDE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LATITUDE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LATITUDE =>
      _id_LATITUDE.get(_class, const jni.JStringType());

  static final _id_LONGITUDE = _class.staticFieldId(
    r"LONGITUDE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LONGITUDE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LONGITUDE =>
      _id_LONGITUDE.get(_class, const jni.JStringType());

  static final _id_MINI_THUMB_MAGIC = _class.staticFieldId(
    r"MINI_THUMB_MAGIC",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MINI_THUMB_MAGIC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MINI_THUMB_MAGIC =>
      _id_MINI_THUMB_MAGIC.get(_class, const jni.JStringType());

  static final _id_TAGS = _class.staticFieldId(
    r"TAGS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TAGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TAGS => _id_TAGS.get(_class, const jni.JStringType());

  /// Maps a specific port to the implemented interface.
  static final Map<int, $MediaStore_Video_VideoColumnsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory MediaStore_Video_VideoColumns.implement(
    $MediaStore_Video_VideoColumnsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = MediaStore_Video_VideoColumns.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.provider.MediaStore$Video$VideoColumns",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $MediaStore_Video_VideoColumnsImpl {
  factory $MediaStore_Video_VideoColumnsImpl() =
      _$MediaStore_Video_VideoColumnsImpl;
}

class _$MediaStore_Video_VideoColumnsImpl
    implements $MediaStore_Video_VideoColumnsImpl {
  _$MediaStore_Video_VideoColumnsImpl();
}

final class $MediaStore_Video_VideoColumnsType
    extends jni.JObjType<MediaStore_Video_VideoColumns> {
  const $MediaStore_Video_VideoColumnsType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Video$VideoColumns;";

  @override
  MediaStore_Video_VideoColumns fromReference(jni.JReference reference) =>
      MediaStore_Video_VideoColumns.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_Video_VideoColumnsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_Video_VideoColumnsType) &&
        other is $MediaStore_Video_VideoColumnsType;
  }
}

/// from: android.provider.MediaStore$Video
class MediaStore_Video extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore_Video> $type = type;

  MediaStore_Video.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/provider/MediaStore$Video");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStore_VideoType();
  static final _id_DEFAULT_SORT_ORDER = _class.staticFieldId(
    r"DEFAULT_SORT_ORDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_SORT_ORDER =>
      _id_DEFAULT_SORT_ORDER.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore_Video() {
    return MediaStore_Video.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_query = _class.staticMethodId(
    r"query",
    r"(Landroid/content/ContentResolver;Landroid/net/Uri;[Ljava/lang/String;)Landroid/database/Cursor;",
  );

  static final _query = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.database.Cursor query(android.content.ContentResolver contentResolver, android.net.Uri uri, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  static Cursor query(
    ContentResolver contentResolver,
    Uri uri,
    jni.JArray<jni.JString> strings,
  ) {
    return _query(
            _class.reference.pointer,
            _id_query as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer)
        .object(const $CursorType());
  }
}

final class $MediaStore_VideoType extends jni.JObjType<MediaStore_Video> {
  const $MediaStore_VideoType();

  @override
  String get signature => r"Landroid/provider/MediaStore$Video;";

  @override
  MediaStore_Video fromReference(jni.JReference reference) =>
      MediaStore_Video.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStore_VideoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStore_VideoType) &&
        other is $MediaStore_VideoType;
  }
}

/// from: android.provider.MediaStore
class MediaStore extends jni.JObject {
  @override
  late final jni.JObjType<MediaStore> $type = type;

  MediaStore.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/provider/MediaStore");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaStoreType();
  static final _id_ACTION_IMAGE_CAPTURE = _class.staticFieldId(
    r"ACTION_IMAGE_CAPTURE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_IMAGE_CAPTURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_IMAGE_CAPTURE =>
      _id_ACTION_IMAGE_CAPTURE.get(_class, const jni.JStringType());

  static final _id_ACTION_IMAGE_CAPTURE_SECURE = _class.staticFieldId(
    r"ACTION_IMAGE_CAPTURE_SECURE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_IMAGE_CAPTURE_SECURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_IMAGE_CAPTURE_SECURE =>
      _id_ACTION_IMAGE_CAPTURE_SECURE.get(_class, const jni.JStringType());

  static final _id_ACTION_PICK_IMAGES = _class.staticFieldId(
    r"ACTION_PICK_IMAGES",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PICK_IMAGES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PICK_IMAGES =>
      _id_ACTION_PICK_IMAGES.get(_class, const jni.JStringType());

  static final _id_ACTION_PICK_IMAGES_SETTINGS = _class.staticFieldId(
    r"ACTION_PICK_IMAGES_SETTINGS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PICK_IMAGES_SETTINGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PICK_IMAGES_SETTINGS =>
      _id_ACTION_PICK_IMAGES_SETTINGS.get(_class, const jni.JStringType());

  static final _id_ACTION_REVIEW = _class.staticFieldId(
    r"ACTION_REVIEW",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_REVIEW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_REVIEW =>
      _id_ACTION_REVIEW.get(_class, const jni.JStringType());

  static final _id_ACTION_REVIEW_SECURE = _class.staticFieldId(
    r"ACTION_REVIEW_SECURE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_REVIEW_SECURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_REVIEW_SECURE =>
      _id_ACTION_REVIEW_SECURE.get(_class, const jni.JStringType());

  static final _id_ACTION_VIDEO_CAPTURE = _class.staticFieldId(
    r"ACTION_VIDEO_CAPTURE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_VIDEO_CAPTURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIDEO_CAPTURE =>
      _id_ACTION_VIDEO_CAPTURE.get(_class, const jni.JStringType());

  static final _id_AUTHORITY = _class.staticFieldId(
    r"AUTHORITY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String AUTHORITY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUTHORITY =>
      _id_AUTHORITY.get(_class, const jni.JStringType());

  static final _id_AUTHORITY_URI = _class.staticFieldId(
    r"AUTHORITY_URI",
    r"Landroid/net/Uri;",
  );

  /// from: static public final android.net.Uri AUTHORITY_URI
  /// The returned object must be released after use, by calling the [release] method.
  static Uri get AUTHORITY_URI =>
      _id_AUTHORITY_URI.get(_class, const $UriType());

  static final _id_EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT = _class.staticFieldId(
    r"EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT =>
      _id_EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT.get(
          _class, const jni.JStringType());

  static final _id_EXTRA_BRIGHTNESS = _class.staticFieldId(
    r"EXTRA_BRIGHTNESS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_BRIGHTNESS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_BRIGHTNESS =>
      _id_EXTRA_BRIGHTNESS.get(_class, const jni.JStringType());

  static final _id_EXTRA_DURATION_LIMIT = _class.staticFieldId(
    r"EXTRA_DURATION_LIMIT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_DURATION_LIMIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DURATION_LIMIT =>
      _id_EXTRA_DURATION_LIMIT.get(_class, const jni.JStringType());

  static final _id_EXTRA_FINISH_ON_COMPLETION = _class.staticFieldId(
    r"EXTRA_FINISH_ON_COMPLETION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_FINISH_ON_COMPLETION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_FINISH_ON_COMPLETION =>
      _id_EXTRA_FINISH_ON_COMPLETION.get(_class, const jni.JStringType());

  static final _id_EXTRA_FULL_SCREEN = _class.staticFieldId(
    r"EXTRA_FULL_SCREEN",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_FULL_SCREEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_FULL_SCREEN =>
      _id_EXTRA_FULL_SCREEN.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_ALBUM = _class.staticFieldId(
    r"EXTRA_MEDIA_ALBUM",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_ALBUM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_ALBUM =>
      _id_EXTRA_MEDIA_ALBUM.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_ARTIST = _class.staticFieldId(
    r"EXTRA_MEDIA_ARTIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_ARTIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_ARTIST =>
      _id_EXTRA_MEDIA_ARTIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_CAPABILITIES = _class.staticFieldId(
    r"EXTRA_MEDIA_CAPABILITIES",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_CAPABILITIES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_CAPABILITIES =>
      _id_EXTRA_MEDIA_CAPABILITIES.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_CAPABILITIES_UID = _class.staticFieldId(
    r"EXTRA_MEDIA_CAPABILITIES_UID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_CAPABILITIES_UID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_CAPABILITIES_UID =>
      _id_EXTRA_MEDIA_CAPABILITIES_UID.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_FOCUS = _class.staticFieldId(
    r"EXTRA_MEDIA_FOCUS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_FOCUS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_FOCUS =>
      _id_EXTRA_MEDIA_FOCUS.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_GENRE = _class.staticFieldId(
    r"EXTRA_MEDIA_GENRE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_GENRE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_GENRE =>
      _id_EXTRA_MEDIA_GENRE.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_PLAYLIST = _class.staticFieldId(
    r"EXTRA_MEDIA_PLAYLIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_PLAYLIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_PLAYLIST =>
      _id_EXTRA_MEDIA_PLAYLIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_RADIO_CHANNEL = _class.staticFieldId(
    r"EXTRA_MEDIA_RADIO_CHANNEL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_RADIO_CHANNEL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_RADIO_CHANNEL =>
      _id_EXTRA_MEDIA_RADIO_CHANNEL.get(_class, const jni.JStringType());

  static final _id_EXTRA_MEDIA_TITLE = _class.staticFieldId(
    r"EXTRA_MEDIA_TITLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MEDIA_TITLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MEDIA_TITLE =>
      _id_EXTRA_MEDIA_TITLE.get(_class, const jni.JStringType());

  static final _id_EXTRA_OUTPUT = _class.staticFieldId(
    r"EXTRA_OUTPUT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_OUTPUT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_OUTPUT =>
      _id_EXTRA_OUTPUT.get(_class, const jni.JStringType());

  static final _id_EXTRA_PICK_IMAGES_MAX = _class.staticFieldId(
    r"EXTRA_PICK_IMAGES_MAX",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_PICK_IMAGES_MAX
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PICK_IMAGES_MAX =>
      _id_EXTRA_PICK_IMAGES_MAX.get(_class, const jni.JStringType());

  static final _id_EXTRA_SCREEN_ORIENTATION = _class.staticFieldId(
    r"EXTRA_SCREEN_ORIENTATION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SCREEN_ORIENTATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SCREEN_ORIENTATION =>
      _id_EXTRA_SCREEN_ORIENTATION.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHOW_ACTION_ICONS = _class.staticFieldId(
    r"EXTRA_SHOW_ACTION_ICONS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SHOW_ACTION_ICONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHOW_ACTION_ICONS =>
      _id_EXTRA_SHOW_ACTION_ICONS.get(_class, const jni.JStringType());

  static final _id_EXTRA_SIZE_LIMIT = _class.staticFieldId(
    r"EXTRA_SIZE_LIMIT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SIZE_LIMIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SIZE_LIMIT =>
      _id_EXTRA_SIZE_LIMIT.get(_class, const jni.JStringType());

  static final _id_EXTRA_VIDEO_QUALITY = _class.staticFieldId(
    r"EXTRA_VIDEO_QUALITY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_VIDEO_QUALITY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_VIDEO_QUALITY =>
      _id_EXTRA_VIDEO_QUALITY.get(_class, const jni.JStringType());

  static final _id_INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH = _class.staticFieldId(
    r"INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH =>
      _id_INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH.get(
          _class, const jni.JStringType());

  static final _id_INTENT_ACTION_MEDIA_SEARCH = _class.staticFieldId(
    r"INTENT_ACTION_MEDIA_SEARCH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INTENT_ACTION_MEDIA_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_MEDIA_SEARCH =>
      _id_INTENT_ACTION_MEDIA_SEARCH.get(_class, const jni.JStringType());

  static final _id_INTENT_ACTION_MUSIC_PLAYER = _class.staticFieldId(
    r"INTENT_ACTION_MUSIC_PLAYER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INTENT_ACTION_MUSIC_PLAYER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_MUSIC_PLAYER =>
      _id_INTENT_ACTION_MUSIC_PLAYER.get(_class, const jni.JStringType());

  static final _id_INTENT_ACTION_STILL_IMAGE_CAMERA = _class.staticFieldId(
    r"INTENT_ACTION_STILL_IMAGE_CAMERA",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INTENT_ACTION_STILL_IMAGE_CAMERA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_STILL_IMAGE_CAMERA =>
      _id_INTENT_ACTION_STILL_IMAGE_CAMERA.get(_class, const jni.JStringType());

  static final _id_INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE =
      _class.staticFieldId(
    r"INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE =>
      _id_INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.get(
          _class, const jni.JStringType());

  static final _id_INTENT_ACTION_TEXT_OPEN_FROM_SEARCH = _class.staticFieldId(
    r"INTENT_ACTION_TEXT_OPEN_FROM_SEARCH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INTENT_ACTION_TEXT_OPEN_FROM_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_TEXT_OPEN_FROM_SEARCH =>
      _id_INTENT_ACTION_TEXT_OPEN_FROM_SEARCH.get(
          _class, const jni.JStringType());

  static final _id_INTENT_ACTION_VIDEO_CAMERA = _class.staticFieldId(
    r"INTENT_ACTION_VIDEO_CAMERA",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INTENT_ACTION_VIDEO_CAMERA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_VIDEO_CAMERA =>
      _id_INTENT_ACTION_VIDEO_CAMERA.get(_class, const jni.JStringType());

  static final _id_INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH = _class.staticFieldId(
    r"INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH =>
      _id_INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH.get(
          _class, const jni.JStringType());

  /// from: static public final int MATCH_DEFAULT
  static const MATCH_DEFAULT = 0;

  /// from: static public final int MATCH_EXCLUDE
  static const MATCH_EXCLUDE = 2;

  /// from: static public final int MATCH_INCLUDE
  static const MATCH_INCLUDE = 1;

  /// from: static public final int MATCH_ONLY
  static const MATCH_ONLY = 3;
  static final _id_MEDIA_IGNORE_FILENAME = _class.staticFieldId(
    r"MEDIA_IGNORE_FILENAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_IGNORE_FILENAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_IGNORE_FILENAME =>
      _id_MEDIA_IGNORE_FILENAME.get(_class, const jni.JStringType());

  static final _id_MEDIA_SCANNER_VOLUME = _class.staticFieldId(
    r"MEDIA_SCANNER_VOLUME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_SCANNER_VOLUME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_SCANNER_VOLUME =>
      _id_MEDIA_SCANNER_VOLUME.get(_class, const jni.JStringType());

  static final _id_META_DATA_REVIEW_GALLERY_PREWARM_SERVICE =
      _class.staticFieldId(
    r"META_DATA_REVIEW_GALLERY_PREWARM_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String META_DATA_REVIEW_GALLERY_PREWARM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get META_DATA_REVIEW_GALLERY_PREWARM_SERVICE =>
      _id_META_DATA_REVIEW_GALLERY_PREWARM_SERVICE.get(
          _class, const jni.JStringType());

  static final _id_META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE =
      _class.staticFieldId(
    r"META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE =>
      _id_META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE.get(
          _class, const jni.JStringType());

  static final _id_QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES =
      _class.staticFieldId(
    r"QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES =>
      _id_QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES.get(
          _class, const jni.JStringType());

  static final _id_QUERY_ARG_MATCH_FAVORITE = _class.staticFieldId(
    r"QUERY_ARG_MATCH_FAVORITE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_MATCH_FAVORITE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_MATCH_FAVORITE =>
      _id_QUERY_ARG_MATCH_FAVORITE.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_MATCH_PENDING = _class.staticFieldId(
    r"QUERY_ARG_MATCH_PENDING",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_MATCH_PENDING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_MATCH_PENDING =>
      _id_QUERY_ARG_MATCH_PENDING.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_MATCH_TRASHED = _class.staticFieldId(
    r"QUERY_ARG_MATCH_TRASHED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_MATCH_TRASHED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_MATCH_TRASHED =>
      _id_QUERY_ARG_MATCH_TRASHED.get(_class, const jni.JStringType());

  static final _id_QUERY_ARG_RELATED_URI = _class.staticFieldId(
    r"QUERY_ARG_RELATED_URI",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String QUERY_ARG_RELATED_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get QUERY_ARG_RELATED_URI =>
      _id_QUERY_ARG_RELATED_URI.get(_class, const jni.JStringType());

  static final _id_UNKNOWN_STRING = _class.staticFieldId(
    r"UNKNOWN_STRING",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String UNKNOWN_STRING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get UNKNOWN_STRING =>
      _id_UNKNOWN_STRING.get(_class, const jni.JStringType());

  static final _id_VOLUME_EXTERNAL = _class.staticFieldId(
    r"VOLUME_EXTERNAL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VOLUME_EXTERNAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VOLUME_EXTERNAL =>
      _id_VOLUME_EXTERNAL.get(_class, const jni.JStringType());

  static final _id_VOLUME_EXTERNAL_PRIMARY = _class.staticFieldId(
    r"VOLUME_EXTERNAL_PRIMARY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VOLUME_EXTERNAL_PRIMARY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VOLUME_EXTERNAL_PRIMARY =>
      _id_VOLUME_EXTERNAL_PRIMARY.get(_class, const jni.JStringType());

  static final _id_VOLUME_INTERNAL = _class.staticFieldId(
    r"VOLUME_INTERNAL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VOLUME_INTERNAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VOLUME_INTERNAL =>
      _id_VOLUME_INTERNAL.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaStore() {
    return MediaStore.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getPickImagesMaxLimit = _class.staticMethodId(
    r"getPickImagesMaxLimit",
    r"()I",
  );

  static final _getPickImagesMaxLimit = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public int getPickImagesMaxLimit()
  static int getPickImagesMaxLimit() {
    return _getPickImagesMaxLimit(_class.reference.pointer,
            _id_getPickImagesMaxLimit as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setIncludePending = _class.staticMethodId(
    r"setIncludePending",
    r"(Landroid/net/Uri;)Landroid/net/Uri;",
  );

  static final _setIncludePending = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri setIncludePending(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri setIncludePending(
    Uri uri,
  ) {
    return _setIncludePending(_class.reference.pointer,
            _id_setIncludePending as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const $UriType());
  }

  static final _id_setRequireOriginal = _class.staticMethodId(
    r"setRequireOriginal",
    r"(Landroid/net/Uri;)Landroid/net/Uri;",
  );

  static final _setRequireOriginal = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri setRequireOriginal(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri setRequireOriginal(
    Uri uri,
  ) {
    return _setRequireOriginal(_class.reference.pointer,
            _id_setRequireOriginal as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getRequireOriginal = _class.staticMethodId(
    r"getRequireOriginal",
    r"(Landroid/net/Uri;)Z",
  );

  static final _getRequireOriginal = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean getRequireOriginal(android.net.Uri uri)
  static bool getRequireOriginal(
    Uri uri,
  ) {
    return _getRequireOriginal(_class.reference.pointer,
            _id_getRequireOriginal as jni.JMethodIDPtr, uri.reference.pointer)
        .boolean;
  }

  static final _id_getOriginalMediaFormatFileDescriptor = _class.staticMethodId(
    r"getOriginalMediaFormatFileDescriptor",
    r"(Landroid/content/Context;Landroid/os/ParcelFileDescriptor;)Landroid/os/ParcelFileDescriptor;",
  );

  static final _getOriginalMediaFormatFileDescriptor =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>("globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.ParcelFileDescriptor getOriginalMediaFormatFileDescriptor(android.content.Context context, android.os.ParcelFileDescriptor parcelFileDescriptor)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getOriginalMediaFormatFileDescriptor(
    Context context,
    jni.JObject parcelFileDescriptor,
  ) {
    return _getOriginalMediaFormatFileDescriptor(
            _class.reference.pointer,
            _id_getOriginalMediaFormatFileDescriptor as jni.JMethodIDPtr,
            context.reference.pointer,
            parcelFileDescriptor.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_createWriteRequest = _class.staticMethodId(
    r"createWriteRequest",
    r"(Landroid/content/ContentResolver;Ljava/util/Collection;)Landroid/app/PendingIntent;",
  );

  static final _createWriteRequest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.app.PendingIntent createWriteRequest(android.content.ContentResolver contentResolver, java.util.Collection collection)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createWriteRequest(
    ContentResolver contentResolver,
    jni.JObject collection,
  ) {
    return _createWriteRequest(
            _class.reference.pointer,
            _id_createWriteRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            collection.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_createTrashRequest = _class.staticMethodId(
    r"createTrashRequest",
    r"(Landroid/content/ContentResolver;Ljava/util/Collection;Z)Landroid/app/PendingIntent;",
  );

  static final _createTrashRequest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.app.PendingIntent createTrashRequest(android.content.ContentResolver contentResolver, java.util.Collection collection, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createTrashRequest(
    ContentResolver contentResolver,
    jni.JObject collection,
    bool z,
  ) {
    return _createTrashRequest(
            _class.reference.pointer,
            _id_createTrashRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            collection.reference.pointer,
            z ? 1 : 0)
        .object(const jni.JObjectType());
  }

  static final _id_createFavoriteRequest = _class.staticMethodId(
    r"createFavoriteRequest",
    r"(Landroid/content/ContentResolver;Ljava/util/Collection;Z)Landroid/app/PendingIntent;",
  );

  static final _createFavoriteRequest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.app.PendingIntent createFavoriteRequest(android.content.ContentResolver contentResolver, java.util.Collection collection, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createFavoriteRequest(
    ContentResolver contentResolver,
    jni.JObject collection,
    bool z,
  ) {
    return _createFavoriteRequest(
            _class.reference.pointer,
            _id_createFavoriteRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            collection.reference.pointer,
            z ? 1 : 0)
        .object(const jni.JObjectType());
  }

  static final _id_createDeleteRequest = _class.staticMethodId(
    r"createDeleteRequest",
    r"(Landroid/content/ContentResolver;Ljava/util/Collection;)Landroid/app/PendingIntent;",
  );

  static final _createDeleteRequest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.app.PendingIntent createDeleteRequest(android.content.ContentResolver contentResolver, java.util.Collection collection)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createDeleteRequest(
    ContentResolver contentResolver,
    jni.JObject collection,
  ) {
    return _createDeleteRequest(
            _class.reference.pointer,
            _id_createDeleteRequest as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            collection.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalVolumeNames = _class.staticMethodId(
    r"getExternalVolumeNames",
    r"(Landroid/content/Context;)Ljava/util/Set;",
  );

  static final _getExternalVolumeNames = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set getExternalVolumeNames(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JSet<jni.JString> getExternalVolumeNames(
    Context context,
  ) {
    return _getExternalVolumeNames(
            _class.reference.pointer,
            _id_getExternalVolumeNames as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_getRecentExternalVolumeNames = _class.staticMethodId(
    r"getRecentExternalVolumeNames",
    r"(Landroid/content/Context;)Ljava/util/Set;",
  );

  static final _getRecentExternalVolumeNames = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set getRecentExternalVolumeNames(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JSet<jni.JString> getRecentExternalVolumeNames(
    Context context,
  ) {
    return _getRecentExternalVolumeNames(
            _class.reference.pointer,
            _id_getRecentExternalVolumeNames as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_getVolumeName = _class.staticMethodId(
    r"getVolumeName",
    r"(Landroid/net/Uri;)Ljava/lang/String;",
  );

  static final _getVolumeName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getVolumeName(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getVolumeName(
    Uri uri,
  ) {
    return _getVolumeName(_class.reference.pointer,
            _id_getVolumeName as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getMediaScannerUri = _class.staticMethodId(
    r"getMediaScannerUri",
    r"()Landroid/net/Uri;",
  );

  static final _getMediaScannerUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public android.net.Uri getMediaScannerUri()
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getMediaScannerUri() {
    return _getMediaScannerUri(_class.reference.pointer,
            _id_getMediaScannerUri as jni.JMethodIDPtr)
        .object(const $UriType());
  }

  static final _id_getVersion = _class.staticMethodId(
    r"getVersion",
    r"(Landroid/content/Context;)Ljava/lang/String;",
  );

  static final _getVersion = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getVersion(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getVersion(
    Context context,
  ) {
    return _getVersion(_class.reference.pointer,
            _id_getVersion as jni.JMethodIDPtr, context.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getVersion1 = _class.staticMethodId(
    r"getVersion",
    r"(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _getVersion1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getVersion(android.content.Context context, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getVersion1(
    Context context,
    jni.JString string,
  ) {
    return _getVersion1(
            _class.reference.pointer,
            _id_getVersion1 as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getGeneration = _class.staticMethodId(
    r"getGeneration",
    r"(Landroid/content/Context;Ljava/lang/String;)J",
  );

  static final _getGeneration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticLongMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public long getGeneration(android.content.Context context, java.lang.String string)
  static int getGeneration(
    Context context,
    jni.JString string,
  ) {
    return _getGeneration(
            _class.reference.pointer,
            _id_getGeneration as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .long;
  }

  static final _id_getDocumentUri = _class.staticMethodId(
    r"getDocumentUri",
    r"(Landroid/content/Context;Landroid/net/Uri;)Landroid/net/Uri;",
  );

  static final _getDocumentUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getDocumentUri(android.content.Context context, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getDocumentUri(
    Context context,
    Uri uri,
  ) {
    return _getDocumentUri(
            _class.reference.pointer,
            _id_getDocumentUri as jni.JMethodIDPtr,
            context.reference.pointer,
            uri.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getMediaUri = _class.staticMethodId(
    r"getMediaUri",
    r"(Landroid/content/Context;Landroid/net/Uri;)Landroid/net/Uri;",
  );

  static final _getMediaUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getMediaUri(android.content.Context context, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getMediaUri(
    Context context,
    Uri uri,
  ) {
    return _getMediaUri(
            _class.reference.pointer,
            _id_getMediaUri as jni.JMethodIDPtr,
            context.reference.pointer,
            uri.reference.pointer)
        .object(const $UriType());
  }

  static final _id_isCurrentSystemGallery = _class.staticMethodId(
    r"isCurrentSystemGallery",
    r"(Landroid/content/ContentResolver;ILjava/lang/String;)Z",
  );

  static final _isCurrentSystemGallery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isCurrentSystemGallery(android.content.ContentResolver contentResolver, int i, java.lang.String string)
  static bool isCurrentSystemGallery(
    ContentResolver contentResolver,
    int i,
    jni.JString string,
  ) {
    return _isCurrentSystemGallery(
            _class.reference.pointer,
            _id_isCurrentSystemGallery as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            i,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getRedactedUri = _class.staticMethodId(
    r"getRedactedUri",
    r"(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;",
  );

  static final _getRedactedUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.net.Uri getRedactedUri(android.content.ContentResolver contentResolver, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  static Uri getRedactedUri(
    ContentResolver contentResolver,
    Uri uri,
  ) {
    return _getRedactedUri(
            _class.reference.pointer,
            _id_getRedactedUri as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer)
        .object(const $UriType());
  }

  static final _id_getRedactedUri1 = _class.staticMethodId(
    r"getRedactedUri",
    r"(Landroid/content/ContentResolver;Ljava/util/List;)Ljava/util/List;",
  );

  static final _getRedactedUri1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List getRedactedUri(android.content.ContentResolver contentResolver, java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JList<Uri> getRedactedUri1(
    ContentResolver contentResolver,
    jni.JList<Uri> list,
  ) {
    return _getRedactedUri1(
            _class.reference.pointer,
            _id_getRedactedUri1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            list.reference.pointer)
        .object(const jni.JListType($UriType()));
  }

  static final _id_canManageMedia = _class.staticMethodId(
    r"canManageMedia",
    r"(Landroid/content/Context;)Z",
  );

  static final _canManageMedia = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean canManageMedia(android.content.Context context)
  static bool canManageMedia(
    Context context,
  ) {
    return _canManageMedia(_class.reference.pointer,
            _id_canManageMedia as jni.JMethodIDPtr, context.reference.pointer)
        .boolean;
  }

  static final _id_isCurrentCloudMediaProviderAuthority = _class.staticMethodId(
    r"isCurrentCloudMediaProviderAuthority",
    r"(Landroid/content/ContentResolver;Ljava/lang/String;)Z",
  );

  static final _isCurrentCloudMediaProviderAuthority =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>("globalEnv_CallStaticBooleanMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isCurrentCloudMediaProviderAuthority(android.content.ContentResolver contentResolver, java.lang.String string)
  static bool isCurrentCloudMediaProviderAuthority(
    ContentResolver contentResolver,
    jni.JString string,
  ) {
    return _isCurrentCloudMediaProviderAuthority(
            _class.reference.pointer,
            _id_isCurrentCloudMediaProviderAuthority as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_isSupportedCloudMediaProviderAuthority =
      _class.staticMethodId(
    r"isSupportedCloudMediaProviderAuthority",
    r"(Landroid/content/ContentResolver;Ljava/lang/String;)Z",
  );

  static final _isSupportedCloudMediaProviderAuthority =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>("globalEnv_CallStaticBooleanMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isSupportedCloudMediaProviderAuthority(android.content.ContentResolver contentResolver, java.lang.String string)
  static bool isSupportedCloudMediaProviderAuthority(
    ContentResolver contentResolver,
    jni.JString string,
  ) {
    return _isSupportedCloudMediaProviderAuthority(
            _class.reference.pointer,
            _id_isSupportedCloudMediaProviderAuthority as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_notifyCloudMediaChangedEvent = _class.staticMethodId(
    r"notifyCloudMediaChangedEvent",
    r"(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)V",
  );

  static final _notifyCloudMediaChangedEvent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void notifyCloudMediaChangedEvent(android.content.ContentResolver contentResolver, java.lang.String string, java.lang.String string1)
  static void notifyCloudMediaChangedEvent(
    ContentResolver contentResolver,
    jni.JString string,
    jni.JString string1,
  ) {
    _notifyCloudMediaChangedEvent(
            _class.reference.pointer,
            _id_notifyCloudMediaChangedEvent as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }
}

final class $MediaStoreType extends jni.JObjType<MediaStore> {
  const $MediaStoreType();

  @override
  String get signature => r"Landroid/provider/MediaStore;";

  @override
  MediaStore fromReference(jni.JReference reference) =>
      MediaStore.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaStoreType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaStoreType) && other is $MediaStoreType;
  }
}

/// from: androidx.core.content.ContextCompat
class ContextCompat extends jni.JObject {
  @override
  late final jni.JObjType<ContextCompat> $type = type;

  ContextCompat.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/core/content/ContextCompat");

  /// The type which includes information such as the signature of this class.
  static const type = $ContextCompatType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ContextCompat() {
    return ContextCompat.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getAttributionTag = _class.staticMethodId(
    r"getAttributionTag",
    r"(Landroid/content/Context;)Ljava/lang/String;",
  );

  static final _getAttributionTag = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getAttributionTag(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getAttributionTag(
    Context context,
  ) {
    return _getAttributionTag(
            _class.reference.pointer,
            _id_getAttributionTag as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_startActivities = _class.staticMethodId(
    r"startActivities",
    r"(Landroid/content/Context;[Landroid/content/Intent;)Z",
  );

  static final _startActivities = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean startActivities(android.content.Context context, android.content.Intent[] intents)
  static bool startActivities(
    Context context,
    jni.JArray<jni.JObject> intents,
  ) {
    return _startActivities(
            _class.reference.pointer,
            _id_startActivities as jni.JMethodIDPtr,
            context.reference.pointer,
            intents.reference.pointer)
        .boolean;
  }

  static final _id_startActivities1 = _class.staticMethodId(
    r"startActivities",
    r"(Landroid/content/Context;[Landroid/content/Intent;Landroid/os/Bundle;)Z",
  );

  static final _startActivities1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean startActivities(android.content.Context context, android.content.Intent[] intents, android.os.Bundle options)
  static bool startActivities1(
    Context context,
    jni.JArray<jni.JObject> intents,
    jni.JObject options,
  ) {
    return _startActivities1(
            _class.reference.pointer,
            _id_startActivities1 as jni.JMethodIDPtr,
            context.reference.pointer,
            intents.reference.pointer,
            options.reference.pointer)
        .boolean;
  }

  static final _id_startActivity = _class.staticMethodId(
    r"startActivity",
    r"(Landroid/content/Context;Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _startActivity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void startActivity(android.content.Context context, android.content.Intent intent, android.os.Bundle options)
  static void startActivity(
    Context context,
    jni.JObject intent,
    jni.JObject options,
  ) {
    _startActivity(
            _class.reference.pointer,
            _id_startActivity as jni.JMethodIDPtr,
            context.reference.pointer,
            intent.reference.pointer,
            options.reference.pointer)
        .check();
  }

  static final _id_getDataDir = _class.staticMethodId(
    r"getDataDir",
    r"(Landroid/content/Context;)Ljava/io/File;",
  );

  static final _getDataDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.io.File getDataDir(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getDataDir(
    Context context,
  ) {
    return _getDataDir(_class.reference.pointer,
            _id_getDataDir as jni.JMethodIDPtr, context.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getObbDirs = _class.staticMethodId(
    r"getObbDirs",
    r"(Landroid/content/Context;)[Ljava/io/File;",
  );

  static final _getObbDirs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.io.File[] getObbDirs(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.JObject> getObbDirs(
    Context context,
  ) {
    return _getObbDirs(_class.reference.pointer,
            _id_getObbDirs as jni.JMethodIDPtr, context.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getExternalFilesDirs = _class.staticMethodId(
    r"getExternalFilesDirs",
    r"(Landroid/content/Context;Ljava/lang/String;)[Ljava/io/File;",
  );

  static final _getExternalFilesDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.io.File[] getExternalFilesDirs(android.content.Context context, java.lang.String type)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.JObject> getExternalFilesDirs(
    Context context,
    jni.JString type0,
  ) {
    return _getExternalFilesDirs(
            _class.reference.pointer,
            _id_getExternalFilesDirs as jni.JMethodIDPtr,
            context.reference.pointer,
            type0.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getExternalCacheDirs = _class.staticMethodId(
    r"getExternalCacheDirs",
    r"(Landroid/content/Context;)[Ljava/io/File;",
  );

  static final _getExternalCacheDirs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.io.File[] getExternalCacheDirs(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.JObject> getExternalCacheDirs(
    Context context,
  ) {
    return _getExternalCacheDirs(
            _class.reference.pointer,
            _id_getExternalCacheDirs as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getDrawable = _class.staticMethodId(
    r"getDrawable",
    r"(Landroid/content/Context;I)Landroid/graphics/drawable/Drawable;",
  );

  static final _getDrawable = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.graphics.drawable.Drawable getDrawable(android.content.Context context, int id)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getDrawable(
    Context context,
    int id,
  ) {
    return _getDrawable(_class.reference.pointer,
            _id_getDrawable as jni.JMethodIDPtr, context.reference.pointer, id)
        .object(const jni.JObjectType());
  }

  static final _id_getColorStateList = _class.staticMethodId(
    r"getColorStateList",
    r"(Landroid/content/Context;I)Landroid/content/res/ColorStateList;",
  );

  static final _getColorStateList = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.content.res.ColorStateList getColorStateList(android.content.Context context, int id)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getColorStateList(
    Context context,
    int id,
  ) {
    return _getColorStateList(
            _class.reference.pointer,
            _id_getColorStateList as jni.JMethodIDPtr,
            context.reference.pointer,
            id)
        .object(const jni.JObjectType());
  }

  static final _id_getColor = _class.staticMethodId(
    r"getColor",
    r"(Landroid/content/Context;I)I",
  );

  static final _getColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          "globalEnv_CallStaticIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public int getColor(android.content.Context context, int id)
  static int getColor(
    Context context,
    int id,
  ) {
    return _getColor(_class.reference.pointer, _id_getColor as jni.JMethodIDPtr,
            context.reference.pointer, id)
        .integer;
  }

  static final _id_checkSelfPermission = _class.staticMethodId(
    r"checkSelfPermission",
    r"(Landroid/content/Context;Ljava/lang/String;)I",
  );

  static final _checkSelfPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public int checkSelfPermission(android.content.Context context, java.lang.String permission)
  static int checkSelfPermission(
    Context context,
    jni.JString permission,
  ) {
    return _checkSelfPermission(
            _class.reference.pointer,
            _id_checkSelfPermission as jni.JMethodIDPtr,
            context.reference.pointer,
            permission.reference.pointer)
        .integer;
  }

  static final _id_getNoBackupFilesDir = _class.staticMethodId(
    r"getNoBackupFilesDir",
    r"(Landroid/content/Context;)Ljava/io/File;",
  );

  static final _getNoBackupFilesDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.io.File getNoBackupFilesDir(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getNoBackupFilesDir(
    Context context,
  ) {
    return _getNoBackupFilesDir(
            _class.reference.pointer,
            _id_getNoBackupFilesDir as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getCodeCacheDir = _class.staticMethodId(
    r"getCodeCacheDir",
    r"(Landroid/content/Context;)Ljava/io/File;",
  );

  static final _getCodeCacheDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.io.File getCodeCacheDir(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getCodeCacheDir(
    Context context,
  ) {
    return _getCodeCacheDir(_class.reference.pointer,
            _id_getCodeCacheDir as jni.JMethodIDPtr, context.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_createDeviceProtectedStorageContext = _class.staticMethodId(
    r"createDeviceProtectedStorageContext",
    r"(Landroid/content/Context;)Landroid/content/Context;",
  );

  static final _createDeviceProtectedStorageContext =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Context createDeviceProtectedStorageContext(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static Context createDeviceProtectedStorageContext(
    Context context,
  ) {
    return _createDeviceProtectedStorageContext(
            _class.reference.pointer,
            _id_createDeviceProtectedStorageContext as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_isDeviceProtectedStorage = _class.staticMethodId(
    r"isDeviceProtectedStorage",
    r"(Landroid/content/Context;)Z",
  );

  static final _isDeviceProtectedStorage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isDeviceProtectedStorage(android.content.Context context)
  static bool isDeviceProtectedStorage(
    Context context,
  ) {
    return _isDeviceProtectedStorage(
            _class.reference.pointer,
            _id_isDeviceProtectedStorage as jni.JMethodIDPtr,
            context.reference.pointer)
        .boolean;
  }

  static final _id_getMainExecutor = _class.staticMethodId(
    r"getMainExecutor",
    r"(Landroid/content/Context;)Ljava/util/concurrent/Executor;",
  );

  static final _getMainExecutor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Executor getMainExecutor(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static Executor getMainExecutor(
    Context context,
  ) {
    return _getMainExecutor(_class.reference.pointer,
            _id_getMainExecutor as jni.JMethodIDPtr, context.reference.pointer)
        .object(const $ExecutorType());
  }

  static final _id_startForegroundService = _class.staticMethodId(
    r"startForegroundService",
    r"(Landroid/content/Context;Landroid/content/Intent;)V",
  );

  static final _startForegroundService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void startForegroundService(android.content.Context context, android.content.Intent intent)
  static void startForegroundService(
    Context context,
    jni.JObject intent,
  ) {
    _startForegroundService(
            _class.reference.pointer,
            _id_startForegroundService as jni.JMethodIDPtr,
            context.reference.pointer,
            intent.reference.pointer)
        .check();
  }

  static final _id_getSystemService = _class.staticMethodId(
    r"getSystemService",
    r"(Landroid/content/Context;Ljava/lang/Class;)Ljava/lang/Object;",
  );

  static final _getSystemService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public T getSystemService(android.content.Context context, java.lang.Class serviceClass)
  /// The returned object must be released after use, by calling the [release] method.
  static $T getSystemService<$T extends jni.JObject>(
    Context context,
    jni.JObject serviceClass, {
    required jni.JObjType<$T> T,
  }) {
    return _getSystemService(
            _class.reference.pointer,
            _id_getSystemService as jni.JMethodIDPtr,
            context.reference.pointer,
            serviceClass.reference.pointer)
        .object(T);
  }

  static final _id_getSystemServiceName = _class.staticMethodId(
    r"getSystemServiceName",
    r"(Landroid/content/Context;Ljava/lang/Class;)Ljava/lang/String;",
  );

  static final _getSystemServiceName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getSystemServiceName(android.content.Context context, java.lang.Class serviceClass)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getSystemServiceName(
    Context context,
    jni.JObject serviceClass,
  ) {
    return _getSystemServiceName(
            _class.reference.pointer,
            _id_getSystemServiceName as jni.JMethodIDPtr,
            context.reference.pointer,
            serviceClass.reference.pointer)
        .object(const jni.JStringType());
  }
}

final class $ContextCompatType extends jni.JObjType<ContextCompat> {
  const $ContextCompatType();

  @override
  String get signature => r"Landroidx/core/content/ContextCompat;";

  @override
  ContextCompat fromReference(jni.JReference reference) =>
      ContextCompat.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContextCompatType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextCompatType) &&
        other is $ContextCompatType;
  }
}

/// from: androidx.camera.core.CameraSelector$Builder
class CameraSelector_Builder extends jni.JObject {
  @override
  late final jni.JObjType<CameraSelector_Builder> $type = type;

  CameraSelector_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/CameraSelector$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $CameraSelector_BuilderType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraSelector_Builder() {
    return CameraSelector_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_requireLensFacing = _class.instanceMethodId(
    r"requireLensFacing",
    r"(I)Landroidx/camera/core/CameraSelector$Builder;",
  );

  static final _requireLensFacing = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.CameraSelector$Builder requireLensFacing(int i)
  /// The returned object must be released after use, by calling the [release] method.
  CameraSelector_Builder requireLensFacing(
    int i,
  ) {
    return _requireLensFacing(
            reference.pointer, _id_requireLensFacing as jni.JMethodIDPtr, i)
        .object(const $CameraSelector_BuilderType());
  }

  static final _id_addCameraFilter = _class.instanceMethodId(
    r"addCameraFilter",
    r"(Landroidx/camera/core/CameraFilter;)Landroidx/camera/core/CameraSelector$Builder;",
  );

  static final _addCameraFilter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.CameraSelector$Builder addCameraFilter(androidx.camera.core.CameraFilter cameraFilter)
  /// The returned object must be released after use, by calling the [release] method.
  CameraSelector_Builder addCameraFilter(
    jni.JObject cameraFilter,
  ) {
    return _addCameraFilter(
            reference.pointer,
            _id_addCameraFilter as jni.JMethodIDPtr,
            cameraFilter.reference.pointer)
        .object(const $CameraSelector_BuilderType());
  }

  static final _id_fromSelector = _class.staticMethodId(
    r"fromSelector",
    r"(Landroidx/camera/core/CameraSelector;)Landroidx/camera/core/CameraSelector$Builder;",
  );

  static final _fromSelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.camera.core.CameraSelector$Builder fromSelector(androidx.camera.core.CameraSelector cameraSelector)
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector_Builder fromSelector(
    CameraSelector cameraSelector,
  ) {
    return _fromSelector(
            _class.reference.pointer,
            _id_fromSelector as jni.JMethodIDPtr,
            cameraSelector.reference.pointer)
        .object(const $CameraSelector_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r"build",
    r"()Landroidx/camera/core/CameraSelector;",
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.CameraSelector build()
  /// The returned object must be released after use, by calling the [release] method.
  CameraSelector build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $CameraSelectorType());
  }
}

final class $CameraSelector_BuilderType
    extends jni.JObjType<CameraSelector_Builder> {
  const $CameraSelector_BuilderType();

  @override
  String get signature => r"Landroidx/camera/core/CameraSelector$Builder;";

  @override
  CameraSelector_Builder fromReference(jni.JReference reference) =>
      CameraSelector_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraSelector_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector_BuilderType) &&
        other is $CameraSelector_BuilderType;
  }
}

/// from: androidx.camera.core.CameraSelector$LensFacing
class CameraSelector_LensFacing extends jni.JObject {
  @override
  late final jni.JObjType<CameraSelector_LensFacing> $type = type;

  CameraSelector_LensFacing.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/CameraSelector$LensFacing");

  /// The type which includes information such as the signature of this class.
  static const type = $CameraSelector_LensFacingType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CameraSelector_LensFacingImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory CameraSelector_LensFacing.implement(
    $CameraSelector_LensFacingImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CameraSelector_LensFacing.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.CameraSelector$LensFacing",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $CameraSelector_LensFacingImpl {
  factory $CameraSelector_LensFacingImpl() = _$CameraSelector_LensFacingImpl;
}

class _$CameraSelector_LensFacingImpl
    implements $CameraSelector_LensFacingImpl {
  _$CameraSelector_LensFacingImpl();
}

final class $CameraSelector_LensFacingType
    extends jni.JObjType<CameraSelector_LensFacing> {
  const $CameraSelector_LensFacingType();

  @override
  String get signature => r"Landroidx/camera/core/CameraSelector$LensFacing;";

  @override
  CameraSelector_LensFacing fromReference(jni.JReference reference) =>
      CameraSelector_LensFacing.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraSelector_LensFacingType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelector_LensFacingType) &&
        other is $CameraSelector_LensFacingType;
  }
}

/// from: androidx.camera.core.CameraSelector
class CameraSelector extends jni.JObject {
  @override
  late final jni.JObjType<CameraSelector> $type = type;

  CameraSelector.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/CameraSelector");

  /// The type which includes information such as the signature of this class.
  static const type = $CameraSelectorType();

  /// from: static public final int LENS_FACING_UNKNOWN
  static const LENS_FACING_UNKNOWN = -1;

  /// from: static public final int LENS_FACING_FRONT
  static const LENS_FACING_FRONT = 0;

  /// from: static public final int LENS_FACING_BACK
  static const LENS_FACING_BACK = 1;

  /// from: static public final int LENS_FACING_EXTERNAL
  static const LENS_FACING_EXTERNAL = 2;
  static final _id_DEFAULT_FRONT_CAMERA = _class.staticFieldId(
    r"DEFAULT_FRONT_CAMERA",
    r"Landroidx/camera/core/CameraSelector;",
  );

  /// from: static public final androidx.camera.core.CameraSelector DEFAULT_FRONT_CAMERA
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector get DEFAULT_FRONT_CAMERA =>
      _id_DEFAULT_FRONT_CAMERA.get(_class, const $CameraSelectorType());

  static final _id_DEFAULT_BACK_CAMERA = _class.staticFieldId(
    r"DEFAULT_BACK_CAMERA",
    r"Landroidx/camera/core/CameraSelector;",
  );

  /// from: static public final androidx.camera.core.CameraSelector DEFAULT_BACK_CAMERA
  /// The returned object must be released after use, by calling the [release] method.
  static CameraSelector get DEFAULT_BACK_CAMERA =>
      _id_DEFAULT_BACK_CAMERA.get(_class, const $CameraSelectorType());

  static final _id_select = _class.instanceMethodId(
    r"select",
    r"(Ljava/util/LinkedHashSet;)Landroidx/camera/core/impl/CameraInternal;",
  );

  static final _select = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.impl.CameraInternal select(java.util.LinkedHashSet linkedHashSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject select(
    jni.JObject linkedHashSet,
  ) {
    return _select(reference.pointer, _id_select as jni.JMethodIDPtr,
            linkedHashSet.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_filter = _class.instanceMethodId(
    r"filter",
    r"(Ljava/util/List;)Ljava/util/List;",
  );

  static final _filter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List filter(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> filter(
    jni.JList<jni.JObject> list,
  ) {
    return _filter(reference.pointer, _id_filter as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_filter1 = _class.instanceMethodId(
    r"filter",
    r"(Ljava/util/LinkedHashSet;)Ljava/util/LinkedHashSet;",
  );

  static final _filter1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.LinkedHashSet filter(java.util.LinkedHashSet linkedHashSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject filter1(
    jni.JObject linkedHashSet,
  ) {
    return _filter1(reference.pointer, _id_filter1 as jni.JMethodIDPtr,
            linkedHashSet.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getCameraFilterSet = _class.instanceMethodId(
    r"getCameraFilterSet",
    r"()Ljava/util/LinkedHashSet;",
  );

  static final _getCameraFilterSet = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.LinkedHashSet getCameraFilterSet()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCameraFilterSet() {
    return _getCameraFilterSet(
            reference.pointer, _id_getCameraFilterSet as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getLensFacing = _class.instanceMethodId(
    r"getLensFacing",
    r"()Ljava/lang/Integer;",
  );

  static final _getLensFacing = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Integer getLensFacing()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger getLensFacing() {
    return _getLensFacing(
            reference.pointer, _id_getLensFacing as jni.JMethodIDPtr)
        .object(const jni.JIntegerType());
  }
}

final class $CameraSelectorType extends jni.JObjType<CameraSelector> {
  const $CameraSelectorType();

  @override
  String get signature => r"Landroidx/camera/core/CameraSelector;";

  @override
  CameraSelector fromReference(jni.JReference reference) =>
      CameraSelector.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraSelectorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraSelectorType) &&
        other is $CameraSelectorType;
  }
}

/// from: androidx.camera.core.ImageAnalysis$Analyzer
class ImageAnalysis_Analyzer extends jni.JObject {
  @override
  late final jni.JObjType<ImageAnalysis_Analyzer> $type = type;

  ImageAnalysis_Analyzer.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageAnalysis$Analyzer");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageAnalysis_AnalyzerType();
  static final _id_analyze = _class.instanceMethodId(
    r"analyze",
    r"(Landroidx/camera/core/ImageProxy;)V",
  );

  static final _analyze = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void analyze(androidx.camera.core.ImageProxy imageProxy)
  void analyze(
    ImageProxy imageProxy,
  ) {
    _analyze(reference.pointer, _id_analyze as jni.JMethodIDPtr,
            imageProxy.reference.pointer)
        .check();
  }

  static final _id_getDefaultTargetResolution = _class.instanceMethodId(
    r"getDefaultTargetResolution",
    r"()Landroid/util/Size;",
  );

  static final _getDefaultTargetResolution = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.util.Size getDefaultTargetResolution()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDefaultTargetResolution() {
    return _getDefaultTargetResolution(reference.pointer,
            _id_getDefaultTargetResolution as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getTargetCoordinateSystem = _class.instanceMethodId(
    r"getTargetCoordinateSystem",
    r"()I",
  );

  static final _getTargetCoordinateSystem = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getTargetCoordinateSystem()
  int getTargetCoordinateSystem() {
    return _getTargetCoordinateSystem(reference.pointer,
            _id_getTargetCoordinateSystem as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_updateTransform = _class.instanceMethodId(
    r"updateTransform",
    r"(Landroid/graphics/Matrix;)V",
  );

  static final _updateTransform = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void updateTransform(android.graphics.Matrix matrix)
  void updateTransform(
    jni.JObject matrix,
  ) {
    _updateTransform(reference.pointer, _id_updateTransform as jni.JMethodIDPtr,
            matrix.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageAnalysis_AnalyzerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"analyze(Landroidx/camera/core/ImageProxy;)V") {
        _$impls[$p]!.analyze(
          $a[0].castTo(const $ImageProxyType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"getDefaultTargetResolution()Landroid/util/Size;") {
        final $r = _$impls[$p]!.getDefaultTargetResolution();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"getTargetCoordinateSystem()I") {
        final $r = _$impls[$p]!.getTargetCoordinateSystem();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"updateTransform(Landroid/graphics/Matrix;)V") {
        _$impls[$p]!.updateTransform(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageAnalysis_Analyzer.implement(
    $ImageAnalysis_AnalyzerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageAnalysis_Analyzer.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ImageAnalysis$Analyzer",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageAnalysis_AnalyzerImpl {
  factory $ImageAnalysis_AnalyzerImpl({
    required void Function(ImageProxy imageProxy) analyze,
    required jni.JObject Function() getDefaultTargetResolution,
    required int Function() getTargetCoordinateSystem,
    required void Function(jni.JObject matrix) updateTransform,
  }) = _$ImageAnalysis_AnalyzerImpl;

  void analyze(ImageProxy imageProxy);
  jni.JObject getDefaultTargetResolution();
  int getTargetCoordinateSystem();
  void updateTransform(jni.JObject matrix);
}

class _$ImageAnalysis_AnalyzerImpl implements $ImageAnalysis_AnalyzerImpl {
  _$ImageAnalysis_AnalyzerImpl({
    required void Function(ImageProxy imageProxy) analyze,
    required jni.JObject Function() getDefaultTargetResolution,
    required int Function() getTargetCoordinateSystem,
    required void Function(jni.JObject matrix) updateTransform,
  })  : _analyze = analyze,
        _getDefaultTargetResolution = getDefaultTargetResolution,
        _getTargetCoordinateSystem = getTargetCoordinateSystem,
        _updateTransform = updateTransform;

  final void Function(ImageProxy imageProxy) _analyze;
  final jni.JObject Function() _getDefaultTargetResolution;
  final int Function() _getTargetCoordinateSystem;
  final void Function(jni.JObject matrix) _updateTransform;

  void analyze(ImageProxy imageProxy) {
    return _analyze(imageProxy);
  }

  jni.JObject getDefaultTargetResolution() {
    return _getDefaultTargetResolution();
  }

  int getTargetCoordinateSystem() {
    return _getTargetCoordinateSystem();
  }

  void updateTransform(jni.JObject matrix) {
    return _updateTransform(matrix);
  }
}

final class $ImageAnalysis_AnalyzerType
    extends jni.JObjType<ImageAnalysis_Analyzer> {
  const $ImageAnalysis_AnalyzerType();

  @override
  String get signature => r"Landroidx/camera/core/ImageAnalysis$Analyzer;";

  @override
  ImageAnalysis_Analyzer fromReference(jni.JReference reference) =>
      ImageAnalysis_Analyzer.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageAnalysis_AnalyzerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis_AnalyzerType) &&
        other is $ImageAnalysis_AnalyzerType;
  }
}

/// from: androidx.camera.core.ImageAnalysis$BackpressureStrategy
class ImageAnalysis_BackpressureStrategy extends jni.JObject {
  @override
  late final jni.JObjType<ImageAnalysis_BackpressureStrategy> $type = type;

  ImageAnalysis_BackpressureStrategy.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/core/ImageAnalysis$BackpressureStrategy");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageAnalysis_BackpressureStrategyType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageAnalysis_BackpressureStrategyImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageAnalysis_BackpressureStrategy.implement(
    $ImageAnalysis_BackpressureStrategyImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageAnalysis_BackpressureStrategy.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ImageAnalysis$BackpressureStrategy",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageAnalysis_BackpressureStrategyImpl {
  factory $ImageAnalysis_BackpressureStrategyImpl() =
      _$ImageAnalysis_BackpressureStrategyImpl;
}

class _$ImageAnalysis_BackpressureStrategyImpl
    implements $ImageAnalysis_BackpressureStrategyImpl {
  _$ImageAnalysis_BackpressureStrategyImpl();
}

final class $ImageAnalysis_BackpressureStrategyType
    extends jni.JObjType<ImageAnalysis_BackpressureStrategy> {
  const $ImageAnalysis_BackpressureStrategyType();

  @override
  String get signature =>
      r"Landroidx/camera/core/ImageAnalysis$BackpressureStrategy;";

  @override
  ImageAnalysis_BackpressureStrategy fromReference(jni.JReference reference) =>
      ImageAnalysis_BackpressureStrategy.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageAnalysis_BackpressureStrategyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis_BackpressureStrategyType) &&
        other is $ImageAnalysis_BackpressureStrategyType;
  }
}

/// from: androidx.camera.core.ImageAnalysis$Builder
class ImageAnalysis_Builder extends jni.JObject {
  @override
  late final jni.JObjType<ImageAnalysis_Builder> $type = type;

  ImageAnalysis_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageAnalysis$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageAnalysis_BuilderType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageAnalysis_Builder() {
    return ImageAnalysis_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_fromConfig = _class.staticMethodId(
    r"fromConfig",
    r"(Landroidx/camera/core/impl/ImageAnalysisConfig;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _fromConfig = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.camera.core.ImageAnalysis$Builder fromConfig(androidx.camera.core.impl.ImageAnalysisConfig imageAnalysisConfig)
  /// The returned object must be released after use, by calling the [release] method.
  static ImageAnalysis_Builder fromConfig(
    jni.JObject imageAnalysisConfig,
  ) {
    return _fromConfig(
            _class.reference.pointer,
            _id_fromConfig as jni.JMethodIDPtr,
            imageAnalysisConfig.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setBackpressureStrategy = _class.instanceMethodId(
    r"setBackpressureStrategy",
    r"(I)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setBackpressureStrategy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setBackpressureStrategy(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setBackpressureStrategy(
    int i,
  ) {
    return _setBackpressureStrategy(reference.pointer,
            _id_setBackpressureStrategy as jni.JMethodIDPtr, i)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setImageQueueDepth = _class.instanceMethodId(
    r"setImageQueueDepth",
    r"(I)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setImageQueueDepth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setImageQueueDepth(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setImageQueueDepth(
    int i,
  ) {
    return _setImageQueueDepth(
            reference.pointer, _id_setImageQueueDepth as jni.JMethodIDPtr, i)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setOutputImageFormat = _class.instanceMethodId(
    r"setOutputImageFormat",
    r"(I)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setOutputImageFormat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setOutputImageFormat(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setOutputImageFormat(
    int i,
  ) {
    return _setOutputImageFormat(
            reference.pointer, _id_setOutputImageFormat as jni.JMethodIDPtr, i)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setOutputImageRotationEnabled = _class.instanceMethodId(
    r"setOutputImageRotationEnabled",
    r"(Z)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setOutputImageRotationEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setOutputImageRotationEnabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setOutputImageRotationEnabled(
    bool z,
  ) {
    return _setOutputImageRotationEnabled(reference.pointer,
            _id_setOutputImageRotationEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setOnePixelShiftEnabled = _class.instanceMethodId(
    r"setOnePixelShiftEnabled",
    r"(Z)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setOnePixelShiftEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setOnePixelShiftEnabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setOnePixelShiftEnabled(
    bool z,
  ) {
    return _setOnePixelShiftEnabled(reference.pointer,
            _id_setOnePixelShiftEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_getMutableConfig = _class.instanceMethodId(
    r"getMutableConfig",
    r"()Landroidx/camera/core/impl/MutableConfig;",
  );

  static final _getMutableConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.impl.MutableConfig getMutableConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMutableConfig() {
    return _getMutableConfig(
            reference.pointer, _id_getMutableConfig as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getUseCaseConfig = _class.instanceMethodId(
    r"getUseCaseConfig",
    r"()Landroidx/camera/core/impl/ImageAnalysisConfig;",
  );

  static final _getUseCaseConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.impl.ImageAnalysisConfig getUseCaseConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUseCaseConfig() {
    return _getUseCaseConfig(
            reference.pointer, _id_getUseCaseConfig as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_build = _class.instanceMethodId(
    r"build",
    r"()Landroidx/camera/core/ImageAnalysis;",
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.ImageAnalysis build()
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $ImageAnalysisType());
  }

  static final _id_setTargetClass = _class.instanceMethodId(
    r"setTargetClass",
    r"(Ljava/lang/Class;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setTargetClass = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setTargetClass(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setTargetClass(
    jni.JObject class0,
  ) {
    return _setTargetClass(reference.pointer,
            _id_setTargetClass as jni.JMethodIDPtr, class0.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setTargetName = _class.instanceMethodId(
    r"setTargetName",
    r"(Ljava/lang/String;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setTargetName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setTargetName(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setTargetName(
    jni.JString string,
  ) {
    return _setTargetName(reference.pointer,
            _id_setTargetName as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setTargetAspectRatio = _class.instanceMethodId(
    r"setTargetAspectRatio",
    r"(I)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setTargetAspectRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setTargetAspectRatio(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setTargetAspectRatio(
    int i,
  ) {
    return _setTargetAspectRatio(
            reference.pointer, _id_setTargetAspectRatio as jni.JMethodIDPtr, i)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setTargetRotation = _class.instanceMethodId(
    r"setTargetRotation",
    r"(I)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setTargetRotation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setTargetRotation(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setTargetRotation(
    int i,
  ) {
    return _setTargetRotation(
            reference.pointer, _id_setTargetRotation as jni.JMethodIDPtr, i)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setMirrorMode = _class.instanceMethodId(
    r"setMirrorMode",
    r"(I)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setMirrorMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setMirrorMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setMirrorMode(
    int i,
  ) {
    return _setMirrorMode(
            reference.pointer, _id_setMirrorMode as jni.JMethodIDPtr, i)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setTargetResolution = _class.instanceMethodId(
    r"setTargetResolution",
    r"(Landroid/util/Size;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setTargetResolution = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setTargetResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setTargetResolution(
    jni.JObject size,
  ) {
    return _setTargetResolution(reference.pointer,
            _id_setTargetResolution as jni.JMethodIDPtr, size.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setDefaultResolution = _class.instanceMethodId(
    r"setDefaultResolution",
    r"(Landroid/util/Size;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setDefaultResolution = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setDefaultResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setDefaultResolution(
    jni.JObject size,
  ) {
    return _setDefaultResolution(
            reference.pointer,
            _id_setDefaultResolution as jni.JMethodIDPtr,
            size.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setMaxResolution = _class.instanceMethodId(
    r"setMaxResolution",
    r"(Landroid/util/Size;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setMaxResolution = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setMaxResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setMaxResolution(
    jni.JObject size,
  ) {
    return _setMaxResolution(reference.pointer,
            _id_setMaxResolution as jni.JMethodIDPtr, size.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setSupportedResolutions = _class.instanceMethodId(
    r"setSupportedResolutions",
    r"(Ljava/util/List;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setSupportedResolutions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setSupportedResolutions(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setSupportedResolutions(
    jni.JList<jni.JObject> list,
  ) {
    return _setSupportedResolutions(
            reference.pointer,
            _id_setSupportedResolutions as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setCustomOrderedResolutions = _class.instanceMethodId(
    r"setCustomOrderedResolutions",
    r"(Ljava/util/List;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setCustomOrderedResolutions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setCustomOrderedResolutions(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setCustomOrderedResolutions(
    jni.JList<jni.JObject> list,
  ) {
    return _setCustomOrderedResolutions(
            reference.pointer,
            _id_setCustomOrderedResolutions as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setResolutionSelector = _class.instanceMethodId(
    r"setResolutionSelector",
    r"(Landroidx/camera/core/resolutionselector/ResolutionSelector;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setResolutionSelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setResolutionSelector(androidx.camera.core.resolutionselector.ResolutionSelector resolutionSelector)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setResolutionSelector(
    jni.JObject resolutionSelector,
  ) {
    return _setResolutionSelector(
            reference.pointer,
            _id_setResolutionSelector as jni.JMethodIDPtr,
            resolutionSelector.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setBackgroundExecutor = _class.instanceMethodId(
    r"setBackgroundExecutor",
    r"(Ljava/util/concurrent/Executor;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setBackgroundExecutor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setBackgroundExecutor(java.util.concurrent.Executor executor)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setBackgroundExecutor(
    Executor executor,
  ) {
    return _setBackgroundExecutor(
            reference.pointer,
            _id_setBackgroundExecutor as jni.JMethodIDPtr,
            executor.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setDefaultSessionConfig = _class.instanceMethodId(
    r"setDefaultSessionConfig",
    r"(Landroidx/camera/core/impl/SessionConfig;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setDefaultSessionConfig = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig sessionConfig)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setDefaultSessionConfig(
    jni.JObject sessionConfig,
  ) {
    return _setDefaultSessionConfig(
            reference.pointer,
            _id_setDefaultSessionConfig as jni.JMethodIDPtr,
            sessionConfig.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setDefaultCaptureConfig = _class.instanceMethodId(
    r"setDefaultCaptureConfig",
    r"(Landroidx/camera/core/impl/CaptureConfig;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setDefaultCaptureConfig = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig captureConfig)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setDefaultCaptureConfig(
    jni.JObject captureConfig,
  ) {
    return _setDefaultCaptureConfig(
            reference.pointer,
            _id_setDefaultCaptureConfig as jni.JMethodIDPtr,
            captureConfig.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setSessionOptionUnpacker = _class.instanceMethodId(
    r"setSessionOptionUnpacker",
    r"(Landroidx/camera/core/impl/SessionConfig$OptionUnpacker;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setSessionOptionUnpacker = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker optionUnpacker)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setSessionOptionUnpacker(
    jni.JObject optionUnpacker,
  ) {
    return _setSessionOptionUnpacker(
            reference.pointer,
            _id_setSessionOptionUnpacker as jni.JMethodIDPtr,
            optionUnpacker.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setCaptureOptionUnpacker = _class.instanceMethodId(
    r"setCaptureOptionUnpacker",
    r"(Landroidx/camera/core/impl/CaptureConfig$OptionUnpacker;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setCaptureOptionUnpacker = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker optionUnpacker)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setCaptureOptionUnpacker(
    jni.JObject optionUnpacker,
  ) {
    return _setCaptureOptionUnpacker(
            reference.pointer,
            _id_setCaptureOptionUnpacker as jni.JMethodIDPtr,
            optionUnpacker.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setSurfaceOccupancyPriority = _class.instanceMethodId(
    r"setSurfaceOccupancyPriority",
    r"(I)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setSurfaceOccupancyPriority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setSurfaceOccupancyPriority(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setSurfaceOccupancyPriority(
    int i,
  ) {
    return _setSurfaceOccupancyPriority(reference.pointer,
            _id_setSurfaceOccupancyPriority as jni.JMethodIDPtr, i)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setCameraSelector = _class.instanceMethodId(
    r"setCameraSelector",
    r"(Landroidx/camera/core/CameraSelector;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setCameraSelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setCameraSelector(androidx.camera.core.CameraSelector cameraSelector)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setCameraSelector(
    CameraSelector cameraSelector,
  ) {
    return _setCameraSelector(
            reference.pointer,
            _id_setCameraSelector as jni.JMethodIDPtr,
            cameraSelector.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setUseCaseEventCallback = _class.instanceMethodId(
    r"setUseCaseEventCallback",
    r"(Landroidx/camera/core/UseCase$EventCallback;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setUseCaseEventCallback = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback eventCallback)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setUseCaseEventCallback(
    jni.JObject eventCallback,
  ) {
    return _setUseCaseEventCallback(
            reference.pointer,
            _id_setUseCaseEventCallback as jni.JMethodIDPtr,
            eventCallback.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setImageReaderProxyProvider = _class.instanceMethodId(
    r"setImageReaderProxyProvider",
    r"(Landroidx/camera/core/ImageReaderProxyProvider;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setImageReaderProxyProvider = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setImageReaderProxyProvider(androidx.camera.core.ImageReaderProxyProvider imageReaderProxyProvider)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setImageReaderProxyProvider(
    jni.JObject imageReaderProxyProvider,
  ) {
    return _setImageReaderProxyProvider(
            reference.pointer,
            _id_setImageReaderProxyProvider as jni.JMethodIDPtr,
            imageReaderProxyProvider.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setZslDisabled = _class.instanceMethodId(
    r"setZslDisabled",
    r"(Z)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setZslDisabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setZslDisabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setZslDisabled(
    bool z,
  ) {
    return _setZslDisabled(reference.pointer,
            _id_setZslDisabled as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setHighResolutionDisabled = _class.instanceMethodId(
    r"setHighResolutionDisabled",
    r"(Z)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setHighResolutionDisabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setHighResolutionDisabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setHighResolutionDisabled(
    bool z,
  ) {
    return _setHighResolutionDisabled(reference.pointer,
            _id_setHighResolutionDisabled as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setCaptureType = _class.instanceMethodId(
    r"setCaptureType",
    r"(Landroidx/camera/core/impl/UseCaseConfigFactory$CaptureType;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setCaptureType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setCaptureType(androidx.camera.core.impl.UseCaseConfigFactory$CaptureType captureType)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setCaptureType(
    jni.JObject captureType,
  ) {
    return _setCaptureType(
            reference.pointer,
            _id_setCaptureType as jni.JMethodIDPtr,
            captureType.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setDynamicRange = _class.instanceMethodId(
    r"setDynamicRange",
    r"(Landroidx/camera/core/DynamicRange;)Landroidx/camera/core/ImageAnalysis$Builder;",
  );

  static final _setDynamicRange = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageAnalysis$Builder setDynamicRange(androidx.camera.core.DynamicRange dynamicRange)
  /// The returned object must be released after use, by calling the [release] method.
  ImageAnalysis_Builder setDynamicRange(
    jni.JObject dynamicRange,
  ) {
    return _setDynamicRange(
            reference.pointer,
            _id_setDynamicRange as jni.JMethodIDPtr,
            dynamicRange.reference.pointer)
        .object(const $ImageAnalysis_BuilderType());
  }

  static final _id_setResolutionSelector1 = _class.instanceMethodId(
    r"setResolutionSelector",
    r"(Landroidx/camera/core/resolutionselector/ResolutionSelector;)Ljava/lang/Object;",
  );

  static final _setResolutionSelector1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setResolutionSelector(androidx.camera.core.resolutionselector.ResolutionSelector resolutionSelector)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setResolutionSelector1(
    jni.JObject resolutionSelector,
  ) {
    return _setResolutionSelector1(
            reference.pointer,
            _id_setResolutionSelector1 as jni.JMethodIDPtr,
            resolutionSelector.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setCustomOrderedResolutions1 = _class.instanceMethodId(
    r"setCustomOrderedResolutions",
    r"(Ljava/util/List;)Ljava/lang/Object;",
  );

  static final _setCustomOrderedResolutions1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setCustomOrderedResolutions(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setCustomOrderedResolutions1(
    jni.JList<jni.JObject> list,
  ) {
    return _setCustomOrderedResolutions1(
            reference.pointer,
            _id_setCustomOrderedResolutions1 as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setSupportedResolutions1 = _class.instanceMethodId(
    r"setSupportedResolutions",
    r"(Ljava/util/List;)Ljava/lang/Object;",
  );

  static final _setSupportedResolutions1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setSupportedResolutions(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setSupportedResolutions1(
    jni.JList<jni.JObject> list,
  ) {
    return _setSupportedResolutions1(
            reference.pointer,
            _id_setSupportedResolutions1 as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setMaxResolution1 = _class.instanceMethodId(
    r"setMaxResolution",
    r"(Landroid/util/Size;)Ljava/lang/Object;",
  );

  static final _setMaxResolution1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setMaxResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setMaxResolution1(
    jni.JObject size,
  ) {
    return _setMaxResolution1(reference.pointer,
            _id_setMaxResolution1 as jni.JMethodIDPtr, size.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setDefaultResolution1 = _class.instanceMethodId(
    r"setDefaultResolution",
    r"(Landroid/util/Size;)Ljava/lang/Object;",
  );

  static final _setDefaultResolution1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setDefaultResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setDefaultResolution1(
    jni.JObject size,
  ) {
    return _setDefaultResolution1(
            reference.pointer,
            _id_setDefaultResolution1 as jni.JMethodIDPtr,
            size.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setTargetResolution1 = _class.instanceMethodId(
    r"setTargetResolution",
    r"(Landroid/util/Size;)Ljava/lang/Object;",
  );

  static final _setTargetResolution1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setTargetResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setTargetResolution1(
    jni.JObject size,
  ) {
    return _setTargetResolution1(
            reference.pointer,
            _id_setTargetResolution1 as jni.JMethodIDPtr,
            size.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setMirrorMode1 = _class.instanceMethodId(
    r"setMirrorMode",
    r"(I)Ljava/lang/Object;",
  );

  static final _setMirrorMode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setMirrorMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setMirrorMode1(
    int i,
  ) {
    return _setMirrorMode1(
            reference.pointer, _id_setMirrorMode1 as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setTargetRotation1 = _class.instanceMethodId(
    r"setTargetRotation",
    r"(I)Ljava/lang/Object;",
  );

  static final _setTargetRotation1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setTargetRotation(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setTargetRotation1(
    int i,
  ) {
    return _setTargetRotation1(
            reference.pointer, _id_setTargetRotation1 as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setTargetAspectRatio1 = _class.instanceMethodId(
    r"setTargetAspectRatio",
    r"(I)Ljava/lang/Object;",
  );

  static final _setTargetAspectRatio1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setTargetAspectRatio(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setTargetAspectRatio1(
    int i,
  ) {
    return _setTargetAspectRatio1(
            reference.pointer, _id_setTargetAspectRatio1 as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setBackgroundExecutor1 = _class.instanceMethodId(
    r"setBackgroundExecutor",
    r"(Ljava/util/concurrent/Executor;)Ljava/lang/Object;",
  );

  static final _setBackgroundExecutor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setBackgroundExecutor(java.util.concurrent.Executor executor)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setBackgroundExecutor1(
    Executor executor,
  ) {
    return _setBackgroundExecutor1(
            reference.pointer,
            _id_setBackgroundExecutor1 as jni.JMethodIDPtr,
            executor.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getUseCaseConfig1 = _class.instanceMethodId(
    r"getUseCaseConfig",
    r"()Landroidx/camera/core/impl/UseCaseConfig;",
  );

  static final _getUseCaseConfig1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUseCaseConfig1() {
    return _getUseCaseConfig1(
            reference.pointer, _id_getUseCaseConfig1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setCaptureType1 = _class.instanceMethodId(
    r"setCaptureType",
    r"(Landroidx/camera/core/impl/UseCaseConfigFactory$CaptureType;)Ljava/lang/Object;",
  );

  static final _setCaptureType1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setCaptureType(androidx.camera.core.impl.UseCaseConfigFactory$CaptureType captureType)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setCaptureType1(
    jni.JObject captureType,
  ) {
    return _setCaptureType1(
            reference.pointer,
            _id_setCaptureType1 as jni.JMethodIDPtr,
            captureType.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setHighResolutionDisabled1 = _class.instanceMethodId(
    r"setHighResolutionDisabled",
    r"(Z)Ljava/lang/Object;",
  );

  static final _setHighResolutionDisabled1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setHighResolutionDisabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setHighResolutionDisabled1(
    bool z,
  ) {
    return _setHighResolutionDisabled1(reference.pointer,
            _id_setHighResolutionDisabled1 as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const jni.JObjectType());
  }

  static final _id_setZslDisabled1 = _class.instanceMethodId(
    r"setZslDisabled",
    r"(Z)Ljava/lang/Object;",
  );

  static final _setZslDisabled1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setZslDisabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setZslDisabled1(
    bool z,
  ) {
    return _setZslDisabled1(reference.pointer,
            _id_setZslDisabled1 as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const jni.JObjectType());
  }

  static final _id_setCameraSelector1 = _class.instanceMethodId(
    r"setCameraSelector",
    r"(Landroidx/camera/core/CameraSelector;)Ljava/lang/Object;",
  );

  static final _setCameraSelector1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setCameraSelector(androidx.camera.core.CameraSelector cameraSelector)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setCameraSelector1(
    CameraSelector cameraSelector,
  ) {
    return _setCameraSelector1(
            reference.pointer,
            _id_setCameraSelector1 as jni.JMethodIDPtr,
            cameraSelector.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setSurfaceOccupancyPriority1 = _class.instanceMethodId(
    r"setSurfaceOccupancyPriority",
    r"(I)Ljava/lang/Object;",
  );

  static final _setSurfaceOccupancyPriority1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setSurfaceOccupancyPriority(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setSurfaceOccupancyPriority1(
    int i,
  ) {
    return _setSurfaceOccupancyPriority1(reference.pointer,
            _id_setSurfaceOccupancyPriority1 as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setCaptureOptionUnpacker1 = _class.instanceMethodId(
    r"setCaptureOptionUnpacker",
    r"(Landroidx/camera/core/impl/CaptureConfig$OptionUnpacker;)Ljava/lang/Object;",
  );

  static final _setCaptureOptionUnpacker1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker optionUnpacker)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setCaptureOptionUnpacker1(
    jni.JObject optionUnpacker,
  ) {
    return _setCaptureOptionUnpacker1(
            reference.pointer,
            _id_setCaptureOptionUnpacker1 as jni.JMethodIDPtr,
            optionUnpacker.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setSessionOptionUnpacker1 = _class.instanceMethodId(
    r"setSessionOptionUnpacker",
    r"(Landroidx/camera/core/impl/SessionConfig$OptionUnpacker;)Ljava/lang/Object;",
  );

  static final _setSessionOptionUnpacker1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker optionUnpacker)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setSessionOptionUnpacker1(
    jni.JObject optionUnpacker,
  ) {
    return _setSessionOptionUnpacker1(
            reference.pointer,
            _id_setSessionOptionUnpacker1 as jni.JMethodIDPtr,
            optionUnpacker.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setDefaultCaptureConfig1 = _class.instanceMethodId(
    r"setDefaultCaptureConfig",
    r"(Landroidx/camera/core/impl/CaptureConfig;)Ljava/lang/Object;",
  );

  static final _setDefaultCaptureConfig1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig captureConfig)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setDefaultCaptureConfig1(
    jni.JObject captureConfig,
  ) {
    return _setDefaultCaptureConfig1(
            reference.pointer,
            _id_setDefaultCaptureConfig1 as jni.JMethodIDPtr,
            captureConfig.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setDefaultSessionConfig1 = _class.instanceMethodId(
    r"setDefaultSessionConfig",
    r"(Landroidx/camera/core/impl/SessionConfig;)Ljava/lang/Object;",
  );

  static final _setDefaultSessionConfig1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig sessionConfig)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setDefaultSessionConfig1(
    jni.JObject sessionConfig,
  ) {
    return _setDefaultSessionConfig1(
            reference.pointer,
            _id_setDefaultSessionConfig1 as jni.JMethodIDPtr,
            sessionConfig.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setTargetName1 = _class.instanceMethodId(
    r"setTargetName",
    r"(Ljava/lang/String;)Ljava/lang/Object;",
  );

  static final _setTargetName1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setTargetName(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setTargetName1(
    jni.JString string,
  ) {
    return _setTargetName1(reference.pointer,
            _id_setTargetName1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setTargetClass1 = _class.instanceMethodId(
    r"setTargetClass",
    r"(Ljava/lang/Class;)Ljava/lang/Object;",
  );

  static final _setTargetClass1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setTargetClass(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setTargetClass1(
    jni.JObject class0,
  ) {
    return _setTargetClass1(reference.pointer,
            _id_setTargetClass1 as jni.JMethodIDPtr, class0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_build1 = _class.instanceMethodId(
    r"build",
    r"()Ljava/lang/Object;",
  );

  static final _build1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Object build()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject build1() {
    return _build1(reference.pointer, _id_build1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setUseCaseEventCallback1 = _class.instanceMethodId(
    r"setUseCaseEventCallback",
    r"(Landroidx/camera/core/UseCase$EventCallback;)Ljava/lang/Object;",
  );

  static final _setUseCaseEventCallback1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback eventCallback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setUseCaseEventCallback1(
    jni.JObject eventCallback,
  ) {
    return _setUseCaseEventCallback1(
            reference.pointer,
            _id_setUseCaseEventCallback1 as jni.JMethodIDPtr,
            eventCallback.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setDynamicRange1 = _class.instanceMethodId(
    r"setDynamicRange",
    r"(Landroidx/camera/core/DynamicRange;)Ljava/lang/Object;",
  );

  static final _setDynamicRange1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setDynamicRange(androidx.camera.core.DynamicRange dynamicRange)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setDynamicRange1(
    jni.JObject dynamicRange,
  ) {
    return _setDynamicRange1(
            reference.pointer,
            _id_setDynamicRange1 as jni.JMethodIDPtr,
            dynamicRange.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $ImageAnalysis_BuilderType
    extends jni.JObjType<ImageAnalysis_Builder> {
  const $ImageAnalysis_BuilderType();

  @override
  String get signature => r"Landroidx/camera/core/ImageAnalysis$Builder;";

  @override
  ImageAnalysis_Builder fromReference(jni.JReference reference) =>
      ImageAnalysis_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageAnalysis_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis_BuilderType) &&
        other is $ImageAnalysis_BuilderType;
  }
}

/// from: androidx.camera.core.ImageAnalysis$Defaults
class ImageAnalysis_Defaults extends jni.JObject {
  @override
  late final jni.JObjType<ImageAnalysis_Defaults> $type = type;

  ImageAnalysis_Defaults.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageAnalysis$Defaults");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageAnalysis_DefaultsType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageAnalysis_Defaults() {
    return ImageAnalysis_Defaults.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getConfig = _class.instanceMethodId(
    r"getConfig",
    r"()Landroidx/camera/core/impl/ImageAnalysisConfig;",
  );

  static final _getConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.impl.ImageAnalysisConfig getConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getConfig() {
    return _getConfig(reference.pointer, _id_getConfig as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getConfig1 = _class.instanceMethodId(
    r"getConfig",
    r"()Landroidx/camera/core/impl/Config;",
  );

  static final _getConfig1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.impl.Config getConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getConfig1() {
    return _getConfig1(reference.pointer, _id_getConfig1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $ImageAnalysis_DefaultsType
    extends jni.JObjType<ImageAnalysis_Defaults> {
  const $ImageAnalysis_DefaultsType();

  @override
  String get signature => r"Landroidx/camera/core/ImageAnalysis$Defaults;";

  @override
  ImageAnalysis_Defaults fromReference(jni.JReference reference) =>
      ImageAnalysis_Defaults.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageAnalysis_DefaultsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis_DefaultsType) &&
        other is $ImageAnalysis_DefaultsType;
  }
}

/// from: androidx.camera.core.ImageAnalysis$OutputImageFormat
class ImageAnalysis_OutputImageFormat extends jni.JObject {
  @override
  late final jni.JObjType<ImageAnalysis_OutputImageFormat> $type = type;

  ImageAnalysis_OutputImageFormat.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/core/ImageAnalysis$OutputImageFormat");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageAnalysis_OutputImageFormatType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageAnalysis_OutputImageFormatImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageAnalysis_OutputImageFormat.implement(
    $ImageAnalysis_OutputImageFormatImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageAnalysis_OutputImageFormat.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ImageAnalysis$OutputImageFormat",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageAnalysis_OutputImageFormatImpl {
  factory $ImageAnalysis_OutputImageFormatImpl() =
      _$ImageAnalysis_OutputImageFormatImpl;
}

class _$ImageAnalysis_OutputImageFormatImpl
    implements $ImageAnalysis_OutputImageFormatImpl {
  _$ImageAnalysis_OutputImageFormatImpl();
}

final class $ImageAnalysis_OutputImageFormatType
    extends jni.JObjType<ImageAnalysis_OutputImageFormat> {
  const $ImageAnalysis_OutputImageFormatType();

  @override
  String get signature =>
      r"Landroidx/camera/core/ImageAnalysis$OutputImageFormat;";

  @override
  ImageAnalysis_OutputImageFormat fromReference(jni.JReference reference) =>
      ImageAnalysis_OutputImageFormat.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageAnalysis_OutputImageFormatType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysis_OutputImageFormatType) &&
        other is $ImageAnalysis_OutputImageFormatType;
  }
}

/// from: androidx.camera.core.ImageAnalysis
class ImageAnalysis extends jni.JObject {
  @override
  late final jni.JObjType<ImageAnalysis> $type = type;

  ImageAnalysis.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageAnalysis");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageAnalysisType();

  /// from: static public final int STRATEGY_KEEP_ONLY_LATEST
  static const STRATEGY_KEEP_ONLY_LATEST = 0;

  /// from: static public final int STRATEGY_BLOCK_PRODUCER
  static const STRATEGY_BLOCK_PRODUCER = 1;

  /// from: static public final int OUTPUT_IMAGE_FORMAT_YUV_420_888
  static const OUTPUT_IMAGE_FORMAT_YUV_420_888 = 1;

  /// from: static public final int OUTPUT_IMAGE_FORMAT_RGBA_8888
  static const OUTPUT_IMAGE_FORMAT_RGBA_8888 = 2;
  static final _id_DEFAULT_CONFIG = _class.staticFieldId(
    r"DEFAULT_CONFIG",
    r"Landroidx/camera/core/ImageAnalysis$Defaults;",
  );

  /// from: static public final androidx.camera.core.ImageAnalysis$Defaults DEFAULT_CONFIG
  /// The returned object must be released after use, by calling the [release] method.
  static ImageAnalysis_Defaults get DEFAULT_CONFIG =>
      _id_DEFAULT_CONFIG.get(_class, const $ImageAnalysis_DefaultsType());

  /// from: static public final int COORDINATE_SYSTEM_ORIGINAL
  static const COORDINATE_SYSTEM_ORIGINAL = 0;
  static final _id_onMergeConfig = _class.instanceMethodId(
    r"onMergeConfig",
    r"(Landroidx/camera/core/impl/CameraInfoInternal;Landroidx/camera/core/impl/UseCaseConfig$Builder;)Landroidx/camera/core/impl/UseCaseConfig;",
  );

  static final _onMergeConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected androidx.camera.core.impl.UseCaseConfig onMergeConfig(androidx.camera.core.impl.CameraInfoInternal cameraInfoInternal, androidx.camera.core.impl.UseCaseConfig$Builder builder)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onMergeConfig(
    jni.JObject cameraInfoInternal,
    jni.JObject builder,
  ) {
    return _onMergeConfig(
            reference.pointer,
            _id_onMergeConfig as jni.JMethodIDPtr,
            cameraInfoInternal.reference.pointer,
            builder.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_clearAnalyzer = _class.instanceMethodId(
    r"clearAnalyzer",
    r"()V",
  );

  static final _clearAnalyzer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void clearAnalyzer()
  void clearAnalyzer() {
    _clearAnalyzer(reference.pointer, _id_clearAnalyzer as jni.JMethodIDPtr)
        .check();
  }

  static final _id_getTargetRotation = _class.instanceMethodId(
    r"getTargetRotation",
    r"()I",
  );

  static final _getTargetRotation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getTargetRotation()
  int getTargetRotation() {
    return _getTargetRotation(
            reference.pointer, _id_getTargetRotation as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setTargetRotation = _class.instanceMethodId(
    r"setTargetRotation",
    r"(I)V",
  );

  static final _setTargetRotation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTargetRotation(int i)
  void setTargetRotation(
    int i,
  ) {
    _setTargetRotation(
            reference.pointer, _id_setTargetRotation as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setAnalyzer = _class.instanceMethodId(
    r"setAnalyzer",
    r"(Ljava/util/concurrent/Executor;Landroidx/camera/core/ImageAnalysis$Analyzer;)V",
  );

  static final _setAnalyzer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setAnalyzer(java.util.concurrent.Executor executor, androidx.camera.core.ImageAnalysis$Analyzer analyzer)
  void setAnalyzer(
    Executor executor,
    ImageAnalysis_Analyzer analyzer,
  ) {
    _setAnalyzer(reference.pointer, _id_setAnalyzer as jni.JMethodIDPtr,
            executor.reference.pointer, analyzer.reference.pointer)
        .check();
  }

  static final _id_setViewPortCropRect = _class.instanceMethodId(
    r"setViewPortCropRect",
    r"(Landroid/graphics/Rect;)V",
  );

  static final _setViewPortCropRect = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setViewPortCropRect(android.graphics.Rect rect)
  void setViewPortCropRect(
    jni.JObject rect,
  ) {
    _setViewPortCropRect(reference.pointer,
            _id_setViewPortCropRect as jni.JMethodIDPtr, rect.reference.pointer)
        .check();
  }

  static final _id_setSensorToBufferTransformMatrix = _class.instanceMethodId(
    r"setSensorToBufferTransformMatrix",
    r"(Landroid/graphics/Matrix;)V",
  );

  static final _setSensorToBufferTransformMatrix =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void setSensorToBufferTransformMatrix(android.graphics.Matrix matrix)
  void setSensorToBufferTransformMatrix(
    jni.JObject matrix,
  ) {
    _setSensorToBufferTransformMatrix(
            reference.pointer,
            _id_setSensorToBufferTransformMatrix as jni.JMethodIDPtr,
            matrix.reference.pointer)
        .check();
  }

  static final _id_getBackpressureStrategy = _class.instanceMethodId(
    r"getBackpressureStrategy",
    r"()I",
  );

  static final _getBackpressureStrategy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getBackpressureStrategy()
  int getBackpressureStrategy() {
    return _getBackpressureStrategy(
            reference.pointer, _id_getBackpressureStrategy as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getBackgroundExecutor = _class.instanceMethodId(
    r"getBackgroundExecutor",
    r"()Ljava/util/concurrent/Executor;",
  );

  static final _getBackgroundExecutor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.concurrent.Executor getBackgroundExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  Executor getBackgroundExecutor() {
    return _getBackgroundExecutor(
            reference.pointer, _id_getBackgroundExecutor as jni.JMethodIDPtr)
        .object(const $ExecutorType());
  }

  static final _id_getImageQueueDepth = _class.instanceMethodId(
    r"getImageQueueDepth",
    r"()I",
  );

  static final _getImageQueueDepth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getImageQueueDepth()
  int getImageQueueDepth() {
    return _getImageQueueDepth(
            reference.pointer, _id_getImageQueueDepth as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getOutputImageFormat = _class.instanceMethodId(
    r"getOutputImageFormat",
    r"()I",
  );

  static final _getOutputImageFormat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getOutputImageFormat()
  int getOutputImageFormat() {
    return _getOutputImageFormat(
            reference.pointer, _id_getOutputImageFormat as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isOutputImageRotationEnabled = _class.instanceMethodId(
    r"isOutputImageRotationEnabled",
    r"()Z",
  );

  static final _isOutputImageRotationEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isOutputImageRotationEnabled()
  bool isOutputImageRotationEnabled() {
    return _isOutputImageRotationEnabled(reference.pointer,
            _id_isOutputImageRotationEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getOnePixelShiftEnabled = _class.instanceMethodId(
    r"getOnePixelShiftEnabled",
    r"()Ljava/lang/Boolean;",
  );

  static final _getOnePixelShiftEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Boolean getOnePixelShiftEnabled()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getOnePixelShiftEnabled() {
    return _getOnePixelShiftEnabled(
            reference.pointer, _id_getOnePixelShiftEnabled as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_getResolutionInfo = _class.instanceMethodId(
    r"getResolutionInfo",
    r"()Landroidx/camera/core/ResolutionInfo;",
  );

  static final _getResolutionInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.ResolutionInfo getResolutionInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResolutionInfo() {
    return _getResolutionInfo(
            reference.pointer, _id_getResolutionInfo as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getResolutionSelector = _class.instanceMethodId(
    r"getResolutionSelector",
    r"()Landroidx/camera/core/resolutionselector/ResolutionSelector;",
  );

  static final _getResolutionSelector = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.resolutionselector.ResolutionSelector getResolutionSelector()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResolutionSelector() {
    return _getResolutionSelector(
            reference.pointer, _id_getResolutionSelector as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_onUnbind = _class.instanceMethodId(
    r"onUnbind",
    r"()V",
  );

  static final _onUnbind = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onUnbind()
  void onUnbind() {
    _onUnbind(reference.pointer, _id_onUnbind as jni.JMethodIDPtr).check();
  }

  static final _id_getDefaultConfig = _class.instanceMethodId(
    r"getDefaultConfig",
    r"(ZLandroidx/camera/core/impl/UseCaseConfigFactory;)Landroidx/camera/core/impl/UseCaseConfig;",
  );

  static final _getDefaultConfig = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.impl.UseCaseConfig getDefaultConfig(boolean z, androidx.camera.core.impl.UseCaseConfigFactory useCaseConfigFactory)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDefaultConfig(
    bool z,
    jni.JObject useCaseConfigFactory,
  ) {
    return _getDefaultConfig(
            reference.pointer,
            _id_getDefaultConfig as jni.JMethodIDPtr,
            z ? 1 : 0,
            useCaseConfigFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onBind = _class.instanceMethodId(
    r"onBind",
    r"()V",
  );

  static final _onBind = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onBind()
  void onBind() {
    _onBind(reference.pointer, _id_onBind as jni.JMethodIDPtr).check();
  }

  static final _id_getUseCaseConfigBuilder = _class.instanceMethodId(
    r"getUseCaseConfigBuilder",
    r"(Landroidx/camera/core/impl/Config;)Landroidx/camera/core/impl/UseCaseConfig$Builder;",
  );

  static final _getUseCaseConfigBuilder = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config config)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUseCaseConfigBuilder(
    jni.JObject config,
  ) {
    return _getUseCaseConfigBuilder(
            reference.pointer,
            _id_getUseCaseConfigBuilder as jni.JMethodIDPtr,
            config.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onSuggestedStreamSpecUpdated = _class.instanceMethodId(
    r"onSuggestedStreamSpecUpdated",
    r"(Landroidx/camera/core/impl/StreamSpec;)Landroidx/camera/core/impl/StreamSpec;",
  );

  static final _onSuggestedStreamSpecUpdated = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected androidx.camera.core.impl.StreamSpec onSuggestedStreamSpecUpdated(androidx.camera.core.impl.StreamSpec streamSpec)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onSuggestedStreamSpecUpdated(
    jni.JObject streamSpec,
  ) {
    return _onSuggestedStreamSpecUpdated(
            reference.pointer,
            _id_onSuggestedStreamSpecUpdated as jni.JMethodIDPtr,
            streamSpec.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onSuggestedStreamSpecImplementationOptionsUpdated =
      _class.instanceMethodId(
    r"onSuggestedStreamSpecImplementationOptionsUpdated",
    r"(Landroidx/camera/core/impl/Config;)Landroidx/camera/core/impl/StreamSpec;",
  );

  static final _onSuggestedStreamSpecImplementationOptionsUpdated =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: protected androidx.camera.core.impl.StreamSpec onSuggestedStreamSpecImplementationOptionsUpdated(androidx.camera.core.impl.Config config)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onSuggestedStreamSpecImplementationOptionsUpdated(
    jni.JObject config,
  ) {
    return _onSuggestedStreamSpecImplementationOptionsUpdated(
            reference.pointer,
            _id_onSuggestedStreamSpecImplementationOptionsUpdated
                as jni.JMethodIDPtr,
            config.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $ImageAnalysisType extends jni.JObjType<ImageAnalysis> {
  const $ImageAnalysisType();

  @override
  String get signature => r"Landroidx/camera/core/ImageAnalysis;";

  @override
  ImageAnalysis fromReference(jni.JReference reference) =>
      ImageAnalysis.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageAnalysisType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageAnalysisType) &&
        other is $ImageAnalysisType;
  }
}

/// from: androidx.camera.core.ImageCapture$Builder
class ImageCapture_Builder extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_Builder> $type = type;

  ImageCapture_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageCapture$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_BuilderType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageCapture_Builder() {
    return ImageCapture_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_fromConfig = _class.staticMethodId(
    r"fromConfig",
    r"(Landroidx/camera/core/impl/Config;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _fromConfig = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.camera.core.ImageCapture$Builder fromConfig(androidx.camera.core.impl.Config config)
  /// The returned object must be released after use, by calling the [release] method.
  static ImageCapture_Builder fromConfig(
    jni.JObject config,
  ) {
    return _fromConfig(_class.reference.pointer,
            _id_fromConfig as jni.JMethodIDPtr, config.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_getMutableConfig = _class.instanceMethodId(
    r"getMutableConfig",
    r"()Landroidx/camera/core/impl/MutableConfig;",
  );

  static final _getMutableConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.impl.MutableConfig getMutableConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMutableConfig() {
    return _getMutableConfig(
            reference.pointer, _id_getMutableConfig as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getUseCaseConfig = _class.instanceMethodId(
    r"getUseCaseConfig",
    r"()Landroidx/camera/core/impl/ImageCaptureConfig;",
  );

  static final _getUseCaseConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.impl.ImageCaptureConfig getUseCaseConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUseCaseConfig() {
    return _getUseCaseConfig(
            reference.pointer, _id_getUseCaseConfig as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_build = _class.instanceMethodId(
    r"build",
    r"()Landroidx/camera/core/ImageCapture;",
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.ImageCapture build()
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $ImageCaptureType());
  }

  static final _id_setCaptureMode = _class.instanceMethodId(
    r"setCaptureMode",
    r"(I)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setCaptureMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setCaptureMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setCaptureMode(
    int i,
  ) {
    return _setCaptureMode(
            reference.pointer, _id_setCaptureMode as jni.JMethodIDPtr, i)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setFlashMode = _class.instanceMethodId(
    r"setFlashMode",
    r"(I)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setFlashMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setFlashMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setFlashMode(
    int i,
  ) {
    return _setFlashMode(
            reference.pointer, _id_setFlashMode as jni.JMethodIDPtr, i)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setBufferFormat = _class.instanceMethodId(
    r"setBufferFormat",
    r"(I)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setBufferFormat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setBufferFormat(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setBufferFormat(
    int i,
  ) {
    return _setBufferFormat(
            reference.pointer, _id_setBufferFormat as jni.JMethodIDPtr, i)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setSupportedResolutions = _class.instanceMethodId(
    r"setSupportedResolutions",
    r"(Ljava/util/List;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setSupportedResolutions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setSupportedResolutions(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setSupportedResolutions(
    jni.JList<jni.JObject> list,
  ) {
    return _setSupportedResolutions(
            reference.pointer,
            _id_setSupportedResolutions as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setCustomOrderedResolutions = _class.instanceMethodId(
    r"setCustomOrderedResolutions",
    r"(Ljava/util/List;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setCustomOrderedResolutions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setCustomOrderedResolutions(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setCustomOrderedResolutions(
    jni.JList<jni.JObject> list,
  ) {
    return _setCustomOrderedResolutions(
            reference.pointer,
            _id_setCustomOrderedResolutions as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setTargetClass = _class.instanceMethodId(
    r"setTargetClass",
    r"(Ljava/lang/Class;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setTargetClass = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setTargetClass(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setTargetClass(
    jni.JObject class0,
  ) {
    return _setTargetClass(reference.pointer,
            _id_setTargetClass as jni.JMethodIDPtr, class0.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setTargetName = _class.instanceMethodId(
    r"setTargetName",
    r"(Ljava/lang/String;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setTargetName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setTargetName(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setTargetName(
    jni.JString string,
  ) {
    return _setTargetName(reference.pointer,
            _id_setTargetName as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setTargetAspectRatio = _class.instanceMethodId(
    r"setTargetAspectRatio",
    r"(I)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setTargetAspectRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setTargetAspectRatio(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setTargetAspectRatio(
    int i,
  ) {
    return _setTargetAspectRatio(
            reference.pointer, _id_setTargetAspectRatio as jni.JMethodIDPtr, i)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setTargetRotation = _class.instanceMethodId(
    r"setTargetRotation",
    r"(I)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setTargetRotation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setTargetRotation(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setTargetRotation(
    int i,
  ) {
    return _setTargetRotation(
            reference.pointer, _id_setTargetRotation as jni.JMethodIDPtr, i)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setMirrorMode = _class.instanceMethodId(
    r"setMirrorMode",
    r"(I)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setMirrorMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setMirrorMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setMirrorMode(
    int i,
  ) {
    return _setMirrorMode(
            reference.pointer, _id_setMirrorMode as jni.JMethodIDPtr, i)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setTargetResolution = _class.instanceMethodId(
    r"setTargetResolution",
    r"(Landroid/util/Size;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setTargetResolution = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setTargetResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setTargetResolution(
    jni.JObject size,
  ) {
    return _setTargetResolution(reference.pointer,
            _id_setTargetResolution as jni.JMethodIDPtr, size.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setDefaultResolution = _class.instanceMethodId(
    r"setDefaultResolution",
    r"(Landroid/util/Size;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setDefaultResolution = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setDefaultResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setDefaultResolution(
    jni.JObject size,
  ) {
    return _setDefaultResolution(
            reference.pointer,
            _id_setDefaultResolution as jni.JMethodIDPtr,
            size.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setMaxResolution = _class.instanceMethodId(
    r"setMaxResolution",
    r"(Landroid/util/Size;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setMaxResolution = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setMaxResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setMaxResolution(
    jni.JObject size,
  ) {
    return _setMaxResolution(reference.pointer,
            _id_setMaxResolution as jni.JMethodIDPtr, size.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setResolutionSelector = _class.instanceMethodId(
    r"setResolutionSelector",
    r"(Landroidx/camera/core/resolutionselector/ResolutionSelector;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setResolutionSelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setResolutionSelector(androidx.camera.core.resolutionselector.ResolutionSelector resolutionSelector)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setResolutionSelector(
    jni.JObject resolutionSelector,
  ) {
    return _setResolutionSelector(
            reference.pointer,
            _id_setResolutionSelector as jni.JMethodIDPtr,
            resolutionSelector.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setImageReaderProxyProvider = _class.instanceMethodId(
    r"setImageReaderProxyProvider",
    r"(Landroidx/camera/core/ImageReaderProxyProvider;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setImageReaderProxyProvider = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setImageReaderProxyProvider(androidx.camera.core.ImageReaderProxyProvider imageReaderProxyProvider)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setImageReaderProxyProvider(
    jni.JObject imageReaderProxyProvider,
  ) {
    return _setImageReaderProxyProvider(
            reference.pointer,
            _id_setImageReaderProxyProvider as jni.JMethodIDPtr,
            imageReaderProxyProvider.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setSoftwareJpegEncoderRequested = _class.instanceMethodId(
    r"setSoftwareJpegEncoderRequested",
    r"(Z)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setSoftwareJpegEncoderRequested = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setSoftwareJpegEncoderRequested(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setSoftwareJpegEncoderRequested(
    bool z,
  ) {
    return _setSoftwareJpegEncoderRequested(reference.pointer,
            _id_setSoftwareJpegEncoderRequested as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setFlashType = _class.instanceMethodId(
    r"setFlashType",
    r"(I)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setFlashType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setFlashType(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setFlashType(
    int i,
  ) {
    return _setFlashType(
            reference.pointer, _id_setFlashType as jni.JMethodIDPtr, i)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setJpegQuality = _class.instanceMethodId(
    r"setJpegQuality",
    r"(I)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setJpegQuality = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setJpegQuality(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setJpegQuality(
    int i,
  ) {
    return _setJpegQuality(
            reference.pointer, _id_setJpegQuality as jni.JMethodIDPtr, i)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setIoExecutor = _class.instanceMethodId(
    r"setIoExecutor",
    r"(Ljava/util/concurrent/Executor;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setIoExecutor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setIoExecutor(java.util.concurrent.Executor executor)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setIoExecutor(
    Executor executor,
  ) {
    return _setIoExecutor(reference.pointer,
            _id_setIoExecutor as jni.JMethodIDPtr, executor.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setDefaultSessionConfig = _class.instanceMethodId(
    r"setDefaultSessionConfig",
    r"(Landroidx/camera/core/impl/SessionConfig;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setDefaultSessionConfig = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig sessionConfig)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setDefaultSessionConfig(
    jni.JObject sessionConfig,
  ) {
    return _setDefaultSessionConfig(
            reference.pointer,
            _id_setDefaultSessionConfig as jni.JMethodIDPtr,
            sessionConfig.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setDefaultCaptureConfig = _class.instanceMethodId(
    r"setDefaultCaptureConfig",
    r"(Landroidx/camera/core/impl/CaptureConfig;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setDefaultCaptureConfig = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig captureConfig)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setDefaultCaptureConfig(
    jni.JObject captureConfig,
  ) {
    return _setDefaultCaptureConfig(
            reference.pointer,
            _id_setDefaultCaptureConfig as jni.JMethodIDPtr,
            captureConfig.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setSessionOptionUnpacker = _class.instanceMethodId(
    r"setSessionOptionUnpacker",
    r"(Landroidx/camera/core/impl/SessionConfig$OptionUnpacker;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setSessionOptionUnpacker = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker optionUnpacker)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setSessionOptionUnpacker(
    jni.JObject optionUnpacker,
  ) {
    return _setSessionOptionUnpacker(
            reference.pointer,
            _id_setSessionOptionUnpacker as jni.JMethodIDPtr,
            optionUnpacker.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setCaptureOptionUnpacker = _class.instanceMethodId(
    r"setCaptureOptionUnpacker",
    r"(Landroidx/camera/core/impl/CaptureConfig$OptionUnpacker;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setCaptureOptionUnpacker = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker optionUnpacker)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setCaptureOptionUnpacker(
    jni.JObject optionUnpacker,
  ) {
    return _setCaptureOptionUnpacker(
            reference.pointer,
            _id_setCaptureOptionUnpacker as jni.JMethodIDPtr,
            optionUnpacker.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setCameraSelector = _class.instanceMethodId(
    r"setCameraSelector",
    r"(Landroidx/camera/core/CameraSelector;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setCameraSelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setCameraSelector(androidx.camera.core.CameraSelector cameraSelector)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setCameraSelector(
    CameraSelector cameraSelector,
  ) {
    return _setCameraSelector(
            reference.pointer,
            _id_setCameraSelector as jni.JMethodIDPtr,
            cameraSelector.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setSurfaceOccupancyPriority = _class.instanceMethodId(
    r"setSurfaceOccupancyPriority",
    r"(I)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setSurfaceOccupancyPriority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setSurfaceOccupancyPriority(int i)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setSurfaceOccupancyPriority(
    int i,
  ) {
    return _setSurfaceOccupancyPriority(reference.pointer,
            _id_setSurfaceOccupancyPriority as jni.JMethodIDPtr, i)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setUseCaseEventCallback = _class.instanceMethodId(
    r"setUseCaseEventCallback",
    r"(Landroidx/camera/core/UseCase$EventCallback;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setUseCaseEventCallback = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback eventCallback)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setUseCaseEventCallback(
    jni.JObject eventCallback,
  ) {
    return _setUseCaseEventCallback(
            reference.pointer,
            _id_setUseCaseEventCallback as jni.JMethodIDPtr,
            eventCallback.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setZslDisabled = _class.instanceMethodId(
    r"setZslDisabled",
    r"(Z)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setZslDisabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setZslDisabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setZslDisabled(
    bool z,
  ) {
    return _setZslDisabled(reference.pointer,
            _id_setZslDisabled as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setHighResolutionDisabled = _class.instanceMethodId(
    r"setHighResolutionDisabled",
    r"(Z)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setHighResolutionDisabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setHighResolutionDisabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setHighResolutionDisabled(
    bool z,
  ) {
    return _setHighResolutionDisabled(reference.pointer,
            _id_setHighResolutionDisabled as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setCaptureType = _class.instanceMethodId(
    r"setCaptureType",
    r"(Landroidx/camera/core/impl/UseCaseConfigFactory$CaptureType;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setCaptureType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setCaptureType(androidx.camera.core.impl.UseCaseConfigFactory$CaptureType captureType)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setCaptureType(
    jni.JObject captureType,
  ) {
    return _setCaptureType(
            reference.pointer,
            _id_setCaptureType as jni.JMethodIDPtr,
            captureType.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_setDynamicRange = _class.instanceMethodId(
    r"setDynamicRange",
    r"(Landroidx/camera/core/DynamicRange;)Landroidx/camera/core/ImageCapture$Builder;",
  );

  static final _setDynamicRange = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$Builder setDynamicRange(androidx.camera.core.DynamicRange dynamicRange)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Builder setDynamicRange(
    jni.JObject dynamicRange,
  ) {
    return _setDynamicRange(
            reference.pointer,
            _id_setDynamicRange as jni.JMethodIDPtr,
            dynamicRange.reference.pointer)
        .object(const $ImageCapture_BuilderType());
  }

  static final _id_getUseCaseConfig1 = _class.instanceMethodId(
    r"getUseCaseConfig",
    r"()Landroidx/camera/core/impl/UseCaseConfig;",
  );

  static final _getUseCaseConfig1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUseCaseConfig1() {
    return _getUseCaseConfig1(
            reference.pointer, _id_getUseCaseConfig1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setCaptureType1 = _class.instanceMethodId(
    r"setCaptureType",
    r"(Landroidx/camera/core/impl/UseCaseConfigFactory$CaptureType;)Ljava/lang/Object;",
  );

  static final _setCaptureType1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setCaptureType(androidx.camera.core.impl.UseCaseConfigFactory$CaptureType captureType)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setCaptureType1(
    jni.JObject captureType,
  ) {
    return _setCaptureType1(
            reference.pointer,
            _id_setCaptureType1 as jni.JMethodIDPtr,
            captureType.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setHighResolutionDisabled1 = _class.instanceMethodId(
    r"setHighResolutionDisabled",
    r"(Z)Ljava/lang/Object;",
  );

  static final _setHighResolutionDisabled1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setHighResolutionDisabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setHighResolutionDisabled1(
    bool z,
  ) {
    return _setHighResolutionDisabled1(reference.pointer,
            _id_setHighResolutionDisabled1 as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const jni.JObjectType());
  }

  static final _id_setZslDisabled1 = _class.instanceMethodId(
    r"setZslDisabled",
    r"(Z)Ljava/lang/Object;",
  );

  static final _setZslDisabled1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setZslDisabled(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setZslDisabled1(
    bool z,
  ) {
    return _setZslDisabled1(reference.pointer,
            _id_setZslDisabled1 as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const jni.JObjectType());
  }

  static final _id_setCameraSelector1 = _class.instanceMethodId(
    r"setCameraSelector",
    r"(Landroidx/camera/core/CameraSelector;)Ljava/lang/Object;",
  );

  static final _setCameraSelector1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setCameraSelector(androidx.camera.core.CameraSelector cameraSelector)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setCameraSelector1(
    CameraSelector cameraSelector,
  ) {
    return _setCameraSelector1(
            reference.pointer,
            _id_setCameraSelector1 as jni.JMethodIDPtr,
            cameraSelector.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setSurfaceOccupancyPriority1 = _class.instanceMethodId(
    r"setSurfaceOccupancyPriority",
    r"(I)Ljava/lang/Object;",
  );

  static final _setSurfaceOccupancyPriority1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setSurfaceOccupancyPriority(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setSurfaceOccupancyPriority1(
    int i,
  ) {
    return _setSurfaceOccupancyPriority1(reference.pointer,
            _id_setSurfaceOccupancyPriority1 as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setCaptureOptionUnpacker1 = _class.instanceMethodId(
    r"setCaptureOptionUnpacker",
    r"(Landroidx/camera/core/impl/CaptureConfig$OptionUnpacker;)Ljava/lang/Object;",
  );

  static final _setCaptureOptionUnpacker1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker optionUnpacker)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setCaptureOptionUnpacker1(
    jni.JObject optionUnpacker,
  ) {
    return _setCaptureOptionUnpacker1(
            reference.pointer,
            _id_setCaptureOptionUnpacker1 as jni.JMethodIDPtr,
            optionUnpacker.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setSessionOptionUnpacker1 = _class.instanceMethodId(
    r"setSessionOptionUnpacker",
    r"(Landroidx/camera/core/impl/SessionConfig$OptionUnpacker;)Ljava/lang/Object;",
  );

  static final _setSessionOptionUnpacker1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker optionUnpacker)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setSessionOptionUnpacker1(
    jni.JObject optionUnpacker,
  ) {
    return _setSessionOptionUnpacker1(
            reference.pointer,
            _id_setSessionOptionUnpacker1 as jni.JMethodIDPtr,
            optionUnpacker.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setDefaultCaptureConfig1 = _class.instanceMethodId(
    r"setDefaultCaptureConfig",
    r"(Landroidx/camera/core/impl/CaptureConfig;)Ljava/lang/Object;",
  );

  static final _setDefaultCaptureConfig1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig captureConfig)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setDefaultCaptureConfig1(
    jni.JObject captureConfig,
  ) {
    return _setDefaultCaptureConfig1(
            reference.pointer,
            _id_setDefaultCaptureConfig1 as jni.JMethodIDPtr,
            captureConfig.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setDefaultSessionConfig1 = _class.instanceMethodId(
    r"setDefaultSessionConfig",
    r"(Landroidx/camera/core/impl/SessionConfig;)Ljava/lang/Object;",
  );

  static final _setDefaultSessionConfig1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig sessionConfig)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setDefaultSessionConfig1(
    jni.JObject sessionConfig,
  ) {
    return _setDefaultSessionConfig1(
            reference.pointer,
            _id_setDefaultSessionConfig1 as jni.JMethodIDPtr,
            sessionConfig.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setTargetName1 = _class.instanceMethodId(
    r"setTargetName",
    r"(Ljava/lang/String;)Ljava/lang/Object;",
  );

  static final _setTargetName1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setTargetName(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setTargetName1(
    jni.JString string,
  ) {
    return _setTargetName1(reference.pointer,
            _id_setTargetName1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setTargetClass1 = _class.instanceMethodId(
    r"setTargetClass",
    r"(Ljava/lang/Class;)Ljava/lang/Object;",
  );

  static final _setTargetClass1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setTargetClass(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setTargetClass1(
    jni.JObject class0,
  ) {
    return _setTargetClass1(reference.pointer,
            _id_setTargetClass1 as jni.JMethodIDPtr, class0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_build1 = _class.instanceMethodId(
    r"build",
    r"()Ljava/lang/Object;",
  );

  static final _build1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Object build()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject build1() {
    return _build1(reference.pointer, _id_build1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setUseCaseEventCallback1 = _class.instanceMethodId(
    r"setUseCaseEventCallback",
    r"(Landroidx/camera/core/UseCase$EventCallback;)Ljava/lang/Object;",
  );

  static final _setUseCaseEventCallback1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback eventCallback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setUseCaseEventCallback1(
    jni.JObject eventCallback,
  ) {
    return _setUseCaseEventCallback1(
            reference.pointer,
            _id_setUseCaseEventCallback1 as jni.JMethodIDPtr,
            eventCallback.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setResolutionSelector1 = _class.instanceMethodId(
    r"setResolutionSelector",
    r"(Landroidx/camera/core/resolutionselector/ResolutionSelector;)Ljava/lang/Object;",
  );

  static final _setResolutionSelector1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setResolutionSelector(androidx.camera.core.resolutionselector.ResolutionSelector resolutionSelector)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setResolutionSelector1(
    jni.JObject resolutionSelector,
  ) {
    return _setResolutionSelector1(
            reference.pointer,
            _id_setResolutionSelector1 as jni.JMethodIDPtr,
            resolutionSelector.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setCustomOrderedResolutions1 = _class.instanceMethodId(
    r"setCustomOrderedResolutions",
    r"(Ljava/util/List;)Ljava/lang/Object;",
  );

  static final _setCustomOrderedResolutions1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setCustomOrderedResolutions(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setCustomOrderedResolutions1(
    jni.JList<jni.JObject> list,
  ) {
    return _setCustomOrderedResolutions1(
            reference.pointer,
            _id_setCustomOrderedResolutions1 as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setSupportedResolutions1 = _class.instanceMethodId(
    r"setSupportedResolutions",
    r"(Ljava/util/List;)Ljava/lang/Object;",
  );

  static final _setSupportedResolutions1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setSupportedResolutions(java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setSupportedResolutions1(
    jni.JList<jni.JObject> list,
  ) {
    return _setSupportedResolutions1(
            reference.pointer,
            _id_setSupportedResolutions1 as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setMaxResolution1 = _class.instanceMethodId(
    r"setMaxResolution",
    r"(Landroid/util/Size;)Ljava/lang/Object;",
  );

  static final _setMaxResolution1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setMaxResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setMaxResolution1(
    jni.JObject size,
  ) {
    return _setMaxResolution1(reference.pointer,
            _id_setMaxResolution1 as jni.JMethodIDPtr, size.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setDefaultResolution1 = _class.instanceMethodId(
    r"setDefaultResolution",
    r"(Landroid/util/Size;)Ljava/lang/Object;",
  );

  static final _setDefaultResolution1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setDefaultResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setDefaultResolution1(
    jni.JObject size,
  ) {
    return _setDefaultResolution1(
            reference.pointer,
            _id_setDefaultResolution1 as jni.JMethodIDPtr,
            size.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setTargetResolution1 = _class.instanceMethodId(
    r"setTargetResolution",
    r"(Landroid/util/Size;)Ljava/lang/Object;",
  );

  static final _setTargetResolution1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setTargetResolution(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setTargetResolution1(
    jni.JObject size,
  ) {
    return _setTargetResolution1(
            reference.pointer,
            _id_setTargetResolution1 as jni.JMethodIDPtr,
            size.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setMirrorMode1 = _class.instanceMethodId(
    r"setMirrorMode",
    r"(I)Ljava/lang/Object;",
  );

  static final _setMirrorMode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setMirrorMode(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setMirrorMode1(
    int i,
  ) {
    return _setMirrorMode1(
            reference.pointer, _id_setMirrorMode1 as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setTargetRotation1 = _class.instanceMethodId(
    r"setTargetRotation",
    r"(I)Ljava/lang/Object;",
  );

  static final _setTargetRotation1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setTargetRotation(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setTargetRotation1(
    int i,
  ) {
    return _setTargetRotation1(
            reference.pointer, _id_setTargetRotation1 as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setTargetAspectRatio1 = _class.instanceMethodId(
    r"setTargetAspectRatio",
    r"(I)Ljava/lang/Object;",
  );

  static final _setTargetAspectRatio1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.Object setTargetAspectRatio(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setTargetAspectRatio1(
    int i,
  ) {
    return _setTargetAspectRatio1(
            reference.pointer, _id_setTargetAspectRatio1 as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setIoExecutor1 = _class.instanceMethodId(
    r"setIoExecutor",
    r"(Ljava/util/concurrent/Executor;)Ljava/lang/Object;",
  );

  static final _setIoExecutor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setIoExecutor(java.util.concurrent.Executor executor)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setIoExecutor1(
    Executor executor,
  ) {
    return _setIoExecutor1(reference.pointer,
            _id_setIoExecutor1 as jni.JMethodIDPtr, executor.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setDynamicRange1 = _class.instanceMethodId(
    r"setDynamicRange",
    r"(Landroidx/camera/core/DynamicRange;)Ljava/lang/Object;",
  );

  static final _setDynamicRange1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object setDynamicRange(androidx.camera.core.DynamicRange dynamicRange)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject setDynamicRange1(
    jni.JObject dynamicRange,
  ) {
    return _setDynamicRange1(
            reference.pointer,
            _id_setDynamicRange1 as jni.JMethodIDPtr,
            dynamicRange.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $ImageCapture_BuilderType
    extends jni.JObjType<ImageCapture_Builder> {
  const $ImageCapture_BuilderType();

  @override
  String get signature => r"Landroidx/camera/core/ImageCapture$Builder;";

  @override
  ImageCapture_Builder fromReference(jni.JReference reference) =>
      ImageCapture_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_BuilderType) &&
        other is $ImageCapture_BuilderType;
  }
}

/// from: androidx.camera.core.ImageCapture$CaptureMode
class ImageCapture_CaptureMode extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_CaptureMode> $type = type;

  ImageCapture_CaptureMode.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageCapture$CaptureMode");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_CaptureModeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageCapture_CaptureModeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageCapture_CaptureMode.implement(
    $ImageCapture_CaptureModeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageCapture_CaptureMode.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ImageCapture$CaptureMode",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageCapture_CaptureModeImpl {
  factory $ImageCapture_CaptureModeImpl() = _$ImageCapture_CaptureModeImpl;
}

class _$ImageCapture_CaptureModeImpl implements $ImageCapture_CaptureModeImpl {
  _$ImageCapture_CaptureModeImpl();
}

final class $ImageCapture_CaptureModeType
    extends jni.JObjType<ImageCapture_CaptureMode> {
  const $ImageCapture_CaptureModeType();

  @override
  String get signature => r"Landroidx/camera/core/ImageCapture$CaptureMode;";

  @override
  ImageCapture_CaptureMode fromReference(jni.JReference reference) =>
      ImageCapture_CaptureMode.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_CaptureModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_CaptureModeType) &&
        other is $ImageCapture_CaptureModeType;
  }
}

/// from: androidx.camera.core.ImageCapture$Defaults
class ImageCapture_Defaults extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_Defaults> $type = type;

  ImageCapture_Defaults.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageCapture$Defaults");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_DefaultsType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageCapture_Defaults() {
    return ImageCapture_Defaults.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getConfig = _class.instanceMethodId(
    r"getConfig",
    r"()Landroidx/camera/core/impl/ImageCaptureConfig;",
  );

  static final _getConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.impl.ImageCaptureConfig getConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getConfig() {
    return _getConfig(reference.pointer, _id_getConfig as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getConfig1 = _class.instanceMethodId(
    r"getConfig",
    r"()Landroidx/camera/core/impl/Config;",
  );

  static final _getConfig1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.impl.Config getConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getConfig1() {
    return _getConfig1(reference.pointer, _id_getConfig1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $ImageCapture_DefaultsType
    extends jni.JObjType<ImageCapture_Defaults> {
  const $ImageCapture_DefaultsType();

  @override
  String get signature => r"Landroidx/camera/core/ImageCapture$Defaults;";

  @override
  ImageCapture_Defaults fromReference(jni.JReference reference) =>
      ImageCapture_Defaults.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_DefaultsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_DefaultsType) &&
        other is $ImageCapture_DefaultsType;
  }
}

/// from: androidx.camera.core.ImageCapture$FlashMode
class ImageCapture_FlashMode extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_FlashMode> $type = type;

  ImageCapture_FlashMode.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageCapture$FlashMode");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_FlashModeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageCapture_FlashModeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageCapture_FlashMode.implement(
    $ImageCapture_FlashModeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageCapture_FlashMode.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ImageCapture$FlashMode",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageCapture_FlashModeImpl {
  factory $ImageCapture_FlashModeImpl() = _$ImageCapture_FlashModeImpl;
}

class _$ImageCapture_FlashModeImpl implements $ImageCapture_FlashModeImpl {
  _$ImageCapture_FlashModeImpl();
}

final class $ImageCapture_FlashModeType
    extends jni.JObjType<ImageCapture_FlashMode> {
  const $ImageCapture_FlashModeType();

  @override
  String get signature => r"Landroidx/camera/core/ImageCapture$FlashMode;";

  @override
  ImageCapture_FlashMode fromReference(jni.JReference reference) =>
      ImageCapture_FlashMode.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_FlashModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_FlashModeType) &&
        other is $ImageCapture_FlashModeType;
  }
}

/// from: androidx.camera.core.ImageCapture$FlashType
class ImageCapture_FlashType extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_FlashType> $type = type;

  ImageCapture_FlashType.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageCapture$FlashType");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_FlashTypeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageCapture_FlashTypeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageCapture_FlashType.implement(
    $ImageCapture_FlashTypeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageCapture_FlashType.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ImageCapture$FlashType",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageCapture_FlashTypeImpl {
  factory $ImageCapture_FlashTypeImpl() = _$ImageCapture_FlashTypeImpl;
}

class _$ImageCapture_FlashTypeImpl implements $ImageCapture_FlashTypeImpl {
  _$ImageCapture_FlashTypeImpl();
}

final class $ImageCapture_FlashTypeType
    extends jni.JObjType<ImageCapture_FlashType> {
  const $ImageCapture_FlashTypeType();

  @override
  String get signature => r"Landroidx/camera/core/ImageCapture$FlashType;";

  @override
  ImageCapture_FlashType fromReference(jni.JReference reference) =>
      ImageCapture_FlashType.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_FlashTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_FlashTypeType) &&
        other is $ImageCapture_FlashTypeType;
  }
}

/// from: androidx.camera.core.ImageCapture$ImageCaptureError
class ImageCapture_ImageCaptureError extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_ImageCaptureError> $type = type;

  ImageCapture_ImageCaptureError.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/core/ImageCapture$ImageCaptureError");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_ImageCaptureErrorType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageCapture_ImageCaptureErrorImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageCapture_ImageCaptureError.implement(
    $ImageCapture_ImageCaptureErrorImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageCapture_ImageCaptureError.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ImageCapture$ImageCaptureError",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageCapture_ImageCaptureErrorImpl {
  factory $ImageCapture_ImageCaptureErrorImpl() =
      _$ImageCapture_ImageCaptureErrorImpl;
}

class _$ImageCapture_ImageCaptureErrorImpl
    implements $ImageCapture_ImageCaptureErrorImpl {
  _$ImageCapture_ImageCaptureErrorImpl();
}

final class $ImageCapture_ImageCaptureErrorType
    extends jni.JObjType<ImageCapture_ImageCaptureError> {
  const $ImageCapture_ImageCaptureErrorType();

  @override
  String get signature =>
      r"Landroidx/camera/core/ImageCapture$ImageCaptureError;";

  @override
  ImageCapture_ImageCaptureError fromReference(jni.JReference reference) =>
      ImageCapture_ImageCaptureError.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_ImageCaptureErrorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_ImageCaptureErrorType) &&
        other is $ImageCapture_ImageCaptureErrorType;
  }
}

/// from: androidx.camera.core.ImageCapture$Metadata
class ImageCapture_Metadata extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_Metadata> $type = type;

  ImageCapture_Metadata.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageCapture$Metadata");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_MetadataType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageCapture_Metadata() {
    return ImageCapture_Metadata.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_isReversedHorizontal = _class.instanceMethodId(
    r"isReversedHorizontal",
    r"()Z",
  );

  static final _isReversedHorizontal = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isReversedHorizontal()
  bool isReversedHorizontal() {
    return _isReversedHorizontal(
            reference.pointer, _id_isReversedHorizontal as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isReversedHorizontalSet = _class.instanceMethodId(
    r"isReversedHorizontalSet",
    r"()Z",
  );

  static final _isReversedHorizontalSet = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isReversedHorizontalSet()
  bool isReversedHorizontalSet() {
    return _isReversedHorizontalSet(
            reference.pointer, _id_isReversedHorizontalSet as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setReversedHorizontal = _class.instanceMethodId(
    r"setReversedHorizontal",
    r"(Z)V",
  );

  static final _setReversedHorizontal = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setReversedHorizontal(boolean z)
  void setReversedHorizontal(
    bool z,
  ) {
    _setReversedHorizontal(reference.pointer,
            _id_setReversedHorizontal as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isReversedVertical = _class.instanceMethodId(
    r"isReversedVertical",
    r"()Z",
  );

  static final _isReversedVertical = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isReversedVertical()
  bool isReversedVertical() {
    return _isReversedVertical(
            reference.pointer, _id_isReversedVertical as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setReversedVertical = _class.instanceMethodId(
    r"setReversedVertical",
    r"(Z)V",
  );

  static final _setReversedVertical = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setReversedVertical(boolean z)
  void setReversedVertical(
    bool z,
  ) {
    _setReversedVertical(reference.pointer,
            _id_setReversedVertical as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getLocation = _class.instanceMethodId(
    r"getLocation",
    r"()Landroid/location/Location;",
  );

  static final _getLocation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.location.Location getLocation()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLocation() {
    return _getLocation(reference.pointer, _id_getLocation as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setLocation = _class.instanceMethodId(
    r"setLocation",
    r"(Landroid/location/Location;)V",
  );

  static final _setLocation = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setLocation(android.location.Location location)
  void setLocation(
    jni.JObject location,
  ) {
    _setLocation(reference.pointer, _id_setLocation as jni.JMethodIDPtr,
            location.reference.pointer)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $ImageCapture_MetadataType
    extends jni.JObjType<ImageCapture_Metadata> {
  const $ImageCapture_MetadataType();

  @override
  String get signature => r"Landroidx/camera/core/ImageCapture$Metadata;";

  @override
  ImageCapture_Metadata fromReference(jni.JReference reference) =>
      ImageCapture_Metadata.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_MetadataType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_MetadataType) &&
        other is $ImageCapture_MetadataType;
  }
}

/// from: androidx.camera.core.ImageCapture$OnImageCapturedCallback
class ImageCapture_OnImageCapturedCallback extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_OnImageCapturedCallback> $type = type;

  ImageCapture_OnImageCapturedCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/core/ImageCapture$OnImageCapturedCallback");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_OnImageCapturedCallbackType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageCapture_OnImageCapturedCallback() {
    return ImageCapture_OnImageCapturedCallback.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_onCaptureSuccess = _class.instanceMethodId(
    r"onCaptureSuccess",
    r"(Landroidx/camera/core/ImageProxy;)V",
  );

  static final _onCaptureSuccess = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onCaptureSuccess(androidx.camera.core.ImageProxy imageProxy)
  void onCaptureSuccess(
    ImageProxy imageProxy,
  ) {
    _onCaptureSuccess(
            reference.pointer,
            _id_onCaptureSuccess as jni.JMethodIDPtr,
            imageProxy.reference.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r"onError",
    r"(Landroidx/camera/core/ImageCaptureException;)V",
  );

  static final _onError = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onError(androidx.camera.core.ImageCaptureException imageCaptureException)
  void onError(
    jni.JObject imageCaptureException,
  ) {
    _onError(reference.pointer, _id_onError as jni.JMethodIDPtr,
            imageCaptureException.reference.pointer)
        .check();
  }
}

final class $ImageCapture_OnImageCapturedCallbackType
    extends jni.JObjType<ImageCapture_OnImageCapturedCallback> {
  const $ImageCapture_OnImageCapturedCallbackType();

  @override
  String get signature =>
      r"Landroidx/camera/core/ImageCapture$OnImageCapturedCallback;";

  @override
  ImageCapture_OnImageCapturedCallback fromReference(
          jni.JReference reference) =>
      ImageCapture_OnImageCapturedCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_OnImageCapturedCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_OnImageCapturedCallbackType) &&
        other is $ImageCapture_OnImageCapturedCallbackType;
  }
}

/// from: androidx.camera.core.ImageCapture$OnImageSavedCallback
class ImageCapture_OnImageSavedCallback extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_OnImageSavedCallback> $type = type;

  ImageCapture_OnImageSavedCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/core/ImageCapture$OnImageSavedCallback");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_OnImageSavedCallbackType();
  static final _id_onImageSaved = _class.instanceMethodId(
    r"onImageSaved",
    r"(Landroidx/camera/core/ImageCapture$OutputFileResults;)V",
  );

  static final _onImageSaved = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onImageSaved(androidx.camera.core.ImageCapture$OutputFileResults outputFileResults)
  void onImageSaved(
    ImageCapture_OutputFileResults outputFileResults,
  ) {
    _onImageSaved(reference.pointer, _id_onImageSaved as jni.JMethodIDPtr,
            outputFileResults.reference.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r"onError",
    r"(Landroidx/camera/core/ImageCaptureException;)V",
  );

  static final _onError = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onError(androidx.camera.core.ImageCaptureException imageCaptureException)
  void onError(
    jni.JObject imageCaptureException,
  ) {
    _onError(reference.pointer, _id_onError as jni.JMethodIDPtr,
            imageCaptureException.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageCapture_OnImageSavedCallbackImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r"onImageSaved(Landroidx/camera/core/ImageCapture$OutputFileResults;)V") {
        _$impls[$p]!.onImageSaved(
          $a[0].castTo(const $ImageCapture_OutputFileResultsType(),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"onError(Landroidx/camera/core/ImageCaptureException;)V") {
        _$impls[$p]!.onError(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageCapture_OnImageSavedCallback.implement(
    $ImageCapture_OnImageSavedCallbackImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageCapture_OnImageSavedCallback.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ImageCapture$OnImageSavedCallback",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageCapture_OnImageSavedCallbackImpl {
  factory $ImageCapture_OnImageSavedCallbackImpl({
    required void Function(ImageCapture_OutputFileResults outputFileResults)
        onImageSaved,
    required void Function(jni.JObject imageCaptureException) onError,
  }) = _$ImageCapture_OnImageSavedCallbackImpl;

  void onImageSaved(ImageCapture_OutputFileResults outputFileResults);
  void onError(jni.JObject imageCaptureException);
}

class _$ImageCapture_OnImageSavedCallbackImpl
    implements $ImageCapture_OnImageSavedCallbackImpl {
  _$ImageCapture_OnImageSavedCallbackImpl({
    required void Function(ImageCapture_OutputFileResults outputFileResults)
        onImageSaved,
    required void Function(jni.JObject imageCaptureException) onError,
  })  : _onImageSaved = onImageSaved,
        _onError = onError;

  final void Function(ImageCapture_OutputFileResults outputFileResults)
      _onImageSaved;
  final void Function(jni.JObject imageCaptureException) _onError;

  void onImageSaved(ImageCapture_OutputFileResults outputFileResults) {
    return _onImageSaved(outputFileResults);
  }

  void onError(jni.JObject imageCaptureException) {
    return _onError(imageCaptureException);
  }
}

final class $ImageCapture_OnImageSavedCallbackType
    extends jni.JObjType<ImageCapture_OnImageSavedCallback> {
  const $ImageCapture_OnImageSavedCallbackType();

  @override
  String get signature =>
      r"Landroidx/camera/core/ImageCapture$OnImageSavedCallback;";

  @override
  ImageCapture_OnImageSavedCallback fromReference(jni.JReference reference) =>
      ImageCapture_OnImageSavedCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_OnImageSavedCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_OnImageSavedCallbackType) &&
        other is $ImageCapture_OnImageSavedCallbackType;
  }
}

/// from: androidx.camera.core.ImageCapture$OutputFileOptions$Builder
class ImageCapture_OutputFileOptions_Builder extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_OutputFileOptions_Builder> $type = type;

  ImageCapture_OutputFileOptions_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/core/ImageCapture$OutputFileOptions$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_OutputFileOptions_BuilderType();
  static final _id_new0 = _class.constructorId(
    r"(Ljava/io/File;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.io.File file)
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageCapture_OutputFileOptions_Builder(
    jni.JObject file,
  ) {
    return ImageCapture_OutputFileOptions_Builder.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            file.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/content/ContentValues;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.ContentResolver contentResolver, android.net.Uri uri, android.content.ContentValues contentValues)
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageCapture_OutputFileOptions_Builder.new1(
    ContentResolver contentResolver,
    Uri uri,
    ContentValues contentValues,
  ) {
    return ImageCapture_OutputFileOptions_Builder.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            uri.reference.pointer,
            contentValues.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r"(Ljava/io/OutputStream;)V",
  );

  static final _new2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.io.OutputStream outputStream)
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageCapture_OutputFileOptions_Builder.new2(
    jni.JObject outputStream,
  ) {
    return ImageCapture_OutputFileOptions_Builder.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            outputStream.reference.pointer)
        .reference);
  }

  static final _id_setMetadata = _class.instanceMethodId(
    r"setMetadata",
    r"(Landroidx/camera/core/ImageCapture$Metadata;)Landroidx/camera/core/ImageCapture$OutputFileOptions$Builder;",
  );

  static final _setMetadata = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.ImageCapture$OutputFileOptions$Builder setMetadata(androidx.camera.core.ImageCapture$Metadata metadata)
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_OutputFileOptions_Builder setMetadata(
    ImageCapture_Metadata metadata,
  ) {
    return _setMetadata(reference.pointer, _id_setMetadata as jni.JMethodIDPtr,
            metadata.reference.pointer)
        .object(const $ImageCapture_OutputFileOptions_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r"build",
    r"()Landroidx/camera/core/ImageCapture$OutputFileOptions;",
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.ImageCapture$OutputFileOptions build()
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_OutputFileOptions build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $ImageCapture_OutputFileOptionsType());
  }
}

final class $ImageCapture_OutputFileOptions_BuilderType
    extends jni.JObjType<ImageCapture_OutputFileOptions_Builder> {
  const $ImageCapture_OutputFileOptions_BuilderType();

  @override
  String get signature =>
      r"Landroidx/camera/core/ImageCapture$OutputFileOptions$Builder;";

  @override
  ImageCapture_OutputFileOptions_Builder fromReference(
          jni.JReference reference) =>
      ImageCapture_OutputFileOptions_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_OutputFileOptions_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_OutputFileOptions_BuilderType) &&
        other is $ImageCapture_OutputFileOptions_BuilderType;
  }
}

/// from: androidx.camera.core.ImageCapture$OutputFileOptions
class ImageCapture_OutputFileOptions extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_OutputFileOptions> $type = type;

  ImageCapture_OutputFileOptions.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/core/ImageCapture$OutputFileOptions");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_OutputFileOptionsType();
  static final _id_getFile = _class.instanceMethodId(
    r"getFile",
    r"()Ljava/io/File;",
  );

  static final _getFile = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.io.File getFile()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFile() {
    return _getFile(reference.pointer, _id_getFile as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r"getContentResolver",
    r"()Landroid/content/ContentResolver;",
  );

  static final _getContentResolver = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ContentResolver getContentResolver()
  /// The returned object must be released after use, by calling the [release] method.
  ContentResolver getContentResolver() {
    return _getContentResolver(
            reference.pointer, _id_getContentResolver as jni.JMethodIDPtr)
        .object(const $ContentResolverType());
  }

  static final _id_getSaveCollection = _class.instanceMethodId(
    r"getSaveCollection",
    r"()Landroid/net/Uri;",
  );

  static final _getSaveCollection = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri getSaveCollection()
  /// The returned object must be released after use, by calling the [release] method.
  Uri getSaveCollection() {
    return _getSaveCollection(
            reference.pointer, _id_getSaveCollection as jni.JMethodIDPtr)
        .object(const $UriType());
  }

  static final _id_getContentValues = _class.instanceMethodId(
    r"getContentValues",
    r"()Landroid/content/ContentValues;",
  );

  static final _getContentValues = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ContentValues getContentValues()
  /// The returned object must be released after use, by calling the [release] method.
  ContentValues getContentValues() {
    return _getContentValues(
            reference.pointer, _id_getContentValues as jni.JMethodIDPtr)
        .object(const $ContentValuesType());
  }

  static final _id_getOutputStream = _class.instanceMethodId(
    r"getOutputStream",
    r"()Ljava/io/OutputStream;",
  );

  static final _getOutputStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.io.OutputStream getOutputStream()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getOutputStream() {
    return _getOutputStream(
            reference.pointer, _id_getOutputStream as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMetadata = _class.instanceMethodId(
    r"getMetadata",
    r"()Landroidx/camera/core/ImageCapture$Metadata;",
  );

  static final _getMetadata = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.ImageCapture$Metadata getMetadata()
  /// The returned object must be released after use, by calling the [release] method.
  ImageCapture_Metadata getMetadata() {
    return _getMetadata(reference.pointer, _id_getMetadata as jni.JMethodIDPtr)
        .object(const $ImageCapture_MetadataType());
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $ImageCapture_OutputFileOptionsType
    extends jni.JObjType<ImageCapture_OutputFileOptions> {
  const $ImageCapture_OutputFileOptionsType();

  @override
  String get signature =>
      r"Landroidx/camera/core/ImageCapture$OutputFileOptions;";

  @override
  ImageCapture_OutputFileOptions fromReference(jni.JReference reference) =>
      ImageCapture_OutputFileOptions.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_OutputFileOptionsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_OutputFileOptionsType) &&
        other is $ImageCapture_OutputFileOptionsType;
  }
}

/// from: androidx.camera.core.ImageCapture$OutputFileResults
class ImageCapture_OutputFileResults extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture_OutputFileResults> $type = type;

  ImageCapture_OutputFileResults.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/core/ImageCapture$OutputFileResults");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCapture_OutputFileResultsType();
  static final _id_new0 = _class.constructorId(
    r"(Landroid/net/Uri;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageCapture_OutputFileResults(
    Uri uri,
  ) {
    return ImageCapture_OutputFileResults.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            uri.reference.pointer)
        .reference);
  }

  static final _id_getSavedUri = _class.instanceMethodId(
    r"getSavedUri",
    r"()Landroid/net/Uri;",
  );

  static final _getSavedUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri getSavedUri()
  /// The returned object must be released after use, by calling the [release] method.
  Uri getSavedUri() {
    return _getSavedUri(reference.pointer, _id_getSavedUri as jni.JMethodIDPtr)
        .object(const $UriType());
  }
}

final class $ImageCapture_OutputFileResultsType
    extends jni.JObjType<ImageCapture_OutputFileResults> {
  const $ImageCapture_OutputFileResultsType();

  @override
  String get signature =>
      r"Landroidx/camera/core/ImageCapture$OutputFileResults;";

  @override
  ImageCapture_OutputFileResults fromReference(jni.JReference reference) =>
      ImageCapture_OutputFileResults.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCapture_OutputFileResultsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCapture_OutputFileResultsType) &&
        other is $ImageCapture_OutputFileResultsType;
  }
}

/// from: androidx.camera.core.ImageCapture
class ImageCapture extends jni.JObject {
  @override
  late final jni.JObjType<ImageCapture> $type = type;

  ImageCapture.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageCapture");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageCaptureType();

  /// from: static public final int ERROR_UNKNOWN
  static const ERROR_UNKNOWN = 0;

  /// from: static public final int ERROR_FILE_IO
  static const ERROR_FILE_IO = 1;

  /// from: static public final int ERROR_CAPTURE_FAILED
  static const ERROR_CAPTURE_FAILED = 2;

  /// from: static public final int ERROR_CAMERA_CLOSED
  static const ERROR_CAMERA_CLOSED = 3;

  /// from: static public final int ERROR_INVALID_CAMERA
  static const ERROR_INVALID_CAMERA = 4;

  /// from: static public final int CAPTURE_MODE_MAXIMIZE_QUALITY
  static const CAPTURE_MODE_MAXIMIZE_QUALITY = 0;

  /// from: static public final int CAPTURE_MODE_MINIMIZE_LATENCY
  static const CAPTURE_MODE_MINIMIZE_LATENCY = 1;

  /// from: static public final int CAPTURE_MODE_ZERO_SHUTTER_LAG
  static const CAPTURE_MODE_ZERO_SHUTTER_LAG = 2;

  /// from: static public final int FLASH_MODE_AUTO
  static const FLASH_MODE_AUTO = 0;

  /// from: static public final int FLASH_MODE_ON
  static const FLASH_MODE_ON = 1;

  /// from: static public final int FLASH_MODE_OFF
  static const FLASH_MODE_OFF = 2;

  /// from: static public final int FLASH_TYPE_ONE_SHOT_FLASH
  static const FLASH_TYPE_ONE_SHOT_FLASH = 0;

  /// from: static public final int FLASH_TYPE_USE_TORCH_AS_FLASH
  static const FLASH_TYPE_USE_TORCH_AS_FLASH = 1;
  static final _id_DEFAULT_CONFIG = _class.staticFieldId(
    r"DEFAULT_CONFIG",
    r"Landroidx/camera/core/ImageCapture$Defaults;",
  );

  /// from: static public final androidx.camera.core.ImageCapture$Defaults DEFAULT_CONFIG
  /// The returned object must be released after use, by calling the [release] method.
  static ImageCapture_Defaults get DEFAULT_CONFIG =>
      _id_DEFAULT_CONFIG.get(_class, const $ImageCapture_DefaultsType());

  static final _id_getDefaultConfig = _class.instanceMethodId(
    r"getDefaultConfig",
    r"(ZLandroidx/camera/core/impl/UseCaseConfigFactory;)Landroidx/camera/core/impl/UseCaseConfig;",
  );

  static final _getDefaultConfig = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.impl.UseCaseConfig getDefaultConfig(boolean z, androidx.camera.core.impl.UseCaseConfigFactory useCaseConfigFactory)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDefaultConfig(
    bool z,
    jni.JObject useCaseConfigFactory,
  ) {
    return _getDefaultConfig(
            reference.pointer,
            _id_getDefaultConfig as jni.JMethodIDPtr,
            z ? 1 : 0,
            useCaseConfigFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getUseCaseConfigBuilder = _class.instanceMethodId(
    r"getUseCaseConfigBuilder",
    r"(Landroidx/camera/core/impl/Config;)Landroidx/camera/core/impl/UseCaseConfig$Builder;",
  );

  static final _getUseCaseConfigBuilder = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config config)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUseCaseConfigBuilder(
    jni.JObject config,
  ) {
    return _getUseCaseConfigBuilder(
            reference.pointer,
            _id_getUseCaseConfigBuilder as jni.JMethodIDPtr,
            config.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onMergeConfig = _class.instanceMethodId(
    r"onMergeConfig",
    r"(Landroidx/camera/core/impl/CameraInfoInternal;Landroidx/camera/core/impl/UseCaseConfig$Builder;)Landroidx/camera/core/impl/UseCaseConfig;",
  );

  static final _onMergeConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected androidx.camera.core.impl.UseCaseConfig onMergeConfig(androidx.camera.core.impl.CameraInfoInternal cameraInfoInternal, androidx.camera.core.impl.UseCaseConfig$Builder builder)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onMergeConfig(
    jni.JObject cameraInfoInternal,
    jni.JObject builder,
  ) {
    return _onMergeConfig(
            reference.pointer,
            _id_onMergeConfig as jni.JMethodIDPtr,
            cameraInfoInternal.reference.pointer,
            builder.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onCameraControlReady = _class.instanceMethodId(
    r"onCameraControlReady",
    r"()V",
  );

  static final _onCameraControlReady = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onCameraControlReady()
  void onCameraControlReady() {
    _onCameraControlReady(
            reference.pointer, _id_onCameraControlReady as jni.JMethodIDPtr)
        .check();
  }

  static final _id_getFlashMode = _class.instanceMethodId(
    r"getFlashMode",
    r"()I",
  );

  static final _getFlashMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getFlashMode()
  int getFlashMode() {
    return _getFlashMode(
            reference.pointer, _id_getFlashMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setFlashMode = _class.instanceMethodId(
    r"setFlashMode",
    r"(I)V",
  );

  static final _setFlashMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setFlashMode(int i)
  void setFlashMode(
    int i,
  ) {
    _setFlashMode(reference.pointer, _id_setFlashMode as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setCropAspectRatio = _class.instanceMethodId(
    r"setCropAspectRatio",
    r"(Landroid/util/Rational;)V",
  );

  static final _setCropAspectRatio = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setCropAspectRatio(android.util.Rational rational)
  void setCropAspectRatio(
    jni.JObject rational,
  ) {
    _setCropAspectRatio(
            reference.pointer,
            _id_setCropAspectRatio as jni.JMethodIDPtr,
            rational.reference.pointer)
        .check();
  }

  static final _id_getTargetRotation = _class.instanceMethodId(
    r"getTargetRotation",
    r"()I",
  );

  static final _getTargetRotation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getTargetRotation()
  int getTargetRotation() {
    return _getTargetRotation(
            reference.pointer, _id_getTargetRotation as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setTargetRotation = _class.instanceMethodId(
    r"setTargetRotation",
    r"(I)V",
  );

  static final _setTargetRotation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTargetRotation(int i)
  void setTargetRotation(
    int i,
  ) {
    _setTargetRotation(
            reference.pointer, _id_setTargetRotation as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getCaptureMode = _class.instanceMethodId(
    r"getCaptureMode",
    r"()I",
  );

  static final _getCaptureMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getCaptureMode()
  int getCaptureMode() {
    return _getCaptureMode(
            reference.pointer, _id_getCaptureMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getJpegQuality = _class.instanceMethodId(
    r"getJpegQuality",
    r"()I",
  );

  static final _getJpegQuality = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getJpegQuality()
  int getJpegQuality() {
    return _getJpegQuality(
            reference.pointer, _id_getJpegQuality as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getResolutionInfo = _class.instanceMethodId(
    r"getResolutionInfo",
    r"()Landroidx/camera/core/ResolutionInfo;",
  );

  static final _getResolutionInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.ResolutionInfo getResolutionInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResolutionInfo() {
    return _getResolutionInfo(
            reference.pointer, _id_getResolutionInfo as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getResolutionInfoInternal = _class.instanceMethodId(
    r"getResolutionInfoInternal",
    r"()Landroidx/camera/core/ResolutionInfo;",
  );

  static final _getResolutionInfoInternal = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected androidx.camera.core.ResolutionInfo getResolutionInfoInternal()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResolutionInfoInternal() {
    return _getResolutionInfoInternal(reference.pointer,
            _id_getResolutionInfoInternal as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getResolutionSelector = _class.instanceMethodId(
    r"getResolutionSelector",
    r"()Landroidx/camera/core/resolutionselector/ResolutionSelector;",
  );

  static final _getResolutionSelector = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.resolutionselector.ResolutionSelector getResolutionSelector()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResolutionSelector() {
    return _getResolutionSelector(
            reference.pointer, _id_getResolutionSelector as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_takePicture = _class.instanceMethodId(
    r"takePicture",
    r"(Ljava/util/concurrent/Executor;Landroidx/camera/core/ImageCapture$OnImageCapturedCallback;)V",
  );

  static final _takePicture = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void takePicture(java.util.concurrent.Executor executor, androidx.camera.core.ImageCapture$OnImageCapturedCallback onImageCapturedCallback)
  void takePicture(
    Executor executor,
    ImageCapture_OnImageCapturedCallback onImageCapturedCallback,
  ) {
    _takePicture(
            reference.pointer,
            _id_takePicture as jni.JMethodIDPtr,
            executor.reference.pointer,
            onImageCapturedCallback.reference.pointer)
        .check();
  }

  static final _id_takePicture1 = _class.instanceMethodId(
    r"takePicture",
    r"(Landroidx/camera/core/ImageCapture$OutputFileOptions;Ljava/util/concurrent/Executor;Landroidx/camera/core/ImageCapture$OnImageSavedCallback;)V",
  );

  static final _takePicture1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void takePicture(androidx.camera.core.ImageCapture$OutputFileOptions outputFileOptions, java.util.concurrent.Executor executor, androidx.camera.core.ImageCapture$OnImageSavedCallback onImageSavedCallback)
  void takePicture1(
    ImageCapture_OutputFileOptions outputFileOptions,
    Executor executor,
    ImageCapture_OnImageSavedCallback onImageSavedCallback,
  ) {
    _takePicture1(
            reference.pointer,
            _id_takePicture1 as jni.JMethodIDPtr,
            outputFileOptions.reference.pointer,
            executor.reference.pointer,
            onImageSavedCallback.reference.pointer)
        .check();
  }

  static final _id_onStateDetached = _class.instanceMethodId(
    r"onStateDetached",
    r"()V",
  );

  static final _onStateDetached = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onStateDetached()
  void onStateDetached() {
    _onStateDetached(reference.pointer, _id_onStateDetached as jni.JMethodIDPtr)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_onUnbind = _class.instanceMethodId(
    r"onUnbind",
    r"()V",
  );

  static final _onUnbind = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onUnbind()
  void onUnbind() {
    _onUnbind(reference.pointer, _id_onUnbind as jni.JMethodIDPtr).check();
  }

  static final _id_onBind = _class.instanceMethodId(
    r"onBind",
    r"()V",
  );

  static final _onBind = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onBind()
  void onBind() {
    _onBind(reference.pointer, _id_onBind as jni.JMethodIDPtr).check();
  }

  static final _id_onSuggestedStreamSpecUpdated = _class.instanceMethodId(
    r"onSuggestedStreamSpecUpdated",
    r"(Landroidx/camera/core/impl/StreamSpec;)Landroidx/camera/core/impl/StreamSpec;",
  );

  static final _onSuggestedStreamSpecUpdated = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected androidx.camera.core.impl.StreamSpec onSuggestedStreamSpecUpdated(androidx.camera.core.impl.StreamSpec streamSpec)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onSuggestedStreamSpecUpdated(
    jni.JObject streamSpec,
  ) {
    return _onSuggestedStreamSpecUpdated(
            reference.pointer,
            _id_onSuggestedStreamSpecUpdated as jni.JMethodIDPtr,
            streamSpec.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onSuggestedStreamSpecImplementationOptionsUpdated =
      _class.instanceMethodId(
    r"onSuggestedStreamSpecImplementationOptionsUpdated",
    r"(Landroidx/camera/core/impl/Config;)Landroidx/camera/core/impl/StreamSpec;",
  );

  static final _onSuggestedStreamSpecImplementationOptionsUpdated =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: protected androidx.camera.core.impl.StreamSpec onSuggestedStreamSpecImplementationOptionsUpdated(androidx.camera.core.impl.Config config)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onSuggestedStreamSpecImplementationOptionsUpdated(
    jni.JObject config,
  ) {
    return _onSuggestedStreamSpecImplementationOptionsUpdated(
            reference.pointer,
            _id_onSuggestedStreamSpecImplementationOptionsUpdated
                as jni.JMethodIDPtr,
            config.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getSupportedEffectTargets = _class.instanceMethodId(
    r"getSupportedEffectTargets",
    r"()Ljava/util/Set;",
  );

  static final _getSupportedEffectTargets = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set getSupportedEffectTargets()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JInteger> getSupportedEffectTargets() {
    return _getSupportedEffectTargets(reference.pointer,
            _id_getSupportedEffectTargets as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JIntegerType()));
  }

  static final _id_getRealtimeCaptureLatencyEstimate = _class.instanceMethodId(
    r"getRealtimeCaptureLatencyEstimate",
    r"()Landroidx/camera/core/ImageCaptureLatencyEstimate;",
  );

  static final _getRealtimeCaptureLatencyEstimate =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public androidx.camera.core.ImageCaptureLatencyEstimate getRealtimeCaptureLatencyEstimate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRealtimeCaptureLatencyEstimate() {
    return _getRealtimeCaptureLatencyEstimate(reference.pointer,
            _id_getRealtimeCaptureLatencyEstimate as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $ImageCaptureType extends jni.JObjType<ImageCapture> {
  const $ImageCaptureType();

  @override
  String get signature => r"Landroidx/camera/core/ImageCapture;";

  @override
  ImageCapture fromReference(jni.JReference reference) =>
      ImageCapture.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageCaptureType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageCaptureType) &&
        other is $ImageCaptureType;
  }
}

/// from: androidx.camera.core.ImageProxy$PlaneProxy
class ImageProxy_PlaneProxy extends jni.JObject {
  @override
  late final jni.JObjType<ImageProxy_PlaneProxy> $type = type;

  ImageProxy_PlaneProxy.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/ImageProxy$PlaneProxy");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageProxy_PlaneProxyType();
  static final _id_getRowStride = _class.instanceMethodId(
    r"getRowStride",
    r"()I",
  );

  static final _getRowStride = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getRowStride()
  int getRowStride() {
    return _getRowStride(
            reference.pointer, _id_getRowStride as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPixelStride = _class.instanceMethodId(
    r"getPixelStride",
    r"()I",
  );

  static final _getPixelStride = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getPixelStride()
  int getPixelStride() {
    return _getPixelStride(
            reference.pointer, _id_getPixelStride as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getBuffer = _class.instanceMethodId(
    r"getBuffer",
    r"()Ljava/nio/ByteBuffer;",
  );

  static final _getBuffer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.nio.ByteBuffer getBuffer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JByteBuffer getBuffer() {
    return _getBuffer(reference.pointer, _id_getBuffer as jni.JMethodIDPtr)
        .object(const jni.JByteBufferType());
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageProxy_PlaneProxyImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"getRowStride()I") {
        final $r = _$impls[$p]!.getRowStride();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"getPixelStride()I") {
        final $r = _$impls[$p]!.getPixelStride();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"getBuffer()Ljava/nio/ByteBuffer;") {
        final $r = _$impls[$p]!.getBuffer();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageProxy_PlaneProxy.implement(
    $ImageProxy_PlaneProxyImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageProxy_PlaneProxy.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ImageProxy$PlaneProxy",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageProxy_PlaneProxyImpl {
  factory $ImageProxy_PlaneProxyImpl({
    required int Function() getRowStride,
    required int Function() getPixelStride,
    required jni.JByteBuffer Function() getBuffer,
  }) = _$ImageProxy_PlaneProxyImpl;

  int getRowStride();
  int getPixelStride();
  jni.JByteBuffer getBuffer();
}

class _$ImageProxy_PlaneProxyImpl implements $ImageProxy_PlaneProxyImpl {
  _$ImageProxy_PlaneProxyImpl({
    required int Function() getRowStride,
    required int Function() getPixelStride,
    required jni.JByteBuffer Function() getBuffer,
  })  : _getRowStride = getRowStride,
        _getPixelStride = getPixelStride,
        _getBuffer = getBuffer;

  final int Function() _getRowStride;
  final int Function() _getPixelStride;
  final jni.JByteBuffer Function() _getBuffer;

  int getRowStride() {
    return _getRowStride();
  }

  int getPixelStride() {
    return _getPixelStride();
  }

  jni.JByteBuffer getBuffer() {
    return _getBuffer();
  }
}

final class $ImageProxy_PlaneProxyType
    extends jni.JObjType<ImageProxy_PlaneProxy> {
  const $ImageProxy_PlaneProxyType();

  @override
  String get signature => r"Landroidx/camera/core/ImageProxy$PlaneProxy;";

  @override
  ImageProxy_PlaneProxy fromReference(jni.JReference reference) =>
      ImageProxy_PlaneProxy.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageProxy_PlaneProxyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageProxy_PlaneProxyType) &&
        other is $ImageProxy_PlaneProxyType;
  }
}

/// from: androidx.camera.core.ImageProxy
class ImageProxy extends jni.JObject {
  @override
  late final jni.JObjType<ImageProxy> $type = type;

  ImageProxy.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"androidx/camera/core/ImageProxy");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageProxyType();
  static final _id_close = _class.instanceMethodId(
    r"close",
    r"()V",
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }

  static final _id_getCropRect = _class.instanceMethodId(
    r"getCropRect",
    r"()Landroid/graphics/Rect;",
  );

  static final _getCropRect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.Rect getCropRect()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCropRect() {
    return _getCropRect(reference.pointer, _id_getCropRect as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setCropRect = _class.instanceMethodId(
    r"setCropRect",
    r"(Landroid/graphics/Rect;)V",
  );

  static final _setCropRect = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setCropRect(android.graphics.Rect rect)
  void setCropRect(
    jni.JObject rect,
  ) {
    _setCropRect(reference.pointer, _id_setCropRect as jni.JMethodIDPtr,
            rect.reference.pointer)
        .check();
  }

  static final _id_getFormat = _class.instanceMethodId(
    r"getFormat",
    r"()I",
  );

  static final _getFormat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getFormat()
  int getFormat() {
    return _getFormat(reference.pointer, _id_getFormat as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getHeight = _class.instanceMethodId(
    r"getHeight",
    r"()I",
  );

  static final _getHeight = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getHeight()
  int getHeight() {
    return _getHeight(reference.pointer, _id_getHeight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getWidth = _class.instanceMethodId(
    r"getWidth",
    r"()I",
  );

  static final _getWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getWidth()
  int getWidth() {
    return _getWidth(reference.pointer, _id_getWidth as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPlanes = _class.instanceMethodId(
    r"getPlanes",
    r"()[Landroidx/camera/core/ImageProxy$PlaneProxy;",
  );

  static final _getPlanes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract androidx.camera.core.ImageProxy$PlaneProxy[] getPlanes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<ImageProxy_PlaneProxy> getPlanes() {
    return _getPlanes(reference.pointer, _id_getPlanes as jni.JMethodIDPtr)
        .object(const jni.JArrayType($ImageProxy_PlaneProxyType()));
  }

  static final _id_getImageInfo = _class.instanceMethodId(
    r"getImageInfo",
    r"()Landroidx/camera/core/ImageInfo;",
  );

  static final _getImageInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract androidx.camera.core.ImageInfo getImageInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getImageInfo() {
    return _getImageInfo(
            reference.pointer, _id_getImageInfo as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getImage = _class.instanceMethodId(
    r"getImage",
    r"()Landroid/media/Image;",
  );

  static final _getImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.media.Image getImage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getImage() {
    return _getImage(reference.pointer, _id_getImage as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_toBitmap = _class.instanceMethodId(
    r"toBitmap",
    r"()Landroid/graphics/Bitmap;",
  );

  static final _toBitmap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.Bitmap toBitmap()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject toBitmap() {
    return _toBitmap(reference.pointer, _id_toBitmap as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ImageProxyImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"close()V") {
        _$impls[$p]!.close();
        return jni.nullptr;
      }
      if ($d == r"getCropRect()Landroid/graphics/Rect;") {
        final $r = _$impls[$p]!.getCropRect();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"setCropRect(Landroid/graphics/Rect;)V") {
        _$impls[$p]!.setCropRect(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"getFormat()I") {
        final $r = _$impls[$p]!.getFormat();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"getHeight()I") {
        final $r = _$impls[$p]!.getHeight();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"getWidth()I") {
        final $r = _$impls[$p]!.getWidth();
        return jni.JInteger($r).reference.toPointer();
      }
      if ($d == r"getPlanes()[Landroidx/camera/core/ImageProxy$PlaneProxy;") {
        final $r = _$impls[$p]!.getPlanes();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"getImageInfo()Landroidx/camera/core/ImageInfo;") {
        final $r = _$impls[$p]!.getImageInfo();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"getImage()Landroid/media/Image;") {
        final $r = _$impls[$p]!.getImage();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"toBitmap()Landroid/graphics/Bitmap;") {
        final $r = _$impls[$p]!.toBitmap();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ImageProxy.implement(
    $ImageProxyImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ImageProxy.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ImageProxy",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ImageProxyImpl {
  factory $ImageProxyImpl({
    required void Function() close,
    required jni.JObject Function() getCropRect,
    required void Function(jni.JObject rect) setCropRect,
    required int Function() getFormat,
    required int Function() getHeight,
    required int Function() getWidth,
    required jni.JArray<ImageProxy_PlaneProxy> Function() getPlanes,
    required jni.JObject Function() getImageInfo,
    required jni.JObject Function() getImage,
    required jni.JObject Function() toBitmap,
  }) = _$ImageProxyImpl;

  void close();
  jni.JObject getCropRect();
  void setCropRect(jni.JObject rect);
  int getFormat();
  int getHeight();
  int getWidth();
  jni.JArray<ImageProxy_PlaneProxy> getPlanes();
  jni.JObject getImageInfo();
  jni.JObject getImage();
  jni.JObject toBitmap();
}

class _$ImageProxyImpl implements $ImageProxyImpl {
  _$ImageProxyImpl({
    required void Function() close,
    required jni.JObject Function() getCropRect,
    required void Function(jni.JObject rect) setCropRect,
    required int Function() getFormat,
    required int Function() getHeight,
    required int Function() getWidth,
    required jni.JArray<ImageProxy_PlaneProxy> Function() getPlanes,
    required jni.JObject Function() getImageInfo,
    required jni.JObject Function() getImage,
    required jni.JObject Function() toBitmap,
  })  : _close = close,
        _getCropRect = getCropRect,
        _setCropRect = setCropRect,
        _getFormat = getFormat,
        _getHeight = getHeight,
        _getWidth = getWidth,
        _getPlanes = getPlanes,
        _getImageInfo = getImageInfo,
        _getImage = getImage,
        _toBitmap = toBitmap;

  final void Function() _close;
  final jni.JObject Function() _getCropRect;
  final void Function(jni.JObject rect) _setCropRect;
  final int Function() _getFormat;
  final int Function() _getHeight;
  final int Function() _getWidth;
  final jni.JArray<ImageProxy_PlaneProxy> Function() _getPlanes;
  final jni.JObject Function() _getImageInfo;
  final jni.JObject Function() _getImage;
  final jni.JObject Function() _toBitmap;

  void close() {
    return _close();
  }

  jni.JObject getCropRect() {
    return _getCropRect();
  }

  void setCropRect(jni.JObject rect) {
    return _setCropRect(rect);
  }

  int getFormat() {
    return _getFormat();
  }

  int getHeight() {
    return _getHeight();
  }

  int getWidth() {
    return _getWidth();
  }

  jni.JArray<ImageProxy_PlaneProxy> getPlanes() {
    return _getPlanes();
  }

  jni.JObject getImageInfo() {
    return _getImageInfo();
  }

  jni.JObject getImage() {
    return _getImage();
  }

  jni.JObject toBitmap() {
    return _toBitmap();
  }
}

final class $ImageProxyType extends jni.JObjType<ImageProxy> {
  const $ImageProxyType();

  @override
  String get signature => r"Landroidx/camera/core/ImageProxy;";

  @override
  ImageProxy fromReference(jni.JReference reference) =>
      ImageProxy.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageProxyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageProxyType) && other is $ImageProxyType;
  }
}

/// from: androidx.camera.core.TorchState$State
class TorchState_State extends jni.JObject {
  @override
  late final jni.JObjType<TorchState_State> $type = type;

  TorchState_State.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/core/TorchState$State");

  /// The type which includes information such as the signature of this class.
  static const type = $TorchState_StateType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $TorchState_StateImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory TorchState_State.implement(
    $TorchState_StateImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = TorchState_State.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.TorchState$State",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $TorchState_StateImpl {
  factory $TorchState_StateImpl() = _$TorchState_StateImpl;
}

class _$TorchState_StateImpl implements $TorchState_StateImpl {
  _$TorchState_StateImpl();
}

final class $TorchState_StateType extends jni.JObjType<TorchState_State> {
  const $TorchState_StateType();

  @override
  String get signature => r"Landroidx/camera/core/TorchState$State;";

  @override
  TorchState_State fromReference(jni.JReference reference) =>
      TorchState_State.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TorchState_StateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TorchState_StateType) &&
        other is $TorchState_StateType;
  }
}

/// from: androidx.camera.core.TorchState
class TorchState extends jni.JObject {
  @override
  late final jni.JObjType<TorchState> $type = type;

  TorchState.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"androidx/camera/core/TorchState");

  /// The type which includes information such as the signature of this class.
  static const type = $TorchStateType();

  /// from: static public final int OFF
  static const OFF = 0;

  /// from: static public final int ON
  static const ON = 1;
}

final class $TorchStateType extends jni.JObjType<TorchState> {
  const $TorchStateType();

  @override
  String get signature => r"Landroidx/camera/core/TorchState;";

  @override
  TorchState fromReference(jni.JReference reference) =>
      TorchState.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TorchStateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TorchStateType) && other is $TorchStateType;
  }
}

/// from: androidx.camera.core.ZoomState
class ZoomState extends jni.JObject {
  @override
  late final jni.JObjType<ZoomState> $type = type;

  ZoomState.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"androidx/camera/core/ZoomState");

  /// The type which includes information such as the signature of this class.
  static const type = $ZoomStateType();
  static final _id_getZoomRatio = _class.instanceMethodId(
    r"getZoomRatio",
    r"()F",
  );

  static final _getZoomRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallFloatMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract float getZoomRatio()
  double getZoomRatio() {
    return _getZoomRatio(
            reference.pointer, _id_getZoomRatio as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getMaxZoomRatio = _class.instanceMethodId(
    r"getMaxZoomRatio",
    r"()F",
  );

  static final _getMaxZoomRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallFloatMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract float getMaxZoomRatio()
  double getMaxZoomRatio() {
    return _getMaxZoomRatio(
            reference.pointer, _id_getMaxZoomRatio as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getMinZoomRatio = _class.instanceMethodId(
    r"getMinZoomRatio",
    r"()F",
  );

  static final _getMinZoomRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallFloatMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract float getMinZoomRatio()
  double getMinZoomRatio() {
    return _getMinZoomRatio(
            reference.pointer, _id_getMinZoomRatio as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getLinearZoom = _class.instanceMethodId(
    r"getLinearZoom",
    r"()F",
  );

  static final _getLinearZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallFloatMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract float getLinearZoom()
  double getLinearZoom() {
    return _getLinearZoom(
            reference.pointer, _id_getLinearZoom as jni.JMethodIDPtr)
        .float;
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ZoomStateImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"getZoomRatio()F") {
        final $r = _$impls[$p]!.getZoomRatio();
        return jni.JFloat($r).reference.toPointer();
      }
      if ($d == r"getMaxZoomRatio()F") {
        final $r = _$impls[$p]!.getMaxZoomRatio();
        return jni.JFloat($r).reference.toPointer();
      }
      if ($d == r"getMinZoomRatio()F") {
        final $r = _$impls[$p]!.getMinZoomRatio();
        return jni.JFloat($r).reference.toPointer();
      }
      if ($d == r"getLinearZoom()F") {
        final $r = _$impls[$p]!.getLinearZoom();
        return jni.JFloat($r).reference.toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ZoomState.implement(
    $ZoomStateImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ZoomState.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.core.ZoomState",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ZoomStateImpl {
  factory $ZoomStateImpl({
    required double Function() getZoomRatio,
    required double Function() getMaxZoomRatio,
    required double Function() getMinZoomRatio,
    required double Function() getLinearZoom,
  }) = _$ZoomStateImpl;

  double getZoomRatio();
  double getMaxZoomRatio();
  double getMinZoomRatio();
  double getLinearZoom();
}

class _$ZoomStateImpl implements $ZoomStateImpl {
  _$ZoomStateImpl({
    required double Function() getZoomRatio,
    required double Function() getMaxZoomRatio,
    required double Function() getMinZoomRatio,
    required double Function() getLinearZoom,
  })  : _getZoomRatio = getZoomRatio,
        _getMaxZoomRatio = getMaxZoomRatio,
        _getMinZoomRatio = getMinZoomRatio,
        _getLinearZoom = getLinearZoom;

  final double Function() _getZoomRatio;
  final double Function() _getMaxZoomRatio;
  final double Function() _getMinZoomRatio;
  final double Function() _getLinearZoom;

  double getZoomRatio() {
    return _getZoomRatio();
  }

  double getMaxZoomRatio() {
    return _getMaxZoomRatio();
  }

  double getMinZoomRatio() {
    return _getMinZoomRatio();
  }

  double getLinearZoom() {
    return _getLinearZoom();
  }
}

final class $ZoomStateType extends jni.JObjType<ZoomState> {
  const $ZoomStateType();

  @override
  String get signature => r"Landroidx/camera/core/ZoomState;";

  @override
  ZoomState fromReference(jni.JReference reference) =>
      ZoomState.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ZoomStateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ZoomStateType) && other is $ZoomStateType;
  }
}

/// from: androidx.camera.view.CameraController$OutputSize$OutputAspectRatio
class CameraController_OutputSize_OutputAspectRatio extends jni.JObject {
  @override
  late final jni.JObjType<CameraController_OutputSize_OutputAspectRatio> $type =
      type;

  CameraController_OutputSize_OutputAspectRatio.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/view/CameraController$OutputSize$OutputAspectRatio");

  /// The type which includes information such as the signature of this class.
  static const type = $CameraController_OutputSize_OutputAspectRatioType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CameraController_OutputSize_OutputAspectRatioImpl>
      _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory CameraController_OutputSize_OutputAspectRatio.implement(
    $CameraController_OutputSize_OutputAspectRatioImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CameraController_OutputSize_OutputAspectRatio.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.view.CameraController$OutputSize$OutputAspectRatio",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $CameraController_OutputSize_OutputAspectRatioImpl {
  factory $CameraController_OutputSize_OutputAspectRatioImpl() =
      _$CameraController_OutputSize_OutputAspectRatioImpl;
}

class _$CameraController_OutputSize_OutputAspectRatioImpl
    implements $CameraController_OutputSize_OutputAspectRatioImpl {
  _$CameraController_OutputSize_OutputAspectRatioImpl();
}

final class $CameraController_OutputSize_OutputAspectRatioType
    extends jni.JObjType<CameraController_OutputSize_OutputAspectRatio> {
  const $CameraController_OutputSize_OutputAspectRatioType();

  @override
  String get signature =>
      r"Landroidx/camera/view/CameraController$OutputSize$OutputAspectRatio;";

  @override
  CameraController_OutputSize_OutputAspectRatio fromReference(
          jni.JReference reference) =>
      CameraController_OutputSize_OutputAspectRatio.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($CameraController_OutputSize_OutputAspectRatioType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraController_OutputSize_OutputAspectRatioType) &&
        other is $CameraController_OutputSize_OutputAspectRatioType;
  }
}

/// from: androidx.camera.view.CameraController$OutputSize
class CameraController_OutputSize extends jni.JObject {
  @override
  late final jni.JObjType<CameraController_OutputSize> $type = type;

  CameraController_OutputSize.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/view/CameraController$OutputSize");

  /// The type which includes information such as the signature of this class.
  static const type = $CameraController_OutputSizeType();

  /// from: static public final int UNASSIGNED_ASPECT_RATIO
  static const UNASSIGNED_ASPECT_RATIO = -1;
  static final _id_new0 = _class.constructorId(
    r"(I)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void <init>(int i)
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraController_OutputSize(
    int i,
  ) {
    return CameraController_OutputSize.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr, i)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Landroid/util/Size;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.util.Size size)
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraController_OutputSize.new1(
    jni.JObject size,
  ) {
    return CameraController_OutputSize.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            size.reference.pointer)
        .reference);
  }

  static final _id_getAspectRatio = _class.instanceMethodId(
    r"getAspectRatio",
    r"()I",
  );

  static final _getAspectRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getAspectRatio()
  int getAspectRatio() {
    return _getAspectRatio(
            reference.pointer, _id_getAspectRatio as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getResolution = _class.instanceMethodId(
    r"getResolution",
    r"()Landroid/util/Size;",
  );

  static final _getResolution = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.util.Size getResolution()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResolution() {
    return _getResolution(
            reference.pointer, _id_getResolution as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $CameraController_OutputSizeType
    extends jni.JObjType<CameraController_OutputSize> {
  const $CameraController_OutputSizeType();

  @override
  String get signature => r"Landroidx/camera/view/CameraController$OutputSize;";

  @override
  CameraController_OutputSize fromReference(jni.JReference reference) =>
      CameraController_OutputSize.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraController_OutputSizeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraController_OutputSizeType) &&
        other is $CameraController_OutputSizeType;
  }
}

/// from: androidx.camera.view.CameraController$UseCases
class CameraController_UseCases extends jni.JObject {
  @override
  late final jni.JObjType<CameraController_UseCases> $type = type;

  CameraController_UseCases.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/view/CameraController$UseCases");

  /// The type which includes information such as the signature of this class.
  static const type = $CameraController_UseCasesType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CameraController_UseCasesImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory CameraController_UseCases.implement(
    $CameraController_UseCasesImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CameraController_UseCases.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.view.CameraController$UseCases",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $CameraController_UseCasesImpl {
  factory $CameraController_UseCasesImpl() = _$CameraController_UseCasesImpl;
}

class _$CameraController_UseCasesImpl
    implements $CameraController_UseCasesImpl {
  _$CameraController_UseCasesImpl();
}

final class $CameraController_UseCasesType
    extends jni.JObjType<CameraController_UseCases> {
  const $CameraController_UseCasesType();

  @override
  String get signature => r"Landroidx/camera/view/CameraController$UseCases;";

  @override
  CameraController_UseCases fromReference(jni.JReference reference) =>
      CameraController_UseCases.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraController_UseCasesType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraController_UseCasesType) &&
        other is $CameraController_UseCasesType;
  }
}

/// from: androidx.camera.view.CameraController
class CameraController extends jni.JObject {
  @override
  late final jni.JObjType<CameraController> $type = type;

  CameraController.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/view/CameraController");

  /// The type which includes information such as the signature of this class.
  static const type = $CameraControllerType();

  /// from: static public final int COORDINATE_SYSTEM_VIEW_REFERENCED
  static const COORDINATE_SYSTEM_VIEW_REFERENCED = 1;

  /// from: static public final int TAP_TO_FOCUS_NOT_STARTED
  static const TAP_TO_FOCUS_NOT_STARTED = 0;

  /// from: static public final int TAP_TO_FOCUS_STARTED
  static const TAP_TO_FOCUS_STARTED = 1;

  /// from: static public final int TAP_TO_FOCUS_FOCUSED
  static const TAP_TO_FOCUS_FOCUSED = 2;

  /// from: static public final int TAP_TO_FOCUS_NOT_FOCUSED
  static const TAP_TO_FOCUS_NOT_FOCUSED = 3;

  /// from: static public final int TAP_TO_FOCUS_FAILED
  static const TAP_TO_FOCUS_FAILED = 4;

  /// from: static public final int IMAGE_CAPTURE
  static const IMAGE_CAPTURE = 1;

  /// from: static public final int IMAGE_ANALYSIS
  static const IMAGE_ANALYSIS = 2;

  /// from: static public final int VIDEO_CAPTURE
  static const VIDEO_CAPTURE = 4;
  static final _id_getInitializationFuture = _class.instanceMethodId(
    r"getInitializationFuture",
    r"()Lcom/google/common/util/concurrent/ListenableFuture;",
  );

  static final _getInitializationFuture = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public com.google.common.util.concurrent.ListenableFuture getInitializationFuture()
  /// The returned object must be released after use, by calling the [release] method.
  ListenableFuture<jni.JObject> getInitializationFuture() {
    return _getInitializationFuture(
            reference.pointer, _id_getInitializationFuture as jni.JMethodIDPtr)
        .object(const $ListenableFutureType(jni.JObjectType()));
  }

  static final _id_setEnabledUseCases = _class.instanceMethodId(
    r"setEnabledUseCases",
    r"(I)V",
  );

  static final _setEnabledUseCases = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setEnabledUseCases(int i)
  void setEnabledUseCases(
    int i,
  ) {
    _setEnabledUseCases(
            reference.pointer, _id_setEnabledUseCases as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setPreviewTargetSize = _class.instanceMethodId(
    r"setPreviewTargetSize",
    r"(Landroidx/camera/view/CameraController$OutputSize;)V",
  );

  static final _setPreviewTargetSize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setPreviewTargetSize(androidx.camera.view.CameraController$OutputSize outputSize)
  void setPreviewTargetSize(
    CameraController_OutputSize outputSize,
  ) {
    _setPreviewTargetSize(
            reference.pointer,
            _id_setPreviewTargetSize as jni.JMethodIDPtr,
            outputSize.reference.pointer)
        .check();
  }

  static final _id_getPreviewTargetSize = _class.instanceMethodId(
    r"getPreviewTargetSize",
    r"()Landroidx/camera/view/CameraController$OutputSize;",
  );

  static final _getPreviewTargetSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.view.CameraController$OutputSize getPreviewTargetSize()
  /// The returned object must be released after use, by calling the [release] method.
  CameraController_OutputSize getPreviewTargetSize() {
    return _getPreviewTargetSize(
            reference.pointer, _id_getPreviewTargetSize as jni.JMethodIDPtr)
        .object(const $CameraController_OutputSizeType());
  }

  static final _id_isImageCaptureEnabled = _class.instanceMethodId(
    r"isImageCaptureEnabled",
    r"()Z",
  );

  static final _isImageCaptureEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isImageCaptureEnabled()
  bool isImageCaptureEnabled() {
    return _isImageCaptureEnabled(
            reference.pointer, _id_isImageCaptureEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getImageCaptureFlashMode = _class.instanceMethodId(
    r"getImageCaptureFlashMode",
    r"()I",
  );

  static final _getImageCaptureFlashMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getImageCaptureFlashMode()
  int getImageCaptureFlashMode() {
    return _getImageCaptureFlashMode(
            reference.pointer, _id_getImageCaptureFlashMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setImageCaptureFlashMode = _class.instanceMethodId(
    r"setImageCaptureFlashMode",
    r"(I)V",
  );

  static final _setImageCaptureFlashMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setImageCaptureFlashMode(int i)
  void setImageCaptureFlashMode(
    int i,
  ) {
    _setImageCaptureFlashMode(reference.pointer,
            _id_setImageCaptureFlashMode as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_takePicture = _class.instanceMethodId(
    r"takePicture",
    r"(Landroidx/camera/core/ImageCapture$OutputFileOptions;Ljava/util/concurrent/Executor;Landroidx/camera/core/ImageCapture$OnImageSavedCallback;)V",
  );

  static final _takePicture = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void takePicture(androidx.camera.core.ImageCapture$OutputFileOptions outputFileOptions, java.util.concurrent.Executor executor, androidx.camera.core.ImageCapture$OnImageSavedCallback onImageSavedCallback)
  void takePicture(
    ImageCapture_OutputFileOptions outputFileOptions,
    Executor executor,
    ImageCapture_OnImageSavedCallback onImageSavedCallback,
  ) {
    _takePicture(
            reference.pointer,
            _id_takePicture as jni.JMethodIDPtr,
            outputFileOptions.reference.pointer,
            executor.reference.pointer,
            onImageSavedCallback.reference.pointer)
        .check();
  }

  static final _id_takePicture1 = _class.instanceMethodId(
    r"takePicture",
    r"(Ljava/util/concurrent/Executor;Landroidx/camera/core/ImageCapture$OnImageCapturedCallback;)V",
  );

  static final _takePicture1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void takePicture(java.util.concurrent.Executor executor, androidx.camera.core.ImageCapture$OnImageCapturedCallback onImageCapturedCallback)
  void takePicture1(
    Executor executor,
    ImageCapture_OnImageCapturedCallback onImageCapturedCallback,
  ) {
    _takePicture1(
            reference.pointer,
            _id_takePicture1 as jni.JMethodIDPtr,
            executor.reference.pointer,
            onImageCapturedCallback.reference.pointer)
        .check();
  }

  static final _id_setImageCaptureMode = _class.instanceMethodId(
    r"setImageCaptureMode",
    r"(I)V",
  );

  static final _setImageCaptureMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setImageCaptureMode(int i)
  void setImageCaptureMode(
    int i,
  ) {
    _setImageCaptureMode(
            reference.pointer, _id_setImageCaptureMode as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getImageCaptureMode = _class.instanceMethodId(
    r"getImageCaptureMode",
    r"()I",
  );

  static final _getImageCaptureMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getImageCaptureMode()
  int getImageCaptureMode() {
    return _getImageCaptureMode(
            reference.pointer, _id_getImageCaptureMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setImageCaptureTargetSize = _class.instanceMethodId(
    r"setImageCaptureTargetSize",
    r"(Landroidx/camera/view/CameraController$OutputSize;)V",
  );

  static final _setImageCaptureTargetSize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setImageCaptureTargetSize(androidx.camera.view.CameraController$OutputSize outputSize)
  void setImageCaptureTargetSize(
    CameraController_OutputSize outputSize,
  ) {
    _setImageCaptureTargetSize(
            reference.pointer,
            _id_setImageCaptureTargetSize as jni.JMethodIDPtr,
            outputSize.reference.pointer)
        .check();
  }

  static final _id_getImageCaptureTargetSize = _class.instanceMethodId(
    r"getImageCaptureTargetSize",
    r"()Landroidx/camera/view/CameraController$OutputSize;",
  );

  static final _getImageCaptureTargetSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.view.CameraController$OutputSize getImageCaptureTargetSize()
  /// The returned object must be released after use, by calling the [release] method.
  CameraController_OutputSize getImageCaptureTargetSize() {
    return _getImageCaptureTargetSize(reference.pointer,
            _id_getImageCaptureTargetSize as jni.JMethodIDPtr)
        .object(const $CameraController_OutputSizeType());
  }

  static final _id_setImageCaptureIoExecutor = _class.instanceMethodId(
    r"setImageCaptureIoExecutor",
    r"(Ljava/util/concurrent/Executor;)V",
  );

  static final _setImageCaptureIoExecutor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setImageCaptureIoExecutor(java.util.concurrent.Executor executor)
  void setImageCaptureIoExecutor(
    Executor executor,
  ) {
    _setImageCaptureIoExecutor(
            reference.pointer,
            _id_setImageCaptureIoExecutor as jni.JMethodIDPtr,
            executor.reference.pointer)
        .check();
  }

  static final _id_getImageCaptureIoExecutor = _class.instanceMethodId(
    r"getImageCaptureIoExecutor",
    r"()Ljava/util/concurrent/Executor;",
  );

  static final _getImageCaptureIoExecutor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.concurrent.Executor getImageCaptureIoExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  Executor getImageCaptureIoExecutor() {
    return _getImageCaptureIoExecutor(reference.pointer,
            _id_getImageCaptureIoExecutor as jni.JMethodIDPtr)
        .object(const $ExecutorType());
  }

  static final _id_isImageAnalysisEnabled = _class.instanceMethodId(
    r"isImageAnalysisEnabled",
    r"()Z",
  );

  static final _isImageAnalysisEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isImageAnalysisEnabled()
  bool isImageAnalysisEnabled() {
    return _isImageAnalysisEnabled(
            reference.pointer, _id_isImageAnalysisEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setImageAnalysisAnalyzer = _class.instanceMethodId(
    r"setImageAnalysisAnalyzer",
    r"(Ljava/util/concurrent/Executor;Landroidx/camera/core/ImageAnalysis$Analyzer;)V",
  );

  static final _setImageAnalysisAnalyzer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setImageAnalysisAnalyzer(java.util.concurrent.Executor executor, androidx.camera.core.ImageAnalysis$Analyzer analyzer)
  void setImageAnalysisAnalyzer(
    Executor executor,
    ImageAnalysis_Analyzer analyzer,
  ) {
    _setImageAnalysisAnalyzer(
            reference.pointer,
            _id_setImageAnalysisAnalyzer as jni.JMethodIDPtr,
            executor.reference.pointer,
            analyzer.reference.pointer)
        .check();
  }

  static final _id_clearImageAnalysisAnalyzer = _class.instanceMethodId(
    r"clearImageAnalysisAnalyzer",
    r"()V",
  );

  static final _clearImageAnalysisAnalyzer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void clearImageAnalysisAnalyzer()
  void clearImageAnalysisAnalyzer() {
    _clearImageAnalysisAnalyzer(reference.pointer,
            _id_clearImageAnalysisAnalyzer as jni.JMethodIDPtr)
        .check();
  }

  static final _id_getImageAnalysisBackpressureStrategy =
      _class.instanceMethodId(
    r"getImageAnalysisBackpressureStrategy",
    r"()I",
  );

  static final _getImageAnalysisBackpressureStrategy =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallIntMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public int getImageAnalysisBackpressureStrategy()
  int getImageAnalysisBackpressureStrategy() {
    return _getImageAnalysisBackpressureStrategy(reference.pointer,
            _id_getImageAnalysisBackpressureStrategy as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setImageAnalysisBackpressureStrategy =
      _class.instanceMethodId(
    r"setImageAnalysisBackpressureStrategy",
    r"(I)V",
  );

  static final _setImageAnalysisBackpressureStrategy =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setImageAnalysisBackpressureStrategy(int i)
  void setImageAnalysisBackpressureStrategy(
    int i,
  ) {
    _setImageAnalysisBackpressureStrategy(reference.pointer,
            _id_setImageAnalysisBackpressureStrategy as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setImageAnalysisImageQueueDepth = _class.instanceMethodId(
    r"setImageAnalysisImageQueueDepth",
    r"(I)V",
  );

  static final _setImageAnalysisImageQueueDepth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setImageAnalysisImageQueueDepth(int i)
  void setImageAnalysisImageQueueDepth(
    int i,
  ) {
    _setImageAnalysisImageQueueDepth(reference.pointer,
            _id_setImageAnalysisImageQueueDepth as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getImageAnalysisImageQueueDepth = _class.instanceMethodId(
    r"getImageAnalysisImageQueueDepth",
    r"()I",
  );

  static final _getImageAnalysisImageQueueDepth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getImageAnalysisImageQueueDepth()
  int getImageAnalysisImageQueueDepth() {
    return _getImageAnalysisImageQueueDepth(reference.pointer,
            _id_getImageAnalysisImageQueueDepth as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setImageAnalysisTargetSize = _class.instanceMethodId(
    r"setImageAnalysisTargetSize",
    r"(Landroidx/camera/view/CameraController$OutputSize;)V",
  );

  static final _setImageAnalysisTargetSize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setImageAnalysisTargetSize(androidx.camera.view.CameraController$OutputSize outputSize)
  void setImageAnalysisTargetSize(
    CameraController_OutputSize outputSize,
  ) {
    _setImageAnalysisTargetSize(
            reference.pointer,
            _id_setImageAnalysisTargetSize as jni.JMethodIDPtr,
            outputSize.reference.pointer)
        .check();
  }

  static final _id_getImageAnalysisTargetSize = _class.instanceMethodId(
    r"getImageAnalysisTargetSize",
    r"()Landroidx/camera/view/CameraController$OutputSize;",
  );

  static final _getImageAnalysisTargetSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.view.CameraController$OutputSize getImageAnalysisTargetSize()
  /// The returned object must be released after use, by calling the [release] method.
  CameraController_OutputSize getImageAnalysisTargetSize() {
    return _getImageAnalysisTargetSize(reference.pointer,
            _id_getImageAnalysisTargetSize as jni.JMethodIDPtr)
        .object(const $CameraController_OutputSizeType());
  }

  static final _id_setImageAnalysisBackgroundExecutor = _class.instanceMethodId(
    r"setImageAnalysisBackgroundExecutor",
    r"(Ljava/util/concurrent/Executor;)V",
  );

  static final _setImageAnalysisBackgroundExecutor =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void setImageAnalysisBackgroundExecutor(java.util.concurrent.Executor executor)
  void setImageAnalysisBackgroundExecutor(
    Executor executor,
  ) {
    _setImageAnalysisBackgroundExecutor(
            reference.pointer,
            _id_setImageAnalysisBackgroundExecutor as jni.JMethodIDPtr,
            executor.reference.pointer)
        .check();
  }

  static final _id_getImageAnalysisBackgroundExecutor = _class.instanceMethodId(
    r"getImageAnalysisBackgroundExecutor",
    r"()Ljava/util/concurrent/Executor;",
  );

  static final _getImageAnalysisBackgroundExecutor =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public java.util.concurrent.Executor getImageAnalysisBackgroundExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  Executor getImageAnalysisBackgroundExecutor() {
    return _getImageAnalysisBackgroundExecutor(reference.pointer,
            _id_getImageAnalysisBackgroundExecutor as jni.JMethodIDPtr)
        .object(const $ExecutorType());
  }

  static final _id_isVideoCaptureEnabled = _class.instanceMethodId(
    r"isVideoCaptureEnabled",
    r"()Z",
  );

  static final _isVideoCaptureEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isVideoCaptureEnabled()
  bool isVideoCaptureEnabled() {
    return _isVideoCaptureEnabled(
            reference.pointer, _id_isVideoCaptureEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_startRecording = _class.instanceMethodId(
    r"startRecording",
    r"(Landroidx/camera/video/FileOutputOptions;Landroidx/camera/view/video/AudioConfig;Ljava/util/concurrent/Executor;Landroidx/core/util/Consumer;)Landroidx/camera/video/Recording;",
  );

  static final _startRecording = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.video.Recording startRecording(androidx.camera.video.FileOutputOptions fileOutputOptions, androidx.camera.view.video.AudioConfig audioConfig, java.util.concurrent.Executor executor, androidx.core.util.Consumer consumer)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startRecording(
    jni.JObject fileOutputOptions,
    jni.JObject audioConfig,
    Executor executor,
    jni.JObject consumer,
  ) {
    return _startRecording(
            reference.pointer,
            _id_startRecording as jni.JMethodIDPtr,
            fileOutputOptions.reference.pointer,
            audioConfig.reference.pointer,
            executor.reference.pointer,
            consumer.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startRecording1 = _class.instanceMethodId(
    r"startRecording",
    r"(Landroidx/camera/video/FileDescriptorOutputOptions;Landroidx/camera/view/video/AudioConfig;Ljava/util/concurrent/Executor;Landroidx/core/util/Consumer;)Landroidx/camera/video/Recording;",
  );

  static final _startRecording1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.video.Recording startRecording(androidx.camera.video.FileDescriptorOutputOptions fileDescriptorOutputOptions, androidx.camera.view.video.AudioConfig audioConfig, java.util.concurrent.Executor executor, androidx.core.util.Consumer consumer)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startRecording1(
    jni.JObject fileDescriptorOutputOptions,
    jni.JObject audioConfig,
    Executor executor,
    jni.JObject consumer,
  ) {
    return _startRecording1(
            reference.pointer,
            _id_startRecording1 as jni.JMethodIDPtr,
            fileDescriptorOutputOptions.reference.pointer,
            audioConfig.reference.pointer,
            executor.reference.pointer,
            consumer.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startRecording2 = _class.instanceMethodId(
    r"startRecording",
    r"(Landroidx/camera/video/MediaStoreOutputOptions;Landroidx/camera/view/video/AudioConfig;Ljava/util/concurrent/Executor;Landroidx/core/util/Consumer;)Landroidx/camera/video/Recording;",
  );

  static final _startRecording2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.camera.video.Recording startRecording(androidx.camera.video.MediaStoreOutputOptions mediaStoreOutputOptions, androidx.camera.view.video.AudioConfig audioConfig, java.util.concurrent.Executor executor, androidx.core.util.Consumer consumer)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startRecording2(
    jni.JObject mediaStoreOutputOptions,
    jni.JObject audioConfig,
    Executor executor,
    jni.JObject consumer,
  ) {
    return _startRecording2(
            reference.pointer,
            _id_startRecording2 as jni.JMethodIDPtr,
            mediaStoreOutputOptions.reference.pointer,
            audioConfig.reference.pointer,
            executor.reference.pointer,
            consumer.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_isRecording = _class.instanceMethodId(
    r"isRecording",
    r"()Z",
  );

  static final _isRecording = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isRecording()
  bool isRecording() {
    return _isRecording(reference.pointer, _id_isRecording as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setVideoCaptureQualitySelector = _class.instanceMethodId(
    r"setVideoCaptureQualitySelector",
    r"(Landroidx/camera/video/QualitySelector;)V",
  );

  static final _setVideoCaptureQualitySelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setVideoCaptureQualitySelector(androidx.camera.video.QualitySelector qualitySelector)
  void setVideoCaptureQualitySelector(
    jni.JObject qualitySelector,
  ) {
    _setVideoCaptureQualitySelector(
            reference.pointer,
            _id_setVideoCaptureQualitySelector as jni.JMethodIDPtr,
            qualitySelector.reference.pointer)
        .check();
  }

  static final _id_getVideoCaptureQualitySelector = _class.instanceMethodId(
    r"getVideoCaptureQualitySelector",
    r"()Landroidx/camera/video/QualitySelector;",
  );

  static final _getVideoCaptureQualitySelector = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.video.QualitySelector getVideoCaptureQualitySelector()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getVideoCaptureQualitySelector() {
    return _getVideoCaptureQualitySelector(reference.pointer,
            _id_getVideoCaptureQualitySelector as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setCameraSelector = _class.instanceMethodId(
    r"setCameraSelector",
    r"(Landroidx/camera/core/CameraSelector;)V",
  );

  static final _setCameraSelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setCameraSelector(androidx.camera.core.CameraSelector cameraSelector)
  void setCameraSelector(
    CameraSelector cameraSelector,
  ) {
    _setCameraSelector(
            reference.pointer,
            _id_setCameraSelector as jni.JMethodIDPtr,
            cameraSelector.reference.pointer)
        .check();
  }

  static final _id_hasCamera = _class.instanceMethodId(
    r"hasCamera",
    r"(Landroidx/camera/core/CameraSelector;)Z",
  );

  static final _hasCamera = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasCamera(androidx.camera.core.CameraSelector cameraSelector)
  bool hasCamera(
    CameraSelector cameraSelector,
  ) {
    return _hasCamera(reference.pointer, _id_hasCamera as jni.JMethodIDPtr,
            cameraSelector.reference.pointer)
        .boolean;
  }

  static final _id_getCameraSelector = _class.instanceMethodId(
    r"getCameraSelector",
    r"()Landroidx/camera/core/CameraSelector;",
  );

  static final _getCameraSelector = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.CameraSelector getCameraSelector()
  /// The returned object must be released after use, by calling the [release] method.
  CameraSelector getCameraSelector() {
    return _getCameraSelector(
            reference.pointer, _id_getCameraSelector as jni.JMethodIDPtr)
        .object(const $CameraSelectorType());
  }

  static final _id_isPinchToZoomEnabled = _class.instanceMethodId(
    r"isPinchToZoomEnabled",
    r"()Z",
  );

  static final _isPinchToZoomEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isPinchToZoomEnabled()
  bool isPinchToZoomEnabled() {
    return _isPinchToZoomEnabled(
            reference.pointer, _id_isPinchToZoomEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setPinchToZoomEnabled = _class.instanceMethodId(
    r"setPinchToZoomEnabled",
    r"(Z)V",
  );

  static final _setPinchToZoomEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setPinchToZoomEnabled(boolean z)
  void setPinchToZoomEnabled(
    bool z,
  ) {
    _setPinchToZoomEnabled(reference.pointer,
            _id_setPinchToZoomEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isTapToFocusEnabled = _class.instanceMethodId(
    r"isTapToFocusEnabled",
    r"()Z",
  );

  static final _isTapToFocusEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isTapToFocusEnabled()
  bool isTapToFocusEnabled() {
    return _isTapToFocusEnabled(
            reference.pointer, _id_isTapToFocusEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setTapToFocusEnabled = _class.instanceMethodId(
    r"setTapToFocusEnabled",
    r"(Z)V",
  );

  static final _setTapToFocusEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTapToFocusEnabled(boolean z)
  void setTapToFocusEnabled(
    bool z,
  ) {
    _setTapToFocusEnabled(reference.pointer,
            _id_setTapToFocusEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getTapToFocusState = _class.instanceMethodId(
    r"getTapToFocusState",
    r"()Landroidx/lifecycle/LiveData;",
  );

  static final _getTapToFocusState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.lifecycle.LiveData getTapToFocusState()
  /// The returned object must be released after use, by calling the [release] method.
  LiveData<jni.JInteger> getTapToFocusState() {
    return _getTapToFocusState(
            reference.pointer, _id_getTapToFocusState as jni.JMethodIDPtr)
        .object(const $LiveDataType(jni.JIntegerType()));
  }

  static final _id_getZoomState = _class.instanceMethodId(
    r"getZoomState",
    r"()Landroidx/lifecycle/LiveData;",
  );

  static final _getZoomState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.lifecycle.LiveData getZoomState()
  /// The returned object must be released after use, by calling the [release] method.
  LiveData<ZoomState> getZoomState() {
    return _getZoomState(
            reference.pointer, _id_getZoomState as jni.JMethodIDPtr)
        .object(const $LiveDataType($ZoomStateType()));
  }

  static final _id_getCameraInfo = _class.instanceMethodId(
    r"getCameraInfo",
    r"()Landroidx/camera/core/CameraInfo;",
  );

  static final _getCameraInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.CameraInfo getCameraInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCameraInfo() {
    return _getCameraInfo(
            reference.pointer, _id_getCameraInfo as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getCameraControl = _class.instanceMethodId(
    r"getCameraControl",
    r"()Landroidx/camera/core/CameraControl;",
  );

  static final _getCameraControl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.CameraControl getCameraControl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCameraControl() {
    return _getCameraControl(
            reference.pointer, _id_getCameraControl as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setZoomRatio = _class.instanceMethodId(
    r"setZoomRatio",
    r"(F)Lcom/google/common/util/concurrent/ListenableFuture;",
  );

  static final _setZoomRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: public com.google.common.util.concurrent.ListenableFuture setZoomRatio(float f)
  /// The returned object must be released after use, by calling the [release] method.
  ListenableFuture<jni.JObject> setZoomRatio(
    double f,
  ) {
    return _setZoomRatio(
            reference.pointer, _id_setZoomRatio as jni.JMethodIDPtr, f)
        .object(const $ListenableFutureType(jni.JObjectType()));
  }

  static final _id_setLinearZoom = _class.instanceMethodId(
    r"setLinearZoom",
    r"(F)Lcom/google/common/util/concurrent/ListenableFuture;",
  );

  static final _setLinearZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: public com.google.common.util.concurrent.ListenableFuture setLinearZoom(float f)
  /// The returned object must be released after use, by calling the [release] method.
  ListenableFuture<jni.JObject> setLinearZoom(
    double f,
  ) {
    return _setLinearZoom(
            reference.pointer, _id_setLinearZoom as jni.JMethodIDPtr, f)
        .object(const $ListenableFutureType(jni.JObjectType()));
  }

  static final _id_getTorchState = _class.instanceMethodId(
    r"getTorchState",
    r"()Landroidx/lifecycle/LiveData;",
  );

  static final _getTorchState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.lifecycle.LiveData getTorchState()
  /// The returned object must be released after use, by calling the [release] method.
  LiveData<jni.JInteger> getTorchState() {
    return _getTorchState(
            reference.pointer, _id_getTorchState as jni.JMethodIDPtr)
        .object(const $LiveDataType(jni.JIntegerType()));
  }

  static final _id_enableTorch = _class.instanceMethodId(
    r"enableTorch",
    r"(Z)Lcom/google/common/util/concurrent/ListenableFuture;",
  );

  static final _enableTorch = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public com.google.common.util.concurrent.ListenableFuture enableTorch(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  ListenableFuture<jni.JObject> enableTorch(
    bool z,
  ) {
    return _enableTorch(
            reference.pointer, _id_enableTorch as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $ListenableFutureType(jni.JObjectType()));
  }

  static final _id_setEffects = _class.instanceMethodId(
    r"setEffects",
    r"(Ljava/util/Set;)V",
  );

  static final _setEffects = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setEffects(java.util.Set set)
  void setEffects(
    jni.JSet<jni.JObject> set0,
  ) {
    _setEffects(reference.pointer, _id_setEffects as jni.JMethodIDPtr,
            set0.reference.pointer)
        .check();
  }

  static final _id_clearEffects = _class.instanceMethodId(
    r"clearEffects",
    r"()V",
  );

  static final _clearEffects = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void clearEffects()
  void clearEffects() {
    _clearEffects(reference.pointer, _id_clearEffects as jni.JMethodIDPtr)
        .check();
  }

  static final _id_createUseCaseGroup = _class.instanceMethodId(
    r"createUseCaseGroup",
    r"()Landroidx/camera/core/UseCaseGroup;",
  );

  static final _createUseCaseGroup = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected androidx.camera.core.UseCaseGroup createUseCaseGroup()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createUseCaseGroup() {
    return _createUseCaseGroup(
            reference.pointer, _id_createUseCaseGroup as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $CameraControllerType extends jni.JObjType<CameraController> {
  const $CameraControllerType();

  @override
  String get signature => r"Landroidx/camera/view/CameraController;";

  @override
  CameraController fromReference(jni.JReference reference) =>
      CameraController.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraControllerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraControllerType) &&
        other is $CameraControllerType;
  }
}

/// from: androidx.camera.view.LifecycleCameraController
class LifecycleCameraController extends CameraController {
  @override
  late final jni.JObjType<LifecycleCameraController> $type = type;

  LifecycleCameraController.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/view/LifecycleCameraController");

  /// The type which includes information such as the signature of this class.
  static const type = $LifecycleCameraControllerType();
  static final _id_new0 = _class.constructorId(
    r"(Landroid/content/Context;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  factory LifecycleCameraController(
    Context context,
  ) {
    return LifecycleCameraController.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            context.reference.pointer)
        .reference);
  }

  static final _id_bindToLifecycle = _class.instanceMethodId(
    r"bindToLifecycle",
    r"(Landroidx/lifecycle/LifecycleOwner;)V",
  );

  static final _bindToLifecycle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void bindToLifecycle(androidx.lifecycle.LifecycleOwner lifecycleOwner)
  void bindToLifecycle(
    LifecycleOwner lifecycleOwner,
  ) {
    _bindToLifecycle(reference.pointer, _id_bindToLifecycle as jni.JMethodIDPtr,
            lifecycleOwner.reference.pointer)
        .check();
  }

  static final _id_unbind = _class.instanceMethodId(
    r"unbind",
    r"()V",
  );

  static final _unbind = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void unbind()
  void unbind() {
    _unbind(reference.pointer, _id_unbind as jni.JMethodIDPtr).check();
  }
}

final class $LifecycleCameraControllerType
    extends jni.JObjType<LifecycleCameraController> {
  const $LifecycleCameraControllerType();

  @override
  String get signature => r"Landroidx/camera/view/LifecycleCameraController;";

  @override
  LifecycleCameraController fromReference(jni.JReference reference) =>
      LifecycleCameraController.fromReference(reference);

  @override
  jni.JObjType get superType => const $CameraControllerType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($LifecycleCameraControllerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LifecycleCameraControllerType) &&
        other is $LifecycleCameraControllerType;
  }
}

/// from: androidx.camera.view.PreviewView$ImplementationMode
class PreviewView_ImplementationMode extends jni.JObject {
  @override
  late final jni.JObjType<PreviewView_ImplementationMode> $type = type;

  PreviewView_ImplementationMode.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/view/PreviewView$ImplementationMode");

  /// The type which includes information such as the signature of this class.
  static const type = $PreviewView_ImplementationModeType();
  static final _id_PERFORMANCE = _class.staticFieldId(
    r"PERFORMANCE",
    r"Landroidx/camera/view/PreviewView$ImplementationMode;",
  );

  /// from: static public final androidx.camera.view.PreviewView$ImplementationMode PERFORMANCE
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_ImplementationMode get PERFORMANCE =>
      _id_PERFORMANCE.get(_class, const $PreviewView_ImplementationModeType());

  static final _id_COMPATIBLE = _class.staticFieldId(
    r"COMPATIBLE",
    r"Landroidx/camera/view/PreviewView$ImplementationMode;",
  );

  /// from: static public final androidx.camera.view.PreviewView$ImplementationMode COMPATIBLE
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_ImplementationMode get COMPATIBLE =>
      _id_COMPATIBLE.get(_class, const $PreviewView_ImplementationModeType());

  static final _id_values = _class.staticMethodId(
    r"values",
    r"()[Landroidx/camera/view/PreviewView$ImplementationMode;",
  );

  static final _values = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public androidx.camera.view.PreviewView$ImplementationMode[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<PreviewView_ImplementationMode> values() {
    return _values(_class.reference.pointer, _id_values as jni.JMethodIDPtr)
        .object(const jni.JArrayType($PreviewView_ImplementationModeType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r"valueOf",
    r"(Ljava/lang/String;)Landroidx/camera/view/PreviewView$ImplementationMode;",
  );

  static final _valueOf = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.camera.view.PreviewView$ImplementationMode valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_ImplementationMode valueOf(
    jni.JString string,
  ) {
    return _valueOf(_class.reference.pointer, _id_valueOf as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $PreviewView_ImplementationModeType());
  }
}

final class $PreviewView_ImplementationModeType
    extends jni.JObjType<PreviewView_ImplementationMode> {
  const $PreviewView_ImplementationModeType();

  @override
  String get signature =>
      r"Landroidx/camera/view/PreviewView$ImplementationMode;";

  @override
  PreviewView_ImplementationMode fromReference(jni.JReference reference) =>
      PreviewView_ImplementationMode.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PreviewView_ImplementationModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewView_ImplementationModeType) &&
        other is $PreviewView_ImplementationModeType;
  }
}

/// from: androidx.camera.view.PreviewView$OnFrameUpdateListener
class PreviewView_OnFrameUpdateListener extends jni.JObject {
  @override
  late final jni.JObjType<PreviewView_OnFrameUpdateListener> $type = type;

  PreviewView_OnFrameUpdateListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/camera/view/PreviewView$OnFrameUpdateListener");

  /// The type which includes information such as the signature of this class.
  static const type = $PreviewView_OnFrameUpdateListenerType();
  static final _id_onFrameUpdate = _class.instanceMethodId(
    r"onFrameUpdate",
    r"(J)V",
  );

  static final _onFrameUpdate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract void onFrameUpdate(long j)
  void onFrameUpdate(
    int j,
  ) {
    _onFrameUpdate(reference.pointer, _id_onFrameUpdate as jni.JMethodIDPtr, j)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $PreviewView_OnFrameUpdateListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onFrameUpdate(J)V") {
        _$impls[$p]!.onFrameUpdate(
          $a[0]
              .castTo(const jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory PreviewView_OnFrameUpdateListener.implement(
    $PreviewView_OnFrameUpdateListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = PreviewView_OnFrameUpdateListener.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.camera.view.PreviewView$OnFrameUpdateListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $PreviewView_OnFrameUpdateListenerImpl {
  factory $PreviewView_OnFrameUpdateListenerImpl({
    required void Function(int j) onFrameUpdate,
  }) = _$PreviewView_OnFrameUpdateListenerImpl;

  void onFrameUpdate(int j);
}

class _$PreviewView_OnFrameUpdateListenerImpl
    implements $PreviewView_OnFrameUpdateListenerImpl {
  _$PreviewView_OnFrameUpdateListenerImpl({
    required void Function(int j) onFrameUpdate,
  }) : _onFrameUpdate = onFrameUpdate;

  final void Function(int j) _onFrameUpdate;

  void onFrameUpdate(int j) {
    return _onFrameUpdate(j);
  }
}

final class $PreviewView_OnFrameUpdateListenerType
    extends jni.JObjType<PreviewView_OnFrameUpdateListener> {
  const $PreviewView_OnFrameUpdateListenerType();

  @override
  String get signature =>
      r"Landroidx/camera/view/PreviewView$OnFrameUpdateListener;";

  @override
  PreviewView_OnFrameUpdateListener fromReference(jni.JReference reference) =>
      PreviewView_OnFrameUpdateListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PreviewView_OnFrameUpdateListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewView_OnFrameUpdateListenerType) &&
        other is $PreviewView_OnFrameUpdateListenerType;
  }
}

/// from: androidx.camera.view.PreviewView$ScaleType
class PreviewView_ScaleType extends jni.JObject {
  @override
  late final jni.JObjType<PreviewView_ScaleType> $type = type;

  PreviewView_ScaleType.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/view/PreviewView$ScaleType");

  /// The type which includes information such as the signature of this class.
  static const type = $PreviewView_ScaleTypeType();
  static final _id_FILL_START = _class.staticFieldId(
    r"FILL_START",
    r"Landroidx/camera/view/PreviewView$ScaleType;",
  );

  /// from: static public final androidx.camera.view.PreviewView$ScaleType FILL_START
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_ScaleType get FILL_START =>
      _id_FILL_START.get(_class, const $PreviewView_ScaleTypeType());

  static final _id_FILL_CENTER = _class.staticFieldId(
    r"FILL_CENTER",
    r"Landroidx/camera/view/PreviewView$ScaleType;",
  );

  /// from: static public final androidx.camera.view.PreviewView$ScaleType FILL_CENTER
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_ScaleType get FILL_CENTER =>
      _id_FILL_CENTER.get(_class, const $PreviewView_ScaleTypeType());

  static final _id_FILL_END = _class.staticFieldId(
    r"FILL_END",
    r"Landroidx/camera/view/PreviewView$ScaleType;",
  );

  /// from: static public final androidx.camera.view.PreviewView$ScaleType FILL_END
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_ScaleType get FILL_END =>
      _id_FILL_END.get(_class, const $PreviewView_ScaleTypeType());

  static final _id_FIT_START = _class.staticFieldId(
    r"FIT_START",
    r"Landroidx/camera/view/PreviewView$ScaleType;",
  );

  /// from: static public final androidx.camera.view.PreviewView$ScaleType FIT_START
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_ScaleType get FIT_START =>
      _id_FIT_START.get(_class, const $PreviewView_ScaleTypeType());

  static final _id_FIT_CENTER = _class.staticFieldId(
    r"FIT_CENTER",
    r"Landroidx/camera/view/PreviewView$ScaleType;",
  );

  /// from: static public final androidx.camera.view.PreviewView$ScaleType FIT_CENTER
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_ScaleType get FIT_CENTER =>
      _id_FIT_CENTER.get(_class, const $PreviewView_ScaleTypeType());

  static final _id_FIT_END = _class.staticFieldId(
    r"FIT_END",
    r"Landroidx/camera/view/PreviewView$ScaleType;",
  );

  /// from: static public final androidx.camera.view.PreviewView$ScaleType FIT_END
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_ScaleType get FIT_END =>
      _id_FIT_END.get(_class, const $PreviewView_ScaleTypeType());

  static final _id_values = _class.staticMethodId(
    r"values",
    r"()[Landroidx/camera/view/PreviewView$ScaleType;",
  );

  static final _values = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public androidx.camera.view.PreviewView$ScaleType[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<PreviewView_ScaleType> values() {
    return _values(_class.reference.pointer, _id_values as jni.JMethodIDPtr)
        .object(const jni.JArrayType($PreviewView_ScaleTypeType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r"valueOf",
    r"(Ljava/lang/String;)Landroidx/camera/view/PreviewView$ScaleType;",
  );

  static final _valueOf = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.camera.view.PreviewView$ScaleType valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_ScaleType valueOf(
    jni.JString string,
  ) {
    return _valueOf(_class.reference.pointer, _id_valueOf as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $PreviewView_ScaleTypeType());
  }
}

final class $PreviewView_ScaleTypeType
    extends jni.JObjType<PreviewView_ScaleType> {
  const $PreviewView_ScaleTypeType();

  @override
  String get signature => r"Landroidx/camera/view/PreviewView$ScaleType;";

  @override
  PreviewView_ScaleType fromReference(jni.JReference reference) =>
      PreviewView_ScaleType.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PreviewView_ScaleTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewView_ScaleTypeType) &&
        other is $PreviewView_ScaleTypeType;
  }
}

/// from: androidx.camera.view.PreviewView$StreamState
class PreviewView_StreamState extends jni.JObject {
  @override
  late final jni.JObjType<PreviewView_StreamState> $type = type;

  PreviewView_StreamState.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/camera/view/PreviewView$StreamState");

  /// The type which includes information such as the signature of this class.
  static const type = $PreviewView_StreamStateType();
  static final _id_IDLE = _class.staticFieldId(
    r"IDLE",
    r"Landroidx/camera/view/PreviewView$StreamState;",
  );

  /// from: static public final androidx.camera.view.PreviewView$StreamState IDLE
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_StreamState get IDLE =>
      _id_IDLE.get(_class, const $PreviewView_StreamStateType());

  static final _id_STREAMING = _class.staticFieldId(
    r"STREAMING",
    r"Landroidx/camera/view/PreviewView$StreamState;",
  );

  /// from: static public final androidx.camera.view.PreviewView$StreamState STREAMING
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_StreamState get STREAMING =>
      _id_STREAMING.get(_class, const $PreviewView_StreamStateType());

  static final _id_values = _class.staticMethodId(
    r"values",
    r"()[Landroidx/camera/view/PreviewView$StreamState;",
  );

  static final _values = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public androidx.camera.view.PreviewView$StreamState[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<PreviewView_StreamState> values() {
    return _values(_class.reference.pointer, _id_values as jni.JMethodIDPtr)
        .object(const jni.JArrayType($PreviewView_StreamStateType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r"valueOf",
    r"(Ljava/lang/String;)Landroidx/camera/view/PreviewView$StreamState;",
  );

  static final _valueOf = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.camera.view.PreviewView$StreamState valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewView_StreamState valueOf(
    jni.JString string,
  ) {
    return _valueOf(_class.reference.pointer, _id_valueOf as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $PreviewView_StreamStateType());
  }
}

final class $PreviewView_StreamStateType
    extends jni.JObjType<PreviewView_StreamState> {
  const $PreviewView_StreamStateType();

  @override
  String get signature => r"Landroidx/camera/view/PreviewView$StreamState;";

  @override
  PreviewView_StreamState fromReference(jni.JReference reference) =>
      PreviewView_StreamState.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PreviewView_StreamStateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewView_StreamStateType) &&
        other is $PreviewView_StreamStateType;
  }
}

/// from: androidx.camera.view.PreviewView
class PreviewView extends jni.JObject {
  @override
  late final jni.JObjType<PreviewView> $type = type;

  PreviewView.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"androidx/camera/view/PreviewView");

  /// The type which includes information such as the signature of this class.
  static const type = $PreviewViewType();
  static final _id_new0 = _class.constructorId(
    r"(Landroid/content/Context;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  factory PreviewView(
    Context context,
  ) {
    return PreviewView.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Landroid/content/Context;Landroid/util/AttributeSet;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  factory PreviewView.new1(
    Context context,
    jni.JObject attributeSet,
  ) {
    return PreviewView.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r"(Landroid/content/Context;Landroid/util/AttributeSet;I)V",
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i)
  /// The returned object must be released after use, by calling the [release] method.
  factory PreviewView.new2(
    Context context,
    jni.JObject attributeSet,
    int i,
  ) {
    return PreviewView.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i)
        .reference);
  }

  static final _id_new3 = _class.constructorId(
    r"(Landroid/content/Context;Landroid/util/AttributeSet;II)V",
  );

  static final _new3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  factory PreviewView.new3(
    Context context,
    jni.JObject attributeSet,
    int i,
    int i1,
  ) {
    return PreviewView.fromReference(_new3(
            _class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i,
            i1)
        .reference);
  }

  static final _id_onAttachedToWindow = _class.instanceMethodId(
    r"onAttachedToWindow",
    r"()V",
  );

  static final _onAttachedToWindow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onAttachedToWindow()
  void onAttachedToWindow() {
    _onAttachedToWindow(
            reference.pointer, _id_onAttachedToWindow as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onDetachedFromWindow = _class.instanceMethodId(
    r"onDetachedFromWindow",
    r"()V",
  );

  static final _onDetachedFromWindow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onDetachedFromWindow()
  void onDetachedFromWindow() {
    _onDetachedFromWindow(
            reference.pointer, _id_onDetachedFromWindow as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r"onTouchEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _onTouchEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onTouchEvent(android.view.MotionEvent motionEvent)
  bool onTouchEvent(
    jni.JObject motionEvent,
  ) {
    return _onTouchEvent(reference.pointer,
            _id_onTouchEvent as jni.JMethodIDPtr, motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_performClick = _class.instanceMethodId(
    r"performClick",
    r"()Z",
  );

  static final _performClick = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean performClick()
  bool performClick() {
    return _performClick(
            reference.pointer, _id_performClick as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setImplementationMode = _class.instanceMethodId(
    r"setImplementationMode",
    r"(Landroidx/camera/view/PreviewView$ImplementationMode;)V",
  );

  static final _setImplementationMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setImplementationMode(androidx.camera.view.PreviewView$ImplementationMode implementationMode)
  void setImplementationMode(
    PreviewView_ImplementationMode implementationMode,
  ) {
    _setImplementationMode(
            reference.pointer,
            _id_setImplementationMode as jni.JMethodIDPtr,
            implementationMode.reference.pointer)
        .check();
  }

  static final _id_getImplementationMode = _class.instanceMethodId(
    r"getImplementationMode",
    r"()Landroidx/camera/view/PreviewView$ImplementationMode;",
  );

  static final _getImplementationMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.view.PreviewView$ImplementationMode getImplementationMode()
  /// The returned object must be released after use, by calling the [release] method.
  PreviewView_ImplementationMode getImplementationMode() {
    return _getImplementationMode(
            reference.pointer, _id_getImplementationMode as jni.JMethodIDPtr)
        .object(const $PreviewView_ImplementationModeType());
  }

  static final _id_getSurfaceProvider = _class.instanceMethodId(
    r"getSurfaceProvider",
    r"()Landroidx/camera/core/Preview$SurfaceProvider;",
  );

  static final _getSurfaceProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.Preview$SurfaceProvider getSurfaceProvider()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSurfaceProvider() {
    return _getSurfaceProvider(
            reference.pointer, _id_getSurfaceProvider as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setScaleType = _class.instanceMethodId(
    r"setScaleType",
    r"(Landroidx/camera/view/PreviewView$ScaleType;)V",
  );

  static final _setScaleType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setScaleType(androidx.camera.view.PreviewView$ScaleType scaleType)
  void setScaleType(
    PreviewView_ScaleType scaleType,
  ) {
    _setScaleType(reference.pointer, _id_setScaleType as jni.JMethodIDPtr,
            scaleType.reference.pointer)
        .check();
  }

  static final _id_getScaleType = _class.instanceMethodId(
    r"getScaleType",
    r"()Landroidx/camera/view/PreviewView$ScaleType;",
  );

  static final _getScaleType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.view.PreviewView$ScaleType getScaleType()
  /// The returned object must be released after use, by calling the [release] method.
  PreviewView_ScaleType getScaleType() {
    return _getScaleType(
            reference.pointer, _id_getScaleType as jni.JMethodIDPtr)
        .object(const $PreviewView_ScaleTypeType());
  }

  static final _id_getMeteringPointFactory = _class.instanceMethodId(
    r"getMeteringPointFactory",
    r"()Landroidx/camera/core/MeteringPointFactory;",
  );

  static final _getMeteringPointFactory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.MeteringPointFactory getMeteringPointFactory()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMeteringPointFactory() {
    return _getMeteringPointFactory(
            reference.pointer, _id_getMeteringPointFactory as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPreviewStreamState = _class.instanceMethodId(
    r"getPreviewStreamState",
    r"()Landroidx/lifecycle/LiveData;",
  );

  static final _getPreviewStreamState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.lifecycle.LiveData getPreviewStreamState()
  /// The returned object must be released after use, by calling the [release] method.
  LiveData<PreviewView_StreamState> getPreviewStreamState() {
    return _getPreviewStreamState(
            reference.pointer, _id_getPreviewStreamState as jni.JMethodIDPtr)
        .object(const $LiveDataType($PreviewView_StreamStateType()));
  }

  static final _id_getBitmap = _class.instanceMethodId(
    r"getBitmap",
    r"()Landroid/graphics/Bitmap;",
  );

  static final _getBitmap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.Bitmap getBitmap()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBitmap() {
    return _getBitmap(reference.pointer, _id_getBitmap as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getViewPort = _class.instanceMethodId(
    r"getViewPort",
    r"()Landroidx/camera/core/ViewPort;",
  );

  static final _getViewPort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.core.ViewPort getViewPort()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getViewPort() {
    return _getViewPort(reference.pointer, _id_getViewPort as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getViewPort1 = _class.instanceMethodId(
    r"getViewPort",
    r"(I)Landroidx/camera/core/ViewPort;",
  );

  static final _getViewPort1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public androidx.camera.core.ViewPort getViewPort(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getViewPort1(
    int i,
  ) {
    return _getViewPort1(
            reference.pointer, _id_getViewPort1 as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setFrameUpdateListener = _class.instanceMethodId(
    r"setFrameUpdateListener",
    r"(Ljava/util/concurrent/Executor;Landroidx/camera/view/PreviewView$OnFrameUpdateListener;)V",
  );

  static final _setFrameUpdateListener = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setFrameUpdateListener(java.util.concurrent.Executor executor, androidx.camera.view.PreviewView$OnFrameUpdateListener onFrameUpdateListener)
  void setFrameUpdateListener(
    Executor executor,
    PreviewView_OnFrameUpdateListener onFrameUpdateListener,
  ) {
    _setFrameUpdateListener(
            reference.pointer,
            _id_setFrameUpdateListener as jni.JMethodIDPtr,
            executor.reference.pointer,
            onFrameUpdateListener.reference.pointer)
        .check();
  }

  static final _id_setController = _class.instanceMethodId(
    r"setController",
    r"(Landroidx/camera/view/CameraController;)V",
  );

  static final _setController = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setController(androidx.camera.view.CameraController cameraController)
  void setController(
    CameraController cameraController,
  ) {
    _setController(reference.pointer, _id_setController as jni.JMethodIDPtr,
            cameraController.reference.pointer)
        .check();
  }

  static final _id_getController = _class.instanceMethodId(
    r"getController",
    r"()Landroidx/camera/view/CameraController;",
  );

  static final _getController = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.view.CameraController getController()
  /// The returned object must be released after use, by calling the [release] method.
  CameraController getController() {
    return _getController(
            reference.pointer, _id_getController as jni.JMethodIDPtr)
        .object(const $CameraControllerType());
  }

  static final _id_getOutputTransform = _class.instanceMethodId(
    r"getOutputTransform",
    r"()Landroidx/camera/view/transform/OutputTransform;",
  );

  static final _getOutputTransform = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.camera.view.transform.OutputTransform getOutputTransform()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getOutputTransform() {
    return _getOutputTransform(
            reference.pointer, _id_getOutputTransform as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getSensorToViewTransform = _class.instanceMethodId(
    r"getSensorToViewTransform",
    r"()Landroid/graphics/Matrix;",
  );

  static final _getSensorToViewTransform = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.Matrix getSensorToViewTransform()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSensorToViewTransform() {
    return _getSensorToViewTransform(
            reference.pointer, _id_getSensorToViewTransform as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $PreviewViewType extends jni.JObjType<PreviewView> {
  const $PreviewViewType();

  @override
  String get signature => r"Landroidx/camera/view/PreviewView;";

  @override
  PreviewView fromReference(jni.JReference reference) =>
      PreviewView.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PreviewViewType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewViewType) && other is $PreviewViewType;
  }
}

/// from: androidx.lifecycle.LifecycleOwner
class LifecycleOwner extends jni.JObject {
  @override
  late final jni.JObjType<LifecycleOwner> $type = type;

  LifecycleOwner.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/lifecycle/LifecycleOwner");

  /// The type which includes information such as the signature of this class.
  static const type = $LifecycleOwnerType();
  static final _id_getLifecycle = _class.instanceMethodId(
    r"getLifecycle",
    r"()Landroidx/lifecycle/Lifecycle;",
  );

  static final _getLifecycle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract androidx.lifecycle.Lifecycle getLifecycle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLifecycle() {
    return _getLifecycle(
            reference.pointer, _id_getLifecycle as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $LifecycleOwnerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"getLifecycle()Landroidx/lifecycle/Lifecycle;") {
        final $r = _$impls[$p]!.getLifecycle();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory LifecycleOwner.implement(
    $LifecycleOwnerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = LifecycleOwner.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"androidx.lifecycle.LifecycleOwner",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $LifecycleOwnerImpl {
  factory $LifecycleOwnerImpl({
    required jni.JObject Function() getLifecycle,
  }) = _$LifecycleOwnerImpl;

  jni.JObject getLifecycle();
}

class _$LifecycleOwnerImpl implements $LifecycleOwnerImpl {
  _$LifecycleOwnerImpl({
    required jni.JObject Function() getLifecycle,
  }) : _getLifecycle = getLifecycle;

  final jni.JObject Function() _getLifecycle;

  jni.JObject getLifecycle() {
    return _getLifecycle();
  }
}

final class $LifecycleOwnerType extends jni.JObjType<LifecycleOwner> {
  const $LifecycleOwnerType();

  @override
  String get signature => r"Landroidx/lifecycle/LifecycleOwner;";

  @override
  LifecycleOwner fromReference(jni.JReference reference) =>
      LifecycleOwner.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LifecycleOwnerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LifecycleOwnerType) &&
        other is $LifecycleOwnerType;
  }
}

/// from: androidx.lifecycle.LiveData
class LiveData<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<LiveData<$T>> $type = type(T);

  final jni.JObjType<$T> T;

  LiveData.fromReference(
    this.T,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"androidx/lifecycle/LiveData");

  /// The type which includes information such as the signature of this class.
  static $LiveDataType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $LiveDataType(
      T,
    );
  }

  static final _id_new0 = _class.constructorId(
    r"(Ljava/lang/Object;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(T object)
  /// The returned object must be released after use, by calling the [release] method.
  factory LiveData(
    $T object, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      object.$type,
    ]) as jni.JObjType<$T>;
    return LiveData.fromReference(
        T,
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr,
                object.reference.pointer)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"()V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory LiveData.new1({
    required jni.JObjType<$T> T,
  }) {
    return LiveData.fromReference(
        T,
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_observe = _class.instanceMethodId(
    r"observe",
    r"(Landroidx/lifecycle/LifecycleOwner;Landroidx/lifecycle/Observer;)V",
  );

  static final _observe = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void observe(androidx.lifecycle.LifecycleOwner lifecycleOwner, androidx.lifecycle.Observer observer)
  void observe(
    LifecycleOwner lifecycleOwner,
    Observer<$T> observer,
  ) {
    _observe(reference.pointer, _id_observe as jni.JMethodIDPtr,
            lifecycleOwner.reference.pointer, observer.reference.pointer)
        .check();
  }

  static final _id_observeForever = _class.instanceMethodId(
    r"observeForever",
    r"(Landroidx/lifecycle/Observer;)V",
  );

  static final _observeForever = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void observeForever(androidx.lifecycle.Observer observer)
  void observeForever(
    Observer<$T> observer,
  ) {
    _observeForever(reference.pointer, _id_observeForever as jni.JMethodIDPtr,
            observer.reference.pointer)
        .check();
  }

  static final _id_removeObserver = _class.instanceMethodId(
    r"removeObserver",
    r"(Landroidx/lifecycle/Observer;)V",
  );

  static final _removeObserver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void removeObserver(androidx.lifecycle.Observer observer)
  void removeObserver(
    Observer<$T> observer,
  ) {
    _removeObserver(reference.pointer, _id_removeObserver as jni.JMethodIDPtr,
            observer.reference.pointer)
        .check();
  }

  static final _id_removeObservers = _class.instanceMethodId(
    r"removeObservers",
    r"(Landroidx/lifecycle/LifecycleOwner;)V",
  );

  static final _removeObservers = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void removeObservers(androidx.lifecycle.LifecycleOwner lifecycleOwner)
  void removeObservers(
    LifecycleOwner lifecycleOwner,
  ) {
    _removeObservers(reference.pointer, _id_removeObservers as jni.JMethodIDPtr,
            lifecycleOwner.reference.pointer)
        .check();
  }

  static final _id_postValue = _class.instanceMethodId(
    r"postValue",
    r"(Ljava/lang/Object;)V",
  );

  static final _postValue = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void postValue(T object)
  void postValue(
    $T object,
  ) {
    _postValue(reference.pointer, _id_postValue as jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  static final _id_setValue = _class.instanceMethodId(
    r"setValue",
    r"(Ljava/lang/Object;)V",
  );

  static final _setValue = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void setValue(T object)
  void setValue(
    $T object,
  ) {
    _setValue(reference.pointer, _id_setValue as jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  static final _id_getValue = _class.instanceMethodId(
    r"getValue",
    r"()Ljava/lang/Object;",
  );

  static final _getValue = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public T getValue()
  /// The returned object must be released after use, by calling the [release] method.
  $T getValue() {
    return _getValue(reference.pointer, _id_getValue as jni.JMethodIDPtr)
        .object(T);
  }

  static final _id_onActive = _class.instanceMethodId(
    r"onActive",
    r"()V",
  );

  static final _onActive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onActive()
  void onActive() {
    _onActive(reference.pointer, _id_onActive as jni.JMethodIDPtr).check();
  }

  static final _id_onInactive = _class.instanceMethodId(
    r"onInactive",
    r"()V",
  );

  static final _onInactive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onInactive()
  void onInactive() {
    _onInactive(reference.pointer, _id_onInactive as jni.JMethodIDPtr).check();
  }

  static final _id_hasObservers = _class.instanceMethodId(
    r"hasObservers",
    r"()Z",
  );

  static final _hasObservers = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean hasObservers()
  bool hasObservers() {
    return _hasObservers(
            reference.pointer, _id_hasObservers as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_hasActiveObservers = _class.instanceMethodId(
    r"hasActiveObservers",
    r"()Z",
  );

  static final _hasActiveObservers = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean hasActiveObservers()
  bool hasActiveObservers() {
    return _hasActiveObservers(
            reference.pointer, _id_hasActiveObservers as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $LiveDataType<$T extends jni.JObject>
    extends jni.JObjType<LiveData<$T>> {
  final jni.JObjType<$T> T;

  const $LiveDataType(
    this.T,
  );

  @override
  String get signature => r"Landroidx/lifecycle/LiveData;";

  @override
  LiveData<$T> fromReference(jni.JReference reference) =>
      LiveData.fromReference(T, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($LiveDataType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LiveDataType<$T>) &&
        other is $LiveDataType<$T> &&
        T == other.T;
  }
}

/// from: androidx.lifecycle.Observer
class Observer<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<Observer<$T>> $type = type(T);

  final jni.JObjType<$T> T;

  Observer.fromReference(
    this.T,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"androidx/lifecycle/Observer");

  /// The type which includes information such as the signature of this class.
  static $ObserverType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $ObserverType(
      T,
    );
  }

  static final _id_onChanged = _class.instanceMethodId(
    r"onChanged",
    r"(Ljava/lang/Object;)V",
  );

  static final _onChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onChanged(T object)
  void onChanged(
    $T object,
  ) {
    _onChanged(reference.pointer, _id_onChanged as jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ObserverImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onChanged(Ljava/lang/Object;)V") {
        _$impls[$p]!.onChanged(
          $a[0].castTo(_$impls[$p]!.T, releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Observer.implement(
    $ObserverImpl<$T> $impl,
  ) {
    final $p = ReceivePort();
    final $x = Observer.fromReference(
      $impl.T,
      ProtectedJniExtensions.newPortProxy(
        r"androidx.lifecycle.Observer",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ObserverImpl<$T extends jni.JObject> {
  factory $ObserverImpl({
    required jni.JObjType<$T> T,
    required void Function($T object) onChanged,
  }) = _$ObserverImpl;

  jni.JObjType<$T> get T;

  void onChanged($T object);
}

class _$ObserverImpl<$T extends jni.JObject> implements $ObserverImpl<$T> {
  _$ObserverImpl({
    required this.T,
    required void Function($T object) onChanged,
  }) : _onChanged = onChanged;

  @override
  final jni.JObjType<$T> T;

  final void Function($T object) _onChanged;

  void onChanged($T object) {
    return _onChanged(object);
  }
}

final class $ObserverType<$T extends jni.JObject>
    extends jni.JObjType<Observer<$T>> {
  final jni.JObjType<$T> T;

  const $ObserverType(
    this.T,
  );

  @override
  String get signature => r"Landroidx/lifecycle/Observer;";

  @override
  Observer<$T> fromReference(jni.JReference reference) =>
      Observer.fromReference(T, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($ObserverType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ObserverType<$T>) &&
        other is $ObserverType<$T> &&
        T == other.T;
  }
}

/// from: com.google.common.util.concurrent.ListenableFuture
class ListenableFuture<$V extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<ListenableFuture<$V>> $type = type(V);

  final jni.JObjType<$V> V;

  ListenableFuture.fromReference(
    this.V,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"com/google/common/util/concurrent/ListenableFuture");

  /// The type which includes information such as the signature of this class.
  static $ListenableFutureType<$V> type<$V extends jni.JObject>(
    jni.JObjType<$V> V,
  ) {
    return $ListenableFutureType(
      V,
    );
  }

  static final _id_addListener = _class.instanceMethodId(
    r"addListener",
    r"(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)V",
  );

  static final _addListener = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void addListener(java.lang.Runnable runnable, java.util.concurrent.Executor executor)
  void addListener(
    Runnable runnable,
    Executor executor,
  ) {
    _addListener(reference.pointer, _id_addListener as jni.JMethodIDPtr,
            runnable.reference.pointer, executor.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ListenableFutureImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r"addListener(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)V") {
        _$impls[$p]!.addListener(
          $a[0].castTo(const $RunnableType(), releaseOriginal: true),
          $a[1].castTo(const $ExecutorType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory ListenableFuture.implement(
    $ListenableFutureImpl<$V> $impl,
  ) {
    final $p = ReceivePort();
    final $x = ListenableFuture.fromReference(
      $impl.V,
      ProtectedJniExtensions.newPortProxy(
        r"com.google.common.util.concurrent.ListenableFuture",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ListenableFutureImpl<$V extends jni.JObject> {
  factory $ListenableFutureImpl({
    required jni.JObjType<$V> V,
    required void Function(Runnable runnable, Executor executor) addListener,
  }) = _$ListenableFutureImpl;

  jni.JObjType<$V> get V;

  void addListener(Runnable runnable, Executor executor);
}

class _$ListenableFutureImpl<$V extends jni.JObject>
    implements $ListenableFutureImpl<$V> {
  _$ListenableFutureImpl({
    required this.V,
    required void Function(Runnable runnable, Executor executor) addListener,
  }) : _addListener = addListener;

  @override
  final jni.JObjType<$V> V;

  final void Function(Runnable runnable, Executor executor) _addListener;

  void addListener(Runnable runnable, Executor executor) {
    return _addListener(runnable, executor);
  }
}

final class $ListenableFutureType<$V extends jni.JObject>
    extends jni.JObjType<ListenableFuture<$V>> {
  final jni.JObjType<$V> V;

  const $ListenableFutureType(
    this.V,
  );

  @override
  String get signature =>
      r"Lcom/google/common/util/concurrent/ListenableFuture;";

  @override
  ListenableFuture<$V> fromReference(jni.JReference reference) =>
      ListenableFuture.fromReference(V, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($ListenableFutureType, V);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ListenableFutureType<$V>) &&
        other is $ListenableFutureType<$V> &&
        V == other.V;
  }
}

/// from: java.lang.Runnable
class Runnable extends jni.JObject {
  @override
  late final jni.JObjType<Runnable> $type = type;

  Runnable.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"java/lang/Runnable");

  /// The type which includes information such as the signature of this class.
  static const type = $RunnableType();
  static final _id_run = _class.instanceMethodId(
    r"run",
    r"()V",
  );

  static final _run = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void run()
  void run() {
    _run(reference.pointer, _id_run as jni.JMethodIDPtr).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $RunnableImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"run()V") {
        _$impls[$p]!.run();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Runnable.implement(
    $RunnableImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Runnable.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"java.lang.Runnable",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $RunnableImpl {
  factory $RunnableImpl({
    required void Function() run,
  }) = _$RunnableImpl;

  void run();
}

class _$RunnableImpl implements $RunnableImpl {
  _$RunnableImpl({
    required void Function() run,
  }) : _run = run;

  final void Function() _run;

  void run() {
    return _run();
  }
}

final class $RunnableType extends jni.JObjType<Runnable> {
  const $RunnableType();

  @override
  String get signature => r"Ljava/lang/Runnable;";

  @override
  Runnable fromReference(jni.JReference reference) =>
      Runnable.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($RunnableType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($RunnableType) && other is $RunnableType;
  }
}

/// from: java.util.concurrent.Executor
class Executor extends jni.JObject {
  @override
  late final jni.JObjType<Executor> $type = type;

  Executor.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"java/util/concurrent/Executor");

  /// The type which includes information such as the signature of this class.
  static const type = $ExecutorType();
  static final _id_execute = _class.instanceMethodId(
    r"execute",
    r"(Ljava/lang/Runnable;)V",
  );

  static final _execute = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void execute(java.lang.Runnable runnable)
  void execute(
    Runnable runnable,
  ) {
    _execute(reference.pointer, _id_execute as jni.JMethodIDPtr,
            runnable.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ExecutorImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"execute(Ljava/lang/Runnable;)V") {
        _$impls[$p]!.execute(
          $a[0].castTo(const $RunnableType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Executor.implement(
    $ExecutorImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Executor.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"java.util.concurrent.Executor",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ExecutorImpl {
  factory $ExecutorImpl({
    required void Function(Runnable runnable) execute,
  }) = _$ExecutorImpl;

  void execute(Runnable runnable);
}

class _$ExecutorImpl implements $ExecutorImpl {
  _$ExecutorImpl({
    required void Function(Runnable runnable) execute,
  }) : _execute = execute;

  final void Function(Runnable runnable) _execute;

  void execute(Runnable runnable) {
    return _execute(runnable);
  }
}

final class $ExecutorType extends jni.JObjType<Executor> {
  const $ExecutorType();

  @override
  String get signature => r"Ljava/util/concurrent/Executor;";

  @override
  Executor fromReference(jni.JReference reference) =>
      Executor.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ExecutorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExecutorType) && other is $ExecutorType;
  }
}

/// from: java.util.concurrent.Executors
class Executors extends jni.JObject {
  @override
  late final jni.JObjType<Executors> $type = type;

  Executors.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"java/util/concurrent/Executors");

  /// The type which includes information such as the signature of this class.
  static const type = $ExecutorsType();
  static final _id_newFixedThreadPool = _class.staticMethodId(
    r"newFixedThreadPool",
    r"(I)Ljava/util/concurrent/ExecutorService;",
  );

  static final _newFixedThreadPool = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public java.util.concurrent.ExecutorService newFixedThreadPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newFixedThreadPool(
    int i,
  ) {
    return _newFixedThreadPool(_class.reference.pointer,
            _id_newFixedThreadPool as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_newWorkStealingPool = _class.staticMethodId(
    r"newWorkStealingPool",
    r"(I)Ljava/util/concurrent/ExecutorService;",
  );

  static final _newWorkStealingPool = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public java.util.concurrent.ExecutorService newWorkStealingPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newWorkStealingPool(
    int i,
  ) {
    return _newWorkStealingPool(_class.reference.pointer,
            _id_newWorkStealingPool as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_newWorkStealingPool1 = _class.staticMethodId(
    r"newWorkStealingPool",
    r"()Ljava/util/concurrent/ExecutorService;",
  );

  static final _newWorkStealingPool1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.concurrent.ExecutorService newWorkStealingPool()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newWorkStealingPool1() {
    return _newWorkStealingPool1(_class.reference.pointer,
            _id_newWorkStealingPool1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_newFixedThreadPool1 = _class.staticMethodId(
    r"newFixedThreadPool",
    r"(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;",
  );

  static final _newFixedThreadPool1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newFixedThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newFixedThreadPool1(
    int i,
    jni.JObject threadFactory,
  ) {
    return _newFixedThreadPool1(
            _class.reference.pointer,
            _id_newFixedThreadPool1 as jni.JMethodIDPtr,
            i,
            threadFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_newSingleThreadExecutor = _class.staticMethodId(
    r"newSingleThreadExecutor",
    r"()Ljava/util/concurrent/ExecutorService;",
  );

  static final _newSingleThreadExecutor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.concurrent.ExecutorService newSingleThreadExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadExecutor() {
    return _newSingleThreadExecutor(_class.reference.pointer,
            _id_newSingleThreadExecutor as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_newSingleThreadExecutor1 = _class.staticMethodId(
    r"newSingleThreadExecutor",
    r"(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;",
  );

  static final _newSingleThreadExecutor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadExecutor1(
    jni.JObject threadFactory,
  ) {
    return _newSingleThreadExecutor1(
            _class.reference.pointer,
            _id_newSingleThreadExecutor1 as jni.JMethodIDPtr,
            threadFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_newCachedThreadPool = _class.staticMethodId(
    r"newCachedThreadPool",
    r"()Ljava/util/concurrent/ExecutorService;",
  );

  static final _newCachedThreadPool = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.concurrent.ExecutorService newCachedThreadPool()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newCachedThreadPool() {
    return _newCachedThreadPool(_class.reference.pointer,
            _id_newCachedThreadPool as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_newCachedThreadPool1 = _class.staticMethodId(
    r"newCachedThreadPool",
    r"(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;",
  );

  static final _newCachedThreadPool1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newCachedThreadPool1(
    jni.JObject threadFactory,
  ) {
    return _newCachedThreadPool1(
            _class.reference.pointer,
            _id_newCachedThreadPool1 as jni.JMethodIDPtr,
            threadFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_newSingleThreadScheduledExecutor = _class.staticMethodId(
    r"newSingleThreadScheduledExecutor",
    r"()Ljava/util/concurrent/ScheduledExecutorService;",
  );

  static final _newSingleThreadScheduledExecutor =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadScheduledExecutor() {
    return _newSingleThreadScheduledExecutor(_class.reference.pointer,
            _id_newSingleThreadScheduledExecutor as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_newSingleThreadScheduledExecutor1 = _class.staticMethodId(
    r"newSingleThreadScheduledExecutor",
    r"(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;",
  );

  static final _newSingleThreadScheduledExecutor1 =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newSingleThreadScheduledExecutor1(
    jni.JObject threadFactory,
  ) {
    return _newSingleThreadScheduledExecutor1(
            _class.reference.pointer,
            _id_newSingleThreadScheduledExecutor1 as jni.JMethodIDPtr,
            threadFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_newScheduledThreadPool = _class.staticMethodId(
    r"newScheduledThreadPool",
    r"(I)Ljava/util/concurrent/ScheduledExecutorService;",
  );

  static final _newScheduledThreadPool = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newScheduledThreadPool(
    int i,
  ) {
    return _newScheduledThreadPool(_class.reference.pointer,
            _id_newScheduledThreadPool as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_newScheduledThreadPool1 = _class.staticMethodId(
    r"newScheduledThreadPool",
    r"(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;",
  );

  static final _newScheduledThreadPool1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject newScheduledThreadPool1(
    int i,
    jni.JObject threadFactory,
  ) {
    return _newScheduledThreadPool1(
            _class.reference.pointer,
            _id_newScheduledThreadPool1 as jni.JMethodIDPtr,
            i,
            threadFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_unconfigurableExecutorService = _class.staticMethodId(
    r"unconfigurableExecutorService",
    r"(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;",
  );

  static final _unconfigurableExecutorService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService executorService)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject unconfigurableExecutorService(
    jni.JObject executorService,
  ) {
    return _unconfigurableExecutorService(
            _class.reference.pointer,
            _id_unconfigurableExecutorService as jni.JMethodIDPtr,
            executorService.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_unconfigurableScheduledExecutorService =
      _class.staticMethodId(
    r"unconfigurableScheduledExecutorService",
    r"(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;",
  );

  static final _unconfigurableScheduledExecutorService =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService scheduledExecutorService)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject unconfigurableScheduledExecutorService(
    jni.JObject scheduledExecutorService,
  ) {
    return _unconfigurableScheduledExecutorService(
            _class.reference.pointer,
            _id_unconfigurableScheduledExecutorService as jni.JMethodIDPtr,
            scheduledExecutorService.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_defaultThreadFactory = _class.staticMethodId(
    r"defaultThreadFactory",
    r"()Ljava/util/concurrent/ThreadFactory;",
  );

  static final _defaultThreadFactory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.concurrent.ThreadFactory defaultThreadFactory()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject defaultThreadFactory() {
    return _defaultThreadFactory(_class.reference.pointer,
            _id_defaultThreadFactory as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_privilegedThreadFactory = _class.staticMethodId(
    r"privilegedThreadFactory",
    r"()Ljava/util/concurrent/ThreadFactory;",
  );

  static final _privilegedThreadFactory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.concurrent.ThreadFactory privilegedThreadFactory()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject privilegedThreadFactory() {
    return _privilegedThreadFactory(_class.reference.pointer,
            _id_privilegedThreadFactory as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_callable = _class.staticMethodId(
    r"callable",
    r"(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;",
  );

  static final _callable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.lang.Runnable runnable, T object)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable<$T extends jni.JObject>(
    Runnable runnable,
    $T object, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      object.$type,
    ]) as jni.JObjType<$T>;
    return _callable(_class.reference.pointer, _id_callable as jni.JMethodIDPtr,
            runnable.reference.pointer, object.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_callable1 = _class.staticMethodId(
    r"callable",
    r"(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;",
  );

  static final _callable1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.lang.Runnable runnable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable1(
    Runnable runnable,
  ) {
    return _callable1(_class.reference.pointer,
            _id_callable1 as jni.JMethodIDPtr, runnable.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_callable2 = _class.staticMethodId(
    r"callable",
    r"(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;",
  );

  static final _callable2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.security.PrivilegedAction privilegedAction)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable2(
    jni.JObject privilegedAction,
  ) {
    return _callable2(
            _class.reference.pointer,
            _id_callable2 as jni.JMethodIDPtr,
            privilegedAction.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_callable3 = _class.staticMethodId(
    r"callable",
    r"(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;",
  );

  static final _callable3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction privilegedExceptionAction)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject callable3(
    jni.JObject privilegedExceptionAction,
  ) {
    return _callable3(
            _class.reference.pointer,
            _id_callable3 as jni.JMethodIDPtr,
            privilegedExceptionAction.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_privilegedCallable = _class.staticMethodId(
    r"privilegedCallable",
    r"(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;",
  );

  static final _privilegedCallable = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable callable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject privilegedCallable<$T extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$T> T,
  }) {
    return _privilegedCallable(
            _class.reference.pointer,
            _id_privilegedCallable as jni.JMethodIDPtr,
            callable.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_privilegedCallableUsingCurrentClassLoader =
      _class.staticMethodId(
    r"privilegedCallableUsingCurrentClassLoader",
    r"(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;",
  );

  static final _privilegedCallableUsingCurrentClassLoader =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable callable)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject
      privilegedCallableUsingCurrentClassLoader<$T extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$T> T,
  }) {
    return _privilegedCallableUsingCurrentClassLoader(
            _class.reference.pointer,
            _id_privilegedCallableUsingCurrentClassLoader as jni.JMethodIDPtr,
            callable.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $ExecutorsType extends jni.JObjType<Executors> {
  const $ExecutorsType();

  @override
  String get signature => r"Ljava/util/concurrent/Executors;";

  @override
  Executors fromReference(jni.JReference reference) =>
      Executors.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ExecutorsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExecutorsType) && other is $ExecutorsType;
  }
}

/// from: java.util.concurrent.Future
class Future<$V extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<Future<$V>> $type = type(V);

  final jni.JObjType<$V> V;

  Future.fromReference(
    this.V,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"java/util/concurrent/Future");

  /// The type which includes information such as the signature of this class.
  static $FutureType<$V> type<$V extends jni.JObject>(
    jni.JObjType<$V> V,
  ) {
    return $FutureType(
      V,
    );
  }

  static final _id_cancel = _class.instanceMethodId(
    r"cancel",
    r"(Z)Z",
  );

  static final _cancel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract boolean cancel(boolean z)
  bool cancel(
    bool z,
  ) {
    return _cancel(reference.pointer, _id_cancel as jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_isCancelled = _class.instanceMethodId(
    r"isCancelled",
    r"()Z",
  );

  static final _isCancelled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isCancelled()
  bool isCancelled() {
    return _isCancelled(reference.pointer, _id_isCancelled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDone = _class.instanceMethodId(
    r"isDone",
    r"()Z",
  );

  static final _isDone = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isDone()
  bool isDone() {
    return _isDone(reference.pointer, _id_isDone as jni.JMethodIDPtr).boolean;
  }

  static final _id_get0 = _class.instanceMethodId(
    r"get",
    r"()Ljava/lang/Object;",
  );

  static final _get0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract V get()
  /// The returned object must be released after use, by calling the [release] method.
  $V get0() {
    return _get0(reference.pointer, _id_get0 as jni.JMethodIDPtr).object(V);
  }

  static final _id_get1 = _class.instanceMethodId(
    r"get",
    r"(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;",
  );

  static final _get1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract V get(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be released after use, by calling the [release] method.
  $V get1(
    int j,
    jni.JObject timeUnit,
  ) {
    return _get1(reference.pointer, _id_get1 as jni.JMethodIDPtr, j,
            timeUnit.reference.pointer)
        .object(V);
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FutureImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"cancel(Z)Z") {
        final $r = _$impls[$p]!.cancel(
          $a[0]
              .castTo(const jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"isCancelled()Z") {
        final $r = _$impls[$p]!.isCancelled();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"isDone()Z") {
        final $r = _$impls[$p]!.isDone();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r"get()Ljava/lang/Object;") {
        final $r = _$impls[$p]!.get0();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r"get(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;") {
        final $r = _$impls[$p]!.get1(
          $a[0]
              .castTo(const jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Future.implement(
    $FutureImpl<$V> $impl,
  ) {
    final $p = ReceivePort();
    final $x = Future.fromReference(
      $impl.V,
      ProtectedJniExtensions.newPortProxy(
        r"java.util.concurrent.Future",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FutureImpl<$V extends jni.JObject> {
  factory $FutureImpl({
    required jni.JObjType<$V> V,
    required bool Function(bool z) cancel,
    required bool Function() isCancelled,
    required bool Function() isDone,
    required $V Function() get0,
    required $V Function(int j, jni.JObject timeUnit) get1,
  }) = _$FutureImpl;

  jni.JObjType<$V> get V;

  bool cancel(bool z);
  bool isCancelled();
  bool isDone();
  $V get0();
  $V get1(int j, jni.JObject timeUnit);
}

class _$FutureImpl<$V extends jni.JObject> implements $FutureImpl<$V> {
  _$FutureImpl({
    required this.V,
    required bool Function(bool z) cancel,
    required bool Function() isCancelled,
    required bool Function() isDone,
    required $V Function() get0,
    required $V Function(int j, jni.JObject timeUnit) get1,
  })  : _cancel = cancel,
        _isCancelled = isCancelled,
        _isDone = isDone,
        _get0 = get0,
        _get1 = get1;

  @override
  final jni.JObjType<$V> V;

  final bool Function(bool z) _cancel;
  final bool Function() _isCancelled;
  final bool Function() _isDone;
  final $V Function() _get0;
  final $V Function(int j, jni.JObject timeUnit) _get1;

  bool cancel(bool z) {
    return _cancel(z);
  }

  bool isCancelled() {
    return _isCancelled();
  }

  bool isDone() {
    return _isDone();
  }

  $V get0() {
    return _get0();
  }

  $V get1(int j, jni.JObject timeUnit) {
    return _get1(j, timeUnit);
  }
}

final class $FutureType<$V extends jni.JObject>
    extends jni.JObjType<Future<$V>> {
  final jni.JObjType<$V> V;

  const $FutureType(
    this.V,
  );

  @override
  String get signature => r"Ljava/util/concurrent/Future;";

  @override
  Future<$V> fromReference(jni.JReference reference) =>
      Future.fromReference(V, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($FutureType, V);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FutureType<$V>) &&
        other is $FutureType<$V> &&
        V == other.V;
  }
}

/// from: dev.hebei.camerax_android.OnImageCapturedCallback
class OnImageCapturedCallback extends jni.JObject {
  @override
  late final jni.JObjType<OnImageCapturedCallback> $type = type;

  OnImageCapturedCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"dev/hebei/camerax_android/OnImageCapturedCallback");

  /// The type which includes information such as the signature of this class.
  static const type = $OnImageCapturedCallbackType();
  static final _id_onCaptureSuccess = _class.instanceMethodId(
    r"onCaptureSuccess",
    r"(Landroidx/camera/core/ImageProxy;)V",
  );

  static final _onCaptureSuccess = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onCaptureSuccess(androidx.camera.core.ImageProxy imageProxy)
  void onCaptureSuccess(
    ImageProxy imageProxy,
  ) {
    _onCaptureSuccess(
            reference.pointer,
            _id_onCaptureSuccess as jni.JMethodIDPtr,
            imageProxy.reference.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r"onError",
    r"(Landroidx/camera/core/ImageCaptureException;)V",
  );

  static final _onError = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onError(androidx.camera.core.ImageCaptureException imageCaptureException)
  void onError(
    jni.JObject imageCaptureException,
  ) {
    _onError(reference.pointer, _id_onError as jni.JMethodIDPtr,
            imageCaptureException.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $OnImageCapturedCallbackImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onCaptureSuccess(Landroidx/camera/core/ImageProxy;)V") {
        _$impls[$p]!.onCaptureSuccess(
          $a[0].castTo(const $ImageProxyType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"onError(Landroidx/camera/core/ImageCaptureException;)V") {
        _$impls[$p]!.onError(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory OnImageCapturedCallback.implement(
    $OnImageCapturedCallbackImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = OnImageCapturedCallback.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"dev.hebei.camerax_android.OnImageCapturedCallback",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $OnImageCapturedCallbackImpl {
  factory $OnImageCapturedCallbackImpl({
    required void Function(ImageProxy imageProxy) onCaptureSuccess,
    required void Function(jni.JObject imageCaptureException) onError,
  }) = _$OnImageCapturedCallbackImpl;

  void onCaptureSuccess(ImageProxy imageProxy);
  void onError(jni.JObject imageCaptureException);
}

class _$OnImageCapturedCallbackImpl implements $OnImageCapturedCallbackImpl {
  _$OnImageCapturedCallbackImpl({
    required void Function(ImageProxy imageProxy) onCaptureSuccess,
    required void Function(jni.JObject imageCaptureException) onError,
  })  : _onCaptureSuccess = onCaptureSuccess,
        _onError = onError;

  final void Function(ImageProxy imageProxy) _onCaptureSuccess;
  final void Function(jni.JObject imageCaptureException) _onError;

  void onCaptureSuccess(ImageProxy imageProxy) {
    return _onCaptureSuccess(imageProxy);
  }

  void onError(jni.JObject imageCaptureException) {
    return _onError(imageCaptureException);
  }
}

final class $OnImageCapturedCallbackType
    extends jni.JObjType<OnImageCapturedCallback> {
  const $OnImageCapturedCallbackType();

  @override
  String get signature =>
      r"Ldev/hebei/camerax_android/OnImageCapturedCallback;";

  @override
  OnImageCapturedCallback fromReference(jni.JReference reference) =>
      OnImageCapturedCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OnImageCapturedCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OnImageCapturedCallbackType) &&
        other is $OnImageCapturedCallbackType;
  }
}

/// from: dev.hebei.camerax_android.OnImageCapturedCallbackImpl
class OnImageCapturedCallbackImpl extends ImageCapture_OnImageCapturedCallback {
  @override
  late final jni.JObjType<OnImageCapturedCallbackImpl> $type = type;

  OnImageCapturedCallbackImpl.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"dev/hebei/camerax_android/OnImageCapturedCallbackImpl");

  /// The type which includes information such as the signature of this class.
  static const type = $OnImageCapturedCallbackImplType();
  static final _id_new1 = _class.constructorId(
    r"(Ldev/hebei/camerax_android/OnImageCapturedCallback;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(dev.hebei.camerax_android.OnImageCapturedCallback onImageCapturedCallback)
  /// The returned object must be released after use, by calling the [release] method.
  factory OnImageCapturedCallbackImpl.new1(
    OnImageCapturedCallback onImageCapturedCallback,
  ) {
    return OnImageCapturedCallbackImpl.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            onImageCapturedCallback.reference.pointer)
        .reference);
  }

  static final _id_onCaptureSuccess = _class.instanceMethodId(
    r"onCaptureSuccess",
    r"(Landroidx/camera/core/ImageProxy;)V",
  );

  static final _onCaptureSuccess = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onCaptureSuccess(androidx.camera.core.ImageProxy imageProxy)
  void onCaptureSuccess(
    ImageProxy imageProxy,
  ) {
    _onCaptureSuccess(
            reference.pointer,
            _id_onCaptureSuccess as jni.JMethodIDPtr,
            imageProxy.reference.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r"onError",
    r"(Landroidx/camera/core/ImageCaptureException;)V",
  );

  static final _onError = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onError(androidx.camera.core.ImageCaptureException imageCaptureException)
  void onError(
    jni.JObject imageCaptureException,
  ) {
    _onError(reference.pointer, _id_onError as jni.JMethodIDPtr,
            imageCaptureException.reference.pointer)
        .check();
  }
}

final class $OnImageCapturedCallbackImplType
    extends jni.JObjType<OnImageCapturedCallbackImpl> {
  const $OnImageCapturedCallbackImplType();

  @override
  String get signature =>
      r"Ldev/hebei/camerax_android/OnImageCapturedCallbackImpl;";

  @override
  OnImageCapturedCallbackImpl fromReference(jni.JReference reference) =>
      OnImageCapturedCallbackImpl.fromReference(reference);

  @override
  jni.JObjType get superType =>
      const $ImageCapture_OnImageCapturedCallbackType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($OnImageCapturedCallbackImplType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OnImageCapturedCallbackImplType) &&
        other is $OnImageCapturedCallbackImplType;
  }
}

/// from: dev.hebei.camerax_android.PreviewViewFactory
class PreviewViewFactory extends jni.JObject {
  @override
  late final jni.JObjType<PreviewViewFactory> $type = type;

  PreviewViewFactory.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"dev/hebei/camerax_android/PreviewViewFactory");

  /// The type which includes information such as the signature of this class.
  static const type = $PreviewViewFactoryType();
  static final _id_INSTANCE = _class.staticFieldId(
    r"INSTANCE",
    r"Ldev/hebei/camerax_android/PreviewViewFactory;",
  );

  /// from: static public final dev.hebei.camerax_android.PreviewViewFactory INSTANCE
  /// The returned object must be released after use, by calling the [release] method.
  static PreviewViewFactory get INSTANCE =>
      _id_INSTANCE.get(_class, const $PreviewViewFactoryType());

  static final _id_create = _class.instanceMethodId(
    r"create",
    r"(Landroid/content/Context;ILjava/lang/Object;)Lio/flutter/plugin/platform/PlatformView;",
  );

  static final _create = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public io.flutter.plugin.platform.PlatformView create(android.content.Context context, int i, java.lang.Object object)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject create(
    Context context,
    int i,
    jni.JObject object,
  ) {
    return _create(reference.pointer, _id_create as jni.JMethodIDPtr,
            context.reference.pointer, i, object.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_retrieveView = _class.instanceMethodId(
    r"retrieveView",
    r"(I)Landroidx/camera/view/PreviewView;",
  );

  static final _retrieveView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final androidx.camera.view.PreviewView retrieveView(int i)
  /// The returned object must be released after use, by calling the [release] method.
  PreviewView retrieveView(
    int i,
  ) {
    return _retrieveView(
            reference.pointer, _id_retrieveView as jni.JMethodIDPtr, i)
        .object(const $PreviewViewType());
  }
}

final class $PreviewViewFactoryType extends jni.JObjType<PreviewViewFactory> {
  const $PreviewViewFactoryType();

  @override
  String get signature => r"Ldev/hebei/camerax_android/PreviewViewFactory;";

  @override
  PreviewViewFactory fromReference(jni.JReference reference) =>
      PreviewViewFactory.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PreviewViewFactoryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PreviewViewFactoryType) &&
        other is $PreviewViewFactoryType;
  }
}
