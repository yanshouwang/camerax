// Autogenerated from Pigeon (v20.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.hebei.camerax_android

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class LensFacingArgs(val raw: Int) {
  FRONT(0),
  BACK(1),
  EXTERNAL(2);

  companion object {
    fun ofRaw(raw: Int): LensFacingArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScaleTypeArgs(val raw: Int) {
  FILL_CENTER(0),
  FILL_END(1),
  FILL_START(2),
  FIT_CENTER(3),
  FIT_END(4),
  FIT_START(5);

  companion object {
    fun ofRaw(raw: Int): ScaleTypeArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class LiveDataType(val raw: Int) {
  ZOOM_STATE(0);

  companion object {
    fun ofRaw(raw: Int): LiveDataType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CameraSelectorArgs (
  val lensFacingArgs: LensFacingArgs

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): CameraSelectorArgs {
      val lensFacingArgs = __pigeon_list[0] as LensFacingArgs
      return CameraSelectorArgs(lensFacingArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      lensFacingArgs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ZoomStateArgs (
  val minZoomRatioArgs: Double,
  val maxZoomRatioArgs: Double,
  val linearZoomArgs: Double,
  val zoomRatioArgs: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): ZoomStateArgs {
      val minZoomRatioArgs = __pigeon_list[0] as Double
      val maxZoomRatioArgs = __pigeon_list[1] as Double
      val linearZoomArgs = __pigeon_list[2] as Double
      val zoomRatioArgs = __pigeon_list[3] as Double
      return ZoomStateArgs(minZoomRatioArgs, maxZoomRatioArgs, linearZoomArgs, zoomRatioArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      minZoomRatioArgs,
      maxZoomRatioArgs,
      linearZoomArgs,
      zoomRatioArgs,
    )
  }
}
private object PigeonPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraSelectorArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ZoomStateArgs.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          LensFacingArgs.ofRaw(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          ScaleTypeArgs.ofRaw(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          LiveDataType.ofRaw(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CameraSelectorArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is ZoomStateArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is LensFacingArgs -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is ScaleTypeArgs -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is LiveDataType -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * Host API for managing the native `InstanceManager`.
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface InstanceManagerHostAPI {
  /**
   * Clear the native `InstanceManager`.
   *
   * This is typically only used after a hot restart.
   */
  fun clear()

  companion object {
    /** The codec used by InstanceManagerHostAPI. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec
    }
    /** Sets up an instance of `InstanceManagerHostAPI` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: InstanceManagerHostAPI?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.InstanceManagerHostAPI.clear$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.clear()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/**
 * Handles methods calls to the native Java Object class.
 *
 * Also handles calls to remove the reference to an instance with `dispose`.
 *
 * See https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html.
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface ObjectHostAPI {
  fun dispose(identifier: Long)

  companion object {
    /** The codec used by ObjectHostAPI. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec
    }
    /** Sets up an instance of `ObjectHostAPI` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: ObjectHostAPI?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ObjectHostAPI.dispose$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.dispose(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/**
 * Handles callbacks methods for the native Java Object class.
 *
 * See https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html.
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class ObjectFlutterAPI(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by ObjectFlutterAPI. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec
    }
  }
  fun dispose(identifierArg: Long, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.camerax_android.ObjectFlutterAPI.dispose$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PermissionsManagerHostAPI {
  fun requestPermissions(enableAudioArgs: Boolean, callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by PermissionsManagerHostAPI. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec
    }
    /** Sets up an instance of `PermissionsManagerHostAPI` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: PermissionsManagerHostAPI?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PermissionsManagerHostAPI.requestPermissions$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enableAudioArgsArg = args[0] as Boolean
            api.requestPermissions(enableAudioArgsArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CameraControllerHostAPI {
  fun create(identifier: Long)
  fun bindToLifecycle(identifier: Long)
  fun unbind(identifier: Long)
  fun hasCamera(identifier: Long, cameraSelectorArgs: CameraSelectorArgs): Boolean
  fun setCameraSelector(identifier: Long, cameraSelectorArgs: CameraSelectorArgs)
  fun isTapToFocusEnabled(identifier: Long): Boolean
  fun setTapToFocusEnabled(identifier: Long, enabledArgs: Boolean)
  fun getZoomState(identifier: Long): ZoomStateArgs?
  fun isPinchToZoomEnabled(identifier: Long): Boolean
  fun setPinchToZoomEnabled(identifier: Long, enabledArgs: Boolean)
  fun setLinearZoom(identifier: Long, linearZoomArgs: Double, callback: (Result<Unit>) -> Unit)
  fun setZoomRatio(identifier: Long, zoomRatioArgs: Double, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by CameraControllerHostAPI. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec
    }
    /** Sets up an instance of `CameraControllerHostAPI` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: CameraControllerHostAPI?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.create$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.create(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.bindToLifecycle$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.bindToLifecycle(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.unbind$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.unbind(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.hasCamera$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val cameraSelectorArgsArg = args[1] as CameraSelectorArgs
            val wrapped: List<Any?> = try {
              listOf(api.hasCamera(identifierArg, cameraSelectorArgsArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.setCameraSelector$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val cameraSelectorArgsArg = args[1] as CameraSelectorArgs
            val wrapped: List<Any?> = try {
              api.setCameraSelector(identifierArg, cameraSelectorArgsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.isTapToFocusEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              listOf(api.isTapToFocusEnabled(identifierArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.setTapToFocusEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val enabledArgsArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              api.setTapToFocusEnabled(identifierArg, enabledArgsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.getZoomState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              listOf(api.getZoomState(identifierArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.isPinchToZoomEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              listOf(api.isPinchToZoomEnabled(identifierArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.setPinchToZoomEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val enabledArgsArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              api.setPinchToZoomEnabled(identifierArg, enabledArgsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.setLinearZoom$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val linearZoomArgsArg = args[1] as Double
            api.setLinearZoom(identifierArg, linearZoomArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerHostAPI.setZoomRatio$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val zoomRatioArgsArg = args[1] as Double
            api.setZoomRatio(identifierArg, zoomRatioArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class CameraControllerFlutterAPI(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by CameraControllerFlutterAPI. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec
    }
  }
  fun onZoomStateChanged(zoomStateArgsArg: ZoomStateArgs?, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.camerax_android.CameraControllerFlutterAPI.onZoomStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(zoomStateArgsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PreviewViewHostAPI {
  fun create(identifier: Long)
  fun setController(identifier: Long, controllerIdentifier: Long)
  fun setScaleType(identifier: Long, scaleTypeArgs: ScaleTypeArgs)

  companion object {
    /** The codec used by PreviewViewHostAPI. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec
    }
    /** Sets up an instance of `PreviewViewHostAPI` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: PreviewViewHostAPI?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewViewHostAPI.create$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.create(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewViewHostAPI.setController$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val controllerIdentifierArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.setController(identifierArg, controllerIdentifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewViewHostAPI.setScaleType$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val scaleTypeArgsArg = args[1] as ScaleTypeArgs
            val wrapped: List<Any?> = try {
              api.setScaleType(identifierArg, scaleTypeArgsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ObserverHostAPI {
  fun create(identifier: Long)

  companion object {
    /** The codec used by ObserverHostAPI. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec
    }
    /** Sets up an instance of `ObserverHostAPI` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: ObserverHostAPI?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ObserverHostAPI.create$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.create(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface LiveDataHostAPI {
  fun observe(identifier: Long, observerIdentifier: Long)
  fun removeObservers(identifier: Long)
  fun getValue(identifier: Long, type: LiveDataType): Long?

  companion object {
    /** The codec used by LiveDataHostAPI. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec
    }
    /** Sets up an instance of `LiveDataHostAPI` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: LiveDataHostAPI?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LiveDataHostAPI.observe$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val observerIdentifierArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.observe(identifierArg, observerIdentifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LiveDataHostAPI.removeObservers$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.removeObservers(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LiveDataHostAPI.getValue$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val typeArg = args[1] as LiveDataType
            val wrapped: List<Any?> = try {
              listOf(api.getValue(identifierArg, typeArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class LiveDataFlutterAPI(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by LiveDataFlutterAPI. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec
    }
  }
  fun create(identifierArg: Long, typeArg: LiveDataType, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.camerax_android.LiveDataFlutterAPI.create$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg, typeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
