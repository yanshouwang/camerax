// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.hebei.camerax_android.legacy

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is CameraXError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): CameraXError {
  return CameraXError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class CameraXError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * Objects stored in this container are represented by an object in Dart that is also stored in
 * an InstanceManager with the same identifier.
 *
 * When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * Added instances are added as a weak reference and a strong reference. When the strong
 * reference is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener.onFinalize` is called with the instance's identifier. However, if the strong
 * reference is removed and then the identifier is retrieved with the intention to pass the identifier
 * to Dart (e.g. calling [getIdentifierForStrongReference]), the strong reference to the instance
 * is recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate")
class CameraXPigeonInstanceManager(private val finalizationListener: PigeonFinalizationListener) {
  /** Interface for listening when a weak reference of an instance is removed from the manager.  */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  private val identifiers = java.util.WeakHashMap<Any, Long>()
  private val weakInstances = HashMap<Long, java.lang.ref.WeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<java.lang.ref.WeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  /**
   * Modifies the time interval used to define how often this instance removes garbage collected
   * weak references to native Android objects that this instance was managing.
   */
  var clearFinalizedWeakReferencesInterval: Long = 3000
    set(value) {
      handler.removeCallbacks { this.releaseAllFinalizedInstances() }
      field = value
      releaseAllFinalizedInstances()
    }

  init {
    handler.postDelayed(
      { releaseAllFinalizedInstances() },
      clearFinalizedWeakReferencesInterval
    )
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager with a listener for garbage collected weak
     * references.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     */
    fun create(finalizationListener: PigeonFinalizationListener): CameraXPigeonInstanceManager {
      return CameraXPigeonInstanceManager(finalizationListener)
    }
  }

  /**
   * Removes `identifier` and return its associated strongly referenced instance, if present,
   * from the manager.
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance, if present, otherwise `null`.
   *
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `CameraXPigeonInstanceManager` to have, or recreate, a weak reference to the Dart instance the
   * identifier is associated with.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    val identifier = identifiers[instance]
    if (identifier != null) {
      strongInstances[identifier] = instance!!
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This
   * allows two objects that are equivalent (e.g. the `equals` method returns true and their
   * hashcodes are equal) to both be added.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new unique instance that was instantiated from the host platform.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) { "Instance of ${instance.javaClass} has already been added." }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /** Retrieves the instance associated with identifier, if present, otherwise `null`. */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as java.lang.ref.WeakReference<T>?
    return instance?.get()
  }

  /** Returns whether this manager contains the given `instance`. */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return identifiers.containsKey(instance)
  }

  /**
   * Stops the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks { this.releaseAllFinalizedInstances() }
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: java.lang.ref.WeakReference<Any>?
    while ((referenceQueue.poll() as java.lang.ref.WeakReference<Any>?).also { reference = it } != null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed(
      { releaseAllFinalizedInstances() },
      clearFinalizedWeakReferencesInterval
    )
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = java.lang.ref.WeakReference(instance, referenceQueue)
    identifiers[instance] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
        tag,
        "The manager was used after calls to the PigeonFinalizationListener has been stopped."
      )
    }
  }
}


/** Generated API for managing the Dart and native `InstanceManager`s. */
private class CameraXPigeonInstanceManagerApi(val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by CameraXPigeonInstanceManagerApi. */
    val codec: MessageCodec<Any?> by lazy {
      CameraXPigeonCodec()
    }

    /**
     * Sets up an instance of `CameraXPigeonInstanceManagerApi` to handle messages from the
     * `binaryMessenger`.
     */
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, instanceManager: CameraXPigeonInstanceManager?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PigeonInternalInstanceManager.removeStrongReference", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              instanceManager.remove<Any?>(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PigeonInternalInstanceManager.clear", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              instanceManager.clear()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  fun removeStrongReference(identifierArg: Long, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.camerax_android.PigeonInternalInstanceManager.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * Provides implementations for each ProxyApi implementation and provides access to resources
 * needed by any implementation.
 */
abstract class CameraXPigeonProxyApiRegistrar(val binaryMessenger: BinaryMessenger) {
  /** Whether APIs should ignore calling to Dart. */
  public var ignoreCallsToDart = false
  val instanceManager: CameraXPigeonInstanceManager
  private var _codec: MessageCodec<Any?>? = null
  val codec: MessageCodec<Any?>
    get() {
      if (_codec == null) {
        _codec = CameraXPigeonProxyApiBaseCodec(this)
      }
      return _codec!!
    }

  init {
    val api = CameraXPigeonInstanceManagerApi(binaryMessenger)
    instanceManager = CameraXPigeonInstanceManager.create(
      object : CameraXPigeonInstanceManager.PigeonFinalizationListener {
        override fun onFinalize(identifier: Long) {
          api.removeStrongReference(identifier) {
            if (it.isFailure) {
              Log.e(
                "PigeonProxyApiRegistrar",
                "Failed to remove Dart strong reference with identifier: $identifier"
              )
            }
          }
        }
      }
    )
  }
  /**
   * An implementation of [PigeonApiPermissionManager] used to add a new Dart instance of
   * `PermissionManager` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPermissionManager(): PigeonApiPermissionManager

  /**
   * An implementation of [PigeonApiAutoCloseable] used to add a new Dart instance of
   * `AutoCloseable` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAutoCloseable(): PigeonApiAutoCloseable

  /**
   * An implementation of [PigeonApiCloseable] used to add a new Dart instance of
   * `Closeable` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiCloseable(): PigeonApiCloseable
  {
    return PigeonApiCloseable(this)
  }

  /**
   * An implementation of [PigeonApiLocation] used to add a new Dart instance of
   * `Location` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiLocation(): PigeonApiLocation

  /**
   * An implementation of [PigeonApiSize] used to add a new Dart instance of
   * `Size` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiSize(): PigeonApiSize

  /**
   * An implementation of [PigeonApiPoint] used to add a new Dart instance of
   * `Point` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPoint(): PigeonApiPoint

  /**
   * An implementation of [PigeonApiPointF] used to add a new Dart instance of
   * `PointF` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPointF(): PigeonApiPointF

  /**
   * An implementation of [PigeonApiRect] used to add a new Dart instance of
   * `Rect` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiRect(): PigeonApiRect

  /**
   * An implementation of [PigeonApiIntRange] used to add a new Dart instance of
   * `IntRange` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiIntRange(): PigeonApiIntRange

  /**
   * An implementation of [PigeonApiCameraSelector] used to add a new Dart instance of
   * `CameraSelector` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraSelector(): PigeonApiCameraSelector

  /**
   * An implementation of [PigeonApiCameraStateLiveData] used to add a new Dart instance of
   * `CameraStateLiveData` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraStateLiveData(): PigeonApiCameraStateLiveData

  /**
   * An implementation of [PigeonApiCameraStateObserver] used to add a new Dart instance of
   * `CameraStateObserver` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraStateObserver(): PigeonApiCameraStateObserver

  /**
   * An implementation of [PigeonApiTorchStateLiveData] used to add a new Dart instance of
   * `TorchStateLiveData` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiTorchStateLiveData(): PigeonApiTorchStateLiveData

  /**
   * An implementation of [PigeonApiTorchStateObserver] used to add a new Dart instance of
   * `TorchStateObserver` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiTorchStateObserver(): PigeonApiTorchStateObserver

  /**
   * An implementation of [PigeonApiZoomState] used to add a new Dart instance of
   * `ZoomState` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomState(): PigeonApiZoomState

  /**
   * An implementation of [PigeonApiZoomStateLiveData] used to add a new Dart instance of
   * `ZoomStateLiveData` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomStateLiveData(): PigeonApiZoomStateLiveData

  /**
   * An implementation of [PigeonApiZoomStateObserver] used to add a new Dart instance of
   * `ZoomStateObserver` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomStateObserver(): PigeonApiZoomStateObserver

  /**
   * An implementation of [PigeonApiExposureState] used to add a new Dart instance of
   * `ExposureState` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiExposureState(): PigeonApiExposureState

  /**
   * An implementation of [PigeonApiMeteringPoint] used to add a new Dart instance of
   * `MeteringPoint` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMeteringPoint(): PigeonApiMeteringPoint

  /**
   * An implementation of [PigeonApiMeteringPointFactory] used to add a new Dart instance of
   * `MeteringPointFactory` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMeteringPointFactory(): PigeonApiMeteringPointFactory

  /**
   * An implementation of [PigeonApiSurfaceOrientedMeteringPointFactory] used to add a new Dart instance of
   * `SurfaceOrientedMeteringPointFactory` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiSurfaceOrientedMeteringPointFactory(): PigeonApiSurfaceOrientedMeteringPointFactory

  /**
   * An implementation of [PigeonApiMeteringPointArgs] used to add a new Dart instance of
   * `MeteringPointArgs` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMeteringPointArgs(): PigeonApiMeteringPointArgs

  /**
   * An implementation of [PigeonApiDurationArgs] used to add a new Dart instance of
   * `DurationArgs` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiDurationArgs(): PigeonApiDurationArgs

  /**
   * An implementation of [PigeonApiFocusMeteringAction] used to add a new Dart instance of
   * `FocusMeteringAction` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFocusMeteringAction(): PigeonApiFocusMeteringAction

  /**
   * An implementation of [PigeonApiFocusMeteringResult] used to add a new Dart instance of
   * `FocusMeteringResult` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFocusMeteringResult(): PigeonApiFocusMeteringResult

  /**
   * An implementation of [PigeonApiDynamicRange] used to add a new Dart instance of
   * `DynamicRange` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiDynamicRange(): PigeonApiDynamicRange

  /**
   * An implementation of [PigeonApiCameraInfo] used to add a new Dart instance of
   * `CameraInfo` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraInfo(): PigeonApiCameraInfo

  /**
   * An implementation of [PigeonApiCameraControl] used to add a new Dart instance of
   * `CameraControl` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraControl(): PigeonApiCameraControl

  /**
   * An implementation of [PigeonApiAspectRatioStrategy] used to add a new Dart instance of
   * `AspectRatioStrategy` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAspectRatioStrategy(): PigeonApiAspectRatioStrategy

  /**
   * An implementation of [PigeonApiResolutionFilter] used to add a new Dart instance of
   * `ResolutionFilter` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiResolutionFilter(): PigeonApiResolutionFilter

  /**
   * An implementation of [PigeonApiResolutionStrategy] used to add a new Dart instance of
   * `ResolutionStrategy` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiResolutionStrategy(): PigeonApiResolutionStrategy

  /**
   * An implementation of [PigeonApiResolutionSelector] used to add a new Dart instance of
   * `ResolutionSelector` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiResolutionSelector(): PigeonApiResolutionSelector

  /**
   * An implementation of [PigeonApiImageInfo] used to add a new Dart instance of
   * `ImageInfo` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImageInfo(): PigeonApiImageInfo

  /**
   * An implementation of [PigeonApiPlaneProxy] used to add a new Dart instance of
   * `PlaneProxy` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPlaneProxy(): PigeonApiPlaneProxy

  /**
   * An implementation of [PigeonApiImageProxy] used to add a new Dart instance of
   * `ImageProxy` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImageProxy(): PigeonApiImageProxy

  /**
   * An implementation of [PigeonApiMetadata] used to add a new Dart instance of
   * `Metadata` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMetadata(): PigeonApiMetadata

  /**
   * An implementation of [PigeonApiOutputFileOptions] used to add a new Dart instance of
   * `OutputFileOptions` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOutputFileOptions(): PigeonApiOutputFileOptions

  /**
   * An implementation of [PigeonApiOutputFileResults] used to add a new Dart instance of
   * `OutputFileResults` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOutputFileResults(): PigeonApiOutputFileResults

  /**
   * An implementation of [PigeonApiOnImageCapturedCallback] used to add a new Dart instance of
   * `OnImageCapturedCallback` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOnImageCapturedCallback(): PigeonApiOnImageCapturedCallback

  /**
   * An implementation of [PigeonApiOnImageSavedCallback] used to add a new Dart instance of
   * `OnImageSavedCallback` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOnImageSavedCallback(): PigeonApiOnImageSavedCallback

  /**
   * An implementation of [PigeonApiAnalyzer] used to add a new Dart instance of
   * `Analyzer` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiAnalyzer(): PigeonApiAnalyzer
  {
    return PigeonApiAnalyzer(this)
  }

  /**
   * An implementation of [PigeonApiImageAnalyzer] used to add a new Dart instance of
   * `ImageAnalyzer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImageAnalyzer(): PigeonApiImageAnalyzer

  /**
   * An implementation of [PigeonApiJpegAnalyzer] used to add a new Dart instance of
   * `JpegAnalyzer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiJpegAnalyzer(): PigeonApiJpegAnalyzer

  /**
   * An implementation of [PigeonApiDetector] used to add a new Dart instance of
   * `Detector` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiDetector(): PigeonApiDetector
  {
    return PigeonApiDetector(this)
  }

  /**
   * An implementation of [PigeonApiAddress] used to add a new Dart instance of
   * `Address` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAddress(): PigeonApiAddress

  /**
   * An implementation of [PigeonApiCalendarDateTime] used to add a new Dart instance of
   * `CalendarDateTime` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCalendarDateTime(): PigeonApiCalendarDateTime

  /**
   * An implementation of [PigeonApiCalendarEvent] used to add a new Dart instance of
   * `CalendarEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCalendarEvent(): PigeonApiCalendarEvent

  /**
   * An implementation of [PigeonApiContactInfo] used to add a new Dart instance of
   * `ContactInfo` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiContactInfo(): PigeonApiContactInfo

  /**
   * An implementation of [PigeonApiDriverLicense] used to add a new Dart instance of
   * `DriverLicense` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiDriverLicense(): PigeonApiDriverLicense

  /**
   * An implementation of [PigeonApiEmail] used to add a new Dart instance of
   * `Email` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiEmail(): PigeonApiEmail

  /**
   * An implementation of [PigeonApiGeoPoint] used to add a new Dart instance of
   * `GeoPoint` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiGeoPoint(): PigeonApiGeoPoint

  /**
   * An implementation of [PigeonApiPersonName] used to add a new Dart instance of
   * `PersonName` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPersonName(): PigeonApiPersonName

  /**
   * An implementation of [PigeonApiPhone] used to add a new Dart instance of
   * `Phone` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPhone(): PigeonApiPhone

  /**
   * An implementation of [PigeonApiSms] used to add a new Dart instance of
   * `Sms` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiSms(): PigeonApiSms

  /**
   * An implementation of [PigeonApiUrlBookmark] used to add a new Dart instance of
   * `UrlBookmark` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiUrlBookmark(): PigeonApiUrlBookmark

  /**
   * An implementation of [PigeonApiWiFi] used to add a new Dart instance of
   * `WiFi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiWiFi(): PigeonApiWiFi

  /**
   * An implementation of [PigeonApiBarcode] used to add a new Dart instance of
   * `Barcode` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBarcode(): PigeonApiBarcode

  /**
   * An implementation of [PigeonApiZoomCallback] used to add a new Dart instance of
   * `ZoomCallback` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomCallback(): PigeonApiZoomCallback

  /**
   * An implementation of [PigeonApiZoomSuggestionOptions] used to add a new Dart instance of
   * `ZoomSuggestionOptions` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomSuggestionOptions(): PigeonApiZoomSuggestionOptions

  /**
   * An implementation of [PigeonApiBarcodeScannerOptions] used to add a new Dart instance of
   * `BarcodeScannerOptions` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBarcodeScannerOptions(): PigeonApiBarcodeScannerOptions

  /**
   * An implementation of [PigeonApiMlImage] used to add a new Dart instance of
   * `MlImage` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiMlImage(): PigeonApiMlImage
  {
    return PigeonApiMlImage(this)
  }

  /**
   * An implementation of [PigeonApiInputImage] used to add a new Dart instance of
   * `InputImage` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiInputImage(): PigeonApiInputImage
  {
    return PigeonApiInputImage(this)
  }

  /**
   * An implementation of [PigeonApiBarcodeScanner] used to add a new Dart instance of
   * `BarcodeScanner` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBarcodeScanner(): PigeonApiBarcodeScanner

  /**
   * An implementation of [PigeonApiFaceDetectorOptions] used to add a new Dart instance of
   * `FaceDetectorOptions` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFaceDetectorOptions(): PigeonApiFaceDetectorOptions

  /**
   * An implementation of [PigeonApiFaceContour] used to add a new Dart instance of
   * `FaceContour` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFaceContour(): PigeonApiFaceContour

  /**
   * An implementation of [PigeonApiFaceLandmark] used to add a new Dart instance of
   * `FaceLandmark` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFaceLandmark(): PigeonApiFaceLandmark

  /**
   * An implementation of [PigeonApiFace] used to add a new Dart instance of
   * `Face` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFace(): PigeonApiFace

  /**
   * An implementation of [PigeonApiFaceDetector] used to add a new Dart instance of
   * `FaceDetector` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFaceDetector(): PigeonApiFaceDetector

  /**
   * An implementation of [PigeonApiMlKitAnalyzerResult] used to add a new Dart instance of
   * `MlKitAnalyzerResult` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMlKitAnalyzerResult(): PigeonApiMlKitAnalyzerResult

  /**
   * An implementation of [PigeonApiMlKitAnalyzerResultConsumer] used to add a new Dart instance of
   * `MlKitAnalyzerResultConsumer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMlKitAnalyzerResultConsumer(): PigeonApiMlKitAnalyzerResultConsumer

  /**
   * An implementation of [PigeonApiMlKitAnalyzer] used to add a new Dart instance of
   * `MlKitAnalyzer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMlKitAnalyzer(): PigeonApiMlKitAnalyzer

  /**
   * An implementation of [PigeonApiQuality] used to add a new Dart instance of
   * `Quality` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiQuality(): PigeonApiQuality

  /**
   * An implementation of [PigeonApiFallbackStrategy] used to add a new Dart instance of
   * `FallbackStrategy` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFallbackStrategy(): PigeonApiFallbackStrategy

  /**
   * An implementation of [PigeonApiQualitySelector] used to add a new Dart instance of
   * `QualitySelector` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiQualitySelector(): PigeonApiQualitySelector

  /**
   * An implementation of [PigeonApiFileOutputOptions] used to add a new Dart instance of
   * `FileOutputOptions` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFileOutputOptions(): PigeonApiFileOutputOptions

  /**
   * An implementation of [PigeonApiAudioConfig] used to add a new Dart instance of
   * `AudioConfig` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAudioConfig(): PigeonApiAudioConfig

  /**
   * An implementation of [PigeonApiAudioStats] used to add a new Dart instance of
   * `AudioStats` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAudioStats(): PigeonApiAudioStats

  /**
   * An implementation of [PigeonApiRecordingStats] used to add a new Dart instance of
   * `RecordingStats` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiRecordingStats(): PigeonApiRecordingStats

  /**
   * An implementation of [PigeonApiVideoRecordEvent] used to add a new Dart instance of
   * `VideoRecordEvent` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiVideoRecordEvent(): PigeonApiVideoRecordEvent
  {
    return PigeonApiVideoRecordEvent(this)
  }

  /**
   * An implementation of [PigeonApiVideoRecordStatusEvent] used to add a new Dart instance of
   * `VideoRecordStatusEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordStatusEvent(): PigeonApiVideoRecordStatusEvent

  /**
   * An implementation of [PigeonApiVideoRecordStartEvent] used to add a new Dart instance of
   * `VideoRecordStartEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordStartEvent(): PigeonApiVideoRecordStartEvent

  /**
   * An implementation of [PigeonApiVideoRecordPauseEvent] used to add a new Dart instance of
   * `VideoRecordPauseEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordPauseEvent(): PigeonApiVideoRecordPauseEvent

  /**
   * An implementation of [PigeonApiVideoRecordResumeEvent] used to add a new Dart instance of
   * `VideoRecordResumeEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordResumeEvent(): PigeonApiVideoRecordResumeEvent

  /**
   * An implementation of [PigeonApiOutputResults] used to add a new Dart instance of
   * `OutputResults` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOutputResults(): PigeonApiOutputResults

  /**
   * An implementation of [PigeonApiVideoRecordFinalizeEvent] used to add a new Dart instance of
   * `VideoRecordFinalizeEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordFinalizeEvent(): PigeonApiVideoRecordFinalizeEvent

  /**
   * An implementation of [PigeonApiVideoRecordEventConsumer] used to add a new Dart instance of
   * `VideoRecordEventConsumer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordEventConsumer(): PigeonApiVideoRecordEventConsumer

  /**
   * An implementation of [PigeonApiRecording] used to add a new Dart instance of
   * `Recording` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiRecording(): PigeonApiRecording

  /**
   * An implementation of [PigeonApiCameraController] used to add a new Dart instance of
   * `CameraController` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraController(): PigeonApiCameraController

  /**
   * An implementation of [PigeonApiLifecycleCameraController] used to add a new Dart instance of
   * `LifecycleCameraController` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiLifecycleCameraController(): PigeonApiLifecycleCameraController

  /**
   * An implementation of [PigeonApiPreviewView] used to add a new Dart instance of
   * `PreviewView` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPreviewView(): PigeonApiPreviewView

  fun setUp() {
    CameraXPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, instanceManager)
    PigeonApiPermissionManager.setUpMessageHandlers(binaryMessenger, getPigeonApiPermissionManager())
    PigeonApiAutoCloseable.setUpMessageHandlers(binaryMessenger, getPigeonApiAutoCloseable())
    PigeonApiLocation.setUpMessageHandlers(binaryMessenger, getPigeonApiLocation())
    PigeonApiSize.setUpMessageHandlers(binaryMessenger, getPigeonApiSize())
    PigeonApiPoint.setUpMessageHandlers(binaryMessenger, getPigeonApiPoint())
    PigeonApiPointF.setUpMessageHandlers(binaryMessenger, getPigeonApiPointF())
    PigeonApiRect.setUpMessageHandlers(binaryMessenger, getPigeonApiRect())
    PigeonApiIntRange.setUpMessageHandlers(binaryMessenger, getPigeonApiIntRange())
    PigeonApiCameraSelector.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraSelector())
    PigeonApiCameraStateLiveData.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraStateLiveData())
    PigeonApiCameraStateObserver.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraStateObserver())
    PigeonApiTorchStateLiveData.setUpMessageHandlers(binaryMessenger, getPigeonApiTorchStateLiveData())
    PigeonApiTorchStateObserver.setUpMessageHandlers(binaryMessenger, getPigeonApiTorchStateObserver())
    PigeonApiZoomStateLiveData.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomStateLiveData())
    PigeonApiZoomStateObserver.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomStateObserver())
    PigeonApiMeteringPointFactory.setUpMessageHandlers(binaryMessenger, getPigeonApiMeteringPointFactory())
    PigeonApiSurfaceOrientedMeteringPointFactory.setUpMessageHandlers(binaryMessenger, getPigeonApiSurfaceOrientedMeteringPointFactory())
    PigeonApiMeteringPointArgs.setUpMessageHandlers(binaryMessenger, getPigeonApiMeteringPointArgs())
    PigeonApiDurationArgs.setUpMessageHandlers(binaryMessenger, getPigeonApiDurationArgs())
    PigeonApiFocusMeteringAction.setUpMessageHandlers(binaryMessenger, getPigeonApiFocusMeteringAction())
    PigeonApiDynamicRange.setUpMessageHandlers(binaryMessenger, getPigeonApiDynamicRange())
    PigeonApiCameraInfo.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraInfo())
    PigeonApiCameraControl.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraControl())
    PigeonApiAspectRatioStrategy.setUpMessageHandlers(binaryMessenger, getPigeonApiAspectRatioStrategy())
    PigeonApiResolutionFilter.setUpMessageHandlers(binaryMessenger, getPigeonApiResolutionFilter())
    PigeonApiResolutionStrategy.setUpMessageHandlers(binaryMessenger, getPigeonApiResolutionStrategy())
    PigeonApiResolutionSelector.setUpMessageHandlers(binaryMessenger, getPigeonApiResolutionSelector())
    PigeonApiImageProxy.setUpMessageHandlers(binaryMessenger, getPigeonApiImageProxy())
    PigeonApiMetadata.setUpMessageHandlers(binaryMessenger, getPigeonApiMetadata())
    PigeonApiOutputFileOptions.setUpMessageHandlers(binaryMessenger, getPigeonApiOutputFileOptions())
    PigeonApiOnImageCapturedCallback.setUpMessageHandlers(binaryMessenger, getPigeonApiOnImageCapturedCallback())
    PigeonApiOnImageSavedCallback.setUpMessageHandlers(binaryMessenger, getPigeonApiOnImageSavedCallback())
    PigeonApiImageAnalyzer.setUpMessageHandlers(binaryMessenger, getPigeonApiImageAnalyzer())
    PigeonApiJpegAnalyzer.setUpMessageHandlers(binaryMessenger, getPigeonApiJpegAnalyzer())
    PigeonApiZoomCallback.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomCallback())
    PigeonApiZoomSuggestionOptions.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomSuggestionOptions())
    PigeonApiBarcodeScannerOptions.setUpMessageHandlers(binaryMessenger, getPigeonApiBarcodeScannerOptions())
    PigeonApiBarcodeScanner.setUpMessageHandlers(binaryMessenger, getPigeonApiBarcodeScanner())
    PigeonApiFaceDetectorOptions.setUpMessageHandlers(binaryMessenger, getPigeonApiFaceDetectorOptions())
    PigeonApiFace.setUpMessageHandlers(binaryMessenger, getPigeonApiFace())
    PigeonApiFaceDetector.setUpMessageHandlers(binaryMessenger, getPigeonApiFaceDetector())
    PigeonApiMlKitAnalyzerResult.setUpMessageHandlers(binaryMessenger, getPigeonApiMlKitAnalyzerResult())
    PigeonApiMlKitAnalyzerResultConsumer.setUpMessageHandlers(binaryMessenger, getPigeonApiMlKitAnalyzerResultConsumer())
    PigeonApiMlKitAnalyzer.setUpMessageHandlers(binaryMessenger, getPigeonApiMlKitAnalyzer())
    PigeonApiQuality.setUpMessageHandlers(binaryMessenger, getPigeonApiQuality())
    PigeonApiFallbackStrategy.setUpMessageHandlers(binaryMessenger, getPigeonApiFallbackStrategy())
    PigeonApiQualitySelector.setUpMessageHandlers(binaryMessenger, getPigeonApiQualitySelector())
    PigeonApiFileOutputOptions.setUpMessageHandlers(binaryMessenger, getPigeonApiFileOutputOptions())
    PigeonApiAudioConfig.setUpMessageHandlers(binaryMessenger, getPigeonApiAudioConfig())
    PigeonApiVideoRecordEventConsumer.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoRecordEventConsumer())
    PigeonApiRecording.setUpMessageHandlers(binaryMessenger, getPigeonApiRecording())
    PigeonApiCameraController.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraController())
    PigeonApiLifecycleCameraController.setUpMessageHandlers(binaryMessenger, getPigeonApiLifecycleCameraController())
    PigeonApiPreviewView.setUpMessageHandlers(binaryMessenger, getPigeonApiPreviewView())
  }
  fun tearDown() {
    CameraXPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPermissionManager.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAutoCloseable.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiLocation.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiSize.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPoint.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPointF.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiRect.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiIntRange.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraSelector.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraStateLiveData.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraStateObserver.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiTorchStateLiveData.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiTorchStateObserver.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomStateLiveData.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomStateObserver.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMeteringPointFactory.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiSurfaceOrientedMeteringPointFactory.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMeteringPointArgs.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiDurationArgs.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFocusMeteringAction.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiDynamicRange.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraInfo.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraControl.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAspectRatioStrategy.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiResolutionFilter.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiResolutionStrategy.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiResolutionSelector.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImageProxy.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMetadata.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiOutputFileOptions.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiOnImageCapturedCallback.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiOnImageSavedCallback.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImageAnalyzer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiJpegAnalyzer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomCallback.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomSuggestionOptions.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBarcodeScannerOptions.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBarcodeScanner.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFaceDetectorOptions.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFace.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFaceDetector.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMlKitAnalyzerResult.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMlKitAnalyzerResultConsumer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMlKitAnalyzer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiQuality.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFallbackStrategy.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiQualitySelector.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFileOutputOptions.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAudioConfig.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoRecordEventConsumer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiRecording.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraController.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiLifecycleCameraController.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPreviewView.setUpMessageHandlers(binaryMessenger, null)
  }
}
private class CameraXPigeonProxyApiBaseCodec(val registrar: CameraXPigeonProxyApiRegistrar) : CameraXPigeonCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return registrar.instanceManager.getInstance(readValue(buffer) as Long)
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is Boolean || value is ByteArray || value is Double || value is DoubleArray || value is FloatArray || value is Int || value is IntArray || value is List<*> || value is Long || value is LongArray || value is Map<*, *> || value is String || value is Permission || value is LensFacing || value is CameraState || value is TorchState || value is MeteringMode || value is TimeUnit || value is AspectRatio || value is BitDepth || value is Encoding || value is ScaleType || value is UseCase || value is ResolutionMode || value is AspectRatioFallbackRule || value is ResolutionFallbackRule || value is CaptureMode || value is FlashMode || value is BackpressureStrategy || value is CoordinateSystem || value is ImageFormat || value is MirrorMode || value is AudioState || value is VideoRecordFinalizeEventError || value is BarcodeFormat || value is BarcodeValueType || value is AddressType || value is EmailType || value is PhoneType || value is WiFiEncryptionType || value is FaceClassificationMode || value is FaceContourMode || value is FaceLandmarkMode || value is FacePerformanceMode || value is FaceContourType || value is FaceLandmarkType || value == null) {
      super.writeValue(stream, value)
      return
    }

    if (value is dev.hebei.camerax_android.common.PermissionManager) {
      registrar.getPigeonApiPermissionManager().pigeon_newInstance(value) { }
    }
     else if (value is android.location.Location) {
      registrar.getPigeonApiLocation().pigeon_newInstance(value) { }
    }
     else if (value is android.util.Size) {
      registrar.getPigeonApiSize().pigeon_newInstance(value) { }
    }
     else if (value is android.graphics.Point) {
      registrar.getPigeonApiPoint().pigeon_newInstance(value) { }
    }
     else if (value is android.graphics.PointF) {
      registrar.getPigeonApiPointF().pigeon_newInstance(value) { }
    }
     else if (value is android.graphics.Rect) {
      registrar.getPigeonApiRect().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.common.IntRange.Stub) {
      registrar.getPigeonApiIntRange().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.CameraSelector) {
      registrar.getPigeonApiCameraSelector().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.common.CameraStateLiveData.Stub) {
      registrar.getPigeonApiCameraStateLiveData().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.common.CameraStateObserver.Impl) {
      registrar.getPigeonApiCameraStateObserver().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub) {
      registrar.getPigeonApiTorchStateLiveData().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.common.TorchStateObserver.Impl) {
      registrar.getPigeonApiTorchStateObserver().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ZoomState) {
      registrar.getPigeonApiZoomState().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub) {
      registrar.getPigeonApiZoomStateLiveData().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.common.ZoomStateObserver.Impl) {
      registrar.getPigeonApiZoomStateObserver().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ExposureState) {
      registrar.getPigeonApiExposureState().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.MeteringPoint) {
      registrar.getPigeonApiMeteringPoint().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.SurfaceOrientedMeteringPointFactory) {
      registrar.getPigeonApiSurfaceOrientedMeteringPointFactory().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.MeteringPointFactory) {
      registrar.getPigeonApiMeteringPointFactory().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.FocusMeteringAction.MeteringPointArgs.Stub) {
      registrar.getPigeonApiMeteringPointArgs().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.FocusMeteringAction.DurationArgs.Stub) {
      registrar.getPigeonApiDurationArgs().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.FocusMeteringAction) {
      registrar.getPigeonApiFocusMeteringAction().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.FocusMeteringResult) {
      registrar.getPigeonApiFocusMeteringResult().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.DynamicRange) {
      registrar.getPigeonApiDynamicRange().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.CameraInfo) {
      registrar.getPigeonApiCameraInfo().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.CameraControl) {
      registrar.getPigeonApiCameraControl().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.resolutionselector.AspectRatioStrategy) {
      registrar.getPigeonApiAspectRatioStrategy().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.resolutionselector.ResolutionFilter) {
      registrar.getPigeonApiResolutionFilter().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.resolutionselector.ResolutionStrategy) {
      registrar.getPigeonApiResolutionStrategy().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.resolutionselector.ResolutionSelector) {
      registrar.getPigeonApiResolutionSelector().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageInfo) {
      registrar.getPigeonApiImageInfo().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageProxy.PlaneProxy) {
      registrar.getPigeonApiPlaneProxy().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageProxy) {
      registrar.getPigeonApiImageProxy().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageCapture.Metadata) {
      registrar.getPigeonApiMetadata().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageCapture.OutputFileOptions) {
      registrar.getPigeonApiOutputFileOptions().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageCapture.OutputFileResults) {
      registrar.getPigeonApiOutputFileResults().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageCapture.OnImageCapturedCallback) {
      registrar.getPigeonApiOnImageCapturedCallback().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageCapture.OnImageSavedCallback) {
      registrar.getPigeonApiOnImageSavedCallback().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageAnalysis.Analyzer) {
      registrar.getPigeonApiImageAnalyzer().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageAnalysis.Analyzer) {
      registrar.getPigeonApiJpegAnalyzer().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.Address) {
      registrar.getPigeonApiAddress().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime) {
      registrar.getPigeonApiCalendarDateTime().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent) {
      registrar.getPigeonApiCalendarEvent().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.ContactInfo) {
      registrar.getPigeonApiContactInfo().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.DriverLicense) {
      registrar.getPigeonApiDriverLicense().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.Email) {
      registrar.getPigeonApiEmail().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.GeoPoint) {
      registrar.getPigeonApiGeoPoint().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.PersonName) {
      registrar.getPigeonApiPersonName().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.Phone) {
      registrar.getPigeonApiPhone().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.Sms) {
      registrar.getPigeonApiSms().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.UrlBookmark) {
      registrar.getPigeonApiUrlBookmark().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.WiFi) {
      registrar.getPigeonApiWiFi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode) {
      registrar.getPigeonApiBarcode().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback) {
      registrar.getPigeonApiZoomCallback().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.ZoomSuggestionOptions) {
      registrar.getPigeonApiZoomSuggestionOptions().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.BarcodeScannerOptions) {
      registrar.getPigeonApiBarcodeScannerOptions().pigeon_newInstance(value) { }
    }
     else if (value is com.google.android.odml.image.MlImage) {
      registrar.getPigeonApiMlImage().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.common.InputImage) {
      registrar.getPigeonApiInputImage().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.ml.barcode.BarcodeScanner.Stub) {
      registrar.getPigeonApiBarcodeScanner().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.face.FaceDetectorOptions) {
      registrar.getPigeonApiFaceDetectorOptions().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.face.FaceContour) {
      registrar.getPigeonApiFaceContour().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.face.FaceLandmark) {
      registrar.getPigeonApiFaceLandmark().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.face.Face) {
      registrar.getPigeonApiFace().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.ml.face.FaceDetector.Stub) {
      registrar.getPigeonApiFaceDetector().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.ml.Detector.Stub) {
      registrar.getPigeonApiDetector().pigeon_newInstance(value) { }
    }
     else if (value is java.io.Closeable) {
      registrar.getPigeonApiCloseable().pigeon_newInstance(value) { }
    }
     else if (value is java.lang.AutoCloseable) {
      registrar.getPigeonApiAutoCloseable().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.mlkit.vision.MlKitAnalyzer.Result) {
      registrar.getPigeonApiMlKitAnalyzerResult().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.common.MlKitAnalyzerResultConsumer.Impl) {
      registrar.getPigeonApiMlKitAnalyzerResultConsumer().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.mlkit.vision.MlKitAnalyzer) {
      registrar.getPigeonApiMlKitAnalyzer().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageAnalysis.Analyzer) {
      registrar.getPigeonApiAnalyzer().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.Quality) {
      registrar.getPigeonApiQuality().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.FallbackStrategy) {
      registrar.getPigeonApiFallbackStrategy().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.QualitySelector) {
      registrar.getPigeonApiQualitySelector().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.FileOutputOptions) {
      registrar.getPigeonApiFileOutputOptions().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.view.video.AudioConfig) {
      registrar.getPigeonApiAudioConfig().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.AudioStats) {
      registrar.getPigeonApiAudioStats().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.RecordingStats) {
      registrar.getPigeonApiRecordingStats().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent.Status) {
      registrar.getPigeonApiVideoRecordStatusEvent().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent.Start) {
      registrar.getPigeonApiVideoRecordStartEvent().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent.Pause) {
      registrar.getPigeonApiVideoRecordPauseEvent().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent.Resume) {
      registrar.getPigeonApiVideoRecordResumeEvent().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.OutputResults) {
      registrar.getPigeonApiOutputResults().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent.Finalize) {
      registrar.getPigeonApiVideoRecordFinalizeEvent().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent) {
      registrar.getPigeonApiVideoRecordEvent().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.common.VideoRecordEventConsumer.Impl) {
      registrar.getPigeonApiVideoRecordEventConsumer().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.Recording) {
      registrar.getPigeonApiRecording().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.view.LifecycleCameraController) {
      registrar.getPigeonApiLifecycleCameraController().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.view.CameraController) {
      registrar.getPigeonApiCameraController().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.view.PreviewView) {
      registrar.getPigeonApiPreviewView().pigeon_newInstance(value) { }
    }

    when {
      registrar.instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, registrar.instanceManager.getIdentifierForStrongReference(value))
      }
      else -> throw IllegalArgumentException("Unsupported value: '$value' of type '${value.javaClass.name}'")
    }
  }
}

enum class Permission(val raw: Int) {
  ALBUM(0),
  AUDIO(1),
  VIDEO(2);

  companion object {
    fun ofRaw(raw: Int): Permission? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class LensFacing(val raw: Int) {
  UNKNOWN(0),
  FRONT(1),
  BACK(2),
  EXTERNAL(3);

  companion object {
    fun ofRaw(raw: Int): LensFacing? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CameraState(val raw: Int) {
  PENDING_OPEN(0),
  OPENING(1),
  OPEN(2),
  CLOSING(3),
  CLOSED(4);

  companion object {
    fun ofRaw(raw: Int): CameraState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TorchState(val raw: Int) {
  OFF(0),
  ON(1);

  companion object {
    fun ofRaw(raw: Int): TorchState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MeteringMode(val raw: Int) {
  AF(0),
  AE(1),
  AWB(2);

  companion object {
    fun ofRaw(raw: Int): MeteringMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TimeUnit(val raw: Int) {
  NANOSECONDS(0),
  MICROSECONDS(1),
  MILLISECONDS(2),
  SECONDS(3),
  MINUTES(4),
  HOURS(5),
  DAYS(6);

  companion object {
    fun ofRaw(raw: Int): TimeUnit? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AspectRatio(val raw: Int) {
  RATIO_DEFAULT(0),
  RATIO4_3(1),
  RATIO16_9(2);

  companion object {
    fun ofRaw(raw: Int): AspectRatio? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BitDepth(val raw: Int) {
  BIT_DEPTH_UNSPECIFIED(0),
  BIT_DEPTH8BIT(1),
  BIT_DEPTH10BIT(2);

  companion object {
    fun ofRaw(raw: Int): BitDepth? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Encoding(val raw: Int) {
  UNSPECIFIED(0),
  SDR(1),
  HDR_UNSPECIFIED(2),
  HLG(3),
  HDR10(4),
  HDR10PLUS(5),
  DOLBY_VISION(6);

  companion object {
    fun ofRaw(raw: Int): Encoding? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScaleType(val raw: Int) {
  FILL_START(0),
  FILL_CENTER(1),
  FILL_END(2),
  FIT_START(3),
  FIT_CENTER(4),
  FIT_END(5);

  companion object {
    fun ofRaw(raw: Int): ScaleType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class UseCase(val raw: Int) {
  IMAGE_CAPTURE(0),
  IMAGE_ANALYSIS(1),
  VIDEO_CAPTURE(2);

  companion object {
    fun ofRaw(raw: Int): UseCase? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ResolutionMode(val raw: Int) {
  PREFER_CAPTURE_RATE_OVER_HIGHER_RESOLUTION(0),
  PREFER_HIGHER_RESOLUTION_OVER_CAPTURE_RATE(1);

  companion object {
    fun ofRaw(raw: Int): ResolutionMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AspectRatioFallbackRule(val raw: Int) {
  NONE(0),
  AUTO(1);

  companion object {
    fun ofRaw(raw: Int): AspectRatioFallbackRule? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ResolutionFallbackRule(val raw: Int) {
  NONE(0),
  CLOSEST_HIGHER_THEN_LOWER(1),
  CLOSEST_HIGHER(2),
  CLOSEST_LOWER_THEN_HIGHER(3),
  CLOSEST_LOWER(4);

  companion object {
    fun ofRaw(raw: Int): ResolutionFallbackRule? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CaptureMode(val raw: Int) {
  MAXIMIZE_QUALITY(0),
  MINIMIZE_LATENCY(1),
  ZERO_SHUTTER_LAG(2);

  companion object {
    fun ofRaw(raw: Int): CaptureMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FlashMode(val raw: Int) {
  AUTO(0),
  ON(1),
  OFF(2),
  SCREEN(3);

  companion object {
    fun ofRaw(raw: Int): FlashMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BackpressureStrategy(val raw: Int) {
  KEEP_ONLY_LATEST(0),
  BLOCK_PRODUCER(1);

  companion object {
    fun ofRaw(raw: Int): BackpressureStrategy? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CoordinateSystem(val raw: Int) {
  ORIGINAL(0),
  SENSOR(1),
  VIEW_REFERENCED(2);

  companion object {
    fun ofRaw(raw: Int): CoordinateSystem? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ImageFormat(val raw: Int) {
  YUV420_888(0),
  RGBA8888(1),
  JPEG(2),
  JPEG_R(3);

  companion object {
    fun ofRaw(raw: Int): ImageFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MirrorMode(val raw: Int) {
  OFF(0),
  ON(1),
  ON_FRONT_ONLY(2);

  companion object {
    fun ofRaw(raw: Int): MirrorMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AudioState(val raw: Int) {
  ACTIVE(0),
  DISABLED(1),
  SOURCE_SILENCED(2),
  ENCODER_ERROR(3),
  SOURCE_ERROR(4),
  MUTED(5);

  companion object {
    fun ofRaw(raw: Int): AudioState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class VideoRecordFinalizeEventError(val raw: Int) {
  NONE(0),
  UNKNOWN(1),
  FILE_SIZE_LIMIT_REACHED(2),
  INSUFFICIENT_STORAGE(3),
  SOURCE_INACTIVE(4),
  INVALID_OUPUT_OPTIONS(5),
  ENCODING_FAILED(6),
  RECORDER_ERROR(7),
  NO_VALID_DATA(8),
  DURATION_LIMIT_REACHED(9),
  RECORDING_GARBAGE_COLLECTED(10);

  companion object {
    fun ofRaw(raw: Int): VideoRecordFinalizeEventError? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BarcodeFormat(val raw: Int) {
  UNKNOWN(0),
  ALL(1),
  CODE128(2),
  CODE39(3),
  CODE93(4),
  CODABAR(5),
  DATA_MATRIX(6),
  EAN13(7),
  EAN8(8),
  ITF(9),
  QR_CODE(10),
  UPC_A(11),
  UPC_E(12),
  PDF417(13),
  AZTEC(14);

  companion object {
    fun ofRaw(raw: Int): BarcodeFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BarcodeValueType(val raw: Int) {
  UNKNOWN(0),
  CONTACT_INFO(1),
  EMAIL(2),
  ISBN(3),
  PHONE(4),
  PRODUCT(5),
  SMS(6),
  TEXT(7),
  URL(8),
  WIFI(9),
  GEO(10),
  CALENDAR_EVENT(11),
  DRIVER_LICENSE(12);

  companion object {
    fun ofRaw(raw: Int): BarcodeValueType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AddressType(val raw: Int) {
  UNKNOWN(0),
  WORK(1),
  HOME(2);

  companion object {
    fun ofRaw(raw: Int): AddressType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class EmailType(val raw: Int) {
  UNKNOWN(0),
  WORK(1),
  HOME(2);

  companion object {
    fun ofRaw(raw: Int): EmailType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PhoneType(val raw: Int) {
  UNKNOWN(0),
  WORK(1),
  HOME(2),
  FAX(3),
  MOBILE(4);

  companion object {
    fun ofRaw(raw: Int): PhoneType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class WiFiEncryptionType(val raw: Int) {
  OPEN(0),
  WPA(1),
  WEP(2);

  companion object {
    fun ofRaw(raw: Int): WiFiEncryptionType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FaceClassificationMode(val raw: Int) {
  NONE(0),
  ALL(1);

  companion object {
    fun ofRaw(raw: Int): FaceClassificationMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FaceContourMode(val raw: Int) {
  NONE(0),
  ALL(1);

  companion object {
    fun ofRaw(raw: Int): FaceContourMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FaceLandmarkMode(val raw: Int) {
  NONE(0),
  ALL(1);

  companion object {
    fun ofRaw(raw: Int): FaceLandmarkMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FacePerformanceMode(val raw: Int) {
  FAST(0),
  ACCURATE(1);

  companion object {
    fun ofRaw(raw: Int): FacePerformanceMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FaceContourType(val raw: Int) {
  FACE(0),
  LEFT_CHEEK(1),
  LEFT_EYE(2),
  LEFT_EYEBROW_BOTTOM(3),
  LEFT_EYEBROW_TOP(4),
  LOWER_LIP_BOTTOM(5),
  LOWER_LIP_TOP(6),
  NOSE_BOTTOM(7),
  NOSE_BRIDGE(8),
  RIGHT_CHEEK(9),
  RIGHT_EYE(10),
  RIGHT_EYEBROW_BOTTOM(11),
  RIGHT_EYEBROW_TOP(12),
  UPPER_LIP_BOTTOM(13),
  UPPER_LIP_TOP(14);

  companion object {
    fun ofRaw(raw: Int): FaceContourType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FaceLandmarkType(val raw: Int) {
  LEFT_CHEEK(0),
  LEFT_EAR(1),
  LEFT_EYE(2),
  MOUTH_BOTTOM(3),
  MOUTH_LEFT(4),
  MOUTH_RIGHT(5),
  NOSE_BASE(6),
  RIGHT_CHEEK(7),
  RIGHT_EAR(8),
  RIGHT_EYE(9);

  companion object {
    fun ofRaw(raw: Int): FaceLandmarkType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
private open class CameraXPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Permission.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          LensFacing.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CameraState.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TorchState.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MeteringMode.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TimeUnit.ofRaw(it.toInt())
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AspectRatio.ofRaw(it.toInt())
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BitDepth.ofRaw(it.toInt())
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Encoding.ofRaw(it.toInt())
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ScaleType.ofRaw(it.toInt())
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          UseCase.ofRaw(it.toInt())
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ResolutionMode.ofRaw(it.toInt())
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AspectRatioFallbackRule.ofRaw(it.toInt())
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ResolutionFallbackRule.ofRaw(it.toInt())
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CaptureMode.ofRaw(it.toInt())
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FlashMode.ofRaw(it.toInt())
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BackpressureStrategy.ofRaw(it.toInt())
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CoordinateSystem.ofRaw(it.toInt())
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ImageFormat.ofRaw(it.toInt())
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MirrorMode.ofRaw(it.toInt())
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AudioState.ofRaw(it.toInt())
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          VideoRecordFinalizeEventError.ofRaw(it.toInt())
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BarcodeFormat.ofRaw(it.toInt())
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BarcodeValueType.ofRaw(it.toInt())
        }
      }
      153.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AddressType.ofRaw(it.toInt())
        }
      }
      154.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          EmailType.ofRaw(it.toInt())
        }
      }
      155.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PhoneType.ofRaw(it.toInt())
        }
      }
      156.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          WiFiEncryptionType.ofRaw(it.toInt())
        }
      }
      157.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FaceClassificationMode.ofRaw(it.toInt())
        }
      }
      158.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FaceContourMode.ofRaw(it.toInt())
        }
      }
      159.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FaceLandmarkMode.ofRaw(it.toInt())
        }
      }
      160.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FacePerformanceMode.ofRaw(it.toInt())
        }
      }
      161.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FaceContourType.ofRaw(it.toInt())
        }
      }
      162.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FaceLandmarkType.ofRaw(it.toInt())
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Permission -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is LensFacing -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is CameraState -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is TorchState -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is MeteringMode -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is TimeUnit -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      is AspectRatio -> {
        stream.write(135)
        writeValue(stream, value.raw)
      }
      is BitDepth -> {
        stream.write(136)
        writeValue(stream, value.raw)
      }
      is Encoding -> {
        stream.write(137)
        writeValue(stream, value.raw)
      }
      is ScaleType -> {
        stream.write(138)
        writeValue(stream, value.raw)
      }
      is UseCase -> {
        stream.write(139)
        writeValue(stream, value.raw)
      }
      is ResolutionMode -> {
        stream.write(140)
        writeValue(stream, value.raw)
      }
      is AspectRatioFallbackRule -> {
        stream.write(141)
        writeValue(stream, value.raw)
      }
      is ResolutionFallbackRule -> {
        stream.write(142)
        writeValue(stream, value.raw)
      }
      is CaptureMode -> {
        stream.write(143)
        writeValue(stream, value.raw)
      }
      is FlashMode -> {
        stream.write(144)
        writeValue(stream, value.raw)
      }
      is BackpressureStrategy -> {
        stream.write(145)
        writeValue(stream, value.raw)
      }
      is CoordinateSystem -> {
        stream.write(146)
        writeValue(stream, value.raw)
      }
      is ImageFormat -> {
        stream.write(147)
        writeValue(stream, value.raw)
      }
      is MirrorMode -> {
        stream.write(148)
        writeValue(stream, value.raw)
      }
      is AudioState -> {
        stream.write(149)
        writeValue(stream, value.raw)
      }
      is VideoRecordFinalizeEventError -> {
        stream.write(150)
        writeValue(stream, value.raw)
      }
      is BarcodeFormat -> {
        stream.write(151)
        writeValue(stream, value.raw)
      }
      is BarcodeValueType -> {
        stream.write(152)
        writeValue(stream, value.raw)
      }
      is AddressType -> {
        stream.write(153)
        writeValue(stream, value.raw)
      }
      is EmailType -> {
        stream.write(154)
        writeValue(stream, value.raw)
      }
      is PhoneType -> {
        stream.write(155)
        writeValue(stream, value.raw)
      }
      is WiFiEncryptionType -> {
        stream.write(156)
        writeValue(stream, value.raw)
      }
      is FaceClassificationMode -> {
        stream.write(157)
        writeValue(stream, value.raw)
      }
      is FaceContourMode -> {
        stream.write(158)
        writeValue(stream, value.raw)
      }
      is FaceLandmarkMode -> {
        stream.write(159)
        writeValue(stream, value.raw)
      }
      is FacePerformanceMode -> {
        stream.write(160)
        writeValue(stream, value.raw)
      }
      is FaceContourType -> {
        stream.write(161)
        writeValue(stream, value.raw)
      }
      is FaceLandmarkType -> {
        stream.write(162)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPermissionManager(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun instance(): dev.hebei.camerax_android.common.PermissionManager

  abstract fun checkPermissioin(pigeon_instance: dev.hebei.camerax_android.common.PermissionManager, permission: Permission): Boolean

  abstract fun requestPermissions(pigeon_instance: dev.hebei.camerax_android.common.PermissionManager, permissions: List<Permission>, callback: (Result<Boolean>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPermissionManager?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PermissionManager.instance", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.instance(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PermissionManager.checkPermissioin", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.PermissionManager
            val permissionArg = args[1] as Permission
            val wrapped: List<Any?> = try {
              listOf(api.checkPermissioin(pigeon_instanceArg, permissionArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PermissionManager.requestPermissions", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.PermissionManager
            val permissionsArg = args[1] as List<Permission>
            api.requestPermissions(pigeon_instanceArg, permissionsArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PermissionManager and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.PermissionManager, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.PermissionManager.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAutoCloseable(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun close(pigeon_instance: java.lang.AutoCloseable)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAutoCloseable?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AutoCloseable.close", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.lang.AutoCloseable
            val wrapped: List<Any?> = try {
              api.close(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AutoCloseable and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.lang.AutoCloseable, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.AutoCloseable.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiCloseable(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Closeable and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.io.Closeable, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Closeable.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAutoCloseable] used to access callback methods */
  fun pigeon_getPigeonApiAutoCloseable(): PigeonApiAutoCloseable
  {
    return pigeonRegistrar.getPigeonApiAutoCloseable()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiLocation(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(latitude: Double, longitude: Double): android.location.Location

  abstract fun latitude(pigeon_instance: android.location.Location): Double

  abstract fun longitude(pigeon_instance: android.location.Location): Double

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiLocation?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Location.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val latitudeArg = args[1] as Double
            val longitudeArg = args[2] as Double
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(latitudeArg,longitudeArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Location and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.location.Location, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val latitudeArg = latitude(pigeon_instanceArg)
    val longitudeArg = longitude(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Location.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, latitudeArg, longitudeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiSize(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(width: Long, height: Long): android.util.Size

  abstract fun width(pigeon_instance: android.util.Size): Long

  abstract fun height(pigeon_instance: android.util.Size): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiSize?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Size.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val widthArg = args[1] as Long
            val heightArg = args[2] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(widthArg,heightArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Size and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.util.Size, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val widthArg = width(pigeon_instanceArg)
    val heightArg = height(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Size.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, widthArg, heightArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPoint(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(x: Long, y: Long): android.graphics.Point

  abstract fun x(pigeon_instance: android.graphics.Point): Long

  abstract fun y(pigeon_instance: android.graphics.Point): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPoint?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Point.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val xArg = args[1] as Long
            val yArg = args[2] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(xArg,yArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Point and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.graphics.Point, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val xArg = x(pigeon_instanceArg)
    val yArg = y(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Point.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, xArg, yArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPointF(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(x: Double, y: Double): android.graphics.PointF

  abstract fun x(pigeon_instance: android.graphics.PointF): Double

  abstract fun y(pigeon_instance: android.graphics.PointF): Double

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPointF?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PointF.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val xArg = args[1] as Double
            val yArg = args[2] as Double
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(xArg,yArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PointF and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.graphics.PointF, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val xArg = x(pigeon_instanceArg)
    val yArg = y(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.PointF.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, xArg, yArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiRect(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(left: Long, top: Long, right: Long, bottom: Long): android.graphics.Rect

  abstract fun left(pigeon_instance: android.graphics.Rect): Long

  abstract fun top(pigeon_instance: android.graphics.Rect): Long

  abstract fun right(pigeon_instance: android.graphics.Rect): Long

  abstract fun bottom(pigeon_instance: android.graphics.Rect): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiRect?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Rect.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val leftArg = args[1] as Long
            val topArg = args[2] as Long
            val rightArg = args[3] as Long
            val bottomArg = args[4] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(leftArg,topArg,rightArg,bottomArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Rect and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.graphics.Rect, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val leftArg = left(pigeon_instanceArg)
    val topArg = top(pigeon_instanceArg)
    val rightArg = right(pigeon_instanceArg)
    val bottomArg = bottom(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Rect.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, leftArg, topArg, rightArg, bottomArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiIntRange(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(lower: Long, upper: Long): dev.hebei.camerax_android.legacy.common.IntRange.Stub

  abstract fun lower(pigeon_instance: dev.hebei.camerax_android.legacy.common.IntRange.Stub): Long

  abstract fun upper(pigeon_instance: dev.hebei.camerax_android.legacy.common.IntRange.Stub): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiIntRange?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.IntRange.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val lowerArg = args[1] as Long
            val upperArg = args[2] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(lowerArg,upperArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of IntRange and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.IntRange.Stub, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val lowerArg = lower(pigeon_instanceArg)
    val upperArg = upper(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.IntRange.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, lowerArg, upperArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraSelector(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(lensFacing: LensFacing?): androidx.camera.core.CameraSelector

  abstract fun front(): androidx.camera.core.CameraSelector

  abstract fun back(): androidx.camera.core.CameraSelector

  abstract fun external(): androidx.camera.core.CameraSelector

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraSelector?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelector.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val lensFacingArg = args[1] as LensFacing?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(lensFacingArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelector.front", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.front(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelector.back", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.back(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelector.external", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.external(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraSelector and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.CameraSelector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraSelector.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraStateLiveData(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getValue(pigeon_instance: dev.hebei.camerax_android.legacy.common.CameraStateLiveData.Stub): CameraState?

  abstract fun observe(pigeon_instance: dev.hebei.camerax_android.legacy.common.CameraStateLiveData.Stub, observer: dev.hebei.camerax_android.legacy.common.CameraStateObserver.Impl)

  abstract fun removeObserver(pigeon_instance: dev.hebei.camerax_android.legacy.common.CameraStateLiveData.Stub, observer: dev.hebei.camerax_android.legacy.common.CameraStateObserver.Impl)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraStateLiveData?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateLiveData.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.common.CameraStateLiveData.Stub
            val wrapped: List<Any?> = try {
              listOf(api.getValue(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateLiveData.observe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.common.CameraStateLiveData.Stub
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.common.CameraStateObserver.Impl
            val wrapped: List<Any?> = try {
              api.observe(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateLiveData.removeObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.common.CameraStateLiveData.Stub
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.common.CameraStateObserver.Impl
            val wrapped: List<Any?> = try {
              api.removeObserver(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraStateLiveData and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.CameraStateLiveData.Stub, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraStateLiveData.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraStateObserver(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.legacy.common.CameraStateObserver.Impl

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraStateObserver?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateObserver.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraStateObserver and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.CameraStateObserver.Impl, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of CameraStateObserver, but the class has a nonnull callback method.")
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.CameraStateObserver.Impl, valueArg: CameraState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraStateObserver.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiTorchStateLiveData(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getValue(pigeon_instance: dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub): TorchState?

  abstract fun observe(pigeon_instance: dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub, observer: dev.hebei.camerax_android.legacy.common.TorchStateObserver.Impl)

  abstract fun removeObserver(pigeon_instance: dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub, observer: dev.hebei.camerax_android.legacy.common.TorchStateObserver.Impl)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiTorchStateLiveData?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateLiveData.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub
            val wrapped: List<Any?> = try {
              listOf(api.getValue(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateLiveData.observe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.common.TorchStateObserver.Impl
            val wrapped: List<Any?> = try {
              api.observe(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateLiveData.removeObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.common.TorchStateObserver.Impl
            val wrapped: List<Any?> = try {
              api.removeObserver(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of TorchStateLiveData and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.TorchStateLiveData.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiTorchStateObserver(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.legacy.common.TorchStateObserver.Impl

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiTorchStateObserver?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateObserver.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of TorchStateObserver and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.TorchStateObserver.Impl, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of TorchStateObserver, but the class has a nonnull callback method.")
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.TorchStateObserver.Impl, valueArg: TorchState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.TorchStateObserver.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomState(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun minZoomRatio(pigeon_instance: androidx.camera.core.ZoomState): Double

  abstract fun maxZoomRatio(pigeon_instance: androidx.camera.core.ZoomState): Double

  abstract fun zoomRatio(pigeon_instance: androidx.camera.core.ZoomState): Double

  abstract fun linearZoom(pigeon_instance: androidx.camera.core.ZoomState): Double

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomState and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ZoomState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val minZoomRatioArg = minZoomRatio(pigeon_instanceArg)
    val maxZoomRatioArg = maxZoomRatio(pigeon_instanceArg)
    val zoomRatioArg = zoomRatio(pigeon_instanceArg)
    val linearZoomArg = linearZoom(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ZoomState.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, minZoomRatioArg, maxZoomRatioArg, zoomRatioArg, linearZoomArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomStateLiveData(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getValue(pigeon_instance: dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub): androidx.camera.core.ZoomState?

  abstract fun observe(pigeon_instance: dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub, observer: dev.hebei.camerax_android.legacy.common.ZoomStateObserver.Impl)

  abstract fun removeObserver(pigeon_instance: dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub, observer: dev.hebei.camerax_android.legacy.common.ZoomStateObserver.Impl)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomStateLiveData?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateLiveData.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub
            val wrapped: List<Any?> = try {
              listOf(api.getValue(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateLiveData.observe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.common.ZoomStateObserver.Impl
            val wrapped: List<Any?> = try {
              api.observe(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateLiveData.removeObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.common.ZoomStateObserver.Impl
            val wrapped: List<Any?> = try {
              api.removeObserver(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomStateLiveData and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ZoomStateLiveData.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomStateObserver(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.legacy.common.ZoomStateObserver.Impl

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomStateObserver?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateObserver.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomStateObserver and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.ZoomStateObserver.Impl, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of ZoomStateObserver, but the class has a nonnull callback method.")
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.ZoomStateObserver.Impl, valueArg: androidx.camera.core.ZoomState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ZoomStateObserver.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiExposureState(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun exposureCompensationIndex(pigeon_instance: androidx.camera.core.ExposureState): Long

  abstract fun exposureCompensationRange(pigeon_instance: androidx.camera.core.ExposureState): dev.hebei.camerax_android.legacy.common.IntRange.Stub

  abstract fun exposureCompensationStep(pigeon_instance: androidx.camera.core.ExposureState): Double

  abstract fun isExposureCompensationSupported(pigeon_instance: androidx.camera.core.ExposureState): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ExposureState and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ExposureState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val exposureCompensationIndexArg = exposureCompensationIndex(pigeon_instanceArg)
    val exposureCompensationRangeArg = exposureCompensationRange(pigeon_instanceArg)
    val exposureCompensationStepArg = exposureCompensationStep(pigeon_instanceArg)
    val isExposureCompensationSupportedArg = isExposureCompensationSupported(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ExposureState.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, exposureCompensationIndexArg, exposureCompensationRangeArg, exposureCompensationStepArg, isExposureCompensationSupportedArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMeteringPoint(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun size(pigeon_instance: androidx.camera.core.MeteringPoint): Double

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MeteringPoint and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.MeteringPoint, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val sizeArg = size(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.MeteringPoint.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, sizeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMeteringPointFactory(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun createPoint(pigeon_instance: androidx.camera.core.MeteringPointFactory, x: Double, y: Double, size: Double?): androidx.camera.core.MeteringPoint

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMeteringPointFactory?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MeteringPointFactory.createPoint", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.MeteringPointFactory
            val xArg = args[1] as Double
            val yArg = args[2] as Double
            val sizeArg = args[3] as Double?
            val wrapped: List<Any?> = try {
              listOf(api.createPoint(pigeon_instanceArg, xArg, yArg, sizeArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MeteringPointFactory and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.MeteringPointFactory, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.MeteringPointFactory.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiSurfaceOrientedMeteringPointFactory(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(width: Double, height: Double): androidx.camera.core.SurfaceOrientedMeteringPointFactory

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiSurfaceOrientedMeteringPointFactory?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.SurfaceOrientedMeteringPointFactory.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val widthArg = args[1] as Double
            val heightArg = args[2] as Double
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(widthArg,heightArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of SurfaceOrientedMeteringPointFactory and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.SurfaceOrientedMeteringPointFactory, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.SurfaceOrientedMeteringPointFactory.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiMeteringPointFactory] used to access callback methods */
  fun pigeon_getPigeonApiMeteringPointFactory(): PigeonApiMeteringPointFactory
  {
    return pigeonRegistrar.getPigeonApiMeteringPointFactory()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMeteringPointArgs(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(point: androidx.camera.core.MeteringPoint, modes: List<MeteringMode>?): dev.hebei.camerax_android.legacy.core.FocusMeteringAction.MeteringPointArgs.Stub

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMeteringPointArgs?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MeteringPointArgs.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val pointArg = args[1] as androidx.camera.core.MeteringPoint
            val modesArg = args[2] as List<MeteringMode>?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(pointArg,modesArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MeteringPointArgs and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.FocusMeteringAction.MeteringPointArgs.Stub, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.MeteringPointArgs.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiDurationArgs(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(duration: Long, timeUnit: TimeUnit): dev.hebei.camerax_android.legacy.core.FocusMeteringAction.DurationArgs.Stub

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiDurationArgs?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.DurationArgs.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val durationArg = args[1] as Long
            val timeUnitArg = args[2] as TimeUnit
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(durationArg,timeUnitArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DurationArgs and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.FocusMeteringAction.DurationArgs.Stub, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.DurationArgs.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFocusMeteringAction(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun build(first: dev.hebei.camerax_android.legacy.core.FocusMeteringAction.MeteringPointArgs.Stub, others: List<dev.hebei.camerax_android.legacy.core.FocusMeteringAction.MeteringPointArgs.Stub>?, disableAutoCancel: Boolean?, autoCancelDuration: dev.hebei.camerax_android.legacy.core.FocusMeteringAction.DurationArgs.Stub?): androidx.camera.core.FocusMeteringAction

  abstract fun getAutoCancelDurationInMillis(pigeon_instance: androidx.camera.core.FocusMeteringAction): Long

  abstract fun getMeteringPointsAe(pigeon_instance: androidx.camera.core.FocusMeteringAction): List<androidx.camera.core.MeteringPoint>

  abstract fun getMeteringPointsAf(pigeon_instance: androidx.camera.core.FocusMeteringAction): List<androidx.camera.core.MeteringPoint>

  abstract fun getMeteringPointsAwb(pigeon_instance: androidx.camera.core.FocusMeteringAction): List<androidx.camera.core.MeteringPoint>

  abstract fun isAutoCancelEnabled(pigeon_instance: androidx.camera.core.FocusMeteringAction): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFocusMeteringAction?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringAction.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val firstArg = args[1] as dev.hebei.camerax_android.legacy.core.FocusMeteringAction.MeteringPointArgs.Stub
            val othersArg = args[2] as List<dev.hebei.camerax_android.legacy.core.FocusMeteringAction.MeteringPointArgs.Stub>?
            val disableAutoCancelArg = args[3] as Boolean?
            val autoCancelDurationArg = args[4] as dev.hebei.camerax_android.legacy.core.FocusMeteringAction.DurationArgs.Stub?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(firstArg,othersArg,disableAutoCancelArg,autoCancelDurationArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringAction.getAutoCancelDurationInMillis", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.getAutoCancelDurationInMillis(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringAction.getMeteringPointsAe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.getMeteringPointsAe(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringAction.getMeteringPointsAf", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.getMeteringPointsAf(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringAction.getMeteringPointsAwb", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.getMeteringPointsAwb(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringAction.isAutoCancelEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.isAutoCancelEnabled(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FocusMeteringAction and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.FocusMeteringAction, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.FocusMeteringAction.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFocusMeteringResult(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun isFocusSuccessful(pigeon_instance: androidx.camera.core.FocusMeteringResult): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FocusMeteringResult and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.FocusMeteringResult, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val isFocusSuccessfulArg = isFocusSuccessful(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.FocusMeteringResult.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, isFocusSuccessfulArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiDynamicRange(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(encoding: Encoding, bitDepth: BitDepth): androidx.camera.core.DynamicRange

  abstract fun encoding(pigeon_instance: androidx.camera.core.DynamicRange): Encoding

  abstract fun bitDepth(pigeon_instance: androidx.camera.core.DynamicRange): BitDepth

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiDynamicRange?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.DynamicRange.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val encodingArg = args[1] as Encoding
            val bitDepthArg = args[2] as BitDepth
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(encodingArg,bitDepthArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DynamicRange and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.DynamicRange, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val encodingArg = encoding(pigeon_instanceArg)
    val bitDepthArg = bitDepth(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.DynamicRange.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, encodingArg, bitDepthArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraInfo(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun mustPlayShutterSound(): Boolean

  abstract fun getCameraSelector(pigeon_instance: androidx.camera.core.CameraInfo): androidx.camera.core.CameraSelector

  abstract fun getCameraState(pigeon_instance: androidx.camera.core.CameraInfo): dev.hebei.camerax_android.legacy.common.CameraStateLiveData.Stub

  abstract fun getTorchState(pigeon_instance: androidx.camera.core.CameraInfo): dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub

  abstract fun getZoomState(pigeon_instance: androidx.camera.core.CameraInfo): dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub

  abstract fun getExposureState(pigeon_instance: androidx.camera.core.CameraInfo): androidx.camera.core.ExposureState

  abstract fun getIntrinsticZoomRatio(pigeon_instance: androidx.camera.core.CameraInfo): Double

  abstract fun getLensFacing(pigeon_instance: androidx.camera.core.CameraInfo): LensFacing

  abstract fun getPhysicalCameraInfos(pigeon_instance: androidx.camera.core.CameraInfo): List<androidx.camera.core.CameraInfo>

  abstract fun getSensorRotationDegrees(pigeon_instance: androidx.camera.core.CameraInfo): Long

  abstract fun getSupportedFrameRateRanges(pigeon_instance: androidx.camera.core.CameraInfo): List<dev.hebei.camerax_android.legacy.common.IntRange.Stub>

  abstract fun isLogicalMultiCameraSupported(pigeon_instance: androidx.camera.core.CameraInfo): Boolean

  abstract fun isZslSupported(pigeon_instance: androidx.camera.core.CameraInfo): Boolean

  abstract fun hasFlashUnit(pigeon_instance: androidx.camera.core.CameraInfo): Boolean

  abstract fun isFocusMeteringSupported(pigeon_instance: androidx.camera.core.CameraInfo, action: androidx.camera.core.FocusMeteringAction): Boolean

  abstract fun querySupportedDynamicRanges(pigeon_instance: androidx.camera.core.CameraInfo, candidateDynamicRanges: List<androidx.camera.core.DynamicRange>): List<androidx.camera.core.DynamicRange>

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraInfo?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.mustPlayShutterSound", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.mustPlayShutterSound())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getCameraSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getCameraSelector(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getCameraState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getCameraState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getTorchState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getTorchState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getZoomState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getZoomState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getExposureState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getExposureState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getIntrinsticZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getIntrinsticZoomRatio(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getLensFacing", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getLensFacing(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getPhysicalCameraInfos", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getPhysicalCameraInfos(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getSensorRotationDegrees", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getSensorRotationDegrees(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getSupportedFrameRateRanges", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getSupportedFrameRateRanges(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.isLogicalMultiCameraSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.isLogicalMultiCameraSupported(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.isZslSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.isZslSupported(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.hasFlashUnit", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.hasFlashUnit(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.isFocusMeteringSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val actionArg = args[1] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.isFocusMeteringSupported(pigeon_instanceArg, actionArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.querySupportedDynamicRanges", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val candidateDynamicRangesArg = args[1] as List<androidx.camera.core.DynamicRange>
            val wrapped: List<Any?> = try {
              listOf(api.querySupportedDynamicRanges(pigeon_instanceArg, candidateDynamicRangesArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.CameraInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraControl(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun enableTorch(pigeon_instance: androidx.camera.core.CameraControl, torch: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun setZoomRatio(pigeon_instance: androidx.camera.core.CameraControl, ratio: Double, callback: (Result<Unit>) -> Unit)

  abstract fun setLinearZoom(pigeon_instance: androidx.camera.core.CameraControl, linearZoom: Double, callback: (Result<Unit>) -> Unit)

  abstract fun startFocusAndMetering(pigeon_instance: androidx.camera.core.CameraControl, action: androidx.camera.core.FocusMeteringAction, callback: (Result<androidx.camera.core.FocusMeteringResult>) -> Unit)

  abstract fun cancelFocusAndMetering(pigeon_instance: androidx.camera.core.CameraControl, callback: (Result<Unit>) -> Unit)

  abstract fun setExposureCompensationIndex(pigeon_instance: androidx.camera.core.CameraControl, value: Long, callback: (Result<Long>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraControl?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.enableTorch", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            val torchArg = args[1] as Boolean
            api.enableTorch(pigeon_instanceArg, torchArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.setZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            val ratioArg = args[1] as Double
            api.setZoomRatio(pigeon_instanceArg, ratioArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.setLinearZoom", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            val linearZoomArg = args[1] as Double
            api.setLinearZoom(pigeon_instanceArg, linearZoomArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.startFocusAndMetering", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            val actionArg = args[1] as androidx.camera.core.FocusMeteringAction
            api.startFocusAndMetering(pigeon_instanceArg, actionArg) { result: Result<androidx.camera.core.FocusMeteringResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.cancelFocusAndMetering", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            api.cancelFocusAndMetering(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.setExposureCompensationIndex", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            val valueArg = args[1] as Long
            api.setExposureCompensationIndex(pigeon_instanceArg, valueArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraControl and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.CameraControl, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraControl.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAspectRatioStrategy(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(preferredAspectRatio: AspectRatio, fallbackRule: AspectRatioFallbackRule): androidx.camera.core.resolutionselector.AspectRatioStrategy

  abstract fun preferredAspectRatio(pigeon_instance: androidx.camera.core.resolutionselector.AspectRatioStrategy): AspectRatio

  abstract fun fallbackRule(pigeon_instance: androidx.camera.core.resolutionselector.AspectRatioStrategy): AspectRatioFallbackRule

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAspectRatioStrategy?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AspectRatioStrategy.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val preferredAspectRatioArg = args[1] as AspectRatio
            val fallbackRuleArg = args[2] as AspectRatioFallbackRule
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(preferredAspectRatioArg,fallbackRuleArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AspectRatioStrategy and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.resolutionselector.AspectRatioStrategy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val preferredAspectRatioArg = preferredAspectRatio(pigeon_instanceArg)
    val fallbackRuleArg = fallbackRule(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.AspectRatioStrategy.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, preferredAspectRatioArg, fallbackRuleArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiResolutionFilter(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.core.resolutionselector.ResolutionFilter

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiResolutionFilter?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionFilter.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ResolutionFilter and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.resolutionselector.ResolutionFilter, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of ResolutionFilter, but the class has a nonnull callback method.")
  }

  fun filter(pigeon_instanceArg: androidx.camera.core.resolutionselector.ResolutionFilter, supportedSizesArg: List<android.util.Size>, rotationDegreesArg: Long, callback: (Result<List<android.util.Size>>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ResolutionFilter.filter"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, supportedSizesArg, rotationDegreesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(CameraXError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as List<android.util.Size>
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiResolutionStrategy(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(boundSize: android.util.Size?, fallbackRule: ResolutionFallbackRule): androidx.camera.core.resolutionselector.ResolutionStrategy

  abstract fun boundSize(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionStrategy): android.util.Size?

  abstract fun fallbackRule(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionStrategy): ResolutionFallbackRule

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiResolutionStrategy?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionStrategy.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val boundSizeArg = args[1] as android.util.Size?
            val fallbackRuleArg = args[2] as ResolutionFallbackRule
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(boundSizeArg,fallbackRuleArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ResolutionStrategy and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.resolutionselector.ResolutionStrategy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val boundSizeArg = boundSize(pigeon_instanceArg)
    val fallbackRuleArg = fallbackRule(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ResolutionStrategy.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, boundSizeArg, fallbackRuleArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiResolutionSelector(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(allowedResolutionMode: ResolutionMode, aspectRatioStrategy: androidx.camera.core.resolutionselector.AspectRatioStrategy, resolutionFilter: androidx.camera.core.resolutionselector.ResolutionFilter?, resolutionStrategy: androidx.camera.core.resolutionselector.ResolutionStrategy?): androidx.camera.core.resolutionselector.ResolutionSelector

  abstract fun allowedResolutionMode(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionSelector): ResolutionMode

  abstract fun aspectRatioStrategy(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionSelector): androidx.camera.core.resolutionselector.AspectRatioStrategy

  abstract fun resolutionFilter(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionSelector): androidx.camera.core.resolutionselector.ResolutionFilter?

  abstract fun resolutionStrategy(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionSelector): androidx.camera.core.resolutionselector.ResolutionStrategy?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiResolutionSelector?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionSelector.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val allowedResolutionModeArg = args[1] as ResolutionMode
            val aspectRatioStrategyArg = args[2] as androidx.camera.core.resolutionselector.AspectRatioStrategy
            val resolutionFilterArg = args[3] as androidx.camera.core.resolutionselector.ResolutionFilter?
            val resolutionStrategyArg = args[4] as androidx.camera.core.resolutionselector.ResolutionStrategy?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(allowedResolutionModeArg,aspectRatioStrategyArg,resolutionFilterArg,resolutionStrategyArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ResolutionSelector and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.resolutionselector.ResolutionSelector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val allowedResolutionModeArg = allowedResolutionMode(pigeon_instanceArg)
    val aspectRatioStrategyArg = aspectRatioStrategy(pigeon_instanceArg)
    val resolutionFilterArg = resolutionFilter(pigeon_instanceArg)
    val resolutionStrategyArg = resolutionStrategy(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ResolutionSelector.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, allowedResolutionModeArg, aspectRatioStrategyArg, resolutionFilterArg, resolutionStrategyArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImageInfo(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun timestamp(pigeon_instance: androidx.camera.core.ImageInfo): Long

  abstract fun rotationDegrees(pigeon_instance: androidx.camera.core.ImageInfo): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImageInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val timestampArg = timestamp(pigeon_instanceArg)
    val rotationDegreesArg = rotationDegrees(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ImageInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, timestampArg, rotationDegreesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPlaneProxy(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun buffer(pigeon_instance: androidx.camera.core.ImageProxy.PlaneProxy): ByteArray

  abstract fun pixelStride(pigeon_instance: androidx.camera.core.ImageProxy.PlaneProxy): Long

  abstract fun rowStride(pigeon_instance: androidx.camera.core.ImageProxy.PlaneProxy): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PlaneProxy and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageProxy.PlaneProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val bufferArg = buffer(pigeon_instanceArg)
    val pixelStrideArg = pixelStride(pigeon_instanceArg)
    val rowStrideArg = rowStride(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.PlaneProxy.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, bufferArg, pixelStrideArg, rowStrideArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImageProxy(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun format(pigeon_instance: androidx.camera.core.ImageProxy): ImageFormat

  abstract fun width(pigeon_instance: androidx.camera.core.ImageProxy): Long

  abstract fun height(pigeon_instance: androidx.camera.core.ImageProxy): Long

  abstract fun planes(pigeon_instance: androidx.camera.core.ImageProxy): List<androidx.camera.core.ImageProxy.PlaneProxy>

  abstract fun imageInfo(pigeon_instance: androidx.camera.core.ImageProxy): androidx.camera.core.ImageInfo

  abstract fun getCropRect(pigeon_instance: androidx.camera.core.ImageProxy): android.graphics.Rect

  abstract fun setCropRect(pigeon_instance: androidx.camera.core.ImageProxy, rect: android.graphics.Rect?)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImageProxy?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxy.getCropRect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.ImageProxy
            val wrapped: List<Any?> = try {
              listOf(api.getCropRect(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxy.setCropRect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.ImageProxy
            val rectArg = args[1] as android.graphics.Rect?
            val wrapped: List<Any?> = try {
              api.setCropRect(pigeon_instanceArg, rectArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImageProxy and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val formatArg = format(pigeon_instanceArg)
    val widthArg = width(pigeon_instanceArg)
    val heightArg = height(pigeon_instanceArg)
    val planesArg = planes(pigeon_instanceArg)
    val imageInfoArg = imageInfo(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ImageProxy.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, formatArg, widthArg, heightArg, planesArg, imageInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAutoCloseable] used to access callback methods */
  fun pigeon_getPigeonApiAutoCloseable(): PigeonApiAutoCloseable
  {
    return pigeonRegistrar.getPigeonApiAutoCloseable()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMetadata(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(isReversedHorizontal: Boolean, isReversedVertical: Boolean, location: android.location.Location?): androidx.camera.core.ImageCapture.Metadata

  abstract fun isReversedHorizontal(pigeon_instance: androidx.camera.core.ImageCapture.Metadata): Boolean

  abstract fun isReversedVertical(pigeon_instance: androidx.camera.core.ImageCapture.Metadata): Boolean

  abstract fun location(pigeon_instance: androidx.camera.core.ImageCapture.Metadata): android.location.Location?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMetadata?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Metadata.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val isReversedHorizontalArg = args[1] as Boolean
            val isReversedVerticalArg = args[2] as Boolean
            val locationArg = args[3] as android.location.Location?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(isReversedHorizontalArg,isReversedVerticalArg,locationArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Metadata and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageCapture.Metadata, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val isReversedHorizontalArg = isReversedHorizontal(pigeon_instanceArg)
    val isReversedVerticalArg = isReversedVertical(pigeon_instanceArg)
    val locationArg = location(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Metadata.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, isReversedHorizontalArg, isReversedVerticalArg, locationArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOutputFileOptions(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun build(file: String, metadata: androidx.camera.core.ImageCapture.Metadata?): androidx.camera.core.ImageCapture.OutputFileOptions

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiOutputFileOptions?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.OutputFileOptions.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val fileArg = args[1] as String
            val metadataArg = args[2] as androidx.camera.core.ImageCapture.Metadata?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(fileArg,metadataArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OutputFileOptions and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageCapture.OutputFileOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OutputFileOptions.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOutputFileResults(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun savedUri(pigeon_instance: androidx.camera.core.ImageCapture.OutputFileResults): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OutputFileResults and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageCapture.OutputFileResults, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val savedUriArg = savedUri(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OutputFileResults.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, savedUriArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOnImageCapturedCallback(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.core.ImageCapture.OnImageCapturedCallback

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiOnImageCapturedCallback?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.OnImageCapturedCallback.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OnImageCapturedCallback and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallback.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  fun onCaptureStarted(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallback.onCaptureStarted"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  fun onCaptureProcessProgressed(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, progressArg: Long, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallback.onCaptureProcessProgressed"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, progressArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  fun onPostviewBitmapAvailable(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, bitmapArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallback.onPostviewBitmapAvailable"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, bitmapArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  fun onCaptureSuccess(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, imageArg: androidx.camera.core.ImageProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallback.onCaptureSuccess"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, imageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  fun onError(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, exceptionArg: List<Any?>, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallback.onError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, exceptionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOnImageSavedCallback(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.core.ImageCapture.OnImageSavedCallback

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiOnImageSavedCallback?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.OnImageSavedCallback.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OnImageSavedCallback and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallback.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  fun onCaptureStarted(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallback.onCaptureStarted"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  fun onCaptureProcessProgressed(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, progressArg: Long, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallback.onCaptureProcessProgressed"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, progressArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  fun onPostviewBitmapAvailable(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, bitmapArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallback.onPostviewBitmapAvailable"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, bitmapArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  fun onImageSaved(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, outputFileResultsArg: androidx.camera.core.ImageCapture.OutputFileResults, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallback.onImageSaved"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, outputFileResultsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  fun onError(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, exceptionArg: List<Any?>, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallback.onError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, exceptionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiAnalyzer(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Analyzer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageAnalysis.Analyzer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Analyzer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImageAnalyzer(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.core.ImageAnalysis.Analyzer

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImageAnalyzer?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageAnalyzer.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImageAnalyzer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageAnalysis.Analyzer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of ImageAnalyzer, but the class has a nonnull callback method.")
  }

  fun analyze(pigeon_instanceArg: androidx.camera.core.ImageAnalysis.Analyzer, imageArg: androidx.camera.core.ImageProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ImageAnalyzer.analyze"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, imageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAnalyzer] used to access callback methods */
  fun pigeon_getPigeonApiAnalyzer(): PigeonApiAnalyzer
  {
    return pigeonRegistrar.getPigeonApiAnalyzer()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiJpegAnalyzer(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(targetCoordinateSystem: CoordinateSystem): androidx.camera.core.ImageAnalysis.Analyzer

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiJpegAnalyzer?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.JpegAnalyzer.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val targetCoordinateSystemArg = args[1] as CoordinateSystem
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(targetCoordinateSystemArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of JpegAnalyzer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageAnalysis.Analyzer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of JpegAnalyzer, but the class has a nonnull callback method.")
  }

  fun consumer(pigeon_instanceArg: androidx.camera.core.ImageAnalysis.Analyzer, valueArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.JpegAnalyzer.consumer"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAnalyzer] used to access callback methods */
  fun pigeon_getPigeonApiAnalyzer(): PigeonApiAnalyzer
  {
    return pigeonRegistrar.getPigeonApiAnalyzer()
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiDetector(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Detector and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.ml.Detector.Stub, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Detector.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiCloseable] used to access callback methods */
  fun pigeon_getPigeonApiCloseable(): PigeonApiCloseable
  {
    return pigeonRegistrar.getPigeonApiCloseable()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAddress(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun type(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Address): AddressType

  abstract fun addressLines(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Address): List<String>

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Address and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.Address, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val typeArg = type(pigeon_instanceArg)
    val addressLinesArg = addressLines(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Address.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, typeArg, addressLinesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCalendarDateTime(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun rawValue(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): String?

  abstract fun year(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun month(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun day(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun hours(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun minutes(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun seconds(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun isUtc(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CalendarDateTime and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val rawValueArg = rawValue(pigeon_instanceArg)
    val yearArg = year(pigeon_instanceArg)
    val monthArg = month(pigeon_instanceArg)
    val dayArg = day(pigeon_instanceArg)
    val hoursArg = hours(pigeon_instanceArg)
    val minutesArg = minutes(pigeon_instanceArg)
    val secondsArg = seconds(pigeon_instanceArg)
    val isUtcArg = isUtc(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CalendarDateTime.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, rawValueArg, yearArg, monthArg, dayArg, hoursArg, minutesArg, secondsArg, isUtcArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCalendarEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun start(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime?

  abstract fun end(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime?

  abstract fun location(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): String?

  abstract fun organizer(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): String?

  abstract fun summary(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): String?

  abstract fun description(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): String?

  abstract fun status(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CalendarEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val startArg = start(pigeon_instanceArg)
    val endArg = end(pigeon_instanceArg)
    val locationArg = location(pigeon_instanceArg)
    val organizerArg = organizer(pigeon_instanceArg)
    val summaryArg = summary(pigeon_instanceArg)
    val descriptionArg = description(pigeon_instanceArg)
    val statusArg = status(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CalendarEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, startArg, endArg, locationArg, organizerArg, summaryArg, descriptionArg, statusArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiContactInfo(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun addresses(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): List<com.google.mlkit.vision.barcode.common.Barcode.Address>

  abstract fun emails(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): List<com.google.mlkit.vision.barcode.common.Barcode.Email>

  abstract fun name(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): com.google.mlkit.vision.barcode.common.Barcode.PersonName?

  abstract fun organization(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): String?

  abstract fun phones(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): List<com.google.mlkit.vision.barcode.common.Barcode.Phone>

  abstract fun title(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): String?

  abstract fun urls(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): List<String>

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ContactInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val addressesArg = addresses(pigeon_instanceArg)
    val emailsArg = emails(pigeon_instanceArg)
    val nameArg = name(pigeon_instanceArg)
    val organizationArg = organization(pigeon_instanceArg)
    val phonesArg = phones(pigeon_instanceArg)
    val titleArg = title(pigeon_instanceArg)
    val urlsArg = urls(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ContactInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, addressesArg, emailsArg, nameArg, organizationArg, phonesArg, titleArg, urlsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiDriverLicense(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun licenseNumber(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun documentType(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun expiryDate(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun firstName(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun middleName(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun lastName(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun gender(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun birthDate(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun issueDate(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun issuingCountry(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun addressState(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun addressCity(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun addressStreet(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun addressZip(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DriverLicense and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val licenseNumberArg = licenseNumber(pigeon_instanceArg)
    val documentTypeArg = documentType(pigeon_instanceArg)
    val expiryDateArg = expiryDate(pigeon_instanceArg)
    val firstNameArg = firstName(pigeon_instanceArg)
    val middleNameArg = middleName(pigeon_instanceArg)
    val lastNameArg = lastName(pigeon_instanceArg)
    val genderArg = gender(pigeon_instanceArg)
    val birthDateArg = birthDate(pigeon_instanceArg)
    val issueDateArg = issueDate(pigeon_instanceArg)
    val issuingCountryArg = issuingCountry(pigeon_instanceArg)
    val addressStateArg = addressState(pigeon_instanceArg)
    val addressCityArg = addressCity(pigeon_instanceArg)
    val addressStreetArg = addressStreet(pigeon_instanceArg)
    val addressZipArg = addressZip(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.DriverLicense.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, licenseNumberArg, documentTypeArg, expiryDateArg, firstNameArg, middleNameArg, lastNameArg, genderArg, birthDateArg, issueDateArg, issuingCountryArg, addressStateArg, addressCityArg, addressStreetArg, addressZipArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiEmail(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun type(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Email): EmailType

  abstract fun address(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Email): String?

  abstract fun subject(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Email): String?

  abstract fun body(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Email): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Email and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.Email, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val typeArg = type(pigeon_instanceArg)
    val addressArg = address(pigeon_instanceArg)
    val subjectArg = subject(pigeon_instanceArg)
    val bodyArg = body(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Email.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, typeArg, addressArg, subjectArg, bodyArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiGeoPoint(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun lat(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.GeoPoint): Double

  abstract fun lng(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.GeoPoint): Double

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of GeoPoint and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.GeoPoint, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val latArg = lat(pigeon_instanceArg)
    val lngArg = lng(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.GeoPoint.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, latArg, lngArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPersonName(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun formattedName(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun pronunciation(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun prefix(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun first(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun middle(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun last(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun suffix(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PersonName and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.PersonName, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val formattedNameArg = formattedName(pigeon_instanceArg)
    val pronunciationArg = pronunciation(pigeon_instanceArg)
    val prefixArg = prefix(pigeon_instanceArg)
    val firstArg = first(pigeon_instanceArg)
    val middleArg = middle(pigeon_instanceArg)
    val lastArg = last(pigeon_instanceArg)
    val suffixArg = suffix(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.PersonName.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, formattedNameArg, pronunciationArg, prefixArg, firstArg, middleArg, lastArg, suffixArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPhone(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun type(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Phone): PhoneType

  abstract fun number(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Phone): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Phone and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.Phone, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val typeArg = type(pigeon_instanceArg)
    val numberArg = number(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Phone.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, typeArg, numberArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiSms(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun phoneNumber(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Sms): String?

  abstract fun message(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Sms): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Sms and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.Sms, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val phoneNumberArg = phoneNumber(pigeon_instanceArg)
    val messageArg = message(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Sms.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, phoneNumberArg, messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiUrlBookmark(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun title(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.UrlBookmark): String?

  abstract fun url(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.UrlBookmark): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of UrlBookmark and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.UrlBookmark, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val titleArg = title(pigeon_instanceArg)
    val urlArg = url(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.UrlBookmark.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, titleArg, urlArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiWiFi(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun encryptionType(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.WiFi): WiFiEncryptionType

  abstract fun ssid(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.WiFi): String?

  abstract fun password(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.WiFi): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of WiFi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.WiFi, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val encryptionTypeArg = encryptionType(pigeon_instanceArg)
    val ssidArg = ssid(pigeon_instanceArg)
    val passwordArg = password(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.WiFi.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, encryptionTypeArg, ssidArg, passwordArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBarcode(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun boundingBox(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): android.graphics.Rect?

  abstract fun cornerPoints(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): List<android.graphics.Point>?

  abstract fun format(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): BarcodeFormat

  abstract fun valueType(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): BarcodeValueType

  abstract fun rawBytes(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): ByteArray?

  abstract fun rawValue(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): String?

  abstract fun displayValue(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): String?

  abstract fun calendarEvent(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent?

  abstract fun contactInfo(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.ContactInfo?

  abstract fun driverLicense(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.DriverLicense?

  abstract fun email(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.Email?

  abstract fun geoPoint(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.GeoPoint?

  abstract fun phone(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.Phone?

  abstract fun sms(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.Sms?

  abstract fun url(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.UrlBookmark?

  abstract fun wifi(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.WiFi?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Barcode and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val boundingBoxArg = boundingBox(pigeon_instanceArg)
    val cornerPointsArg = cornerPoints(pigeon_instanceArg)
    val formatArg = format(pigeon_instanceArg)
    val valueTypeArg = valueType(pigeon_instanceArg)
    val rawBytesArg = rawBytes(pigeon_instanceArg)
    val rawValueArg = rawValue(pigeon_instanceArg)
    val displayValueArg = displayValue(pigeon_instanceArg)
    val calendarEventArg = calendarEvent(pigeon_instanceArg)
    val contactInfoArg = contactInfo(pigeon_instanceArg)
    val driverLicenseArg = driverLicense(pigeon_instanceArg)
    val emailArg = email(pigeon_instanceArg)
    val geoPointArg = geoPoint(pigeon_instanceArg)
    val phoneArg = phone(pigeon_instanceArg)
    val smsArg = sms(pigeon_instanceArg)
    val urlArg = url(pigeon_instanceArg)
    val wifiArg = wifi(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Barcode.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, boundingBoxArg, cornerPointsArg, formatArg, valueTypeArg, rawBytesArg, rawValueArg, displayValueArg, calendarEventArg, contactInfoArg, driverLicenseArg, emailArg, geoPointArg, phoneArg, smsArg, urlArg, wifiArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomCallback(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomCallback?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomCallback.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomCallback and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of ZoomCallback, but the class has a nonnull callback method.")
  }

  fun setZoom(pigeon_instanceArg: com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback, zoomRatioArg: Double, callback: (Result<Boolean>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ZoomCallback.setZoom"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, zoomRatioArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(CameraXError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomSuggestionOptions(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun build(zoomCallback: com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback, maxSupportedZoomRatio: Double?): com.google.mlkit.vision.barcode.ZoomSuggestionOptions

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomSuggestionOptions?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomSuggestionOptions.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val zoomCallbackArg = args[1] as com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback
            val maxSupportedZoomRatioArg = args[2] as Double?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(zoomCallbackArg,maxSupportedZoomRatioArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomSuggestionOptions and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.ZoomSuggestionOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ZoomSuggestionOptions.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBarcodeScannerOptions(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun build(enableAllPotentialBarcodes: Boolean?, formats: List<BarcodeFormat>?, zoomSuggestionOptions: com.google.mlkit.vision.barcode.ZoomSuggestionOptions?): com.google.mlkit.vision.barcode.BarcodeScannerOptions

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiBarcodeScannerOptions?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.BarcodeScannerOptions.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val enableAllPotentialBarcodesArg = args[1] as Boolean?
            val formatsArg = args[2] as List<BarcodeFormat>?
            val zoomSuggestionOptionsArg = args[3] as com.google.mlkit.vision.barcode.ZoomSuggestionOptions?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(enableAllPotentialBarcodesArg,formatsArg,zoomSuggestionOptionsArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BarcodeScannerOptions and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.BarcodeScannerOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.BarcodeScannerOptions.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiMlImage(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MlImage and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.android.odml.image.MlImage, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.MlImage.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiInputImage(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of InputImage and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.common.InputImage, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.InputImage.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBarcodeScanner(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(options: com.google.mlkit.vision.barcode.BarcodeScannerOptions?): dev.hebei.camerax_android.legacy.ml.barcode.BarcodeScanner.Stub

  abstract fun process0(pigeon_instance: dev.hebei.camerax_android.legacy.ml.barcode.BarcodeScanner.Stub, image: com.google.android.odml.image.MlImage, callback: (Result<List<com.google.mlkit.vision.barcode.common.Barcode>>) -> Unit)

  abstract fun process1(pigeon_instance: dev.hebei.camerax_android.legacy.ml.barcode.BarcodeScanner.Stub, image: com.google.mlkit.vision.common.InputImage, callback: (Result<List<com.google.mlkit.vision.barcode.common.Barcode>>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiBarcodeScanner?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.BarcodeScanner.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val optionsArg = args[1] as com.google.mlkit.vision.barcode.BarcodeScannerOptions?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(optionsArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.BarcodeScanner.process0", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.ml.barcode.BarcodeScanner.Stub
            val imageArg = args[1] as com.google.android.odml.image.MlImage
            api.process0(pigeon_instanceArg, imageArg) { result: Result<List<com.google.mlkit.vision.barcode.common.Barcode>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.BarcodeScanner.process1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.ml.barcode.BarcodeScanner.Stub
            val imageArg = args[1] as com.google.mlkit.vision.common.InputImage
            api.process1(pigeon_instanceArg, imageArg) { result: Result<List<com.google.mlkit.vision.barcode.common.Barcode>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BarcodeScanner and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.ml.barcode.BarcodeScanner.Stub, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.BarcodeScanner.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiDetector] used to access callback methods */
  fun pigeon_getPigeonApiDetector(): PigeonApiDetector
  {
    return pigeonRegistrar.getPigeonApiDetector()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFaceDetectorOptions(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun build(enableTracking: Boolean?, classificationMode: FaceClassificationMode?, contourMode: FaceContourMode?, landmarkMode: FaceLandmarkMode?, minFaceSize: Double?, performanceMode: FacePerformanceMode?): com.google.mlkit.vision.face.FaceDetectorOptions

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFaceDetectorOptions?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FaceDetectorOptions.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val enableTrackingArg = args[1] as Boolean?
            val classificationModeArg = args[2] as FaceClassificationMode?
            val contourModeArg = args[3] as FaceContourMode?
            val landmarkModeArg = args[4] as FaceLandmarkMode?
            val minFaceSizeArg = args[5] as Double?
            val performanceModeArg = args[6] as FacePerformanceMode?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(enableTrackingArg,classificationModeArg,contourModeArg,landmarkModeArg,minFaceSizeArg,performanceModeArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FaceDetectorOptions and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.face.FaceDetectorOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.FaceDetectorOptions.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFaceContour(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun type(pigeon_instance: com.google.mlkit.vision.face.FaceContour): FaceContourType

  abstract fun points(pigeon_instance: com.google.mlkit.vision.face.FaceContour): List<android.graphics.PointF>

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FaceContour and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.face.FaceContour, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val typeArg = type(pigeon_instanceArg)
    val pointsArg = points(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.FaceContour.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, typeArg, pointsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFaceLandmark(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun type(pigeon_instance: com.google.mlkit.vision.face.FaceLandmark): FaceLandmarkType

  abstract fun position(pigeon_instance: com.google.mlkit.vision.face.FaceLandmark): android.graphics.PointF

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FaceLandmark and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.face.FaceLandmark, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val typeArg = type(pigeon_instanceArg)
    val positionArg = position(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.FaceLandmark.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, typeArg, positionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFace(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun boundingBox(pigeon_instance: com.google.mlkit.vision.face.Face): android.graphics.Rect

  abstract fun allContours(pigeon_instance: com.google.mlkit.vision.face.Face): List<com.google.mlkit.vision.face.FaceContour>

  abstract fun allLandmarks(pigeon_instance: com.google.mlkit.vision.face.Face): List<com.google.mlkit.vision.face.FaceLandmark>

  abstract fun headEulerAngleX(pigeon_instance: com.google.mlkit.vision.face.Face): Double

  abstract fun headEulerAngleY(pigeon_instance: com.google.mlkit.vision.face.Face): Double

  abstract fun headEulerAngleZ(pigeon_instance: com.google.mlkit.vision.face.Face): Double

  abstract fun leftEyeOpenProbability(pigeon_instance: com.google.mlkit.vision.face.Face): Double?

  abstract fun rightEyeOpenProbability(pigeon_instance: com.google.mlkit.vision.face.Face): Double?

  abstract fun smilingProbability(pigeon_instance: com.google.mlkit.vision.face.Face): Double?

  abstract fun trackingId(pigeon_instance: com.google.mlkit.vision.face.Face): Long?

  abstract fun getContour(pigeon_instance: com.google.mlkit.vision.face.Face, contourType: FaceContourType): com.google.mlkit.vision.face.FaceContour?

  abstract fun getLandmark(pigeon_instance: com.google.mlkit.vision.face.Face, landmarkType: FaceLandmarkType): com.google.mlkit.vision.face.FaceLandmark?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFace?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Face.getContour", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.mlkit.vision.face.Face
            val contourTypeArg = args[1] as FaceContourType
            val wrapped: List<Any?> = try {
              listOf(api.getContour(pigeon_instanceArg, contourTypeArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Face.getLandmark", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.mlkit.vision.face.Face
            val landmarkTypeArg = args[1] as FaceLandmarkType
            val wrapped: List<Any?> = try {
              listOf(api.getLandmark(pigeon_instanceArg, landmarkTypeArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Face and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.face.Face, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val boundingBoxArg = boundingBox(pigeon_instanceArg)
    val allContoursArg = allContours(pigeon_instanceArg)
    val allLandmarksArg = allLandmarks(pigeon_instanceArg)
    val headEulerAngleXArg = headEulerAngleX(pigeon_instanceArg)
    val headEulerAngleYArg = headEulerAngleY(pigeon_instanceArg)
    val headEulerAngleZArg = headEulerAngleZ(pigeon_instanceArg)
    val leftEyeOpenProbabilityArg = leftEyeOpenProbability(pigeon_instanceArg)
    val rightEyeOpenProbabilityArg = rightEyeOpenProbability(pigeon_instanceArg)
    val smilingProbabilityArg = smilingProbability(pigeon_instanceArg)
    val trackingIdArg = trackingId(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Face.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, boundingBoxArg, allContoursArg, allLandmarksArg, headEulerAngleXArg, headEulerAngleYArg, headEulerAngleZArg, leftEyeOpenProbabilityArg, rightEyeOpenProbabilityArg, smilingProbabilityArg, trackingIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFaceDetector(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(options: com.google.mlkit.vision.face.FaceDetectorOptions?): dev.hebei.camerax_android.legacy.ml.face.FaceDetector.Stub

  abstract fun process0(pigeon_instance: dev.hebei.camerax_android.legacy.ml.face.FaceDetector.Stub, image: com.google.android.odml.image.MlImage, callback: (Result<List<com.google.mlkit.vision.face.Face>>) -> Unit)

  abstract fun process1(pigeon_instance: dev.hebei.camerax_android.legacy.ml.face.FaceDetector.Stub, image: com.google.mlkit.vision.common.InputImage, callback: (Result<List<com.google.mlkit.vision.face.Face>>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFaceDetector?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FaceDetector.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val optionsArg = args[1] as com.google.mlkit.vision.face.FaceDetectorOptions?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(optionsArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FaceDetector.process0", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.ml.face.FaceDetector.Stub
            val imageArg = args[1] as com.google.android.odml.image.MlImage
            api.process0(pigeon_instanceArg, imageArg) { result: Result<List<com.google.mlkit.vision.face.Face>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FaceDetector.process1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.ml.face.FaceDetector.Stub
            val imageArg = args[1] as com.google.mlkit.vision.common.InputImage
            api.process1(pigeon_instanceArg, imageArg) { result: Result<List<com.google.mlkit.vision.face.Face>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FaceDetector and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.ml.face.FaceDetector.Stub, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.FaceDetector.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiDetector] used to access callback methods */
  fun pigeon_getPigeonApiDetector(): PigeonApiDetector
  {
    return pigeonRegistrar.getPigeonApiDetector()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMlKitAnalyzerResult(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun timestamp(pigeon_instance: androidx.camera.mlkit.vision.MlKitAnalyzer.Result): Long

  abstract fun getThrowable(pigeon_instance: androidx.camera.mlkit.vision.MlKitAnalyzer.Result, detector: dev.hebei.camerax_android.legacy.ml.Detector.Stub): List<Any?>?

  abstract fun getBarcodes(pigeon_instance: androidx.camera.mlkit.vision.MlKitAnalyzer.Result, detector: dev.hebei.camerax_android.legacy.ml.barcode.BarcodeScanner.Stub): List<com.google.mlkit.vision.barcode.common.Barcode>?

  abstract fun getFaces(pigeon_instance: androidx.camera.mlkit.vision.MlKitAnalyzer.Result, detector: dev.hebei.camerax_android.legacy.ml.face.FaceDetector.Stub): List<com.google.mlkit.vision.face.Face>?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMlKitAnalyzerResult?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResult.getThrowable", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.mlkit.vision.MlKitAnalyzer.Result
            val detectorArg = args[1] as dev.hebei.camerax_android.legacy.ml.Detector.Stub
            val wrapped: List<Any?> = try {
              listOf(api.getThrowable(pigeon_instanceArg, detectorArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResult.getBarcodes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.mlkit.vision.MlKitAnalyzer.Result
            val detectorArg = args[1] as dev.hebei.camerax_android.legacy.ml.barcode.BarcodeScanner.Stub
            val wrapped: List<Any?> = try {
              listOf(api.getBarcodes(pigeon_instanceArg, detectorArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResult.getFaces", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.mlkit.vision.MlKitAnalyzer.Result
            val detectorArg = args[1] as dev.hebei.camerax_android.legacy.ml.face.FaceDetector.Stub
            val wrapped: List<Any?> = try {
              listOf(api.getFaces(pigeon_instanceArg, detectorArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MlKitAnalyzerResult and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.mlkit.vision.MlKitAnalyzer.Result, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val timestampArg = timestamp(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResult.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, timestampArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMlKitAnalyzerResultConsumer(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.legacy.common.MlKitAnalyzerResultConsumer.Impl

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMlKitAnalyzerResultConsumer?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResultConsumer.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MlKitAnalyzerResultConsumer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.MlKitAnalyzerResultConsumer.Impl, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of MlKitAnalyzerResultConsumer, but the class has a nonnull callback method.")
  }

  fun accept(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.MlKitAnalyzerResultConsumer.Impl, valueArg: androidx.camera.mlkit.vision.MlKitAnalyzer.Result, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResultConsumer.accept"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMlKitAnalyzer(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(detectors: List<dev.hebei.camerax_android.legacy.ml.Detector.Stub>, targetCoordinateSystem: CoordinateSystem, consumer: dev.hebei.camerax_android.legacy.common.MlKitAnalyzerResultConsumer.Impl): androidx.camera.mlkit.vision.MlKitAnalyzer

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMlKitAnalyzer?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MlKitAnalyzer.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val detectorsArg = args[1] as List<dev.hebei.camerax_android.legacy.ml.Detector.Stub>
            val targetCoordinateSystemArg = args[2] as CoordinateSystem
            val consumerArg = args[3] as dev.hebei.camerax_android.legacy.common.MlKitAnalyzerResultConsumer.Impl
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(detectorsArg,targetCoordinateSystemArg,consumerArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MlKitAnalyzer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.mlkit.vision.MlKitAnalyzer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.MlKitAnalyzer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAnalyzer] used to access callback methods */
  fun pigeon_getPigeonApiAnalyzer(): PigeonApiAnalyzer
  {
    return pigeonRegistrar.getPigeonApiAnalyzer()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiQuality(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun fhd(): androidx.camera.video.Quality

  abstract fun hd(): androidx.camera.video.Quality

  abstract fun highest(): androidx.camera.video.Quality

  abstract fun lowest(): androidx.camera.video.Quality

  abstract fun sd(): androidx.camera.video.Quality

  abstract fun uhd(): androidx.camera.video.Quality

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiQuality?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.fhd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.fhd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.hd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.hd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.highest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.highest(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.lowest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.lowest(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.sd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.sd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.uhd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.uhd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Quality and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.Quality, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Quality.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFallbackStrategy(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun higherQualityOrLowerThan(quality: androidx.camera.video.Quality): androidx.camera.video.FallbackStrategy

  abstract fun higherQualityThan(quality: androidx.camera.video.Quality): androidx.camera.video.FallbackStrategy

  abstract fun lowerQualityOrHigherThan(quality: androidx.camera.video.Quality): androidx.camera.video.FallbackStrategy

  abstract fun lowerQualityThan(quality: androidx.camera.video.Quality): androidx.camera.video.FallbackStrategy

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFallbackStrategy?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategy.higherQualityOrLowerThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as androidx.camera.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.higherQualityOrLowerThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategy.higherQualityThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as androidx.camera.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.higherQualityThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategy.lowerQualityOrHigherThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as androidx.camera.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.lowerQualityOrHigherThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategy.lowerQualityThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as androidx.camera.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.lowerQualityThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FallbackStrategy and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.FallbackStrategy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.FallbackStrategy.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiQualitySelector(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun from(quality: androidx.camera.video.Quality, fallbackStrategy: androidx.camera.video.FallbackStrategy?): androidx.camera.video.QualitySelector

  abstract fun fromOrderedList(qualities: List<androidx.camera.video.Quality>, fallbackStrategy: androidx.camera.video.FallbackStrategy?): androidx.camera.video.QualitySelector

  abstract fun getResolution(cameraInfo: androidx.camera.core.CameraInfo, quality: androidx.camera.video.Quality): android.util.Size?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiQualitySelector?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelector.from", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as androidx.camera.video.Quality
            val fallbackStrategyArg = args[2] as androidx.camera.video.FallbackStrategy?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.from(qualityArg,fallbackStrategyArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelector.fromOrderedList", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualitiesArg = args[1] as List<androidx.camera.video.Quality>
            val fallbackStrategyArg = args[2] as androidx.camera.video.FallbackStrategy?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.fromOrderedList(qualitiesArg,fallbackStrategyArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelector.getResolution", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val cameraInfoArg = args[0] as androidx.camera.core.CameraInfo
            val qualityArg = args[1] as androidx.camera.video.Quality
            val wrapped: List<Any?> = try {
              listOf(api.getResolution(cameraInfoArg, qualityArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of QualitySelector and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.QualitySelector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.QualitySelector.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFileOutputOptions(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun build(file: String, durationLimitMillis: Long?, fileSizeLimitBytes: Long?, location: android.location.Location?): androidx.camera.video.FileOutputOptions

  abstract fun file(pigeon_instance: androidx.camera.video.FileOutputOptions): String

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFileOutputOptions?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FileOutputOptions.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val fileArg = args[1] as String
            val durationLimitMillisArg = args[2] as Long?
            val fileSizeLimitBytesArg = args[3] as Long?
            val locationArg = args[4] as android.location.Location?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(fileArg,durationLimitMillisArg,fileSizeLimitBytesArg,locationArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FileOutputOptions and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.FileOutputOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val fileArg = file(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.FileOutputOptions.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, fileArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAudioConfig(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun create(enableAudio: Boolean): androidx.camera.view.video.AudioConfig

  abstract fun audioDisabled(): androidx.camera.view.video.AudioConfig

  abstract fun getAudioEnabled(pigeon_instance: androidx.camera.view.video.AudioConfig): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAudioConfig?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioConfig.create", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val enableAudioArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.create(enableAudioArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioConfig.audioDisabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.audioDisabled(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioConfig.getAudioEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.video.AudioConfig
            val wrapped: List<Any?> = try {
              listOf(api.getAudioEnabled(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AudioConfig and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.view.video.AudioConfig, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.AudioConfig.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAudioStats(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun audioAmplitude(pigeon_instance: androidx.camera.video.AudioStats): Double

  abstract fun audioState(pigeon_instance: androidx.camera.video.AudioStats): AudioState

  abstract fun errorCause(pigeon_instance: androidx.camera.video.AudioStats): List<Any?>?

  abstract fun hasAudio(pigeon_instance: androidx.camera.video.AudioStats): Boolean

  abstract fun hasError(pigeon_instance: androidx.camera.video.AudioStats): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AudioStats and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.AudioStats, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val audioAmplitudeArg = audioAmplitude(pigeon_instanceArg)
    val audioStateArg = audioState(pigeon_instanceArg)
    val errorCauseArg = errorCause(pigeon_instanceArg)
    val hasAudioArg = hasAudio(pigeon_instanceArg)
    val hasErrorArg = hasError(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.AudioStats.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, audioAmplitudeArg, audioStateArg, errorCauseArg, hasAudioArg, hasErrorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiRecordingStats(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun audioStats(pigeon_instance: androidx.camera.video.RecordingStats): androidx.camera.video.AudioStats

  abstract fun numBytesRecorded(pigeon_instance: androidx.camera.video.RecordingStats): Long

  abstract fun recordedDurationNanos(pigeon_instance: androidx.camera.video.RecordingStats): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of RecordingStats and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.RecordingStats, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val audioStatsArg = audioStats(pigeon_instanceArg)
    val numBytesRecordedArg = numBytesRecorded(pigeon_instanceArg)
    val recordedDurationNanosArg = recordedDurationNanos(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.RecordingStats.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, audioStatsArg, numBytesRecordedArg, recordedDurationNanosArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiVideoRecordEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordStatusEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun recordingStats(pigeon_instance: androidx.camera.video.VideoRecordEvent.Status): androidx.camera.video.RecordingStats

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordStatusEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent.Status, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val recordingStatsArg = recordingStats(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordStatusEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, recordingStatsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiVideoRecordEvent] used to access callback methods */
  fun pigeon_getPigeonApiVideoRecordEvent(): PigeonApiVideoRecordEvent
  {
    return pigeonRegistrar.getPigeonApiVideoRecordEvent()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordStartEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun recordingStats(pigeon_instance: androidx.camera.video.VideoRecordEvent.Start): androidx.camera.video.RecordingStats

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordStartEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent.Start, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val recordingStatsArg = recordingStats(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordStartEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, recordingStatsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiVideoRecordEvent] used to access callback methods */
  fun pigeon_getPigeonApiVideoRecordEvent(): PigeonApiVideoRecordEvent
  {
    return pigeonRegistrar.getPigeonApiVideoRecordEvent()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordPauseEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun recordingStats(pigeon_instance: androidx.camera.video.VideoRecordEvent.Pause): androidx.camera.video.RecordingStats

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordPauseEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent.Pause, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val recordingStatsArg = recordingStats(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordPauseEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, recordingStatsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiVideoRecordEvent] used to access callback methods */
  fun pigeon_getPigeonApiVideoRecordEvent(): PigeonApiVideoRecordEvent
  {
    return pigeonRegistrar.getPigeonApiVideoRecordEvent()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordResumeEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun recordingStats(pigeon_instance: androidx.camera.video.VideoRecordEvent.Resume): androidx.camera.video.RecordingStats

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordResumeEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent.Resume, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val recordingStatsArg = recordingStats(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordResumeEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, recordingStatsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiVideoRecordEvent] used to access callback methods */
  fun pigeon_getPigeonApiVideoRecordEvent(): PigeonApiVideoRecordEvent
  {
    return pigeonRegistrar.getPigeonApiVideoRecordEvent()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOutputResults(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun outputUri(pigeon_instance: androidx.camera.video.OutputResults): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OutputResults and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.OutputResults, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val outputUriArg = outputUri(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OutputResults.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, outputUriArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordFinalizeEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun recordingStats(pigeon_instance: androidx.camera.video.VideoRecordEvent.Finalize): androidx.camera.video.RecordingStats

  abstract fun cause(pigeon_instance: androidx.camera.video.VideoRecordEvent.Finalize): List<Any?>?

  abstract fun error(pigeon_instance: androidx.camera.video.VideoRecordEvent.Finalize): VideoRecordFinalizeEventError

  abstract fun outputResults(pigeon_instance: androidx.camera.video.VideoRecordEvent.Finalize): androidx.camera.video.OutputResults

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordFinalizeEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent.Finalize, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val recordingStatsArg = recordingStats(pigeon_instanceArg)
    val causeArg = cause(pigeon_instanceArg)
    val errorArg = error(pigeon_instanceArg)
    val outputResultsArg = outputResults(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordFinalizeEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, recordingStatsArg, causeArg, errorArg, outputResultsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiVideoRecordEvent] used to access callback methods */
  fun pigeon_getPigeonApiVideoRecordEvent(): PigeonApiVideoRecordEvent
  {
    return pigeonRegistrar.getPigeonApiVideoRecordEvent()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordEventConsumer(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.legacy.common.VideoRecordEventConsumer.Impl

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoRecordEventConsumer?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.VideoRecordEventConsumer.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordEventConsumer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.VideoRecordEventConsumer.Impl, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of VideoRecordEventConsumer, but the class has a nonnull callback method.")
  }

  fun accept(pigeon_instanceArg: dev.hebei.camerax_android.legacy.common.VideoRecordEventConsumer.Impl, valueArg: androidx.camera.video.VideoRecordEvent, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordEventConsumer.accept"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiRecording(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun isPersistene(pigeon_instance: androidx.camera.video.Recording): Boolean

  abstract fun mute(pigeon_instance: androidx.camera.video.Recording, muted: Boolean)

  abstract fun pause(pigeon_instance: androidx.camera.video.Recording)

  abstract fun resume(pigeon_instance: androidx.camera.video.Recording)

  abstract fun stop(pigeon_instance: androidx.camera.video.Recording)

  abstract fun close(pigeon_instance: androidx.camera.video.Recording)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiRecording?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.isPersistene", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val wrapped: List<Any?> = try {
              listOf(api.isPersistene(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.mute", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val mutedArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              api.mute(pigeon_instanceArg, mutedArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.pause", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val wrapped: List<Any?> = try {
              api.pause(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.resume", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val wrapped: List<Any?> = try {
              api.resume(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.stop", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val wrapped: List<Any?> = try {
              api.stop(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.close", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val wrapped: List<Any?> = try {
              api.close(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Recording and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.Recording, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Recording.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraController(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun initialize(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Unit>) -> Unit)

  abstract fun hasCamera(pigeon_instance: androidx.camera.view.CameraController, cameraSelector: androidx.camera.core.CameraSelector, callback: (Result<Boolean>) -> Unit)

  abstract fun getCameraSelector(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.CameraSelector>) -> Unit)

  abstract fun setCameraSelector(pigeon_instance: androidx.camera.view.CameraController, cameraSelector: androidx.camera.core.CameraSelector, callback: (Result<Unit>) -> Unit)

  abstract fun getCameraInfo(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.CameraInfo?>) -> Unit)

  abstract fun getCameraControl(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.CameraControl?>) -> Unit)

  abstract fun getTorchState(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub>) -> Unit)

  abstract fun enableTorch(pigeon_instance: androidx.camera.view.CameraController, torchEnabled: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun getZoomState(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub>) -> Unit)

  abstract fun setZoomRatio(pigeon_instance: androidx.camera.view.CameraController, zoomRatio: Double, callback: (Result<Unit>) -> Unit)

  abstract fun setLinearZoom(pigeon_instance: androidx.camera.view.CameraController, linearZoom: Double, callback: (Result<Unit>) -> Unit)

  abstract fun isPinchToZoomEnabled(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun setPinchToZoomEnabled(pigeon_instance: androidx.camera.view.CameraController, enabled: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun isTapToFocusEnabled(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun setTapToFocusEnabled(pigeon_instance: androidx.camera.view.CameraController, enabled: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun isImageCaptureEnabled(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun isImageAnalysisEnabled(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun isVideoCaptureEnabled(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun setEnabledUseCases(pigeon_instance: androidx.camera.view.CameraController, enabledUseCases: List<UseCase>, callback: (Result<Unit>) -> Unit)

  abstract fun getPreviewResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.resolutionselector.ResolutionSelector?>) -> Unit)

  abstract fun setPreviewResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, resolutionSelector: androidx.camera.core.resolutionselector.ResolutionSelector?, callback: (Result<Unit>) -> Unit)

  abstract fun getImageCaptureResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.resolutionselector.ResolutionSelector?>) -> Unit)

  abstract fun setImageCaptureResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, resolutionSelector: androidx.camera.core.resolutionselector.ResolutionSelector?, callback: (Result<Unit>) -> Unit)

  abstract fun getImageCaptureMode(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<CaptureMode>) -> Unit)

  abstract fun setImageCaptureMode(pigeon_instance: androidx.camera.view.CameraController, captureMode: CaptureMode, callback: (Result<Unit>) -> Unit)

  abstract fun getImageCaptureFlashMode(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<FlashMode>) -> Unit)

  abstract fun setImageCaptureFlashMode(pigeon_instance: androidx.camera.view.CameraController, flashMode: FlashMode, callback: (Result<Unit>) -> Unit)

  abstract fun takePictureToMemory(pigeon_instance: androidx.camera.view.CameraController, capturedCallback: androidx.camera.core.ImageCapture.OnImageCapturedCallback, callback: (Result<Unit>) -> Unit)

  abstract fun takePictureToFile(pigeon_instance: androidx.camera.view.CameraController, outputFileOptions: androidx.camera.core.ImageCapture.OutputFileOptions, savedCallback: androidx.camera.core.ImageCapture.OnImageSavedCallback, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.resolutionselector.ResolutionSelector?>) -> Unit)

  abstract fun setImageAnalysisResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, resolutionSelector: androidx.camera.core.resolutionselector.ResolutionSelector?, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisBackpressureStrategy(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<BackpressureStrategy>) -> Unit)

  abstract fun setImageAnalysisBackpressureStrategy(pigeon_instance: androidx.camera.view.CameraController, strategy: BackpressureStrategy, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisImageQueueDepth(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Long>) -> Unit)

  abstract fun setImageAnalysisImageQueueDepth(pigeon_instance: androidx.camera.view.CameraController, depth: Long, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisOutputImageFormat(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<ImageFormat>) -> Unit)

  abstract fun setImageAnalysisOutputImageFormat(pigeon_instance: androidx.camera.view.CameraController, imageAnalysisOutputImageFormat: ImageFormat, callback: (Result<Unit>) -> Unit)

  abstract fun setImageAnalysisAnalyzer(pigeon_instance: androidx.camera.view.CameraController, analyzer: androidx.camera.core.ImageAnalysis.Analyzer, callback: (Result<Unit>) -> Unit)

  abstract fun clearImageAnalysisAnalyzer(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureDynamicRange(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.DynamicRange>) -> Unit)

  abstract fun setVideoCaptureDynamicRange(pigeon_instance: androidx.camera.view.CameraController, dynamicRange: androidx.camera.core.DynamicRange, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureMirrorMode(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<MirrorMode>) -> Unit)

  abstract fun setVideoCaptureMirrorMode(pigeon_instance: androidx.camera.view.CameraController, mirrorMode: MirrorMode, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureQualitySelector(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.video.QualitySelector>) -> Unit)

  abstract fun setVideoCaptureQualitySelector(pigeon_instance: androidx.camera.view.CameraController, qualitySelector: androidx.camera.video.QualitySelector, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureTargetFrameRate(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<dev.hebei.camerax_android.legacy.common.IntRange.Stub>) -> Unit)

  abstract fun setVideoCaptureTargetFrameRate(pigeon_instance: androidx.camera.view.CameraController, targetFrameRate: dev.hebei.camerax_android.legacy.common.IntRange.Stub, callback: (Result<Unit>) -> Unit)

  abstract fun isRecording(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun startRecording(pigeon_instance: androidx.camera.view.CameraController, outputOptions: androidx.camera.video.FileOutputOptions, audioConfig: androidx.camera.view.video.AudioConfig, listener: dev.hebei.camerax_android.legacy.common.VideoRecordEventConsumer.Impl, callback: (Result<androidx.camera.video.Recording>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraController?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.initialize(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.hasCamera", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val cameraSelectorArg = args[1] as androidx.camera.core.CameraSelector
            api.hasCamera(pigeon_instanceArg, cameraSelectorArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getCameraSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getCameraSelector(pigeon_instanceArg) { result: Result<androidx.camera.core.CameraSelector> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setCameraSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val cameraSelectorArg = args[1] as androidx.camera.core.CameraSelector
            api.setCameraSelector(pigeon_instanceArg, cameraSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getCameraInfo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getCameraInfo(pigeon_instanceArg) { result: Result<androidx.camera.core.CameraInfo?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getCameraControl", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getCameraControl(pigeon_instanceArg) { result: Result<androidx.camera.core.CameraControl?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getTorchState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getTorchState(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.legacy.common.TorchStateLiveData.Stub> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.enableTorch", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val torchEnabledArg = args[1] as Boolean
            api.enableTorch(pigeon_instanceArg, torchEnabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getZoomState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getZoomState(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.legacy.common.ZoomStateLiveData.Stub> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val zoomRatioArg = args[1] as Double
            api.setZoomRatio(pigeon_instanceArg, zoomRatioArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setLinearZoom", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val linearZoomArg = args[1] as Double
            api.setLinearZoom(pigeon_instanceArg, linearZoomArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isPinchToZoomEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isPinchToZoomEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setPinchToZoomEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val enabledArg = args[1] as Boolean
            api.setPinchToZoomEnabled(pigeon_instanceArg, enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isTapToFocusEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isTapToFocusEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setTapToFocusEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val enabledArg = args[1] as Boolean
            api.setTapToFocusEnabled(pigeon_instanceArg, enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isImageCaptureEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isImageCaptureEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isImageAnalysisEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isImageAnalysisEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isVideoCaptureEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isVideoCaptureEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setEnabledUseCases", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val enabledUseCasesArg = args[1] as List<UseCase>
            api.setEnabledUseCases(pigeon_instanceArg, enabledUseCasesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getPreviewResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getPreviewResolutionSelector(pigeon_instanceArg) { result: Result<androidx.camera.core.resolutionselector.ResolutionSelector?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setPreviewResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val resolutionSelectorArg = args[1] as androidx.camera.core.resolutionselector.ResolutionSelector?
            api.setPreviewResolutionSelector(pigeon_instanceArg, resolutionSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageCaptureResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageCaptureResolutionSelector(pigeon_instanceArg) { result: Result<androidx.camera.core.resolutionselector.ResolutionSelector?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageCaptureResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val resolutionSelectorArg = args[1] as androidx.camera.core.resolutionselector.ResolutionSelector?
            api.setImageCaptureResolutionSelector(pigeon_instanceArg, resolutionSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageCaptureMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageCaptureMode(pigeon_instanceArg) { result: Result<CaptureMode> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageCaptureMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val captureModeArg = args[1] as CaptureMode
            api.setImageCaptureMode(pigeon_instanceArg, captureModeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageCaptureFlashMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageCaptureFlashMode(pigeon_instanceArg) { result: Result<FlashMode> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageCaptureFlashMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val flashModeArg = args[1] as FlashMode
            api.setImageCaptureFlashMode(pigeon_instanceArg, flashModeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.takePictureToMemory", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val capturedCallbackArg = args[1] as androidx.camera.core.ImageCapture.OnImageCapturedCallback
            api.takePictureToMemory(pigeon_instanceArg, capturedCallbackArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.takePictureToFile", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val outputFileOptionsArg = args[1] as androidx.camera.core.ImageCapture.OutputFileOptions
            val savedCallbackArg = args[2] as androidx.camera.core.ImageCapture.OnImageSavedCallback
            api.takePictureToFile(pigeon_instanceArg, outputFileOptionsArg, savedCallbackArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageAnalysisResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageAnalysisResolutionSelector(pigeon_instanceArg) { result: Result<androidx.camera.core.resolutionselector.ResolutionSelector?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageAnalysisResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val resolutionSelectorArg = args[1] as androidx.camera.core.resolutionselector.ResolutionSelector?
            api.setImageAnalysisResolutionSelector(pigeon_instanceArg, resolutionSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageAnalysisBackpressureStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageAnalysisBackpressureStrategy(pigeon_instanceArg) { result: Result<BackpressureStrategy> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageAnalysisBackpressureStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val strategyArg = args[1] as BackpressureStrategy
            api.setImageAnalysisBackpressureStrategy(pigeon_instanceArg, strategyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageAnalysisImageQueueDepth", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageAnalysisImageQueueDepth(pigeon_instanceArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageAnalysisImageQueueDepth", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val depthArg = args[1] as Long
            api.setImageAnalysisImageQueueDepth(pigeon_instanceArg, depthArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageAnalysisOutputImageFormat", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageAnalysisOutputImageFormat(pigeon_instanceArg) { result: Result<ImageFormat> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageAnalysisOutputImageFormat", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val imageAnalysisOutputImageFormatArg = args[1] as ImageFormat
            api.setImageAnalysisOutputImageFormat(pigeon_instanceArg, imageAnalysisOutputImageFormatArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageAnalysisAnalyzer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val analyzerArg = args[1] as androidx.camera.core.ImageAnalysis.Analyzer
            api.setImageAnalysisAnalyzer(pigeon_instanceArg, analyzerArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.clearImageAnalysisAnalyzer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.clearImageAnalysisAnalyzer(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getVideoCaptureDynamicRange", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getVideoCaptureDynamicRange(pigeon_instanceArg) { result: Result<androidx.camera.core.DynamicRange> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setVideoCaptureDynamicRange", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val dynamicRangeArg = args[1] as androidx.camera.core.DynamicRange
            api.setVideoCaptureDynamicRange(pigeon_instanceArg, dynamicRangeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getVideoCaptureMirrorMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getVideoCaptureMirrorMode(pigeon_instanceArg) { result: Result<MirrorMode> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setVideoCaptureMirrorMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val mirrorModeArg = args[1] as MirrorMode
            api.setVideoCaptureMirrorMode(pigeon_instanceArg, mirrorModeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getVideoCaptureQualitySelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getVideoCaptureQualitySelector(pigeon_instanceArg) { result: Result<androidx.camera.video.QualitySelector> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setVideoCaptureQualitySelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val qualitySelectorArg = args[1] as androidx.camera.video.QualitySelector
            api.setVideoCaptureQualitySelector(pigeon_instanceArg, qualitySelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getVideoCaptureTargetFrameRate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getVideoCaptureTargetFrameRate(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.legacy.common.IntRange.Stub> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setVideoCaptureTargetFrameRate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val targetFrameRateArg = args[1] as dev.hebei.camerax_android.legacy.common.IntRange.Stub
            api.setVideoCaptureTargetFrameRate(pigeon_instanceArg, targetFrameRateArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isRecording", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isRecording(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.startRecording", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val outputOptionsArg = args[1] as androidx.camera.video.FileOutputOptions
            val audioConfigArg = args[2] as androidx.camera.view.video.AudioConfig
            val listenerArg = args[3] as dev.hebei.camerax_android.legacy.common.VideoRecordEventConsumer.Impl
            api.startRecording(pigeon_instanceArg, outputOptionsArg, audioConfigArg, listenerArg) { result: Result<androidx.camera.video.Recording> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraController and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.view.CameraController, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraController.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiLifecycleCameraController(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.view.LifecycleCameraController

  abstract fun bindToLifecycle(pigeon_instance: androidx.camera.view.LifecycleCameraController, callback: (Result<Unit>) -> Unit)

  abstract fun unbind(pigeon_instance: androidx.camera.view.LifecycleCameraController, callback: (Result<Unit>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiLifecycleCameraController?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LifecycleCameraController.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LifecycleCameraController.bindToLifecycle", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.LifecycleCameraController
            api.bindToLifecycle(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LifecycleCameraController.unbind", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.LifecycleCameraController
            api.unbind(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of LifecycleCameraController and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.view.LifecycleCameraController, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.LifecycleCameraController.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiCameraController] used to access callback methods */
  fun pigeon_getPigeonApiCameraController(): PigeonApiCameraController
  {
    return pigeonRegistrar.getPigeonApiCameraController()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPreviewView(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.view.PreviewView

  abstract fun getController(pigeon_instance: androidx.camera.view.PreviewView, callback: (Result<androidx.camera.view.CameraController?>) -> Unit)

  abstract fun setController(pigeon_instance: androidx.camera.view.PreviewView, controller: androidx.camera.view.CameraController?, callback: (Result<Unit>) -> Unit)

  abstract fun getScaleType(pigeon_instance: androidx.camera.view.PreviewView, callback: (Result<ScaleType>) -> Unit)

  abstract fun setScaleType(pigeon_instance: androidx.camera.view.PreviewView, scaleType: ScaleType, callback: (Result<Unit>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPreviewView?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewView.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewView.getController", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.PreviewView
            api.getController(pigeon_instanceArg) { result: Result<androidx.camera.view.CameraController?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewView.setController", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.PreviewView
            val controllerArg = args[1] as androidx.camera.view.CameraController?
            api.setController(pigeon_instanceArg, controllerArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewView.getScaleType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.PreviewView
            api.getScaleType(pigeon_instanceArg) { result: Result<ScaleType> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewView.setScaleType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.PreviewView
            val scaleTypeArg = args[1] as ScaleType
            api.setScaleType(pigeon_instanceArg, scaleTypeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PreviewView and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.view.PreviewView, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.PreviewView.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
