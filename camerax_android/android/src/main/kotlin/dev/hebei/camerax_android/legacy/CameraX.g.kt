// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.hebei.camerax_android.legacy

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is CameraXError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): CameraXError {
  return CameraXError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class CameraXError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * Objects stored in this container are represented by an object in Dart that is also stored in
 * an InstanceManager with the same identifier.
 *
 * When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * Added instances are added as a weak reference and a strong reference. When the strong
 * reference is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener.onFinalize` is called with the instance's identifier. However, if the strong
 * reference is removed and then the identifier is retrieved with the intention to pass the identifier
 * to Dart (e.g. calling [getIdentifierForStrongReference]), the strong reference to the instance
 * is recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate")
class CameraXPigeonInstanceManager(private val finalizationListener: PigeonFinalizationListener) {
  /** Interface for listening when a weak reference of an instance is removed from the manager.  */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  private val identifiers = java.util.WeakHashMap<Any, Long>()
  private val weakInstances = HashMap<Long, java.lang.ref.WeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<java.lang.ref.WeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  /**
   * Modifies the time interval used to define how often this instance removes garbage collected
   * weak references to native Android objects that this instance was managing.
   */
  var clearFinalizedWeakReferencesInterval: Long = 3000
    set(value) {
      handler.removeCallbacks { this.releaseAllFinalizedInstances() }
      field = value
      releaseAllFinalizedInstances()
    }

  init {
    handler.postDelayed(
      { releaseAllFinalizedInstances() },
      clearFinalizedWeakReferencesInterval
    )
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager with a listener for garbage collected weak
     * references.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     */
    fun create(finalizationListener: PigeonFinalizationListener): CameraXPigeonInstanceManager {
      return CameraXPigeonInstanceManager(finalizationListener)
    }
  }

  /**
   * Removes `identifier` and return its associated strongly referenced instance, if present,
   * from the manager.
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance, if present, otherwise `null`.
   *
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `CameraXPigeonInstanceManager` to have, or recreate, a weak reference to the Dart instance the
   * identifier is associated with.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    val identifier = identifiers[instance]
    if (identifier != null) {
      strongInstances[identifier] = instance!!
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This
   * allows two objects that are equivalent (e.g. the `equals` method returns true and their
   * hashcodes are equal) to both be added.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new unique instance that was instantiated from the host platform.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) { "Instance of ${instance.javaClass} has already been added." }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /** Retrieves the instance associated with identifier, if present, otherwise `null`. */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as java.lang.ref.WeakReference<T>?
    return instance?.get()
  }

  /** Returns whether this manager contains the given `instance`. */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return identifiers.containsKey(instance)
  }

  /**
   * Stops the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks { this.releaseAllFinalizedInstances() }
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: java.lang.ref.WeakReference<Any>?
    while ((referenceQueue.poll() as java.lang.ref.WeakReference<Any>?).also { reference = it } != null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed(
      { releaseAllFinalizedInstances() },
      clearFinalizedWeakReferencesInterval
    )
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = java.lang.ref.WeakReference(instance, referenceQueue)
    identifiers[instance] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
        tag,
        "The manager was used after calls to the PigeonFinalizationListener has been stopped."
      )
    }
  }
}


/** Generated API for managing the Dart and native `InstanceManager`s. */
private class CameraXPigeonInstanceManagerApi(val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by CameraXPigeonInstanceManagerApi. */
    val codec: MessageCodec<Any?> by lazy {
      CameraXPigeonCodec()
    }

    /**
     * Sets up an instance of `CameraXPigeonInstanceManagerApi` to handle messages from the
     * `binaryMessenger`.
     */
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, instanceManager: CameraXPigeonInstanceManager?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PigeonInternalInstanceManager.removeStrongReference", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              instanceManager.remove<Any?>(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PigeonInternalInstanceManager.clear", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              instanceManager.clear()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  fun removeStrongReference(identifierArg: Long, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.camerax_android.PigeonInternalInstanceManager.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * Provides implementations for each ProxyApi implementation and provides access to resources
 * needed by any implementation.
 */
abstract class CameraXPigeonProxyApiRegistrar(val binaryMessenger: BinaryMessenger) {
  /** Whether APIs should ignore calling to Dart. */
  public var ignoreCallsToDart = false
  val instanceManager: CameraXPigeonInstanceManager
  private var _codec: MessageCodec<Any?>? = null
  val codec: MessageCodec<Any?>
    get() {
      if (_codec == null) {
        _codec = CameraXPigeonProxyApiBaseCodec(this)
      }
      return _codec!!
    }

  init {
    val api = CameraXPigeonInstanceManagerApi(binaryMessenger)
    instanceManager = CameraXPigeonInstanceManager.create(
      object : CameraXPigeonInstanceManager.PigeonFinalizationListener {
        override fun onFinalize(identifier: Long) {
          api.removeStrongReference(identifier) {
            if (it.isFailure) {
              Log.e(
                "PigeonProxyApiRegistrar",
                "Failed to remove Dart strong reference with identifier: $identifier"
              )
            }
          }
        }
      }
    )
  }
  /**
   * An implementation of [PigeonApiPermissionManager] used to add a new Dart instance of
   * `PermissionManager` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPermissionManager(): PigeonApiPermissionManager

  /**
   * An implementation of [PigeonApiThrowable] used to add a new Dart instance of
   * `Throwable` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiThrowable(): PigeonApiThrowable

  /**
   * An implementation of [PigeonApiSize] used to add a new Dart instance of
   * `Size` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiSize(): PigeonApiSize

  /**
   * An implementation of [PigeonApiRect] used to add a new Dart instance of
   * `Rect` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiRect(): PigeonApiRect

  /**
   * An implementation of [PigeonApiIntRange] used to add a new Dart instance of
   * `IntRange` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiIntRange(): PigeonApiIntRange

  /**
   * An implementation of [PigeonApiCameraSelector] used to add a new Dart instance of
   * `CameraSelector` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraSelector(): PigeonApiCameraSelector

  /**
   * An implementation of [PigeonApiCameraStateLiveData] used to add a new Dart instance of
   * `CameraStateLiveData` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraStateLiveData(): PigeonApiCameraStateLiveData

  /**
   * An implementation of [PigeonApiCameraStateObserver] used to add a new Dart instance of
   * `CameraStateObserver` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraStateObserver(): PigeonApiCameraStateObserver

  /**
   * An implementation of [PigeonApiTorchStateLiveData] used to add a new Dart instance of
   * `TorchStateLiveData` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiTorchStateLiveData(): PigeonApiTorchStateLiveData

  /**
   * An implementation of [PigeonApiTorchStateObserver] used to add a new Dart instance of
   * `TorchStateObserver` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiTorchStateObserver(): PigeonApiTorchStateObserver

  /**
   * An implementation of [PigeonApiZoomState] used to add a new Dart instance of
   * `ZoomState` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomState(): PigeonApiZoomState

  /**
   * An implementation of [PigeonApiZoomStateLiveData] used to add a new Dart instance of
   * `ZoomStateLiveData` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomStateLiveData(): PigeonApiZoomStateLiveData

  /**
   * An implementation of [PigeonApiZoomStateObserver] used to add a new Dart instance of
   * `ZoomStateObserver` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomStateObserver(): PigeonApiZoomStateObserver

  /**
   * An implementation of [PigeonApiExposureState] used to add a new Dart instance of
   * `ExposureState` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiExposureState(): PigeonApiExposureState

  /**
   * An implementation of [PigeonApiMeteringPoint] used to add a new Dart instance of
   * `MeteringPoint` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiMeteringPoint(): PigeonApiMeteringPoint
  {
    return PigeonApiMeteringPoint(this)
  }

  /**
   * An implementation of [PigeonApiMeteringPointArgs] used to add a new Dart instance of
   * `MeteringPointArgs` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMeteringPointArgs(): PigeonApiMeteringPointArgs

  /**
   * An implementation of [PigeonApiDurationArgs] used to add a new Dart instance of
   * `DurationArgs` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiDurationArgs(): PigeonApiDurationArgs

  /**
   * An implementation of [PigeonApiFocusMeteringAction] used to add a new Dart instance of
   * `FocusMeteringAction` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFocusMeteringAction(): PigeonApiFocusMeteringAction

  /**
   * An implementation of [PigeonApiDynamicRange] used to add a new Dart instance of
   * `DynamicRange` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiDynamicRange(): PigeonApiDynamicRange

  /**
   * An implementation of [PigeonApiCameraInfo] used to add a new Dart instance of
   * `CameraInfo` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraInfo(): PigeonApiCameraInfo

  /**
   * An implementation of [PigeonApiCameraControl] used to add a new Dart instance of
   * `CameraControl` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraControl(): PigeonApiCameraControl

  /**
   * An implementation of [PigeonApiAspectRatioStrategy] used to add a new Dart instance of
   * `AspectRatioStrategy` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAspectRatioStrategy(): PigeonApiAspectRatioStrategy

  /**
   * An implementation of [PigeonApiResolutionFilter] used to add a new Dart instance of
   * `ResolutionFilter` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiResolutionFilter(): PigeonApiResolutionFilter
  {
    return PigeonApiResolutionFilter(this)
  }

  /**
   * An implementation of [PigeonApiResolutionStrategy] used to add a new Dart instance of
   * `ResolutionStrategy` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiResolutionStrategy(): PigeonApiResolutionStrategy

  /**
   * An implementation of [PigeonApiResolutionSelector] used to add a new Dart instance of
   * `ResolutionSelector` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiResolutionSelector(): PigeonApiResolutionSelector

  /**
   * An implementation of [PigeonApiImageInfo] used to add a new Dart instance of
   * `ImageInfo` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImageInfo(): PigeonApiImageInfo

  /**
   * An implementation of [PigeonApiPlaneProxy] used to add a new Dart instance of
   * `PlaneProxy` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPlaneProxy(): PigeonApiPlaneProxy

  /**
   * An implementation of [PigeonApiImageProxy] used to add a new Dart instance of
   * `ImageProxy` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImageProxy(): PigeonApiImageProxy

  /**
   * An implementation of [PigeonApiAnalyzer] used to add a new Dart instance of
   * `Analyzer` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiAnalyzer(): PigeonApiAnalyzer
  {
    return PigeonApiAnalyzer(this)
  }

  /**
   * An implementation of [PigeonApiQuality] used to add a new Dart instance of
   * `Quality` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiQuality(): PigeonApiQuality

  /**
   * An implementation of [PigeonApiFallbackStrategy] used to add a new Dart instance of
   * `FallbackStrategy` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFallbackStrategy(): PigeonApiFallbackStrategy

  /**
   * An implementation of [PigeonApiQualitySelector] used to add a new Dart instance of
   * `QualitySelector` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiQualitySelector(): PigeonApiQualitySelector

  /**
   * An implementation of [PigeonApiAudioConfig] used to add a new Dart instance of
   * `AudioConfig` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAudioConfig(): PigeonApiAudioConfig

  /**
   * An implementation of [PigeonApiAudioStats] used to add a new Dart instance of
   * `AudioStats` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAudioStats(): PigeonApiAudioStats

  /**
   * An implementation of [PigeonApiRecordingStats] used to add a new Dart instance of
   * `RecordingStats` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiRecordingStats(): PigeonApiRecordingStats

  /**
   * An implementation of [PigeonApiVideoRecordEvent] used to add a new Dart instance of
   * `VideoRecordEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordEvent(): PigeonApiVideoRecordEvent

  /**
   * An implementation of [PigeonApiVideoRecordStatusEvent] used to add a new Dart instance of
   * `VideoRecordStatusEvent` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiVideoRecordStatusEvent(): PigeonApiVideoRecordStatusEvent
  {
    return PigeonApiVideoRecordStatusEvent(this)
  }

  /**
   * An implementation of [PigeonApiVideoRecordStartEvent] used to add a new Dart instance of
   * `VideoRecordStartEvent` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiVideoRecordStartEvent(): PigeonApiVideoRecordStartEvent
  {
    return PigeonApiVideoRecordStartEvent(this)
  }

  /**
   * An implementation of [PigeonApiVideoRecordPauseEvent] used to add a new Dart instance of
   * `VideoRecordPauseEvent` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiVideoRecordPauseEvent(): PigeonApiVideoRecordPauseEvent
  {
    return PigeonApiVideoRecordPauseEvent(this)
  }

  /**
   * An implementation of [PigeonApiVideoRecordResumeEvent] used to add a new Dart instance of
   * `VideoRecordResumeEvent` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiVideoRecordResumeEvent(): PigeonApiVideoRecordResumeEvent
  {
    return PigeonApiVideoRecordResumeEvent(this)
  }

  /**
   * An implementation of [PigeonApiVideoRecordFinalizeEvent] used to add a new Dart instance of
   * `VideoRecordFinalizeEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordFinalizeEvent(): PigeonApiVideoRecordFinalizeEvent

  /**
   * An implementation of [PigeonApiVideoRecordEventConsumer] used to add a new Dart instance of
   * `VideoRecordEventConsumer` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiVideoRecordEventConsumer(): PigeonApiVideoRecordEventConsumer
  {
    return PigeonApiVideoRecordEventConsumer(this)
  }

  /**
   * An implementation of [PigeonApiRecording] used to add a new Dart instance of
   * `Recording` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiRecording(): PigeonApiRecording

  /**
   * An implementation of [PigeonApiCameraController] used to add a new Dart instance of
   * `CameraController` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraController(): PigeonApiCameraController

  /**
   * An implementation of [PigeonApiLifecycleCameraController] used to add a new Dart instance of
   * `LifecycleCameraController` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiLifecycleCameraController(): PigeonApiLifecycleCameraController

  /**
   * An implementation of [PigeonApiPreviewView] used to add a new Dart instance of
   * `PreviewView` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPreviewView(): PigeonApiPreviewView

  fun setUp() {
    CameraXPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, instanceManager)
    PigeonApiPermissionManager.setUpMessageHandlers(binaryMessenger, getPigeonApiPermissionManager())
    PigeonApiSize.setUpMessageHandlers(binaryMessenger, getPigeonApiSize())
    PigeonApiRect.setUpMessageHandlers(binaryMessenger, getPigeonApiRect())
    PigeonApiIntRange.setUpMessageHandlers(binaryMessenger, getPigeonApiIntRange())
    PigeonApiCameraSelector.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraSelector())
    PigeonApiCameraStateLiveData.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraStateLiveData())
    PigeonApiCameraStateObserver.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraStateObserver())
    PigeonApiTorchStateLiveData.setUpMessageHandlers(binaryMessenger, getPigeonApiTorchStateLiveData())
    PigeonApiTorchStateObserver.setUpMessageHandlers(binaryMessenger, getPigeonApiTorchStateObserver())
    PigeonApiZoomState.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomState())
    PigeonApiZoomStateLiveData.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomStateLiveData())
    PigeonApiZoomStateObserver.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomStateObserver())
    PigeonApiExposureState.setUpMessageHandlers(binaryMessenger, getPigeonApiExposureState())
    PigeonApiMeteringPointArgs.setUpMessageHandlers(binaryMessenger, getPigeonApiMeteringPointArgs())
    PigeonApiDurationArgs.setUpMessageHandlers(binaryMessenger, getPigeonApiDurationArgs())
    PigeonApiFocusMeteringAction.setUpMessageHandlers(binaryMessenger, getPigeonApiFocusMeteringAction())
    PigeonApiDynamicRange.setUpMessageHandlers(binaryMessenger, getPigeonApiDynamicRange())
    PigeonApiCameraInfo.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraInfo())
    PigeonApiCameraControl.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraControl())
    PigeonApiAspectRatioStrategy.setUpMessageHandlers(binaryMessenger, getPigeonApiAspectRatioStrategy())
    PigeonApiResolutionStrategy.setUpMessageHandlers(binaryMessenger, getPigeonApiResolutionStrategy())
    PigeonApiResolutionSelector.setUpMessageHandlers(binaryMessenger, getPigeonApiResolutionSelector())
    PigeonApiImageInfo.setUpMessageHandlers(binaryMessenger, getPigeonApiImageInfo())
    PigeonApiPlaneProxy.setUpMessageHandlers(binaryMessenger, getPigeonApiPlaneProxy())
    PigeonApiImageProxy.setUpMessageHandlers(binaryMessenger, getPigeonApiImageProxy())
    PigeonApiQuality.setUpMessageHandlers(binaryMessenger, getPigeonApiQuality())
    PigeonApiFallbackStrategy.setUpMessageHandlers(binaryMessenger, getPigeonApiFallbackStrategy())
    PigeonApiQualitySelector.setUpMessageHandlers(binaryMessenger, getPigeonApiQualitySelector())
    PigeonApiAudioConfig.setUpMessageHandlers(binaryMessenger, getPigeonApiAudioConfig())
    PigeonApiAudioStats.setUpMessageHandlers(binaryMessenger, getPigeonApiAudioStats())
    PigeonApiRecordingStats.setUpMessageHandlers(binaryMessenger, getPigeonApiRecordingStats())
    PigeonApiVideoRecordEvent.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoRecordEvent())
    PigeonApiVideoRecordFinalizeEvent.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoRecordFinalizeEvent())
    PigeonApiRecording.setUpMessageHandlers(binaryMessenger, getPigeonApiRecording())
    PigeonApiCameraController.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraController())
    PigeonApiLifecycleCameraController.setUpMessageHandlers(binaryMessenger, getPigeonApiLifecycleCameraController())
    PigeonApiPreviewView.setUpMessageHandlers(binaryMessenger, getPigeonApiPreviewView())
  }
  fun tearDown() {
    CameraXPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPermissionManager.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiSize.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiRect.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiIntRange.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraSelector.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraStateLiveData.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraStateObserver.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiTorchStateLiveData.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiTorchStateObserver.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomState.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomStateLiveData.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomStateObserver.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiExposureState.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMeteringPointArgs.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiDurationArgs.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFocusMeteringAction.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiDynamicRange.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraInfo.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraControl.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAspectRatioStrategy.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiResolutionStrategy.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiResolutionSelector.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImageInfo.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPlaneProxy.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImageProxy.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiQuality.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFallbackStrategy.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiQualitySelector.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAudioConfig.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAudioStats.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiRecordingStats.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoRecordEvent.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoRecordFinalizeEvent.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiRecording.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraController.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiLifecycleCameraController.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPreviewView.setUpMessageHandlers(binaryMessenger, null)
  }
}
private class CameraXPigeonProxyApiBaseCodec(val registrar: CameraXPigeonProxyApiRegistrar) : CameraXPigeonCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return registrar.instanceManager.getInstance(readValue(buffer) as Long)
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is Boolean || value is ByteArray || value is Double || value is DoubleArray || value is FloatArray || value is Int || value is IntArray || value is List<*> || value is Long || value is LongArray || value is Map<*, *> || value is String || value is Permission || value is LensFacing || value is CameraState || value is MeteringMode || value is TimeUnit || value is Encoding || value is BitDepth || value is ScaleType || value is UseCase || value is ResolutionMode || value is AspectRatio || value is AspectRatioFallbackRule || value is ResolutionFallbackRule || value is CaptureMode || value is FlashMode || value is BackpressureStrategy || value is ImageFormat || value is MirrorMode || value is AudioState || value is VideoRecordFinalizeEventError || value == null) {
      super.writeValue(stream, value)
      return
    }

    if (value is dev.hebei.camerax_android.core.PermissionManager) {
      registrar.getPigeonApiPermissionManager().pigeon_newInstance(value) { }
    }
     else if (value is java.lang.Throwable) {
      registrar.getPigeonApiThrowable().pigeon_newInstance(value) { }
    }
     else if (value is android.util,Size) {
      registrar.getPigeonApiSize().pigeon_newInstance(value) { }
    }
     else if (value is android.graphics.Rect) {
      registrar.getPigeonApiRect().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.IntRange.Wrapper) {
      registrar.getPigeonApiIntRange().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.CameraSelector) {
      registrar.getPigeonApiCameraSelector().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.CameraStateLiveData.Wrapper) {
      registrar.getPigeonApiCameraStateLiveData().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.CameraStateObserver.Wrapper) {
      registrar.getPigeonApiCameraStateObserver().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper) {
      registrar.getPigeonApiTorchStateLiveData().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.TorchStateObserver.Wrapper) {
      registrar.getPigeonApiTorchStateObserver().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.ZoomState) {
      registrar.getPigeonApiZoomState().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper) {
      registrar.getPigeonApiZoomStateLiveData().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.ZoomStateObserver.Wrapper) {
      registrar.getPigeonApiZoomStateObserver().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.ExposureState) {
      registrar.getPigeonApiExposureState().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.MeteringPoint) {
      registrar.getPigeonApiMeteringPoint().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.MeteringPointArgs.Wrapper) {
      registrar.getPigeonApiMeteringPointArgs().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.core.DurationArgs.Wrapper) {
      registrar.getPigeonApiDurationArgs().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.FocusMeteringAction) {
      registrar.getPigeonApiFocusMeteringAction().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.DynamicRange) {
      registrar.getPigeonApiDynamicRange().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.CameraInfo) {
      registrar.getPigeonApiCameraInfo().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.CameraControl) {
      registrar.getPigeonApiCameraControl().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy) {
      registrar.getPigeonApiAspectRatioStrategy().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.resolutionselector.ResolutionFilter) {
      registrar.getPigeonApiResolutionFilter().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy) {
      registrar.getPigeonApiResolutionStrategy().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector) {
      registrar.getPigeonApiResolutionSelector().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.ImageInfo) {
      registrar.getPigeonApiImageInfo().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.ImageProxy.PlaneProxy) {
      registrar.getPigeonApiPlaneProxy().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.ImageProxy) {
      registrar.getPigeonApiImageProxy().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.ImageAnalysis.Analyzer) {
      registrar.getPigeonApiAnalyzer().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.Quality) {
      registrar.getPigeonApiQuality().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.FallbackStrategy) {
      registrar.getPigeonApiFallbackStrategy().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.QualitySelector) {
      registrar.getPigeonApiQualitySelector().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.view.video.AudioConfig) {
      registrar.getPigeonApiAudioConfig().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.AudioStats) {
      registrar.getPigeonApiAudioStats().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.RecordingStats) {
      registrar.getPigeonApiRecordingStats().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.VideoRecordEvent) {
      registrar.getPigeonApiVideoRecordEvent().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.VideoRecordEvent.Status) {
      registrar.getPigeonApiVideoRecordStatusEvent().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.VideoRecordEvent.Start) {
      registrar.getPigeonApiVideoRecordStartEvent().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.VideoRecordEvent.Pause) {
      registrar.getPigeonApiVideoRecordPauseEvent().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.VideoRecordEvent.Resume) {
      registrar.getPigeonApiVideoRecordResumeEvent().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.VideoRecordEvent.Finalize) {
      registrar.getPigeonApiVideoRecordFinalizeEvent().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.legacy.video.VideoRecordEventConsumer) {
      registrar.getPigeonApiVideoRecordEventConsumer().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.video.Recording) {
      registrar.getPigeonApiRecording().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.view.LifecycleCameraController) {
      registrar.getPigeonApiLifecycleCameraController().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.view.CameraController) {
      registrar.getPigeonApiCameraController().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.view.PreviewView) {
      registrar.getPigeonApiPreviewView().pigeon_newInstance(value) { }
    }

    when {
      registrar.instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, registrar.instanceManager.getIdentifierForStrongReference(value))
      }
      else -> throw IllegalArgumentException("Unsupported value: '$value' of type '${value.javaClass.name}'")
    }
  }
}

enum class Permission(val raw: Int) {
  ALBUM(0),
  AUDIO(1),
  VIDEO(2);

  companion object {
    fun ofRaw(raw: Int): Permission? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class LensFacing(val raw: Int) {
  UNKNOWN(0),
  FRONT(1),
  BACK(2),
  EXTERNAL(3);

  companion object {
    fun ofRaw(raw: Int): LensFacing? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CameraState(val raw: Int) {
  PENDING_OPEN(0),
  OPENING(1),
  OPEN(2),
  CLOSING(3),
  CLOSED(4);

  companion object {
    fun ofRaw(raw: Int): CameraState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MeteringMode(val raw: Int) {
  AF(0),
  AE(1),
  AWB(2);

  companion object {
    fun ofRaw(raw: Int): MeteringMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TimeUnit(val raw: Int) {
  NANOSECONDS(0),
  MICROSECONDS(1),
  MILLISECONDS(2),
  SECONDS(3),
  MINUTES(4),
  HOURS(5),
  DAYS(6);

  companion object {
    fun ofRaw(raw: Int): TimeUnit? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Encoding(val raw: Int) {
  UNSPECIFIED(0),
  SDR(1),
  HDR_UNSPECIFIED(2),
  HLG(3),
  HDR10(4),
  HDR10PLUS(5),
  DOLBY_VISION(6);

  companion object {
    fun ofRaw(raw: Int): Encoding? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BitDepth(val raw: Int) {
  UNSPECIFIED(0),
  WITH8BIT(1),
  WITH10BIT(2);

  companion object {
    fun ofRaw(raw: Int): BitDepth? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScaleType(val raw: Int) {
  FILL_START(0),
  FILL_CENTER(1),
  FILL_END(2),
  FIT_START(3),
  FIT_CENTER(4),
  FIT_END(5);

  companion object {
    fun ofRaw(raw: Int): ScaleType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class UseCase(val raw: Int) {
  IMAGE_CAPTURE(0),
  IMAGE_ANALYSIS(1),
  VIDEO_CAPTURE(2);

  companion object {
    fun ofRaw(raw: Int): UseCase? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ResolutionMode(val raw: Int) {
  PREFER_CAPTURE_RATE_OVER_HIGHER_RESOLUTION(0),
  PREFER_HIGHER_RESOLUTION_OVER_CAPTURE_RATE(1);

  companion object {
    fun ofRaw(raw: Int): ResolutionMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AspectRatio(val raw: Int) {
  RATIO_DEFAULT(0),
  RATIO4_3(1),
  RATIO16_9(2);

  companion object {
    fun ofRaw(raw: Int): AspectRatio? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AspectRatioFallbackRule(val raw: Int) {
  NONE(0),
  AUTO(1);

  companion object {
    fun ofRaw(raw: Int): AspectRatioFallbackRule? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ResolutionFallbackRule(val raw: Int) {
  NONE(0),
  CLOSEST_HIGHER_THEN_LOWER(1),
  CLOSEST_HIGHER(2),
  CLOSEST_LOWER_THEN_HIGHER(3),
  CLOSEST_LOWER(4);

  companion object {
    fun ofRaw(raw: Int): ResolutionFallbackRule? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CaptureMode(val raw: Int) {
  MAXIMUM_QUALITY(0),
  MINIMUM_LATENCY(1),
  ZERO_SHUTTERLAG(2);

  companion object {
    fun ofRaw(raw: Int): CaptureMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FlashMode(val raw: Int) {
  AUTO(0),
  ON(1),
  OFF(2),
  SCREEN(3);

  companion object {
    fun ofRaw(raw: Int): FlashMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BackpressureStrategy(val raw: Int) {
  KEEP_ONLY_LATEST(0),
  BLOCK_PRODUCER(1);

  companion object {
    fun ofRaw(raw: Int): BackpressureStrategy? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ImageFormat(val raw: Int) {
  DEPTH16(0),
  DEPTH_JPEG(1),
  DEPTH_POINT_CLOUD(2),
  FLEX_RGBA8888(3),
  FLEX_RGB888(4),
  HEIC(5),
  JPEG(6),
  JPEG_R(7),
  NV16(8),
  NV21(9),
  PRIVATE(10),
  RAW10(11),
  RAW12(12),
  RAW_PRIVATE(13),
  RAW_SENSOR(14),
  RGB565(15),
  UNKNOWN(16),
  Y8(17),
  YCBCR_P010(18),
  YUV420888(19),
  YUV422888(20),
  YUV444888(21),
  YUY2(22),
  YV12(23);

  companion object {
    fun ofRaw(raw: Int): ImageFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MirrorMode(val raw: Int) {
  OFF(0),
  ON(1),
  ON_FRONT_ONLY(2);

  companion object {
    fun ofRaw(raw: Int): MirrorMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AudioState(val raw: Int) {
  ACTIVE(0),
  DISABLED(1),
  SOURCE_SILENCED(2),
  ENCODER_ERROR(3),
  SOURCE_ERROR(4),
  MUTED(5);

  companion object {
    fun ofRaw(raw: Int): AudioState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class VideoRecordFinalizeEventError(val raw: Int) {
  NONE(0),
  UNKNOWN(1),
  FILE_SIZE_LIMIT_REACHED(2),
  INSUFFICIENT_STORAGE(3),
  SOURCE_INACTIVE(4),
  INAVLID_OUPUT_OPTIONS(5),
  ENCODING_FAILED(6),
  RECORDER_ERROR(7),
  NO_VALID_DATA(8),
  DURATION_LIMIT_REACHED(9),
  RECORDING_GARBAGE_COLLECTED(10);

  companion object {
    fun ofRaw(raw: Int): VideoRecordFinalizeEventError? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
private open class CameraXPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Permission.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          LensFacing.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CameraState.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MeteringMode.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TimeUnit.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Encoding.ofRaw(it.toInt())
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BitDepth.ofRaw(it.toInt())
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ScaleType.ofRaw(it.toInt())
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          UseCase.ofRaw(it.toInt())
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ResolutionMode.ofRaw(it.toInt())
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AspectRatio.ofRaw(it.toInt())
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AspectRatioFallbackRule.ofRaw(it.toInt())
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ResolutionFallbackRule.ofRaw(it.toInt())
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CaptureMode.ofRaw(it.toInt())
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FlashMode.ofRaw(it.toInt())
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BackpressureStrategy.ofRaw(it.toInt())
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ImageFormat.ofRaw(it.toInt())
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MirrorMode.ofRaw(it.toInt())
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AudioState.ofRaw(it.toInt())
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          VideoRecordFinalizeEventError.ofRaw(it.toInt())
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Permission -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is LensFacing -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is CameraState -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is MeteringMode -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is TimeUnit -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is Encoding -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      is BitDepth -> {
        stream.write(135)
        writeValue(stream, value.raw)
      }
      is ScaleType -> {
        stream.write(136)
        writeValue(stream, value.raw)
      }
      is UseCase -> {
        stream.write(137)
        writeValue(stream, value.raw)
      }
      is ResolutionMode -> {
        stream.write(138)
        writeValue(stream, value.raw)
      }
      is AspectRatio -> {
        stream.write(139)
        writeValue(stream, value.raw)
      }
      is AspectRatioFallbackRule -> {
        stream.write(140)
        writeValue(stream, value.raw)
      }
      is ResolutionFallbackRule -> {
        stream.write(141)
        writeValue(stream, value.raw)
      }
      is CaptureMode -> {
        stream.write(142)
        writeValue(stream, value.raw)
      }
      is FlashMode -> {
        stream.write(143)
        writeValue(stream, value.raw)
      }
      is BackpressureStrategy -> {
        stream.write(144)
        writeValue(stream, value.raw)
      }
      is ImageFormat -> {
        stream.write(145)
        writeValue(stream, value.raw)
      }
      is MirrorMode -> {
        stream.write(146)
        writeValue(stream, value.raw)
      }
      is AudioState -> {
        stream.write(147)
        writeValue(stream, value.raw)
      }
      is VideoRecordFinalizeEventError -> {
        stream.write(148)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPermissionManager(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun instance(): dev.hebei.camerax_android.core.PermissionManager

  abstract fun checkPermissioin(pigeon_instance: dev.hebei.camerax_android.core.PermissionManager, permission: Permission): Boolean

  abstract fun requestPermissions(pigeon_instance: dev.hebei.camerax_android.core.PermissionManager, permissions: List<Permission>, callback: (Result<Boolean>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPermissionManager?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PermissionManager.instance", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.instance(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PermissionManager.checkPermissioin", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.PermissionManager
            val permissionArg = args[1] as Permission
            val wrapped: List<Any?> = try {
              listOf(api.checkPermissioin(pigeon_instanceArg, permissionArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PermissionManager.requestPermissions", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.PermissionManager
            val permissionsArg = args[1] as List<Permission>
            api.requestPermissions(pigeon_instanceArg, permissionsArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PermissionManager and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.PermissionManager, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.PermissionManager.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiThrowable(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun code(pigeon_instance: java.lang.Throwable): String

  abstract fun message(pigeon_instance: java.lang.Throwable): String

  abstract fun details(pigeon_instance: java.lang.Throwable): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Throwable and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.lang.Throwable, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val codeArg = code(pigeon_instanceArg)
    val messageArg = message(pigeon_instanceArg)
    val detailsArg = details(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Throwable.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, codeArg, messageArg, detailsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiSize(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getWidth(pigeon_instance: android.util,Size): Long

  abstract fun getHeight(pigeon_instance: android.util,Size): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiSize?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Size.getWidth", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.util,Size
            val wrapped: List<Any?> = try {
              listOf(api.getWidth(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Size.getHeight", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.util,Size
            val wrapped: List<Any?> = try {
              listOf(api.getHeight(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Size and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.util,Size, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Size.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiRect(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(left: Long, top: Long, right: Long, bottom: Long): android.graphics.Rect

  abstract fun width(pigeon_instance: android.graphics.Rect): Long

  abstract fun height(pigeon_instance: android.graphics.Rect): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiRect?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Rect.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val leftArg = args[1] as Long
            val topArg = args[2] as Long
            val rightArg = args[3] as Long
            val bottomArg = args[4] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(leftArg,topArg,rightArg,bottomArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Rect.width", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.graphics.Rect
            val wrapped: List<Any?> = try {
              listOf(api.width(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Rect.height", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.graphics.Rect
            val wrapped: List<Any?> = try {
              listOf(api.height(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Rect and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.graphics.Rect, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Rect.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiIntRange(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getLower(pigeon_instance: dev.hebei.camerax_android.legacy.core.IntRange.Wrapper): Long

  abstract fun getUpper(pigeon_instance: dev.hebei.camerax_android.legacy.core.IntRange.Wrapper): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiIntRange?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.IntRange.getLower", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.IntRange.Wrapper
            val wrapped: List<Any?> = try {
              listOf(api.getLower(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.IntRange.getUpper", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.IntRange.Wrapper
            val wrapped: List<Any?> = try {
              listOf(api.getUpper(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of IntRange and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.IntRange.Wrapper, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.IntRange.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraSelector(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(lensFacing: LensFacing?): dev.hebei.camerax_android.core.CameraSelector

  abstract fun front(): dev.hebei.camerax_android.core.CameraSelector

  abstract fun back(): dev.hebei.camerax_android.core.CameraSelector

  abstract fun external(): dev.hebei.camerax_android.core.CameraSelector

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraSelector?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelector.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val lensFacingArg = args[1] as LensFacing?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(lensFacingArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelector.front", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.front(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelector.back", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.back(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelector.external", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.external(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraSelector and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.CameraSelector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraSelector.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraStateLiveData(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getValue(pigeon_instance: dev.hebei.camerax_android.legacy.core.CameraStateLiveData.Wrapper): CameraState?

  abstract fun observe(pigeon_instance: dev.hebei.camerax_android.legacy.core.CameraStateLiveData.Wrapper, observer: dev.hebei.camerax_android.legacy.core.CameraStateObserver.Wrapper)

  abstract fun removeObserver(pigeon_instance: dev.hebei.camerax_android.legacy.core.CameraStateLiveData.Wrapper, observer: dev.hebei.camerax_android.legacy.core.CameraStateObserver.Wrapper)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraStateLiveData?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateLiveData.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.CameraStateLiveData.Wrapper
            val wrapped: List<Any?> = try {
              listOf(api.getValue(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateLiveData.observe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.CameraStateLiveData.Wrapper
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.core.CameraStateObserver.Wrapper
            val wrapped: List<Any?> = try {
              api.observe(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateLiveData.removeObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.CameraStateLiveData.Wrapper
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.core.CameraStateObserver.Wrapper
            val wrapped: List<Any?> = try {
              api.removeObserver(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraStateLiveData and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.CameraStateLiveData.Wrapper, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraStateLiveData.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraStateObserver(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.legacy.core.CameraStateObserver.Wrapper

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraStateObserver?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateObserver.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraStateObserver and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.CameraStateObserver.Wrapper, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of CameraStateObserver, but the class has a nonnull callback method.")
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.CameraStateObserver.Wrapper, valueArg: CameraState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraStateObserver.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiTorchStateLiveData(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getValue(pigeon_instance: dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper): Boolean?

  abstract fun observe(pigeon_instance: dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper, observer: dev.hebei.camerax_android.legacy.core.TorchStateObserver.Wrapper)

  abstract fun removeObserver(pigeon_instance: dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper, observer: dev.hebei.camerax_android.legacy.core.TorchStateObserver.Wrapper)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiTorchStateLiveData?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateLiveData.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper
            val wrapped: List<Any?> = try {
              listOf(api.getValue(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateLiveData.observe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.core.TorchStateObserver.Wrapper
            val wrapped: List<Any?> = try {
              api.observe(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateLiveData.removeObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.core.TorchStateObserver.Wrapper
            val wrapped: List<Any?> = try {
              api.removeObserver(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of TorchStateLiveData and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.TorchStateLiveData.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiTorchStateObserver(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.legacy.core.TorchStateObserver.Wrapper

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiTorchStateObserver?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateObserver.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of TorchStateObserver and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.TorchStateObserver.Wrapper, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of TorchStateObserver, but the class has a nonnull callback method.")
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.TorchStateObserver.Wrapper, valueArg: Boolean, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.TorchStateObserver.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomState(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getMinZoomRatio(pigeon_instance: dev.hebei.camerax_android.core.ZoomState): Double

  abstract fun getMaxZoomRatio(pigeon_instance: dev.hebei.camerax_android.core.ZoomState): Double

  abstract fun getZoomRatio(pigeon_instance: dev.hebei.camerax_android.core.ZoomState): Double

  abstract fun getLinearZoom(pigeon_instance: dev.hebei.camerax_android.core.ZoomState): Double

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomState?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomState.getMinZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ZoomState
            val wrapped: List<Any?> = try {
              listOf(api.getMinZoomRatio(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomState.getMaxZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ZoomState
            val wrapped: List<Any?> = try {
              listOf(api.getMaxZoomRatio(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomState.getZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ZoomState
            val wrapped: List<Any?> = try {
              listOf(api.getZoomRatio(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomState.getLinearZoom", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ZoomState
            val wrapped: List<Any?> = try {
              listOf(api.getLinearZoom(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomState and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.ZoomState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ZoomState.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomStateLiveData(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getValue(pigeon_instance: dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper): dev.hebei.camerax_android.core.ZoomState?

  abstract fun observe(pigeon_instance: dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper, observer: dev.hebei.camerax_android.legacy.core.ZoomStateObserver.Wrapper)

  abstract fun removeObserver(pigeon_instance: dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper, observer: dev.hebei.camerax_android.legacy.core.ZoomStateObserver.Wrapper)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomStateLiveData?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateLiveData.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper
            val wrapped: List<Any?> = try {
              listOf(api.getValue(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateLiveData.observe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.core.ZoomStateObserver.Wrapper
            val wrapped: List<Any?> = try {
              api.observe(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateLiveData.removeObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper
            val observerArg = args[1] as dev.hebei.camerax_android.legacy.core.ZoomStateObserver.Wrapper
            val wrapped: List<Any?> = try {
              api.removeObserver(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomStateLiveData and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ZoomStateLiveData.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomStateObserver(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.legacy.core.ZoomStateObserver.Wrapper

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomStateObserver?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateObserver.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomStateObserver and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.ZoomStateObserver.Wrapper, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of ZoomStateObserver, but the class has a nonnull callback method.")
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.ZoomStateObserver.Wrapper, valueArg: dev.hebei.camerax_android.core.ZoomState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ZoomStateObserver.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiExposureState(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getExposureCompensationIndex(pigeon_instance: dev.hebei.camerax_android.core.ExposureState): Long

  abstract fun getExposureCompensationRange(pigeon_instance: dev.hebei.camerax_android.core.ExposureState): dev.hebei.camerax_android.legacy.core.IntRange.Wrapper

  abstract fun getExposureCompensationStep(pigeon_instance: dev.hebei.camerax_android.core.ExposureState): Double

  abstract fun isExposureCompensationSupported(pigeon_instance: dev.hebei.camerax_android.core.ExposureState): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiExposureState?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ExposureState.getExposureCompensationIndex", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ExposureState
            val wrapped: List<Any?> = try {
              listOf(api.getExposureCompensationIndex(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ExposureState.getExposureCompensationRange", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ExposureState
            val wrapped: List<Any?> = try {
              listOf(api.getExposureCompensationRange(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ExposureState.getExposureCompensationStep", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ExposureState
            val wrapped: List<Any?> = try {
              listOf(api.getExposureCompensationStep(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ExposureState.isExposureCompensationSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ExposureState
            val wrapped: List<Any?> = try {
              listOf(api.isExposureCompensationSupported(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ExposureState and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.ExposureState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ExposureState.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiMeteringPoint(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MeteringPoint and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.MeteringPoint, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.MeteringPoint.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMeteringPointArgs(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(point: dev.hebei.camerax_android.core.MeteringPoint, modes: List<MeteringMode>?): dev.hebei.camerax_android.legacy.core.MeteringPointArgs.Wrapper

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMeteringPointArgs?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MeteringPointArgs.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val pointArg = args[1] as dev.hebei.camerax_android.core.MeteringPoint
            val modesArg = args[2] as List<MeteringMode>?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(pointArg,modesArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MeteringPointArgs and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.MeteringPointArgs.Wrapper, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.MeteringPointArgs.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiDurationArgs(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(duration: Long, timeUnit: TimeUnit): dev.hebei.camerax_android.legacy.core.DurationArgs.Wrapper

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiDurationArgs?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.DurationArgs.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val durationArg = args[1] as Long
            val timeUnitArg = args[2] as TimeUnit
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(durationArg,timeUnitArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DurationArgs and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.core.DurationArgs.Wrapper, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.DurationArgs.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFocusMeteringAction(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(first: dev.hebei.camerax_android.legacy.core.MeteringPointArgs.Wrapper, others: List<dev.hebei.camerax_android.legacy.core.MeteringPointArgs.Wrapper>?, disableAutoCancel: Boolean?, autoCancelDuration: dev.hebei.camerax_android.legacy.core.DurationArgs.Wrapper?): dev.hebei.camerax_android.core.FocusMeteringAction

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFocusMeteringAction?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringAction.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val firstArg = args[1] as dev.hebei.camerax_android.legacy.core.MeteringPointArgs.Wrapper
            val othersArg = args[2] as List<dev.hebei.camerax_android.legacy.core.MeteringPointArgs.Wrapper>?
            val disableAutoCancelArg = args[3] as Boolean?
            val autoCancelDurationArg = args[4] as dev.hebei.camerax_android.legacy.core.DurationArgs.Wrapper?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(firstArg,othersArg,disableAutoCancelArg,autoCancelDurationArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FocusMeteringAction and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.FocusMeteringAction, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.FocusMeteringAction.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiDynamicRange(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(encoding: Encoding, bitDepth: BitDepth): dev.hebei.camerax_android.core.DynamicRange

  abstract fun getEncoding(pigeon_instance: dev.hebei.camerax_android.core.DynamicRange): Encoding

  abstract fun getBitDepth(pigeon_instance: dev.hebei.camerax_android.core.DynamicRange): BitDepth

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiDynamicRange?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.DynamicRange.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val encodingArg = args[1] as Encoding
            val bitDepthArg = args[2] as BitDepth
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(encodingArg,bitDepthArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.DynamicRange.getEncoding", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.DynamicRange
            val wrapped: List<Any?> = try {
              listOf(api.getEncoding(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.DynamicRange.getBitDepth", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.DynamicRange
            val wrapped: List<Any?> = try {
              listOf(api.getBitDepth(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DynamicRange and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.DynamicRange, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.DynamicRange.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraInfo(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun mustPlayShutterSound(): Boolean

  abstract fun getCameraSelector(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): dev.hebei.camerax_android.core.CameraSelector

  abstract fun getCameraState(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): dev.hebei.camerax_android.legacy.core.CameraStateLiveData.Wrapper

  abstract fun getTorchState(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper

  abstract fun getZoomState(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper

  abstract fun getExposureState(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): dev.hebei.camerax_android.core.ExposureState

  abstract fun getIntrinsticZoomRatio(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): Double

  abstract fun getLensFacing(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): LensFacing

  abstract fun getPhysicalCameraInfos(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): List<dev.hebei.camerax_android.core.CameraInfo>

  abstract fun getSensorRotationDegrees(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): Long

  abstract fun getSupportedFrameRateRanges(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): List<dev.hebei.camerax_android.legacy.core.IntRange.Wrapper>

  abstract fun isLogicalMultiCameraSupported(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): Boolean

  abstract fun isZslSupported(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): Boolean

  abstract fun hasFlashUnit(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo): Boolean

  abstract fun isFocusMeteringSupported(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo, action: dev.hebei.camerax_android.core.FocusMeteringAction): Boolean

  abstract fun querySupportedDynamicRanges(pigeon_instance: dev.hebei.camerax_android.core.CameraInfo, candidateDynamicRanges: List<dev.hebei.camerax_android.core.DynamicRange>): List<dev.hebei.camerax_android.core.DynamicRange>

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraInfo?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.mustPlayShutterSound", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.mustPlayShutterSound())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getCameraSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getCameraSelector(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getCameraState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getCameraState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getTorchState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getTorchState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getZoomState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getZoomState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getExposureState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getExposureState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getIntrinsticZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getIntrinsticZoomRatio(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getLensFacing", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getLensFacing(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getPhysicalCameraInfos", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getPhysicalCameraInfos(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getSensorRotationDegrees", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getSensorRotationDegrees(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.getSupportedFrameRateRanges", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getSupportedFrameRateRanges(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.isLogicalMultiCameraSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.isLogicalMultiCameraSupported(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.isZslSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.isZslSupported(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.hasFlashUnit", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.hasFlashUnit(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.isFocusMeteringSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val actionArg = args[1] as dev.hebei.camerax_android.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.isFocusMeteringSupported(pigeon_instanceArg, actionArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfo.querySupportedDynamicRanges", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraInfo
            val candidateDynamicRangesArg = args[1] as List<dev.hebei.camerax_android.core.DynamicRange>
            val wrapped: List<Any?> = try {
              listOf(api.querySupportedDynamicRanges(pigeon_instanceArg, candidateDynamicRangesArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.CameraInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraControl(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun enableTorch(pigeon_instance: dev.hebei.camerax_android.core.CameraControl, torch: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun setZoomRatio(pigeon_instance: dev.hebei.camerax_android.core.CameraControl, ratio: Double, callback: (Result<Unit>) -> Unit)

  abstract fun setLinearZoom(pigeon_instance: dev.hebei.camerax_android.core.CameraControl, linearZoom: Double, callback: (Result<Unit>) -> Unit)

  abstract fun startFocusAndMetering(pigeon_instance: dev.hebei.camerax_android.core.CameraControl, action: dev.hebei.camerax_android.core.FocusMeteringAction, callback: (Result<Unit>) -> Unit)

  abstract fun cancelFocusAndMetering(pigeon_instance: dev.hebei.camerax_android.core.CameraControl, callback: (Result<Unit>) -> Unit)

  abstract fun setExposureCompensationIndex(pigeon_instance: dev.hebei.camerax_android.core.CameraControl, value: Long, callback: (Result<Long>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraControl?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.enableTorch", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraControl
            val torchArg = args[1] as Boolean
            api.enableTorch(pigeon_instanceArg, torchArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.setZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraControl
            val ratioArg = args[1] as Double
            api.setZoomRatio(pigeon_instanceArg, ratioArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.setLinearZoom", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraControl
            val linearZoomArg = args[1] as Double
            api.setLinearZoom(pigeon_instanceArg, linearZoomArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.startFocusAndMetering", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraControl
            val actionArg = args[1] as dev.hebei.camerax_android.core.FocusMeteringAction
            api.startFocusAndMetering(pigeon_instanceArg, actionArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.cancelFocusAndMetering", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraControl
            api.cancelFocusAndMetering(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControl.setExposureCompensationIndex", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.CameraControl
            val valueArg = args[1] as Long
            api.setExposureCompensationIndex(pigeon_instanceArg, valueArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraControl and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.CameraControl, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraControl.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAspectRatioStrategy(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(preferredAspectRatio: AspectRatio, fallbackRule: AspectRatioFallbackRule): dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy

  abstract fun ratio16_9FallbackAutoStrategy(): dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy

  abstract fun ratio4_3FallbackAutoStrategy(): dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy

  abstract fun getPreferredAspectRatio(pigeon_instance: dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy): AspectRatio

  abstract fun getFallbackRule(pigeon_instance: dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy): AspectRatioFallbackRule

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAspectRatioStrategy?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AspectRatioStrategy.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val preferredAspectRatioArg = args[1] as AspectRatio
            val fallbackRuleArg = args[2] as AspectRatioFallbackRule
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(preferredAspectRatioArg,fallbackRuleArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AspectRatioStrategy.ratio16_9FallbackAutoStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.ratio16_9FallbackAutoStrategy(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AspectRatioStrategy.ratio4_3FallbackAutoStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.ratio4_3FallbackAutoStrategy(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AspectRatioStrategy.getPreferredAspectRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy
            val wrapped: List<Any?> = try {
              listOf(api.getPreferredAspectRatio(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AspectRatioStrategy.getFallbackRule", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy
            val wrapped: List<Any?> = try {
              listOf(api.getFallbackRule(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AspectRatioStrategy and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.AspectRatioStrategy.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiResolutionFilter(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ResolutionFilter and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.resolutionselector.ResolutionFilter, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of ResolutionFilter, but the class has a nonnull callback method.")
  }

  fun filter(pigeon_instanceArg: dev.hebei.camerax_android.core.resolutionselector.ResolutionFilter, supportedSizesArg: List<android.util,Size>, rotationDegreesArg: Long, callback: (Result<List<android.util,Size>>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ResolutionFilter.filter"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, supportedSizesArg, rotationDegreesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(CameraXError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as List<android.util,Size>
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiResolutionStrategy(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(boundSize: android.util,Size, fallbackRule: ResolutionFallbackRule): dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy

  abstract fun highestAvailableStrategy(): dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy

  abstract fun getBoundSize(pigeon_instance: dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy): android.util,Size?

  abstract fun getFallbackRule(pigeon_instance: dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy): ResolutionFallbackRule

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiResolutionStrategy?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionStrategy.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val boundSizeArg = args[1] as android.util,Size
            val fallbackRuleArg = args[2] as ResolutionFallbackRule
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(boundSizeArg,fallbackRuleArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionStrategy.highestAvailableStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.highestAvailableStrategy(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionStrategy.getBoundSize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy
            val wrapped: List<Any?> = try {
              listOf(api.getBoundSize(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionStrategy.getFallbackRule", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy
            val wrapped: List<Any?> = try {
              listOf(api.getFallbackRule(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ResolutionStrategy and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ResolutionStrategy.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiResolutionSelector(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(allowedResolutionMode: ResolutionMode?, aspectRatioStrategy: dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy?, resolutionFilter: dev.hebei.camerax_android.core.resolutionselector.ResolutionFilter?, resolutionStrategy: dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy?): dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector

  abstract fun getResolutionMode(pigeon_instance: dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector): ResolutionMode

  abstract fun getAspectRatioStrategy(pigeon_instance: dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector): dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy

  abstract fun getResolutionFilter(pigeon_instance: dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector): dev.hebei.camerax_android.core.resolutionselector.ResolutionFilter?

  abstract fun getResolutionStrategy(pigeon_instance: dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector): dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiResolutionSelector?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionSelector.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val allowedResolutionModeArg = args[1] as ResolutionMode?
            val aspectRatioStrategyArg = args[2] as dev.hebei.camerax_android.core.resolutionselector.AspectRatioStrategy?
            val resolutionFilterArg = args[3] as dev.hebei.camerax_android.core.resolutionselector.ResolutionFilter?
            val resolutionStrategyArg = args[4] as dev.hebei.camerax_android.core.resolutionselector.ResolutionStrategy?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(allowedResolutionModeArg,aspectRatioStrategyArg,resolutionFilterArg,resolutionStrategyArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionSelector.getResolutionMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector
            val wrapped: List<Any?> = try {
              listOf(api.getResolutionMode(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionSelector.getAspectRatioStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector
            val wrapped: List<Any?> = try {
              listOf(api.getAspectRatioStrategy(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionSelector.getResolutionFilter", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector
            val wrapped: List<Any?> = try {
              listOf(api.getResolutionFilter(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionSelector.getResolutionStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector
            val wrapped: List<Any?> = try {
              listOf(api.getResolutionStrategy(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ResolutionSelector and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ResolutionSelector.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImageInfo(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getTimestamp(pigeon_instance: dev.hebei.camerax_android.core.ImageInfo): Long

  abstract fun getRotationDegrees(pigeon_instance: dev.hebei.camerax_android.core.ImageInfo): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImageInfo?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageInfo.getTimestamp", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageInfo
            val wrapped: List<Any?> = try {
              listOf(api.getTimestamp(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageInfo.getRotationDegrees", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageInfo
            val wrapped: List<Any?> = try {
              listOf(api.getRotationDegrees(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImageInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.ImageInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ImageInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPlaneProxy(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getBuffer(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy.PlaneProxy): ByteArray

  abstract fun getRowStride(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy.PlaneProxy): Long

  abstract fun getPixelStride(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy.PlaneProxy): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPlaneProxy?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PlaneProxy.getBuffer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy.PlaneProxy
            val wrapped: List<Any?> = try {
              listOf(api.getBuffer(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PlaneProxy.getRowStride", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy.PlaneProxy
            val wrapped: List<Any?> = try {
              listOf(api.getRowStride(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PlaneProxy.getPixelStride", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy.PlaneProxy
            val wrapped: List<Any?> = try {
              listOf(api.getPixelStride(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PlaneProxy and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.ImageProxy.PlaneProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.PlaneProxy.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImageProxy(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getFormat(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy): ImageFormat

  abstract fun getWidth(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy): Long

  abstract fun getHieght(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy): Long

  abstract fun getPlanes(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy): List<dev.hebei.camerax_android.core.ImageProxy.PlaneProxy>

  abstract fun getCropRect(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy): android.graphics.Rect?

  abstract fun setCropRect(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy, rect: android.graphics.Rect?)

  abstract fun getImageInfo(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy): dev.hebei.camerax_android.core.ImageInfo

  abstract fun close(pigeon_instance: dev.hebei.camerax_android.core.ImageProxy)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImageProxy?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxy.getFormat", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy
            val wrapped: List<Any?> = try {
              listOf(api.getFormat(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxy.getWidth", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy
            val wrapped: List<Any?> = try {
              listOf(api.getWidth(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxy.getHieght", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy
            val wrapped: List<Any?> = try {
              listOf(api.getHieght(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxy.getPlanes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy
            val wrapped: List<Any?> = try {
              listOf(api.getPlanes(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxy.getCropRect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy
            val wrapped: List<Any?> = try {
              listOf(api.getCropRect(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxy.setCropRect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy
            val rectArg = args[1] as android.graphics.Rect?
            val wrapped: List<Any?> = try {
              api.setCropRect(pigeon_instanceArg, rectArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxy.getImageInfo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy
            val wrapped: List<Any?> = try {
              listOf(api.getImageInfo(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxy.close", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.core.ImageProxy
            val wrapped: List<Any?> = try {
              api.close(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImageProxy and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.ImageProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ImageProxy.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiAnalyzer(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Analyzer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.ImageAnalysis.Analyzer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of Analyzer, but the class has a nonnull callback method.")
  }

  fun analyze(pigeon_instanceArg: dev.hebei.camerax_android.core.ImageAnalysis.Analyzer, imageArg: dev.hebei.camerax_android.core.ImageProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Analyzer.analyze"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, imageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiQuality(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun fhd(): dev.hebei.camerax_android.video.Quality

  abstract fun hd(): dev.hebei.camerax_android.video.Quality

  abstract fun highest(): dev.hebei.camerax_android.video.Quality

  abstract fun lowest(): dev.hebei.camerax_android.video.Quality

  abstract fun sd(): dev.hebei.camerax_android.video.Quality

  abstract fun uhd(): dev.hebei.camerax_android.video.Quality

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiQuality?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.fhd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.fhd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.hd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.hd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.highest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.highest(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.lowest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.lowest(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.sd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.sd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Quality.uhd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.uhd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Quality and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.Quality, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Quality.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFallbackStrategy(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun higherQualityOrLowerThan(quality: dev.hebei.camerax_android.video.Quality): dev.hebei.camerax_android.video.FallbackStrategy

  abstract fun higherQualityThan(quality: dev.hebei.camerax_android.video.Quality): dev.hebei.camerax_android.video.FallbackStrategy

  abstract fun lowerQualityOrHigherThan(quality: dev.hebei.camerax_android.video.Quality): dev.hebei.camerax_android.video.FallbackStrategy

  abstract fun lowerQuality(quality: dev.hebei.camerax_android.video.Quality): dev.hebei.camerax_android.video.FallbackStrategy

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFallbackStrategy?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategy.higherQualityOrLowerThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as dev.hebei.camerax_android.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.higherQualityOrLowerThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategy.higherQualityThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as dev.hebei.camerax_android.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.higherQualityThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategy.lowerQualityOrHigherThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as dev.hebei.camerax_android.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.lowerQualityOrHigherThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategy.lowerQuality", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as dev.hebei.camerax_android.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.lowerQuality(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FallbackStrategy and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.FallbackStrategy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.FallbackStrategy.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiQualitySelector(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun fromQuality(quality: dev.hebei.camerax_android.video.Quality): dev.hebei.camerax_android.video.QualitySelector

  abstract fun fromQualityAndFallbackStrategy(quality: dev.hebei.camerax_android.video.Quality, fallbackStrategy: dev.hebei.camerax_android.video.FallbackStrategy): dev.hebei.camerax_android.video.QualitySelector

  abstract fun fromOrderedList(qualities: List<dev.hebei.camerax_android.video.Quality>): dev.hebei.camerax_android.video.QualitySelector

  abstract fun fromOrderedListAndFallbackStrategy(qualities: List<dev.hebei.camerax_android.video.Quality>, fallbackStrategy: dev.hebei.camerax_android.video.FallbackStrategy): dev.hebei.camerax_android.video.QualitySelector

  abstract fun getResolution(pigeon_instance: dev.hebei.camerax_android.video.QualitySelector, cameraInfo: dev.hebei.camerax_android.core.CameraInfo, quality: dev.hebei.camerax_android.video.Quality): android.util,Size?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiQualitySelector?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelector.fromQuality", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as dev.hebei.camerax_android.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.fromQuality(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelector.fromQualityAndFallbackStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as dev.hebei.camerax_android.video.Quality
            val fallbackStrategyArg = args[2] as dev.hebei.camerax_android.video.FallbackStrategy
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.fromQualityAndFallbackStrategy(qualityArg,fallbackStrategyArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelector.fromOrderedList", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualitiesArg = args[1] as List<dev.hebei.camerax_android.video.Quality>
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.fromOrderedList(qualitiesArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelector.fromOrderedListAndFallbackStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualitiesArg = args[1] as List<dev.hebei.camerax_android.video.Quality>
            val fallbackStrategyArg = args[2] as dev.hebei.camerax_android.video.FallbackStrategy
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.fromOrderedListAndFallbackStrategy(qualitiesArg,fallbackStrategyArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelector.getResolution", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.QualitySelector
            val cameraInfoArg = args[1] as dev.hebei.camerax_android.core.CameraInfo
            val qualityArg = args[2] as dev.hebei.camerax_android.video.Quality
            val wrapped: List<Any?> = try {
              listOf(api.getResolution(pigeon_instanceArg, cameraInfoArg, qualityArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of QualitySelector and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.QualitySelector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.QualitySelector.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAudioConfig(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun create(enableAudio: Boolean): dev.hebei.camerax_android.view.video.AudioConfig

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAudioConfig?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioConfig.create", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val enableAudioArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.create(enableAudioArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AudioConfig and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.view.video.AudioConfig, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.AudioConfig.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAudioStats(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getAudioAmplitude(pigeon_instance: dev.hebei.camerax_android.video.AudioStats): Double

  abstract fun getAudioState(pigeon_instance: dev.hebei.camerax_android.video.AudioStats): AudioState

  abstract fun getErrorCause(pigeon_instance: dev.hebei.camerax_android.video.AudioStats): java.lang.Throwable?

  abstract fun hasAudio(pigeon_instance: dev.hebei.camerax_android.video.AudioStats): Boolean

  abstract fun hasError(pigeon_instance: dev.hebei.camerax_android.video.AudioStats): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAudioStats?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioStats.getAudioAmplitude", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.AudioStats
            val wrapped: List<Any?> = try {
              listOf(api.getAudioAmplitude(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioStats.getAudioState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.AudioStats
            val wrapped: List<Any?> = try {
              listOf(api.getAudioState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioStats.getErrorCause", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.AudioStats
            val wrapped: List<Any?> = try {
              listOf(api.getErrorCause(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioStats.hasAudio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.AudioStats
            val wrapped: List<Any?> = try {
              listOf(api.hasAudio(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioStats.hasError", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.AudioStats
            val wrapped: List<Any?> = try {
              listOf(api.hasError(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AudioStats and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.AudioStats, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.AudioStats.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiRecordingStats(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getAudioStats(pigeon_instance: dev.hebei.camerax_android.video.RecordingStats): dev.hebei.camerax_android.video.AudioStats

  abstract fun getNumBytesRecorded(pigeon_instance: dev.hebei.camerax_android.video.RecordingStats): Long

  abstract fun getRecordedDurationNanos(pigeon_instance: dev.hebei.camerax_android.video.RecordingStats): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiRecordingStats?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.RecordingStats.getAudioStats", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.RecordingStats
            val wrapped: List<Any?> = try {
              listOf(api.getAudioStats(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.RecordingStats.getNumBytesRecorded", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.RecordingStats
            val wrapped: List<Any?> = try {
              listOf(api.getNumBytesRecorded(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.RecordingStats.getRecordedDurationNanos", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.RecordingStats
            val wrapped: List<Any?> = try {
              listOf(api.getRecordedDurationNanos(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of RecordingStats and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.RecordingStats, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.RecordingStats.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getRecordingStats(pigeon_instance: dev.hebei.camerax_android.video.VideoRecordEvent): dev.hebei.camerax_android.video.RecordingStats

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoRecordEvent?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.VideoRecordEvent.getRecordingStats", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.VideoRecordEvent
            val wrapped: List<Any?> = try {
              listOf(api.getRecordingStats(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.VideoRecordEvent, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiVideoRecordStatusEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordStatusEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.VideoRecordEvent.Status, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordStatusEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiVideoRecordStartEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordStartEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.VideoRecordEvent.Start, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordStartEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiVideoRecordPauseEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordPauseEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.VideoRecordEvent.Pause, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordPauseEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiVideoRecordResumeEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordResumeEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.VideoRecordEvent.Resume, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordResumeEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordFinalizeEvent(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun getCause(pigeon_instance: dev.hebei.camerax_android.video.VideoRecordEvent.Finalize): java.lang.Throwable?

  abstract fun getError(pigeon_instance: dev.hebei.camerax_android.video.VideoRecordEvent.Finalize): VideoRecordFinalizeEventError

  abstract fun getOutputUri(pigeon_instance: dev.hebei.camerax_android.video.VideoRecordEvent.Finalize): String

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoRecordFinalizeEvent?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.VideoRecordFinalizeEvent.getCause", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.VideoRecordEvent.Finalize
            val wrapped: List<Any?> = try {
              listOf(api.getCause(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.VideoRecordFinalizeEvent.getError", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.VideoRecordEvent.Finalize
            val wrapped: List<Any?> = try {
              listOf(api.getError(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.VideoRecordFinalizeEvent.getOutputUri", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.VideoRecordEvent.Finalize
            val wrapped: List<Any?> = try {
              listOf(api.getOutputUri(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordFinalizeEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.VideoRecordEvent.Finalize, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordFinalizeEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiVideoRecordEventConsumer(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordEventConsumer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.legacy.video.VideoRecordEventConsumer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException("Attempting to create a new Dart instance of VideoRecordEventConsumer, but the class has a nonnull callback method.")
  }

  fun accept(pigeon_instanceArg: dev.hebei.camerax_android.legacy.video.VideoRecordEventConsumer, eventArg: dev.hebei.camerax_android.video.VideoRecordEvent, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordEventConsumer.accept"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiRecording(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun isPersistene(pigeon_instance: dev.hebei.camerax_android.video.Recording): Boolean

  abstract fun mute(pigeon_instance: dev.hebei.camerax_android.video.Recording, muted: Boolean)

  abstract fun pause(pigeon_instance: dev.hebei.camerax_android.video.Recording)

  abstract fun resume(pigeon_instance: dev.hebei.camerax_android.video.Recording)

  abstract fun stop(pigeon_instance: dev.hebei.camerax_android.video.Recording)

  abstract fun close(pigeon_instance: dev.hebei.camerax_android.video.Recording)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiRecording?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.isPersistene", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.Recording
            val wrapped: List<Any?> = try {
              listOf(api.isPersistene(pigeon_instanceArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.mute", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.Recording
            val mutedArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              api.mute(pigeon_instanceArg, mutedArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.pause", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.Recording
            val wrapped: List<Any?> = try {
              api.pause(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.resume", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.Recording
            val wrapped: List<Any?> = try {
              api.resume(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.stop", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.Recording
            val wrapped: List<Any?> = try {
              api.stop(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Recording.close", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.video.Recording
            val wrapped: List<Any?> = try {
              api.close(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Recording and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.video.Recording, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.Recording.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraController(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun initialize(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<Unit>) -> Unit)

  abstract fun hasCamera(pigeon_instance: dev.hebei.camerax_android.view.CameraController, cameraSelector: dev.hebei.camerax_android.core.CameraSelector, callback: (Result<Boolean>) -> Unit)

  abstract fun getCameraSelector(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.core.CameraSelector>) -> Unit)

  abstract fun setCameraSelector(pigeon_instance: dev.hebei.camerax_android.view.CameraController, cameraSelector: dev.hebei.camerax_android.core.CameraSelector, callback: (Result<Unit>) -> Unit)

  abstract fun getCameraInfo(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.core.CameraInfo?>) -> Unit)

  abstract fun getCameraControl(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.core.CameraControl?>) -> Unit)

  abstract fun getTorchState(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper>) -> Unit)

  abstract fun enableTorch(pigeon_instance: dev.hebei.camerax_android.view.CameraController, torchEnabled: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun getZoomState(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper>) -> Unit)

  abstract fun setZoomRatio(pigeon_instance: dev.hebei.camerax_android.view.CameraController, zoomRatio: Double, callback: (Result<Unit>) -> Unit)

  abstract fun setLinearZoom(pigeon_instance: dev.hebei.camerax_android.view.CameraController, linearZoom: Double, callback: (Result<Unit>) -> Unit)

  abstract fun isPinchToZoomEnabled(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun setPinchToZoomEnabled(pigeon_instance: dev.hebei.camerax_android.view.CameraController, enabled: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun isTapToFocusEnabled(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun setTapToFocusEnabled(pigeon_instance: dev.hebei.camerax_android.view.CameraController, enabled: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun isImageCaptureEnabled(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun isImageAnalysisEnabled(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun isVideoCaptureEnabled(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun setEnabledUseCases(pigeon_instance: dev.hebei.camerax_android.view.CameraController, enabledUseCases: List<UseCase>, callback: (Result<Unit>) -> Unit)

  abstract fun getPreviewResolutionSelector(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector?>) -> Unit)

  abstract fun setPreviewResolutionSelector(pigeon_instance: dev.hebei.camerax_android.view.CameraController, resolutionSelector: dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector?, callback: (Result<Unit>) -> Unit)

  abstract fun getImageCaptureResolutionSelector(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector?>) -> Unit)

  abstract fun setImageCaptureResolutionSelector(pigeon_instance: dev.hebei.camerax_android.view.CameraController, resolutionSelector: dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector?, callback: (Result<Unit>) -> Unit)

  abstract fun getImageCaptureMode(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<CaptureMode>) -> Unit)

  abstract fun setImageCaptureMode(pigeon_instance: dev.hebei.camerax_android.view.CameraController, captureMode: CaptureMode, callback: (Result<Unit>) -> Unit)

  abstract fun getImageCaptureFlashMode(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<FlashMode>) -> Unit)

  abstract fun setImageCaptureFlashMode(pigeon_instance: dev.hebei.camerax_android.view.CameraController, flashMode: FlashMode, callback: (Result<Unit>) -> Unit)

  abstract fun takePictureToMemory(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<ByteArray>) -> Unit)

  abstract fun takePictureToUri(pigeon_instance: dev.hebei.camerax_android.view.CameraController, uri: String, callback: (Result<String>) -> Unit)

  abstract fun getImageAnalysisResolutionSelector(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector>) -> Unit)

  abstract fun setImageAnalysisResolutionSelector(pigeon_instance: dev.hebei.camerax_android.view.CameraController, resolutionSelector: dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisBackpressureStrategy(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<BackpressureStrategy>) -> Unit)

  abstract fun setImageAnalysisBackpressureStrategy(pigeon_instance: dev.hebei.camerax_android.view.CameraController, backpressureStrategy: BackpressureStrategy, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisImageQueueDepth(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<Long>) -> Unit)

  abstract fun setImageAnalysisImageQueueDepth(pigeon_instance: dev.hebei.camerax_android.view.CameraController, imageQueueDepth: Long, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisOutputImageFormat(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<ImageFormat>) -> Unit)

  abstract fun setImageAnalysisOutputImageFormat(pigeon_instance: dev.hebei.camerax_android.view.CameraController, outputImageFormat: ImageFormat, callback: (Result<Unit>) -> Unit)

  abstract fun setImageAnalysisAnalyzer(pigeon_instance: dev.hebei.camerax_android.view.CameraController, analyzer: dev.hebei.camerax_android.core.ImageAnalysis.Analyzer, callback: (Result<Unit>) -> Unit)

  abstract fun clearImageAnalysisAnalyzer(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureDynamicRange(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.core.DynamicRange>) -> Unit)

  abstract fun setVideoCaptureDynamicRange(pigeon_instance: dev.hebei.camerax_android.view.CameraController, dynamicRange: dev.hebei.camerax_android.core.DynamicRange, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureMirrorMode(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<MirrorMode>) -> Unit)

  abstract fun setVideoCaptureMirrorMode(pigeon_instance: dev.hebei.camerax_android.view.CameraController, mirrorMode: MirrorMode, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureQualitySelector(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.video.QualitySelector>) -> Unit)

  abstract fun setVideoCaptureQualitySelector(pigeon_instance: dev.hebei.camerax_android.view.CameraController, qualitySelector: dev.hebei.camerax_android.video.QualitySelector, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureTargetFrameRate(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<dev.hebei.camerax_android.legacy.core.IntRange.Wrapper>) -> Unit)

  abstract fun setVideoCaptureTargetFrameRate(pigeon_instance: dev.hebei.camerax_android.view.CameraController, targetFrameRate: dev.hebei.camerax_android.legacy.core.IntRange.Wrapper, callback: (Result<Unit>) -> Unit)

  abstract fun isRecording(pigeon_instance: dev.hebei.camerax_android.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun startRecording(pigeon_instance: dev.hebei.camerax_android.view.CameraController, uri: String, audioConfig: dev.hebei.camerax_android.view.video.AudioConfig, listener: dev.hebei.camerax_android.legacy.video.VideoRecordEventConsumer, callback: (Result<dev.hebei.camerax_android.video.Recording>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraController?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.initialize(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.hasCamera", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val cameraSelectorArg = args[1] as dev.hebei.camerax_android.core.CameraSelector
            api.hasCamera(pigeon_instanceArg, cameraSelectorArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getCameraSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getCameraSelector(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.core.CameraSelector> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setCameraSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val cameraSelectorArg = args[1] as dev.hebei.camerax_android.core.CameraSelector
            api.setCameraSelector(pigeon_instanceArg, cameraSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getCameraInfo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getCameraInfo(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.core.CameraInfo?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getCameraControl", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getCameraControl(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.core.CameraControl?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getTorchState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getTorchState(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.legacy.core.TorchStateLiveData.Wrapper> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.enableTorch", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val torchEnabledArg = args[1] as Boolean
            api.enableTorch(pigeon_instanceArg, torchEnabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getZoomState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getZoomState(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.legacy.core.ZoomStateLiveData.Wrapper> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val zoomRatioArg = args[1] as Double
            api.setZoomRatio(pigeon_instanceArg, zoomRatioArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setLinearZoom", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val linearZoomArg = args[1] as Double
            api.setLinearZoom(pigeon_instanceArg, linearZoomArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isPinchToZoomEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.isPinchToZoomEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setPinchToZoomEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val enabledArg = args[1] as Boolean
            api.setPinchToZoomEnabled(pigeon_instanceArg, enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isTapToFocusEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.isTapToFocusEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setTapToFocusEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val enabledArg = args[1] as Boolean
            api.setTapToFocusEnabled(pigeon_instanceArg, enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isImageCaptureEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.isImageCaptureEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isImageAnalysisEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.isImageAnalysisEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isVideoCaptureEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.isVideoCaptureEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setEnabledUseCases", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val enabledUseCasesArg = args[1] as List<UseCase>
            api.setEnabledUseCases(pigeon_instanceArg, enabledUseCasesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getPreviewResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getPreviewResolutionSelector(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setPreviewResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val resolutionSelectorArg = args[1] as dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector?
            api.setPreviewResolutionSelector(pigeon_instanceArg, resolutionSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageCaptureResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getImageCaptureResolutionSelector(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageCaptureResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val resolutionSelectorArg = args[1] as dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector?
            api.setImageCaptureResolutionSelector(pigeon_instanceArg, resolutionSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageCaptureMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getImageCaptureMode(pigeon_instanceArg) { result: Result<CaptureMode> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageCaptureMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val captureModeArg = args[1] as CaptureMode
            api.setImageCaptureMode(pigeon_instanceArg, captureModeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageCaptureFlashMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getImageCaptureFlashMode(pigeon_instanceArg) { result: Result<FlashMode> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageCaptureFlashMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val flashModeArg = args[1] as FlashMode
            api.setImageCaptureFlashMode(pigeon_instanceArg, flashModeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.takePictureToMemory", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.takePictureToMemory(pigeon_instanceArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.takePictureToUri", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val uriArg = args[1] as String
            api.takePictureToUri(pigeon_instanceArg, uriArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageAnalysisResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getImageAnalysisResolutionSelector(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageAnalysisResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val resolutionSelectorArg = args[1] as dev.hebei.camerax_android.core.resolutionselector.ResolutionSelector
            api.setImageAnalysisResolutionSelector(pigeon_instanceArg, resolutionSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageAnalysisBackpressureStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getImageAnalysisBackpressureStrategy(pigeon_instanceArg) { result: Result<BackpressureStrategy> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageAnalysisBackpressureStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val backpressureStrategyArg = args[1] as BackpressureStrategy
            api.setImageAnalysisBackpressureStrategy(pigeon_instanceArg, backpressureStrategyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageAnalysisImageQueueDepth", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getImageAnalysisImageQueueDepth(pigeon_instanceArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageAnalysisImageQueueDepth", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val imageQueueDepthArg = args[1] as Long
            api.setImageAnalysisImageQueueDepth(pigeon_instanceArg, imageQueueDepthArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getImageAnalysisOutputImageFormat", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getImageAnalysisOutputImageFormat(pigeon_instanceArg) { result: Result<ImageFormat> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageAnalysisOutputImageFormat", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val outputImageFormatArg = args[1] as ImageFormat
            api.setImageAnalysisOutputImageFormat(pigeon_instanceArg, outputImageFormatArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setImageAnalysisAnalyzer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val analyzerArg = args[1] as dev.hebei.camerax_android.core.ImageAnalysis.Analyzer
            api.setImageAnalysisAnalyzer(pigeon_instanceArg, analyzerArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.clearImageAnalysisAnalyzer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.clearImageAnalysisAnalyzer(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getVideoCaptureDynamicRange", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getVideoCaptureDynamicRange(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.core.DynamicRange> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setVideoCaptureDynamicRange", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val dynamicRangeArg = args[1] as dev.hebei.camerax_android.core.DynamicRange
            api.setVideoCaptureDynamicRange(pigeon_instanceArg, dynamicRangeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getVideoCaptureMirrorMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getVideoCaptureMirrorMode(pigeon_instanceArg) { result: Result<MirrorMode> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setVideoCaptureMirrorMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val mirrorModeArg = args[1] as MirrorMode
            api.setVideoCaptureMirrorMode(pigeon_instanceArg, mirrorModeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getVideoCaptureQualitySelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getVideoCaptureQualitySelector(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.video.QualitySelector> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setVideoCaptureQualitySelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val qualitySelectorArg = args[1] as dev.hebei.camerax_android.video.QualitySelector
            api.setVideoCaptureQualitySelector(pigeon_instanceArg, qualitySelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.getVideoCaptureTargetFrameRate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.getVideoCaptureTargetFrameRate(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.legacy.core.IntRange.Wrapper> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.setVideoCaptureTargetFrameRate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val targetFrameRateArg = args[1] as dev.hebei.camerax_android.legacy.core.IntRange.Wrapper
            api.setVideoCaptureTargetFrameRate(pigeon_instanceArg, targetFrameRateArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.isRecording", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            api.isRecording(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraController.startRecording", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.CameraController
            val uriArg = args[1] as String
            val audioConfigArg = args[2] as dev.hebei.camerax_android.view.video.AudioConfig
            val listenerArg = args[3] as dev.hebei.camerax_android.legacy.video.VideoRecordEventConsumer
            api.startRecording(pigeon_instanceArg, uriArg, audioConfigArg, listenerArg) { result: Result<dev.hebei.camerax_android.video.Recording> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraController and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.view.CameraController, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraController.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiLifecycleCameraController(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.view.LifecycleCameraController

  abstract fun bindToLifecycle(pigeon_instance: dev.hebei.camerax_android.view.LifecycleCameraController, callback: (Result<Unit>) -> Unit)

  abstract fun unbind(pigeon_instance: dev.hebei.camerax_android.view.LifecycleCameraController, callback: (Result<Unit>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiLifecycleCameraController?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LifecycleCameraController.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LifecycleCameraController.bindToLifecycle", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.LifecycleCameraController
            api.bindToLifecycle(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LifecycleCameraController.unbind", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.LifecycleCameraController
            api.unbind(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of LifecycleCameraController and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.view.LifecycleCameraController, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.LifecycleCameraController.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiCameraController] used to access callback methods */
  fun pigeon_getPigeonApiCameraController(): PigeonApiCameraController
  {
    return pigeonRegistrar.getPigeonApiCameraController()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPreviewView(open val pigeonRegistrar: CameraXPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.view.PreviewView

  abstract fun getController(pigeon_instance: dev.hebei.camerax_android.view.PreviewView, callback: (Result<dev.hebei.camerax_android.view.CameraController?>) -> Unit)

  abstract fun setController(pigeon_instance: dev.hebei.camerax_android.view.PreviewView, controller: dev.hebei.camerax_android.view.CameraController?, callback: (Result<Unit>) -> Unit)

  abstract fun getScaleType(pigeon_instance: dev.hebei.camerax_android.view.PreviewView, callback: (Result<ScaleType>) -> Unit)

  abstract fun setScaleType(pigeon_instance: dev.hebei.camerax_android.view.PreviewView, scaleType: ScaleType, callback: (Result<Unit>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPreviewView?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewView.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewView.getController", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.PreviewView
            api.getController(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.view.CameraController?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewView.setController", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.PreviewView
            val controllerArg = args[1] as dev.hebei.camerax_android.view.CameraController?
            api.setController(pigeon_instanceArg, controllerArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewView.getScaleType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.PreviewView
            api.getScaleType(pigeon_instanceArg) { result: Result<ScaleType> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewView.setScaleType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.view.PreviewView
            val scaleTypeArg = args[1] as ScaleType
            api.setScaleType(pigeon_instanceArg, scaleTypeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PreviewView and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.view.PreviewView, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.PreviewView.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }

}
