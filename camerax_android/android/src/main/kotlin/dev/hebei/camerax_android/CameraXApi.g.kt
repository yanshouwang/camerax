// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.hebei.camerax_android

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object CameraXApiPigeonUtils {

  fun createConnectionError(channelName: String): CameraXError {
    return CameraXError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is CameraXError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class CameraXError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * Objects stored in this container are represented by an object in Dart that is also stored in
 * an InstanceManager with the same identifier.
 *
 * When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * Added instances are added as a weak reference and a strong reference. When the strong
 * reference is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener.onFinalize` is called with the instance's identifier. However, if the strong
 * reference is removed and then the identifier is retrieved with the intention to pass the identifier
 * to Dart (e.g. calling [getIdentifierForStrongReference]), the strong reference to the instance
 * is recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate")
class CameraXApiPigeonInstanceManager(private val finalizationListener: PigeonFinalizationListener) {
  /** Interface for listening when a weak reference of an instance is removed from the manager.  */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  private val identifiers = java.util.WeakHashMap<Any, Long>()
  private val weakInstances = HashMap<Long, java.lang.ref.WeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<java.lang.ref.WeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private val releaseAllFinalizedInstancesRunnable = Runnable {
    this.releaseAllFinalizedInstances()
  }
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  /**
   * Modifies the time interval used to define how often this instance removes garbage collected
   * weak references to native Android objects that this instance was managing.
   */
  var clearFinalizedWeakReferencesInterval: Long = 3000
    set(value) {
      handler.removeCallbacks(releaseAllFinalizedInstancesRunnable)
      field = value
      releaseAllFinalizedInstances()
    }

  init {
    handler.postDelayed(releaseAllFinalizedInstancesRunnable, clearFinalizedWeakReferencesInterval)
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager with a listener for garbage collected weak
     * references.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     */
    fun create(finalizationListener: PigeonFinalizationListener): CameraXApiPigeonInstanceManager {
      return CameraXApiPigeonInstanceManager(finalizationListener)
    }
  }

  /**
   * Removes `identifier` and return its associated strongly referenced instance, if present,
   * from the manager.
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance, if present, otherwise `null`.
   *
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `CameraXApiPigeonInstanceManager` to have, or recreate, a weak reference to the Dart instance the
   * identifier is associated with.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    val identifier = identifiers[instance]
    if (identifier != null) {
      strongInstances[identifier] = instance!!
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This
   * allows two objects that are equivalent (e.g. the `equals` method returns true and their
   * hashcodes are equal) to both be added.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new unique instance that was instantiated from the host platform.
   *
   * If the manager contains [instance], this returns the corresponding identifier. If the
   * manager does not contain [instance], this adds the instance and returns a unique
   * identifier for that [instance].
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) { "Instance of ${instance.javaClass} has already been added." }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /** Retrieves the instance associated with identifier, if present, otherwise `null`. */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as java.lang.ref.WeakReference<T>?
    return instance?.get()
  }

  /** Returns whether this manager contains the given `instance`. */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return identifiers.containsKey(instance)
  }

  /**
   * Stops the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks(releaseAllFinalizedInstancesRunnable)
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: java.lang.ref.WeakReference<Any>?
    while ((referenceQueue.poll() as java.lang.ref.WeakReference<Any>?).also { reference = it } != null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed(releaseAllFinalizedInstancesRunnable, clearFinalizedWeakReferencesInterval)
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = java.lang.ref.WeakReference(instance, referenceQueue)
    identifiers[instance] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
        tag,
        "The manager was used after calls to the PigeonFinalizationListener has been stopped."
      )
    }
  }
}


/** Generated API for managing the Dart and native `InstanceManager`s. */
private class CameraXApiPigeonInstanceManagerApi(val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by CameraXApiPigeonInstanceManagerApi. */
    val codec: MessageCodec<Any?> by lazy {
      CameraXApiPigeonCodec()
    }

    /**
     * Sets up an instance of `CameraXApiPigeonInstanceManagerApi` to handle messages from the
     * `binaryMessenger`.
     */
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, instanceManager: CameraXApiPigeonInstanceManager?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PigeonInternalInstanceManager.removeStrongReference", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              instanceManager.remove<Any?>(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PigeonInternalInstanceManager.clear", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              instanceManager.clear()
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  fun removeStrongReference(identifierArg: Long, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.camerax_android.PigeonInternalInstanceManager.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * Provides implementations for each ProxyApi implementation and provides access to resources
 * needed by any implementation.
 */
abstract class CameraXApiPigeonProxyApiRegistrar(val binaryMessenger: BinaryMessenger) {
  /** Whether APIs should ignore calling to Dart. */
  public var ignoreCallsToDart = false
  val instanceManager: CameraXApiPigeonInstanceManager
  private var _codec: MessageCodec<Any?>? = null
  val codec: MessageCodec<Any?>
    get() {
      if (_codec == null) {
        _codec = CameraXApiPigeonProxyApiBaseCodec(this)
      }
      return _codec!!
    }

  init {
    val api = CameraXApiPigeonInstanceManagerApi(binaryMessenger)
    instanceManager = CameraXApiPigeonInstanceManager.create(
      object : CameraXApiPigeonInstanceManager.PigeonFinalizationListener {
        override fun onFinalize(identifier: Long) {
          api.removeStrongReference(identifier) {
            if (it.isFailure) {
              Log.e(
                "PigeonProxyApiRegistrar",
                "Failed to remove Dart strong reference with identifier: $identifier"
              )
            }
          }
        }
      }
    )
  }
  /**
   * An implementation of [PigeonApiPermissionManagerApi] used to add a new Dart instance of
   * `PermissionManagerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPermissionManagerApi(): PigeonApiPermissionManagerApi

  /**
   * An implementation of [PigeonApiAutoCloseableApi] used to add a new Dart instance of
   * `AutoCloseableApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAutoCloseableApi(): PigeonApiAutoCloseableApi

  /**
   * An implementation of [PigeonApiCloseableApi] used to add a new Dart instance of
   * `CloseableApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiCloseableApi(): PigeonApiCloseableApi
  {
    return PigeonApiCloseableApi(this)
  }

  /**
   * An implementation of [PigeonApiLocationApi] used to add a new Dart instance of
   * `LocationApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiLocationApi(): PigeonApiLocationApi

  /**
   * An implementation of [PigeonApiSizeApi] used to add a new Dart instance of
   * `SizeApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiSizeApi(): PigeonApiSizeApi

  /**
   * An implementation of [PigeonApiPointApi] used to add a new Dart instance of
   * `PointApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPointApi(): PigeonApiPointApi

  /**
   * An implementation of [PigeonApiPointFApi] used to add a new Dart instance of
   * `PointFApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPointFApi(): PigeonApiPointFApi

  /**
   * An implementation of [PigeonApiRectApi] used to add a new Dart instance of
   * `RectApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiRectApi(): PigeonApiRectApi

  /**
   * An implementation of [PigeonApiIntRangeApi] used to add a new Dart instance of
   * `IntRangeApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiIntRangeApi(): PigeonApiIntRangeApi

  /**
   * An implementation of [PigeonApiLongRangeApi] used to add a new Dart instance of
   * `LongRangeApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiLongRangeApi(): PigeonApiLongRangeApi

  /**
   * An implementation of [PigeonApiCameraSelectorApi] used to add a new Dart instance of
   * `CameraSelectorApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraSelectorApi(): PigeonApiCameraSelectorApi

  /**
   * An implementation of [PigeonApiCameraStateLiveDataApi] used to add a new Dart instance of
   * `CameraStateLiveDataApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraStateLiveDataApi(): PigeonApiCameraStateLiveDataApi

  /**
   * An implementation of [PigeonApiCameraStateObserverApi] used to add a new Dart instance of
   * `CameraStateObserverApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraStateObserverApi(): PigeonApiCameraStateObserverApi

  /**
   * An implementation of [PigeonApiTorchStateLiveDataApi] used to add a new Dart instance of
   * `TorchStateLiveDataApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiTorchStateLiveDataApi(): PigeonApiTorchStateLiveDataApi

  /**
   * An implementation of [PigeonApiTorchStateObserverApi] used to add a new Dart instance of
   * `TorchStateObserverApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiTorchStateObserverApi(): PigeonApiTorchStateObserverApi

  /**
   * An implementation of [PigeonApiZoomStateApi] used to add a new Dart instance of
   * `ZoomStateApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomStateApi(): PigeonApiZoomStateApi

  /**
   * An implementation of [PigeonApiZoomStateLiveDataApi] used to add a new Dart instance of
   * `ZoomStateLiveDataApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomStateLiveDataApi(): PigeonApiZoomStateLiveDataApi

  /**
   * An implementation of [PigeonApiZoomStateObserverApi] used to add a new Dart instance of
   * `ZoomStateObserverApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomStateObserverApi(): PigeonApiZoomStateObserverApi

  /**
   * An implementation of [PigeonApiExposureStateApi] used to add a new Dart instance of
   * `ExposureStateApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiExposureStateApi(): PigeonApiExposureStateApi

  /**
   * An implementation of [PigeonApiMeteringPointApi] used to add a new Dart instance of
   * `MeteringPointApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMeteringPointApi(): PigeonApiMeteringPointApi

  /**
   * An implementation of [PigeonApiMeteringPointFactoryApi] used to add a new Dart instance of
   * `MeteringPointFactoryApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMeteringPointFactoryApi(): PigeonApiMeteringPointFactoryApi

  /**
   * An implementation of [PigeonApiSurfaceOrientedMeteringPointFactoryApi] used to add a new Dart instance of
   * `SurfaceOrientedMeteringPointFactoryApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiSurfaceOrientedMeteringPointFactoryApi(): PigeonApiSurfaceOrientedMeteringPointFactoryApi

  /**
   * An implementation of [PigeonApiMeteringPointTupleApi] used to add a new Dart instance of
   * `MeteringPointTupleApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMeteringPointTupleApi(): PigeonApiMeteringPointTupleApi

  /**
   * An implementation of [PigeonApiDurationTupleApi] used to add a new Dart instance of
   * `DurationTupleApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiDurationTupleApi(): PigeonApiDurationTupleApi

  /**
   * An implementation of [PigeonApiFocusMeteringActionApi] used to add a new Dart instance of
   * `FocusMeteringActionApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFocusMeteringActionApi(): PigeonApiFocusMeteringActionApi

  /**
   * An implementation of [PigeonApiFocusMeteringResultApi] used to add a new Dart instance of
   * `FocusMeteringResultApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFocusMeteringResultApi(): PigeonApiFocusMeteringResultApi

  /**
   * An implementation of [PigeonApiDynamicRangeApi] used to add a new Dart instance of
   * `DynamicRangeApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiDynamicRangeApi(): PigeonApiDynamicRangeApi

  /**
   * An implementation of [PigeonApiCameraInfoApi] used to add a new Dart instance of
   * `CameraInfoApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraInfoApi(): PigeonApiCameraInfoApi

  /**
   * An implementation of [PigeonApiCameraControlApi] used to add a new Dart instance of
   * `CameraControlApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraControlApi(): PigeonApiCameraControlApi

  /**
   * An implementation of [PigeonApiAspectRatioStrategyApi] used to add a new Dart instance of
   * `AspectRatioStrategyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAspectRatioStrategyApi(): PigeonApiAspectRatioStrategyApi

  /**
   * An implementation of [PigeonApiResolutionFilterApi] used to add a new Dart instance of
   * `ResolutionFilterApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiResolutionFilterApi(): PigeonApiResolutionFilterApi

  /**
   * An implementation of [PigeonApiResolutionStrategyApi] used to add a new Dart instance of
   * `ResolutionStrategyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiResolutionStrategyApi(): PigeonApiResolutionStrategyApi

  /**
   * An implementation of [PigeonApiResolutionSelectorApi] used to add a new Dart instance of
   * `ResolutionSelectorApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiResolutionSelectorApi(): PigeonApiResolutionSelectorApi

  /**
   * An implementation of [PigeonApiImageInfoApi] used to add a new Dart instance of
   * `ImageInfoApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImageInfoApi(): PigeonApiImageInfoApi

  /**
   * An implementation of [PigeonApiPlaneProxyApi] used to add a new Dart instance of
   * `PlaneProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPlaneProxyApi(): PigeonApiPlaneProxyApi

  /**
   * An implementation of [PigeonApiImageProxyApi] used to add a new Dart instance of
   * `ImageProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImageProxyApi(): PigeonApiImageProxyApi

  /**
   * An implementation of [PigeonApiMetadataApi] used to add a new Dart instance of
   * `MetadataApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMetadataApi(): PigeonApiMetadataApi

  /**
   * An implementation of [PigeonApiOutputFileOptionsApi] used to add a new Dart instance of
   * `OutputFileOptionsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOutputFileOptionsApi(): PigeonApiOutputFileOptionsApi

  /**
   * An implementation of [PigeonApiOutputFileResultsApi] used to add a new Dart instance of
   * `OutputFileResultsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOutputFileResultsApi(): PigeonApiOutputFileResultsApi

  /**
   * An implementation of [PigeonApiOnImageCapturedCallbackApi] used to add a new Dart instance of
   * `OnImageCapturedCallbackApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOnImageCapturedCallbackApi(): PigeonApiOnImageCapturedCallbackApi

  /**
   * An implementation of [PigeonApiOnImageSavedCallbackApi] used to add a new Dart instance of
   * `OnImageSavedCallbackApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOnImageSavedCallbackApi(): PigeonApiOnImageSavedCallbackApi

  /**
   * An implementation of [PigeonApiAnalyzerApi] used to add a new Dart instance of
   * `AnalyzerApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiAnalyzerApi(): PigeonApiAnalyzerApi
  {
    return PigeonApiAnalyzerApi(this)
  }

  /**
   * An implementation of [PigeonApiImageAnalyzerApi] used to add a new Dart instance of
   * `ImageAnalyzerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImageAnalyzerApi(): PigeonApiImageAnalyzerApi

  /**
   * An implementation of [PigeonApiJpegAnalyzerApi] used to add a new Dart instance of
   * `JpegAnalyzerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiJpegAnalyzerApi(): PigeonApiJpegAnalyzerApi

  /**
   * An implementation of [PigeonApiDetectorApi] used to add a new Dart instance of
   * `DetectorApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiDetectorApi(): PigeonApiDetectorApi
  {
    return PigeonApiDetectorApi(this)
  }

  /**
   * An implementation of [PigeonApiAddressApi] used to add a new Dart instance of
   * `AddressApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAddressApi(): PigeonApiAddressApi

  /**
   * An implementation of [PigeonApiCalendarDateTimeApi] used to add a new Dart instance of
   * `CalendarDateTimeApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCalendarDateTimeApi(): PigeonApiCalendarDateTimeApi

  /**
   * An implementation of [PigeonApiCalendarEventApi] used to add a new Dart instance of
   * `CalendarEventApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCalendarEventApi(): PigeonApiCalendarEventApi

  /**
   * An implementation of [PigeonApiContactInfoApi] used to add a new Dart instance of
   * `ContactInfoApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiContactInfoApi(): PigeonApiContactInfoApi

  /**
   * An implementation of [PigeonApiDriverLicenseApi] used to add a new Dart instance of
   * `DriverLicenseApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiDriverLicenseApi(): PigeonApiDriverLicenseApi

  /**
   * An implementation of [PigeonApiEmailApi] used to add a new Dart instance of
   * `EmailApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiEmailApi(): PigeonApiEmailApi

  /**
   * An implementation of [PigeonApiGeoPointApi] used to add a new Dart instance of
   * `GeoPointApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiGeoPointApi(): PigeonApiGeoPointApi

  /**
   * An implementation of [PigeonApiPersonNameApi] used to add a new Dart instance of
   * `PersonNameApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPersonNameApi(): PigeonApiPersonNameApi

  /**
   * An implementation of [PigeonApiPhoneApi] used to add a new Dart instance of
   * `PhoneApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPhoneApi(): PigeonApiPhoneApi

  /**
   * An implementation of [PigeonApiSmsApi] used to add a new Dart instance of
   * `SmsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiSmsApi(): PigeonApiSmsApi

  /**
   * An implementation of [PigeonApiUrlBookmarkApi] used to add a new Dart instance of
   * `UrlBookmarkApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiUrlBookmarkApi(): PigeonApiUrlBookmarkApi

  /**
   * An implementation of [PigeonApiWiFiApi] used to add a new Dart instance of
   * `WiFiApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiWiFiApi(): PigeonApiWiFiApi

  /**
   * An implementation of [PigeonApiBarcodeApi] used to add a new Dart instance of
   * `BarcodeApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBarcodeApi(): PigeonApiBarcodeApi

  /**
   * An implementation of [PigeonApiZoomCallbackApi] used to add a new Dart instance of
   * `ZoomCallbackApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomCallbackApi(): PigeonApiZoomCallbackApi

  /**
   * An implementation of [PigeonApiZoomSuggestionOptionsApi] used to add a new Dart instance of
   * `ZoomSuggestionOptionsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiZoomSuggestionOptionsApi(): PigeonApiZoomSuggestionOptionsApi

  /**
   * An implementation of [PigeonApiBarcodeScannerOptionsApi] used to add a new Dart instance of
   * `BarcodeScannerOptionsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBarcodeScannerOptionsApi(): PigeonApiBarcodeScannerOptionsApi

  /**
   * An implementation of [PigeonApiMlImageApi] used to add a new Dart instance of
   * `MlImageApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiMlImageApi(): PigeonApiMlImageApi
  {
    return PigeonApiMlImageApi(this)
  }

  /**
   * An implementation of [PigeonApiInputImageApi] used to add a new Dart instance of
   * `InputImageApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiInputImageApi(): PigeonApiInputImageApi
  {
    return PigeonApiInputImageApi(this)
  }

  /**
   * An implementation of [PigeonApiBarcodeScannerApi] used to add a new Dart instance of
   * `BarcodeScannerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBarcodeScannerApi(): PigeonApiBarcodeScannerApi

  /**
   * An implementation of [PigeonApiFaceDetectorOptionsApi] used to add a new Dart instance of
   * `FaceDetectorOptionsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFaceDetectorOptionsApi(): PigeonApiFaceDetectorOptionsApi

  /**
   * An implementation of [PigeonApiFaceContourApi] used to add a new Dart instance of
   * `FaceContourApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFaceContourApi(): PigeonApiFaceContourApi

  /**
   * An implementation of [PigeonApiFaceLandmarkApi] used to add a new Dart instance of
   * `FaceLandmarkApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFaceLandmarkApi(): PigeonApiFaceLandmarkApi

  /**
   * An implementation of [PigeonApiFaceApi] used to add a new Dart instance of
   * `FaceApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFaceApi(): PigeonApiFaceApi

  /**
   * An implementation of [PigeonApiFaceDetectorApi] used to add a new Dart instance of
   * `FaceDetectorApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFaceDetectorApi(): PigeonApiFaceDetectorApi

  /**
   * An implementation of [PigeonApiMlKitAnalyzerResultApi] used to add a new Dart instance of
   * `MlKitAnalyzerResultApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMlKitAnalyzerResultApi(): PigeonApiMlKitAnalyzerResultApi

  /**
   * An implementation of [PigeonApiMlKitAnalyzerResultConsumerApi] used to add a new Dart instance of
   * `MlKitAnalyzerResultConsumerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMlKitAnalyzerResultConsumerApi(): PigeonApiMlKitAnalyzerResultConsumerApi

  /**
   * An implementation of [PigeonApiMlKitAnalyzerApi] used to add a new Dart instance of
   * `MlKitAnalyzerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMlKitAnalyzerApi(): PigeonApiMlKitAnalyzerApi

  /**
   * An implementation of [PigeonApiQualityApi] used to add a new Dart instance of
   * `QualityApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiQualityApi(): PigeonApiQualityApi

  /**
   * An implementation of [PigeonApiFallbackStrategyApi] used to add a new Dart instance of
   * `FallbackStrategyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFallbackStrategyApi(): PigeonApiFallbackStrategyApi

  /**
   * An implementation of [PigeonApiQualitySelectorApi] used to add a new Dart instance of
   * `QualitySelectorApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiQualitySelectorApi(): PigeonApiQualitySelectorApi

  /**
   * An implementation of [PigeonApiOutputOptionsApi] used to add a new Dart instance of
   * `OutputOptionsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOutputOptionsApi(): PigeonApiOutputOptionsApi

  /**
   * An implementation of [PigeonApiFileOutputOptionsApi] used to add a new Dart instance of
   * `FileOutputOptionsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFileOutputOptionsApi(): PigeonApiFileOutputOptionsApi

  /**
   * An implementation of [PigeonApiAudioConfigApi] used to add a new Dart instance of
   * `AudioConfigApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAudioConfigApi(): PigeonApiAudioConfigApi

  /**
   * An implementation of [PigeonApiAudioStatsApi] used to add a new Dart instance of
   * `AudioStatsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAudioStatsApi(): PigeonApiAudioStatsApi

  /**
   * An implementation of [PigeonApiRecordingStatsApi] used to add a new Dart instance of
   * `RecordingStatsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiRecordingStatsApi(): PigeonApiRecordingStatsApi

  /**
   * An implementation of [PigeonApiVideoRecordEventApi] used to add a new Dart instance of
   * `VideoRecordEventApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiVideoRecordEventApi(): PigeonApiVideoRecordEventApi
  {
    return PigeonApiVideoRecordEventApi(this)
  }

  /**
   * An implementation of [PigeonApiVideoRecordStatusEventApi] used to add a new Dart instance of
   * `VideoRecordStatusEventApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordStatusEventApi(): PigeonApiVideoRecordStatusEventApi

  /**
   * An implementation of [PigeonApiVideoRecordStartEventApi] used to add a new Dart instance of
   * `VideoRecordStartEventApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordStartEventApi(): PigeonApiVideoRecordStartEventApi

  /**
   * An implementation of [PigeonApiVideoRecordPauseEventApi] used to add a new Dart instance of
   * `VideoRecordPauseEventApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordPauseEventApi(): PigeonApiVideoRecordPauseEventApi

  /**
   * An implementation of [PigeonApiVideoRecordResumeEventApi] used to add a new Dart instance of
   * `VideoRecordResumeEventApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordResumeEventApi(): PigeonApiVideoRecordResumeEventApi

  /**
   * An implementation of [PigeonApiOutputResultsApi] used to add a new Dart instance of
   * `OutputResultsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiOutputResultsApi(): PigeonApiOutputResultsApi

  /**
   * An implementation of [PigeonApiVideoRecordFinalizeEventApi] used to add a new Dart instance of
   * `VideoRecordFinalizeEventApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordFinalizeEventApi(): PigeonApiVideoRecordFinalizeEventApi

  /**
   * An implementation of [PigeonApiVideoRecordEventConsumerApi] used to add a new Dart instance of
   * `VideoRecordEventConsumerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoRecordEventConsumerApi(): PigeonApiVideoRecordEventConsumerApi

  /**
   * An implementation of [PigeonApiRecordingApi] used to add a new Dart instance of
   * `RecordingApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiRecordingApi(): PigeonApiRecordingApi

  /**
   * An implementation of [PigeonApiCameraControllerApi] used to add a new Dart instance of
   * `CameraControllerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCameraControllerApi(): PigeonApiCameraControllerApi

  /**
   * An implementation of [PigeonApiLifecycleCameraControllerApi] used to add a new Dart instance of
   * `LifecycleCameraControllerApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiLifecycleCameraControllerApi(): PigeonApiLifecycleCameraControllerApi

  /**
   * An implementation of [PigeonApiPreviewViewApi] used to add a new Dart instance of
   * `PreviewViewApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiPreviewViewApi(): PigeonApiPreviewViewApi

  /**
   * An implementation of [PigeonApiCamera2CameraControlApi] used to add a new Dart instance of
   * `Camera2CameraControlApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCamera2CameraControlApi(): PigeonApiCamera2CameraControlApi

  /**
   * An implementation of [PigeonApiCamera2CameraInfoApi] used to add a new Dart instance of
   * `Camera2CameraInfoApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCamera2CameraInfoApi(): PigeonApiCamera2CameraInfoApi

  /**
   * An implementation of [PigeonApiCaptureRequestOptionsApi] used to add a new Dart instance of
   * `CaptureRequestOptionsApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCaptureRequestOptionsApi(): PigeonApiCaptureRequestOptionsApi

  fun setUp() {
    CameraXApiPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, instanceManager)
    PigeonApiPermissionManagerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiPermissionManagerApi())
    PigeonApiAutoCloseableApi.setUpMessageHandlers(binaryMessenger, getPigeonApiAutoCloseableApi())
    PigeonApiLocationApi.setUpMessageHandlers(binaryMessenger, getPigeonApiLocationApi())
    PigeonApiSizeApi.setUpMessageHandlers(binaryMessenger, getPigeonApiSizeApi())
    PigeonApiPointApi.setUpMessageHandlers(binaryMessenger, getPigeonApiPointApi())
    PigeonApiPointFApi.setUpMessageHandlers(binaryMessenger, getPigeonApiPointFApi())
    PigeonApiRectApi.setUpMessageHandlers(binaryMessenger, getPigeonApiRectApi())
    PigeonApiIntRangeApi.setUpMessageHandlers(binaryMessenger, getPigeonApiIntRangeApi())
    PigeonApiLongRangeApi.setUpMessageHandlers(binaryMessenger, getPigeonApiLongRangeApi())
    PigeonApiCameraSelectorApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraSelectorApi())
    PigeonApiCameraStateLiveDataApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraStateLiveDataApi())
    PigeonApiCameraStateObserverApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraStateObserverApi())
    PigeonApiTorchStateLiveDataApi.setUpMessageHandlers(binaryMessenger, getPigeonApiTorchStateLiveDataApi())
    PigeonApiTorchStateObserverApi.setUpMessageHandlers(binaryMessenger, getPigeonApiTorchStateObserverApi())
    PigeonApiZoomStateLiveDataApi.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomStateLiveDataApi())
    PigeonApiZoomStateObserverApi.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomStateObserverApi())
    PigeonApiMeteringPointFactoryApi.setUpMessageHandlers(binaryMessenger, getPigeonApiMeteringPointFactoryApi())
    PigeonApiSurfaceOrientedMeteringPointFactoryApi.setUpMessageHandlers(binaryMessenger, getPigeonApiSurfaceOrientedMeteringPointFactoryApi())
    PigeonApiMeteringPointTupleApi.setUpMessageHandlers(binaryMessenger, getPigeonApiMeteringPointTupleApi())
    PigeonApiDurationTupleApi.setUpMessageHandlers(binaryMessenger, getPigeonApiDurationTupleApi())
    PigeonApiFocusMeteringActionApi.setUpMessageHandlers(binaryMessenger, getPigeonApiFocusMeteringActionApi())
    PigeonApiDynamicRangeApi.setUpMessageHandlers(binaryMessenger, getPigeonApiDynamicRangeApi())
    PigeonApiCameraInfoApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraInfoApi())
    PigeonApiCameraControlApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraControlApi())
    PigeonApiAspectRatioStrategyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiAspectRatioStrategyApi())
    PigeonApiResolutionFilterApi.setUpMessageHandlers(binaryMessenger, getPigeonApiResolutionFilterApi())
    PigeonApiResolutionStrategyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiResolutionStrategyApi())
    PigeonApiResolutionSelectorApi.setUpMessageHandlers(binaryMessenger, getPigeonApiResolutionSelectorApi())
    PigeonApiImageProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiImageProxyApi())
    PigeonApiMetadataApi.setUpMessageHandlers(binaryMessenger, getPigeonApiMetadataApi())
    PigeonApiOutputFileOptionsApi.setUpMessageHandlers(binaryMessenger, getPigeonApiOutputFileOptionsApi())
    PigeonApiOnImageCapturedCallbackApi.setUpMessageHandlers(binaryMessenger, getPigeonApiOnImageCapturedCallbackApi())
    PigeonApiOnImageSavedCallbackApi.setUpMessageHandlers(binaryMessenger, getPigeonApiOnImageSavedCallbackApi())
    PigeonApiImageAnalyzerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiImageAnalyzerApi())
    PigeonApiJpegAnalyzerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiJpegAnalyzerApi())
    PigeonApiZoomCallbackApi.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomCallbackApi())
    PigeonApiZoomSuggestionOptionsApi.setUpMessageHandlers(binaryMessenger, getPigeonApiZoomSuggestionOptionsApi())
    PigeonApiBarcodeScannerOptionsApi.setUpMessageHandlers(binaryMessenger, getPigeonApiBarcodeScannerOptionsApi())
    PigeonApiBarcodeScannerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiBarcodeScannerApi())
    PigeonApiFaceDetectorOptionsApi.setUpMessageHandlers(binaryMessenger, getPigeonApiFaceDetectorOptionsApi())
    PigeonApiFaceApi.setUpMessageHandlers(binaryMessenger, getPigeonApiFaceApi())
    PigeonApiFaceDetectorApi.setUpMessageHandlers(binaryMessenger, getPigeonApiFaceDetectorApi())
    PigeonApiMlKitAnalyzerResultApi.setUpMessageHandlers(binaryMessenger, getPigeonApiMlKitAnalyzerResultApi())
    PigeonApiMlKitAnalyzerResultConsumerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiMlKitAnalyzerResultConsumerApi())
    PigeonApiMlKitAnalyzerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiMlKitAnalyzerApi())
    PigeonApiQualityApi.setUpMessageHandlers(binaryMessenger, getPigeonApiQualityApi())
    PigeonApiFallbackStrategyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiFallbackStrategyApi())
    PigeonApiQualitySelectorApi.setUpMessageHandlers(binaryMessenger, getPigeonApiQualitySelectorApi())
    PigeonApiOutputOptionsApi.setUpMessageHandlers(binaryMessenger, getPigeonApiOutputOptionsApi())
    PigeonApiFileOutputOptionsApi.setUpMessageHandlers(binaryMessenger, getPigeonApiFileOutputOptionsApi())
    PigeonApiAudioConfigApi.setUpMessageHandlers(binaryMessenger, getPigeonApiAudioConfigApi())
    PigeonApiVideoRecordEventConsumerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoRecordEventConsumerApi())
    PigeonApiRecordingApi.setUpMessageHandlers(binaryMessenger, getPigeonApiRecordingApi())
    PigeonApiCameraControllerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCameraControllerApi())
    PigeonApiLifecycleCameraControllerApi.setUpMessageHandlers(binaryMessenger, getPigeonApiLifecycleCameraControllerApi())
    PigeonApiPreviewViewApi.setUpMessageHandlers(binaryMessenger, getPigeonApiPreviewViewApi())
    PigeonApiCamera2CameraControlApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCamera2CameraControlApi())
    PigeonApiCamera2CameraInfoApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCamera2CameraInfoApi())
    PigeonApiCaptureRequestOptionsApi.setUpMessageHandlers(binaryMessenger, getPigeonApiCaptureRequestOptionsApi())
  }
  fun tearDown() {
    CameraXApiPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPermissionManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAutoCloseableApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiLocationApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiSizeApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPointApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPointFApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiRectApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiIntRangeApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiLongRangeApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraSelectorApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraStateLiveDataApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraStateObserverApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiTorchStateLiveDataApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiTorchStateObserverApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomStateLiveDataApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomStateObserverApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMeteringPointFactoryApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiSurfaceOrientedMeteringPointFactoryApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMeteringPointTupleApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiDurationTupleApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFocusMeteringActionApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiDynamicRangeApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraInfoApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraControlApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAspectRatioStrategyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiResolutionFilterApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiResolutionStrategyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiResolutionSelectorApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImageProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMetadataApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiOutputFileOptionsApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiOnImageCapturedCallbackApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiOnImageSavedCallbackApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImageAnalyzerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiJpegAnalyzerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomCallbackApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiZoomSuggestionOptionsApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBarcodeScannerOptionsApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBarcodeScannerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFaceDetectorOptionsApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFaceApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFaceDetectorApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMlKitAnalyzerResultApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMlKitAnalyzerResultConsumerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMlKitAnalyzerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiQualityApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFallbackStrategyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiQualitySelectorApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiOutputOptionsApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFileOutputOptionsApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAudioConfigApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoRecordEventConsumerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiRecordingApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCameraControllerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiLifecycleCameraControllerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiPreviewViewApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCamera2CameraControlApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCamera2CameraInfoApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCaptureRequestOptionsApi.setUpMessageHandlers(binaryMessenger, null)
  }
}
private class CameraXApiPigeonProxyApiBaseCodec(val registrar: CameraXApiPigeonProxyApiRegistrar) : CameraXApiPigeonCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        val identifier: Long = readValue(buffer) as Long
        val instance: Any? = registrar.instanceManager.getInstance(identifier)
        if (instance == null) {
          Log.e(
            "PigeonProxyApiBaseCodec",
            "Failed to find instance with identifier: $identifier"
          )
        }
        return instance
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is Boolean || value is ByteArray || value is Double || value is DoubleArray || value is FloatArray || value is Int || value is IntArray || value is List<*> || value is Long || value is LongArray || value is Map<*, *> || value is String || value is PermissionApi || value is LensFacingApi || value is CameraStateApi || value is TorchStateApi || value is MeteringModeApi || value is TimeUnitApi || value is AspectRatioApi || value is BitDepthApi || value is EncodingApi || value is ScaleTypeApi || value is UseCaseApi || value is ResolutionModeApi || value is AspectRatioFallbackRuleApi || value is ResolutionFallbackRuleApi || value is CaptureModeApi || value is FlashModeApi || value is BackpressureStrategyApi || value is CoordinateSystemApi || value is ImageFormatApi || value is MirrorModeApi || value is AudioStateApi || value is VideoRecordFinalizeEventErrorApi || value is BarcodeFormatApi || value is BarcodeValueTypeApi || value is AddressTypeApi || value is EmailTypeApi || value is PhoneTypeApi || value is WiFiEncryptionTypeApi || value is FaceClassificationModeApi || value is FaceContourModeApi || value is FaceLandmarkModeApi || value is FacePerformanceModeApi || value is FaceContourTypeApi || value is FaceLandmarkTypeApi || value is ControlModeApi || value is ControlAeModeApi || value is ControlAfModeApi || value is ControlAwbModeApi || value == null) {
      super.writeValue(stream, value)
      return
    }

    if (value is dev.hebei.camerax_android.common.PermissionManager) {
      registrar.getPigeonApiPermissionManagerApi().pigeon_newInstance(value) { }
    }
     else if (value is android.location.Location) {
      registrar.getPigeonApiLocationApi().pigeon_newInstance(value) { }
    }
     else if (value is android.util.Size) {
      registrar.getPigeonApiSizeApi().pigeon_newInstance(value) { }
    }
     else if (value is android.graphics.Point) {
      registrar.getPigeonApiPointApi().pigeon_newInstance(value) { }
    }
     else if (value is android.graphics.PointF) {
      registrar.getPigeonApiPointFApi().pigeon_newInstance(value) { }
    }
     else if (value is android.graphics.Rect) {
      registrar.getPigeonApiRectApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.common.IntRange) {
      registrar.getPigeonApiIntRangeApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.common.LongRange) {
      registrar.getPigeonApiLongRangeApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.CameraSelector) {
      registrar.getPigeonApiCameraSelectorApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.common.CameraStateLiveData) {
      registrar.getPigeonApiCameraStateLiveDataApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.common.CameraStateObserver) {
      registrar.getPigeonApiCameraStateObserverApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.common.TorchStateLiveData) {
      registrar.getPigeonApiTorchStateLiveDataApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.common.TorchStateObserver) {
      registrar.getPigeonApiTorchStateObserverApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ZoomState) {
      registrar.getPigeonApiZoomStateApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.common.ZoomStateLiveData) {
      registrar.getPigeonApiZoomStateLiveDataApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.common.ZoomStateObserver) {
      registrar.getPigeonApiZoomStateObserverApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ExposureState) {
      registrar.getPigeonApiExposureStateApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.MeteringPoint) {
      registrar.getPigeonApiMeteringPointApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.SurfaceOrientedMeteringPointFactory) {
      registrar.getPigeonApiSurfaceOrientedMeteringPointFactoryApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.MeteringPointFactory) {
      registrar.getPigeonApiMeteringPointFactoryApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.MeteringPointTuple) {
      registrar.getPigeonApiMeteringPointTupleApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.core.DurationTuple) {
      registrar.getPigeonApiDurationTupleApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.FocusMeteringAction) {
      registrar.getPigeonApiFocusMeteringActionApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.FocusMeteringResult) {
      registrar.getPigeonApiFocusMeteringResultApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.DynamicRange) {
      registrar.getPigeonApiDynamicRangeApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.CameraInfo) {
      registrar.getPigeonApiCameraInfoApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.CameraControl) {
      registrar.getPigeonApiCameraControlApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.resolutionselector.AspectRatioStrategy) {
      registrar.getPigeonApiAspectRatioStrategyApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.resolutionselector.ResolutionFilter) {
      registrar.getPigeonApiResolutionFilterApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.resolutionselector.ResolutionStrategy) {
      registrar.getPigeonApiResolutionStrategyApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.resolutionselector.ResolutionSelector) {
      registrar.getPigeonApiResolutionSelectorApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageInfo) {
      registrar.getPigeonApiImageInfoApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageProxy.PlaneProxy) {
      registrar.getPigeonApiPlaneProxyApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageProxy) {
      registrar.getPigeonApiImageProxyApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageCapture.Metadata) {
      registrar.getPigeonApiMetadataApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageCapture.OutputFileOptions) {
      registrar.getPigeonApiOutputFileOptionsApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageCapture.OutputFileResults) {
      registrar.getPigeonApiOutputFileResultsApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageCapture.OnImageCapturedCallback) {
      registrar.getPigeonApiOnImageCapturedCallbackApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageCapture.OnImageSavedCallback) {
      registrar.getPigeonApiOnImageSavedCallbackApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageAnalysis.Analyzer) {
      registrar.getPigeonApiImageAnalyzerApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageAnalysis.Analyzer) {
      registrar.getPigeonApiJpegAnalyzerApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.Address) {
      registrar.getPigeonApiAddressApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime) {
      registrar.getPigeonApiCalendarDateTimeApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent) {
      registrar.getPigeonApiCalendarEventApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.ContactInfo) {
      registrar.getPigeonApiContactInfoApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.DriverLicense) {
      registrar.getPigeonApiDriverLicenseApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.Email) {
      registrar.getPigeonApiEmailApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.GeoPoint) {
      registrar.getPigeonApiGeoPointApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.PersonName) {
      registrar.getPigeonApiPersonNameApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.Phone) {
      registrar.getPigeonApiPhoneApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.Sms) {
      registrar.getPigeonApiSmsApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.UrlBookmark) {
      registrar.getPigeonApiUrlBookmarkApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode.WiFi) {
      registrar.getPigeonApiWiFiApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.common.Barcode) {
      registrar.getPigeonApiBarcodeApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback) {
      registrar.getPigeonApiZoomCallbackApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.ZoomSuggestionOptions) {
      registrar.getPigeonApiZoomSuggestionOptionsApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.barcode.BarcodeScannerOptions) {
      registrar.getPigeonApiBarcodeScannerOptionsApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.android.odml.image.MlImage) {
      registrar.getPigeonApiMlImageApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.common.InputImage) {
      registrar.getPigeonApiInputImageApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.ml.barcode.BarcodeScanner) {
      registrar.getPigeonApiBarcodeScannerApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.face.FaceDetectorOptions) {
      registrar.getPigeonApiFaceDetectorOptionsApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.face.FaceContour) {
      registrar.getPigeonApiFaceContourApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.face.FaceLandmark) {
      registrar.getPigeonApiFaceLandmarkApi().pigeon_newInstance(value) { }
    }
     else if (value is com.google.mlkit.vision.face.Face) {
      registrar.getPigeonApiFaceApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.ml.face.FaceDetector) {
      registrar.getPigeonApiFaceDetectorApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.ml.Detector) {
      registrar.getPigeonApiDetectorApi().pigeon_newInstance(value) { }
    }
     else if (value is java.io.Closeable) {
      registrar.getPigeonApiCloseableApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.mlkit.vision.MlKitAnalyzer.Result) {
      registrar.getPigeonApiMlKitAnalyzerResultApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.common.MlKitAnalyzerResultConsumer) {
      registrar.getPigeonApiMlKitAnalyzerResultConsumerApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.mlkit.vision.MlKitAnalyzer) {
      registrar.getPigeonApiMlKitAnalyzerApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.core.ImageAnalysis.Analyzer) {
      registrar.getPigeonApiAnalyzerApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.Quality) {
      registrar.getPigeonApiQualityApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.FallbackStrategy) {
      registrar.getPigeonApiFallbackStrategyApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.QualitySelector) {
      registrar.getPigeonApiQualitySelectorApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.FileOutputOptions) {
      registrar.getPigeonApiFileOutputOptionsApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.OutputOptions) {
      registrar.getPigeonApiOutputOptionsApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.view.video.AudioConfig) {
      registrar.getPigeonApiAudioConfigApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.AudioStats) {
      registrar.getPigeonApiAudioStatsApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.RecordingStats) {
      registrar.getPigeonApiRecordingStatsApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent.Status) {
      registrar.getPigeonApiVideoRecordStatusEventApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent.Start) {
      registrar.getPigeonApiVideoRecordStartEventApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent.Pause) {
      registrar.getPigeonApiVideoRecordPauseEventApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent.Resume) {
      registrar.getPigeonApiVideoRecordResumeEventApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.OutputResults) {
      registrar.getPigeonApiOutputResultsApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent.Finalize) {
      registrar.getPigeonApiVideoRecordFinalizeEventApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.VideoRecordEvent) {
      registrar.getPigeonApiVideoRecordEventApi().pigeon_newInstance(value) { }
    }
     else if (value is dev.hebei.camerax_android.common.VideoRecordEventConsumer) {
      registrar.getPigeonApiVideoRecordEventConsumerApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.video.Recording) {
      registrar.getPigeonApiRecordingApi().pigeon_newInstance(value) { }
    }
     else if (value is java.lang.AutoCloseable) {
      registrar.getPigeonApiAutoCloseableApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.view.LifecycleCameraController) {
      registrar.getPigeonApiLifecycleCameraControllerApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.view.CameraController) {
      registrar.getPigeonApiCameraControllerApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.view.PreviewView) {
      registrar.getPigeonApiPreviewViewApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.camera2.interop.Camera2CameraControl) {
      registrar.getPigeonApiCamera2CameraControlApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.camera2.interop.Camera2CameraInfo) {
      registrar.getPigeonApiCamera2CameraInfoApi().pigeon_newInstance(value) { }
    }
     else if (value is androidx.camera.camera2.interop.CaptureRequestOptions) {
      registrar.getPigeonApiCaptureRequestOptionsApi().pigeon_newInstance(value) { }
    }

    when {
      registrar.instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, registrar.instanceManager.getIdentifierForStrongReference(value))
      }
      else -> throw IllegalArgumentException("Unsupported value: '$value' of type '${value.javaClass.name}'")
    }
  }
}

enum class PermissionApi(val raw: Int) {
  ALBUM(0),
  AUDIO(1),
  VIDEO(2);

  companion object {
    fun ofRaw(raw: Int): PermissionApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class LensFacingApi(val raw: Int) {
  UNKNOWN(0),
  FRONT(1),
  BACK(2),
  EXTERNAL(3);

  companion object {
    fun ofRaw(raw: Int): LensFacingApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CameraStateApi(val raw: Int) {
  PENDING_OPEN(0),
  OPENING(1),
  OPEN(2),
  CLOSING(3),
  CLOSED(4);

  companion object {
    fun ofRaw(raw: Int): CameraStateApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TorchStateApi(val raw: Int) {
  OFF(0),
  ON(1);

  companion object {
    fun ofRaw(raw: Int): TorchStateApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MeteringModeApi(val raw: Int) {
  AF(0),
  AE(1),
  AWB(2);

  companion object {
    fun ofRaw(raw: Int): MeteringModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TimeUnitApi(val raw: Int) {
  NANOSECONDS(0),
  MICROSECONDS(1),
  MILLISECONDS(2),
  SECONDS(3),
  MINUTES(4),
  HOURS(5),
  DAYS(6);

  companion object {
    fun ofRaw(raw: Int): TimeUnitApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AspectRatioApi(val raw: Int) {
  RATIO_DEFAULT(0),
  RATIO4_3(1),
  RATIO16_9(2);

  companion object {
    fun ofRaw(raw: Int): AspectRatioApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BitDepthApi(val raw: Int) {
  BIT_DEPTH_UNSPECIFIED(0),
  BIT_DEPTH8BIT(1),
  BIT_DEPTH10BIT(2);

  companion object {
    fun ofRaw(raw: Int): BitDepthApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class EncodingApi(val raw: Int) {
  UNSPECIFIED(0),
  SDR(1),
  HDR_UNSPECIFIED(2),
  HLG(3),
  HDR10(4),
  HDR10PLUS(5),
  DOLBY_VISION(6);

  companion object {
    fun ofRaw(raw: Int): EncodingApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScaleTypeApi(val raw: Int) {
  FILL_START(0),
  FILL_CENTER(1),
  FILL_END(2),
  FIT_START(3),
  FIT_CENTER(4),
  FIT_END(5);

  companion object {
    fun ofRaw(raw: Int): ScaleTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class UseCaseApi(val raw: Int) {
  IMAGE_CAPTURE(0),
  IMAGE_ANALYSIS(1),
  VIDEO_CAPTURE(2);

  companion object {
    fun ofRaw(raw: Int): UseCaseApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ResolutionModeApi(val raw: Int) {
  PREFER_CAPTURE_RATE_OVER_HIGHER_RESOLUTION(0),
  PREFER_HIGHER_RESOLUTION_OVER_CAPTURE_RATE(1);

  companion object {
    fun ofRaw(raw: Int): ResolutionModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AspectRatioFallbackRuleApi(val raw: Int) {
  NONE(0),
  AUTO(1);

  companion object {
    fun ofRaw(raw: Int): AspectRatioFallbackRuleApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ResolutionFallbackRuleApi(val raw: Int) {
  NONE(0),
  CLOSEST_HIGHER_THEN_LOWER(1),
  CLOSEST_HIGHER(2),
  CLOSEST_LOWER_THEN_HIGHER(3),
  CLOSEST_LOWER(4);

  companion object {
    fun ofRaw(raw: Int): ResolutionFallbackRuleApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CaptureModeApi(val raw: Int) {
  MAXIMIZE_QUALITY(0),
  MINIMIZE_LATENCY(1),
  ZERO_SHUTTER_LAG(2);

  companion object {
    fun ofRaw(raw: Int): CaptureModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FlashModeApi(val raw: Int) {
  AUTO(0),
  ON(1),
  OFF(2),
  SCREEN(3);

  companion object {
    fun ofRaw(raw: Int): FlashModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BackpressureStrategyApi(val raw: Int) {
  KEEP_ONLY_LATEST(0),
  BLOCK_PRODUCER(1);

  companion object {
    fun ofRaw(raw: Int): BackpressureStrategyApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CoordinateSystemApi(val raw: Int) {
  ORIGINAL(0),
  SENSOR(1),
  VIEW_REFERENCED(2);

  companion object {
    fun ofRaw(raw: Int): CoordinateSystemApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ImageFormatApi(val raw: Int) {
  YUV420_888(0),
  RGBA8888(1),
  JPEG(2),
  JPEG_R(3);

  companion object {
    fun ofRaw(raw: Int): ImageFormatApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MirrorModeApi(val raw: Int) {
  OFF(0),
  ON(1),
  ON_FRONT_ONLY(2);

  companion object {
    fun ofRaw(raw: Int): MirrorModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AudioStateApi(val raw: Int) {
  ACTIVE(0),
  DISABLED(1),
  SOURCE_SILENCED(2),
  ENCODER_ERROR(3),
  SOURCE_ERROR(4),
  MUTED(5);

  companion object {
    fun ofRaw(raw: Int): AudioStateApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class VideoRecordFinalizeEventErrorApi(val raw: Int) {
  NONE(0),
  UNKNOWN(1),
  FILE_SIZE_LIMIT_REACHED(2),
  INSUFFICIENT_STORAGE(3),
  SOURCE_INACTIVE(4),
  INVALID_OUPUT_OPTIONS(5),
  ENCODING_FAILED(6),
  RECORDER_ERROR(7),
  NO_VALID_DATA(8),
  DURATION_LIMIT_REACHED(9),
  RECORDING_GARBAGE_COLLECTED(10);

  companion object {
    fun ofRaw(raw: Int): VideoRecordFinalizeEventErrorApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BarcodeFormatApi(val raw: Int) {
  UNKNOWN(0),
  ALL(1),
  CODE128(2),
  CODE39(3),
  CODE93(4),
  CODABAR(5),
  DATA_MATRIX(6),
  EAN13(7),
  EAN8(8),
  ITF(9),
  QR_CODE(10),
  UPC_A(11),
  UPC_E(12),
  PDF417(13),
  AZTEC(14);

  companion object {
    fun ofRaw(raw: Int): BarcodeFormatApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BarcodeValueTypeApi(val raw: Int) {
  UNKNOWN(0),
  CONTACT_INFO(1),
  EMAIL(2),
  ISBN(3),
  PHONE(4),
  PRODUCT(5),
  SMS(6),
  TEXT(7),
  URL(8),
  WIFI(9),
  GEO(10),
  CALENDAR_EVENT(11),
  DRIVER_LICENSE(12);

  companion object {
    fun ofRaw(raw: Int): BarcodeValueTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AddressTypeApi(val raw: Int) {
  UNKNOWN(0),
  WORK(1),
  HOME(2);

  companion object {
    fun ofRaw(raw: Int): AddressTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class EmailTypeApi(val raw: Int) {
  UNKNOWN(0),
  WORK(1),
  HOME(2);

  companion object {
    fun ofRaw(raw: Int): EmailTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PhoneTypeApi(val raw: Int) {
  UNKNOWN(0),
  WORK(1),
  HOME(2),
  FAX(3),
  MOBILE(4);

  companion object {
    fun ofRaw(raw: Int): PhoneTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class WiFiEncryptionTypeApi(val raw: Int) {
  OPEN(0),
  WPA(1),
  WEP(2);

  companion object {
    fun ofRaw(raw: Int): WiFiEncryptionTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FaceClassificationModeApi(val raw: Int) {
  NONE(0),
  ALL(1);

  companion object {
    fun ofRaw(raw: Int): FaceClassificationModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FaceContourModeApi(val raw: Int) {
  NONE(0),
  ALL(1);

  companion object {
    fun ofRaw(raw: Int): FaceContourModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FaceLandmarkModeApi(val raw: Int) {
  NONE(0),
  ALL(1);

  companion object {
    fun ofRaw(raw: Int): FaceLandmarkModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FacePerformanceModeApi(val raw: Int) {
  FAST(0),
  ACCURATE(1);

  companion object {
    fun ofRaw(raw: Int): FacePerformanceModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FaceContourTypeApi(val raw: Int) {
  FACE(0),
  LEFT_CHEEK(1),
  LEFT_EYE(2),
  LEFT_EYEBROW_BOTTOM(3),
  LEFT_EYEBROW_TOP(4),
  LOWER_LIP_BOTTOM(5),
  LOWER_LIP_TOP(6),
  NOSE_BOTTOM(7),
  NOSE_BRIDGE(8),
  RIGHT_CHEEK(9),
  RIGHT_EYE(10),
  RIGHT_EYEBROW_BOTTOM(11),
  RIGHT_EYEBROW_TOP(12),
  UPPER_LIP_BOTTOM(13),
  UPPER_LIP_TOP(14);

  companion object {
    fun ofRaw(raw: Int): FaceContourTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FaceLandmarkTypeApi(val raw: Int) {
  LEFT_CHEEK(0),
  LEFT_EAR(1),
  LEFT_EYE(2),
  MOUTH_BOTTOM(3),
  MOUTH_LEFT(4),
  MOUTH_RIGHT(5),
  NOSE_BASE(6),
  RIGHT_CHEEK(7),
  RIGHT_EAR(8),
  RIGHT_EYE(9);

  companion object {
    fun ofRaw(raw: Int): FaceLandmarkTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ControlModeApi(val raw: Int) {
  AUTO(0),
  OFF(1),
  OFF_KEEP_STATE(2),
  USE_EXTENDED_SCENE_MODE(3),
  USE_SCENE_MODE(4);

  companion object {
    fun ofRaw(raw: Int): ControlModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ControlAeModeApi(val raw: Int) {
  OFF(0),
  ON(1),
  ON_ALWAYS_FLASH(2),
  ON_AUTO_FLASH(3),
  ON_AUTO_FLASH_REDEYE(4),
  ON_EXTERNAL_FLASH(5),
  ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITY(6);

  companion object {
    fun ofRaw(raw: Int): ControlAeModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ControlAfModeApi(val raw: Int) {
  AUTO(0),
  CONTINUOUS_PICTURE(1),
  EDOF(2),
  MACRO(3),
  OFF(4);

  companion object {
    fun ofRaw(raw: Int): ControlAfModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ControlAwbModeApi(val raw: Int) {
  AUTO(0),
  CLOUDY_DAYLIGHT(1),
  DAYLIGHT(2),
  FLUORESCENT(3),
  INCANDESECENT(4),
  OFF(5),
  SHADE(6),
  TWILIGHT(7),
  WARM_FLUORESCENT(8);

  companion object {
    fun ofRaw(raw: Int): ControlAwbModeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
private open class CameraXApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PermissionApi.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          LensFacingApi.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CameraStateApi.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TorchStateApi.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MeteringModeApi.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TimeUnitApi.ofRaw(it.toInt())
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AspectRatioApi.ofRaw(it.toInt())
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BitDepthApi.ofRaw(it.toInt())
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          EncodingApi.ofRaw(it.toInt())
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ScaleTypeApi.ofRaw(it.toInt())
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          UseCaseApi.ofRaw(it.toInt())
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ResolutionModeApi.ofRaw(it.toInt())
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AspectRatioFallbackRuleApi.ofRaw(it.toInt())
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ResolutionFallbackRuleApi.ofRaw(it.toInt())
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CaptureModeApi.ofRaw(it.toInt())
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FlashModeApi.ofRaw(it.toInt())
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BackpressureStrategyApi.ofRaw(it.toInt())
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CoordinateSystemApi.ofRaw(it.toInt())
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ImageFormatApi.ofRaw(it.toInt())
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MirrorModeApi.ofRaw(it.toInt())
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AudioStateApi.ofRaw(it.toInt())
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          VideoRecordFinalizeEventErrorApi.ofRaw(it.toInt())
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BarcodeFormatApi.ofRaw(it.toInt())
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BarcodeValueTypeApi.ofRaw(it.toInt())
        }
      }
      153.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AddressTypeApi.ofRaw(it.toInt())
        }
      }
      154.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          EmailTypeApi.ofRaw(it.toInt())
        }
      }
      155.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PhoneTypeApi.ofRaw(it.toInt())
        }
      }
      156.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          WiFiEncryptionTypeApi.ofRaw(it.toInt())
        }
      }
      157.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FaceClassificationModeApi.ofRaw(it.toInt())
        }
      }
      158.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FaceContourModeApi.ofRaw(it.toInt())
        }
      }
      159.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FaceLandmarkModeApi.ofRaw(it.toInt())
        }
      }
      160.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FacePerformanceModeApi.ofRaw(it.toInt())
        }
      }
      161.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FaceContourTypeApi.ofRaw(it.toInt())
        }
      }
      162.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FaceLandmarkTypeApi.ofRaw(it.toInt())
        }
      }
      163.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ControlModeApi.ofRaw(it.toInt())
        }
      }
      164.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ControlAeModeApi.ofRaw(it.toInt())
        }
      }
      165.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ControlAfModeApi.ofRaw(it.toInt())
        }
      }
      166.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ControlAwbModeApi.ofRaw(it.toInt())
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PermissionApi -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is LensFacingApi -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is CameraStateApi -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is TorchStateApi -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is MeteringModeApi -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is TimeUnitApi -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      is AspectRatioApi -> {
        stream.write(135)
        writeValue(stream, value.raw)
      }
      is BitDepthApi -> {
        stream.write(136)
        writeValue(stream, value.raw)
      }
      is EncodingApi -> {
        stream.write(137)
        writeValue(stream, value.raw)
      }
      is ScaleTypeApi -> {
        stream.write(138)
        writeValue(stream, value.raw)
      }
      is UseCaseApi -> {
        stream.write(139)
        writeValue(stream, value.raw)
      }
      is ResolutionModeApi -> {
        stream.write(140)
        writeValue(stream, value.raw)
      }
      is AspectRatioFallbackRuleApi -> {
        stream.write(141)
        writeValue(stream, value.raw)
      }
      is ResolutionFallbackRuleApi -> {
        stream.write(142)
        writeValue(stream, value.raw)
      }
      is CaptureModeApi -> {
        stream.write(143)
        writeValue(stream, value.raw)
      }
      is FlashModeApi -> {
        stream.write(144)
        writeValue(stream, value.raw)
      }
      is BackpressureStrategyApi -> {
        stream.write(145)
        writeValue(stream, value.raw)
      }
      is CoordinateSystemApi -> {
        stream.write(146)
        writeValue(stream, value.raw)
      }
      is ImageFormatApi -> {
        stream.write(147)
        writeValue(stream, value.raw)
      }
      is MirrorModeApi -> {
        stream.write(148)
        writeValue(stream, value.raw)
      }
      is AudioStateApi -> {
        stream.write(149)
        writeValue(stream, value.raw)
      }
      is VideoRecordFinalizeEventErrorApi -> {
        stream.write(150)
        writeValue(stream, value.raw)
      }
      is BarcodeFormatApi -> {
        stream.write(151)
        writeValue(stream, value.raw)
      }
      is BarcodeValueTypeApi -> {
        stream.write(152)
        writeValue(stream, value.raw)
      }
      is AddressTypeApi -> {
        stream.write(153)
        writeValue(stream, value.raw)
      }
      is EmailTypeApi -> {
        stream.write(154)
        writeValue(stream, value.raw)
      }
      is PhoneTypeApi -> {
        stream.write(155)
        writeValue(stream, value.raw)
      }
      is WiFiEncryptionTypeApi -> {
        stream.write(156)
        writeValue(stream, value.raw)
      }
      is FaceClassificationModeApi -> {
        stream.write(157)
        writeValue(stream, value.raw)
      }
      is FaceContourModeApi -> {
        stream.write(158)
        writeValue(stream, value.raw)
      }
      is FaceLandmarkModeApi -> {
        stream.write(159)
        writeValue(stream, value.raw)
      }
      is FacePerformanceModeApi -> {
        stream.write(160)
        writeValue(stream, value.raw)
      }
      is FaceContourTypeApi -> {
        stream.write(161)
        writeValue(stream, value.raw)
      }
      is FaceLandmarkTypeApi -> {
        stream.write(162)
        writeValue(stream, value.raw)
      }
      is ControlModeApi -> {
        stream.write(163)
        writeValue(stream, value.raw)
      }
      is ControlAeModeApi -> {
        stream.write(164)
        writeValue(stream, value.raw)
      }
      is ControlAfModeApi -> {
        stream.write(165)
        writeValue(stream, value.raw)
      }
      is ControlAwbModeApi -> {
        stream.write(166)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPermissionManagerApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun instance(): dev.hebei.camerax_android.common.PermissionManager

  abstract fun checkPermissioin(pigeon_instance: dev.hebei.camerax_android.common.PermissionManager, permission: PermissionApi): Boolean

  abstract fun requestPermissions(pigeon_instance: dev.hebei.camerax_android.common.PermissionManager, permissions: List<PermissionApi>, callback: (Result<Boolean>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPermissionManagerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PermissionManagerApi.instance", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.instance(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PermissionManagerApi.checkPermissioin", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.PermissionManager
            val permissionArg = args[1] as PermissionApi
            val wrapped: List<Any?> = try {
              listOf(api.checkPermissioin(pigeon_instanceArg, permissionArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PermissionManagerApi.requestPermissions", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.PermissionManager
            val permissionsArg = args[1] as List<PermissionApi>
            api.requestPermissions(pigeon_instanceArg, permissionsArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PermissionManagerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.PermissionManager, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.PermissionManagerApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAutoCloseableApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun close(pigeon_instance: java.lang.AutoCloseable)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAutoCloseableApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AutoCloseableApi.close", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.lang.AutoCloseable
            val wrapped: List<Any?> = try {
              api.close(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AutoCloseableApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.lang.AutoCloseable, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.AutoCloseableApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiCloseableApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CloseableApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.io.Closeable, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.CloseableApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAutoCloseableApi] used to access callback methods */
  fun pigeon_getPigeonApiAutoCloseableApi(): PigeonApiAutoCloseableApi
  {
    return pigeonRegistrar.getPigeonApiAutoCloseableApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiLocationApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(latitude: Double, longitude: Double): android.location.Location

  abstract fun latitude(pigeon_instance: android.location.Location): Double

  abstract fun longitude(pigeon_instance: android.location.Location): Double

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiLocationApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LocationApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val latitudeArg = args[1] as Double
            val longitudeArg = args[2] as Double
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(latitudeArg,longitudeArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of LocationApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.location.Location, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val latitudeArg = latitude(pigeon_instanceArg)
      val longitudeArg = longitude(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.LocationApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, latitudeArg, longitudeArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiSizeApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(width: Long, height: Long): android.util.Size

  abstract fun width(pigeon_instance: android.util.Size): Long

  abstract fun height(pigeon_instance: android.util.Size): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiSizeApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.SizeApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val widthArg = args[1] as Long
            val heightArg = args[2] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(widthArg,heightArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of SizeApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.util.Size, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val widthArg = width(pigeon_instanceArg)
      val heightArg = height(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.SizeApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, widthArg, heightArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPointApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(x: Long, y: Long): android.graphics.Point

  abstract fun x(pigeon_instance: android.graphics.Point): Long

  abstract fun y(pigeon_instance: android.graphics.Point): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPointApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PointApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val xArg = args[1] as Long
            val yArg = args[2] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(xArg,yArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PointApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.graphics.Point, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val xArg = x(pigeon_instanceArg)
      val yArg = y(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.PointApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, xArg, yArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPointFApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(x: Double, y: Double): android.graphics.PointF

  abstract fun x(pigeon_instance: android.graphics.PointF): Double

  abstract fun y(pigeon_instance: android.graphics.PointF): Double

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPointFApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PointFApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val xArg = args[1] as Double
            val yArg = args[2] as Double
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(xArg,yArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PointFApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.graphics.PointF, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val xArg = x(pigeon_instanceArg)
      val yArg = y(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.PointFApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, xArg, yArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiRectApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(left: Long, top: Long, right: Long, bottom: Long): android.graphics.Rect

  abstract fun left(pigeon_instance: android.graphics.Rect): Long

  abstract fun top(pigeon_instance: android.graphics.Rect): Long

  abstract fun right(pigeon_instance: android.graphics.Rect): Long

  abstract fun bottom(pigeon_instance: android.graphics.Rect): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiRectApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.RectApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val leftArg = args[1] as Long
            val topArg = args[2] as Long
            val rightArg = args[3] as Long
            val bottomArg = args[4] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(leftArg,topArg,rightArg,bottomArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of RectApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.graphics.Rect, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val leftArg = left(pigeon_instanceArg)
      val topArg = top(pigeon_instanceArg)
      val rightArg = right(pigeon_instanceArg)
      val bottomArg = bottom(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.RectApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, leftArg, topArg, rightArg, bottomArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiIntRangeApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(lower: Long, upper: Long): dev.hebei.camerax_android.common.IntRange

  abstract fun lower(pigeon_instance: dev.hebei.camerax_android.common.IntRange): Long

  abstract fun upper(pigeon_instance: dev.hebei.camerax_android.common.IntRange): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiIntRangeApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.IntRangeApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val lowerArg = args[1] as Long
            val upperArg = args[2] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(lowerArg,upperArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of IntRangeApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.IntRange, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val lowerArg = lower(pigeon_instanceArg)
      val upperArg = upper(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.IntRangeApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, lowerArg, upperArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiLongRangeApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(lower: Long, upper: Long): dev.hebei.camerax_android.common.LongRange

  abstract fun lower(pigeon_instance: dev.hebei.camerax_android.common.LongRange): Long

  abstract fun upper(pigeon_instance: dev.hebei.camerax_android.common.LongRange): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiLongRangeApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LongRangeApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val lowerArg = args[1] as Long
            val upperArg = args[2] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(lowerArg,upperArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of LongRangeApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.LongRange, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val lowerArg = lower(pigeon_instanceArg)
      val upperArg = upper(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.LongRangeApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, lowerArg, upperArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraSelectorApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(lensFacing: LensFacingApi?): androidx.camera.core.CameraSelector

  abstract fun front(): androidx.camera.core.CameraSelector

  abstract fun back(): androidx.camera.core.CameraSelector

  abstract fun external(): androidx.camera.core.CameraSelector

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraSelectorApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelectorApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val lensFacingArg = args[1] as LensFacingApi?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(lensFacingArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelectorApi.front", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.front(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelectorApi.back", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.back(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraSelectorApi.external", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.external(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraSelectorApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.CameraSelector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.CameraSelectorApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraStateLiveDataApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun getValue(pigeon_instance: dev.hebei.camerax_android.common.CameraStateLiveData): CameraStateApi?

  abstract fun observe(pigeon_instance: dev.hebei.camerax_android.common.CameraStateLiveData, observer: dev.hebei.camerax_android.common.CameraStateObserver)

  abstract fun removeObserver(pigeon_instance: dev.hebei.camerax_android.common.CameraStateLiveData, observer: dev.hebei.camerax_android.common.CameraStateObserver)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraStateLiveDataApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateLiveDataApi.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.CameraStateLiveData
            val wrapped: List<Any?> = try {
              listOf(api.getValue(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateLiveDataApi.observe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.CameraStateLiveData
            val observerArg = args[1] as dev.hebei.camerax_android.common.CameraStateObserver
            val wrapped: List<Any?> = try {
              api.observe(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateLiveDataApi.removeObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.CameraStateLiveData
            val observerArg = args[1] as dev.hebei.camerax_android.common.CameraStateObserver
            val wrapped: List<Any?> = try {
              api.removeObserver(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraStateLiveDataApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.CameraStateLiveData, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.CameraStateLiveDataApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraStateObserverApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.common.CameraStateObserver

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraStateObserverApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraStateObserverApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraStateObserverApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.CameraStateObserver, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              CameraXError("new-instance-error", "Attempting to create a new Dart instance of CameraStateObserverApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.camerax_android.common.CameraStateObserver, valueArg: CameraStateApi, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.CameraStateObserverApi.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiTorchStateLiveDataApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun getValue(pigeon_instance: dev.hebei.camerax_android.common.TorchStateLiveData): TorchStateApi?

  abstract fun observe(pigeon_instance: dev.hebei.camerax_android.common.TorchStateLiveData, observer: dev.hebei.camerax_android.common.TorchStateObserver)

  abstract fun removeObserver(pigeon_instance: dev.hebei.camerax_android.common.TorchStateLiveData, observer: dev.hebei.camerax_android.common.TorchStateObserver)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiTorchStateLiveDataApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateLiveDataApi.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.TorchStateLiveData
            val wrapped: List<Any?> = try {
              listOf(api.getValue(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateLiveDataApi.observe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.TorchStateLiveData
            val observerArg = args[1] as dev.hebei.camerax_android.common.TorchStateObserver
            val wrapped: List<Any?> = try {
              api.observe(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateLiveDataApi.removeObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.TorchStateLiveData
            val observerArg = args[1] as dev.hebei.camerax_android.common.TorchStateObserver
            val wrapped: List<Any?> = try {
              api.removeObserver(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of TorchStateLiveDataApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.TorchStateLiveData, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.TorchStateLiveDataApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiTorchStateObserverApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.common.TorchStateObserver

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiTorchStateObserverApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.TorchStateObserverApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of TorchStateObserverApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.TorchStateObserver, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              CameraXError("new-instance-error", "Attempting to create a new Dart instance of TorchStateObserverApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.camerax_android.common.TorchStateObserver, valueArg: TorchStateApi, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.TorchStateObserverApi.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomStateApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun minZoomRatio(pigeon_instance: androidx.camera.core.ZoomState): Double

  abstract fun maxZoomRatio(pigeon_instance: androidx.camera.core.ZoomState): Double

  abstract fun zoomRatio(pigeon_instance: androidx.camera.core.ZoomState): Double

  abstract fun linearZoom(pigeon_instance: androidx.camera.core.ZoomState): Double

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomStateApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ZoomState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val minZoomRatioArg = minZoomRatio(pigeon_instanceArg)
      val maxZoomRatioArg = maxZoomRatio(pigeon_instanceArg)
      val zoomRatioArg = zoomRatio(pigeon_instanceArg)
      val linearZoomArg = linearZoom(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.ZoomStateApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, minZoomRatioArg, maxZoomRatioArg, zoomRatioArg, linearZoomArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomStateLiveDataApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun getValue(pigeon_instance: dev.hebei.camerax_android.common.ZoomStateLiveData): androidx.camera.core.ZoomState?

  abstract fun observe(pigeon_instance: dev.hebei.camerax_android.common.ZoomStateLiveData, observer: dev.hebei.camerax_android.common.ZoomStateObserver)

  abstract fun removeObserver(pigeon_instance: dev.hebei.camerax_android.common.ZoomStateLiveData, observer: dev.hebei.camerax_android.common.ZoomStateObserver)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomStateLiveDataApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateLiveDataApi.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.ZoomStateLiveData
            val wrapped: List<Any?> = try {
              listOf(api.getValue(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateLiveDataApi.observe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.ZoomStateLiveData
            val observerArg = args[1] as dev.hebei.camerax_android.common.ZoomStateObserver
            val wrapped: List<Any?> = try {
              api.observe(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateLiveDataApi.removeObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.common.ZoomStateLiveData
            val observerArg = args[1] as dev.hebei.camerax_android.common.ZoomStateObserver
            val wrapped: List<Any?> = try {
              api.removeObserver(pigeon_instanceArg, observerArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomStateLiveDataApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.ZoomStateLiveData, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.ZoomStateLiveDataApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomStateObserverApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.common.ZoomStateObserver

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomStateObserverApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomStateObserverApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomStateObserverApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.ZoomStateObserver, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              CameraXError("new-instance-error", "Attempting to create a new Dart instance of ZoomStateObserverApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onChanged(pigeon_instanceArg: dev.hebei.camerax_android.common.ZoomStateObserver, valueArg: androidx.camera.core.ZoomState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ZoomStateObserverApi.onChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiExposureStateApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun exposureCompensationIndex(pigeon_instance: androidx.camera.core.ExposureState): Long

  abstract fun exposureCompensationRange(pigeon_instance: androidx.camera.core.ExposureState): dev.hebei.camerax_android.common.IntRange

  abstract fun exposureCompensationStep(pigeon_instance: androidx.camera.core.ExposureState): Double

  abstract fun isExposureCompensationSupported(pigeon_instance: androidx.camera.core.ExposureState): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ExposureStateApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ExposureState, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val exposureCompensationIndexArg = exposureCompensationIndex(pigeon_instanceArg)
      val exposureCompensationRangeArg = exposureCompensationRange(pigeon_instanceArg)
      val exposureCompensationStepArg = exposureCompensationStep(pigeon_instanceArg)
      val isExposureCompensationSupportedArg = isExposureCompensationSupported(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.ExposureStateApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, exposureCompensationIndexArg, exposureCompensationRangeArg, exposureCompensationStepArg, isExposureCompensationSupportedArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMeteringPointApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun size(pigeon_instance: androidx.camera.core.MeteringPoint): Double

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MeteringPointApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.MeteringPoint, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val sizeArg = size(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.MeteringPointApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, sizeArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMeteringPointFactoryApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun createPoint(pigeon_instance: androidx.camera.core.MeteringPointFactory, x: Double, y: Double, size: Double?): androidx.camera.core.MeteringPoint

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMeteringPointFactoryApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MeteringPointFactoryApi.createPoint", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.MeteringPointFactory
            val xArg = args[1] as Double
            val yArg = args[2] as Double
            val sizeArg = args[3] as Double?
            val wrapped: List<Any?> = try {
              listOf(api.createPoint(pigeon_instanceArg, xArg, yArg, sizeArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MeteringPointFactoryApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.MeteringPointFactory, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.MeteringPointFactoryApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiSurfaceOrientedMeteringPointFactoryApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(width: Double, height: Double): androidx.camera.core.SurfaceOrientedMeteringPointFactory

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiSurfaceOrientedMeteringPointFactoryApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.SurfaceOrientedMeteringPointFactoryApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val widthArg = args[1] as Double
            val heightArg = args[2] as Double
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(widthArg,heightArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of SurfaceOrientedMeteringPointFactoryApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.SurfaceOrientedMeteringPointFactory, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.SurfaceOrientedMeteringPointFactoryApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiMeteringPointFactoryApi] used to access callback methods */
  fun pigeon_getPigeonApiMeteringPointFactoryApi(): PigeonApiMeteringPointFactoryApi
  {
    return pigeonRegistrar.getPigeonApiMeteringPointFactoryApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMeteringPointTupleApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(point: androidx.camera.core.MeteringPoint, modes: List<MeteringModeApi>?): dev.hebei.camerax_android.core.MeteringPointTuple

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMeteringPointTupleApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MeteringPointTupleApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val pointArg = args[1] as androidx.camera.core.MeteringPoint
            val modesArg = args[2] as List<MeteringModeApi>?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(pointArg,modesArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MeteringPointTupleApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.MeteringPointTuple, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.MeteringPointTupleApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiDurationTupleApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(duration: Long, timeUnit: TimeUnitApi): dev.hebei.camerax_android.core.DurationTuple

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiDurationTupleApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.DurationTupleApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val durationArg = args[1] as Long
            val timeUnitArg = args[2] as TimeUnitApi
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(durationArg,timeUnitArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DurationTupleApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.core.DurationTuple, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.DurationTupleApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFocusMeteringActionApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun build(first: dev.hebei.camerax_android.core.MeteringPointTuple, others: List<dev.hebei.camerax_android.core.MeteringPointTuple>?, disableAutoCancel: Boolean?, autoCancelDuration: dev.hebei.camerax_android.core.DurationTuple?): androidx.camera.core.FocusMeteringAction

  abstract fun getAutoCancelDurationInMillis(pigeon_instance: androidx.camera.core.FocusMeteringAction): Long

  abstract fun getMeteringPointsAe(pigeon_instance: androidx.camera.core.FocusMeteringAction): List<androidx.camera.core.MeteringPoint>

  abstract fun getMeteringPointsAf(pigeon_instance: androidx.camera.core.FocusMeteringAction): List<androidx.camera.core.MeteringPoint>

  abstract fun getMeteringPointsAwb(pigeon_instance: androidx.camera.core.FocusMeteringAction): List<androidx.camera.core.MeteringPoint>

  abstract fun isAutoCancelEnabled(pigeon_instance: androidx.camera.core.FocusMeteringAction): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFocusMeteringActionApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringActionApi.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val firstArg = args[1] as dev.hebei.camerax_android.core.MeteringPointTuple
            val othersArg = args[2] as List<dev.hebei.camerax_android.core.MeteringPointTuple>?
            val disableAutoCancelArg = args[3] as Boolean?
            val autoCancelDurationArg = args[4] as dev.hebei.camerax_android.core.DurationTuple?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(firstArg,othersArg,disableAutoCancelArg,autoCancelDurationArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringActionApi.getAutoCancelDurationInMillis", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.getAutoCancelDurationInMillis(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringActionApi.getMeteringPointsAe", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.getMeteringPointsAe(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringActionApi.getMeteringPointsAf", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.getMeteringPointsAf(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringActionApi.getMeteringPointsAwb", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.getMeteringPointsAwb(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FocusMeteringActionApi.isAutoCancelEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.isAutoCancelEnabled(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FocusMeteringActionApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.FocusMeteringAction, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.FocusMeteringActionApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFocusMeteringResultApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun isFocusSuccessful(pigeon_instance: androidx.camera.core.FocusMeteringResult): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FocusMeteringResultApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.FocusMeteringResult, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val isFocusSuccessfulArg = isFocusSuccessful(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.FocusMeteringResultApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, isFocusSuccessfulArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiDynamicRangeApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(encoding: EncodingApi, bitDepth: BitDepthApi): androidx.camera.core.DynamicRange

  abstract fun encoding(pigeon_instance: androidx.camera.core.DynamicRange): EncodingApi

  abstract fun bitDepth(pigeon_instance: androidx.camera.core.DynamicRange): BitDepthApi

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiDynamicRangeApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.DynamicRangeApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val encodingArg = args[1] as EncodingApi
            val bitDepthArg = args[2] as BitDepthApi
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(encodingArg,bitDepthArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DynamicRangeApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.DynamicRange, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val encodingArg = encoding(pigeon_instanceArg)
      val bitDepthArg = bitDepth(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.DynamicRangeApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, encodingArg, bitDepthArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraInfoApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun mustPlayShutterSound(): Boolean

  abstract fun getCameraSelector(pigeon_instance: androidx.camera.core.CameraInfo): androidx.camera.core.CameraSelector

  abstract fun getCameraState(pigeon_instance: androidx.camera.core.CameraInfo): dev.hebei.camerax_android.common.CameraStateLiveData

  abstract fun getTorchState(pigeon_instance: androidx.camera.core.CameraInfo): dev.hebei.camerax_android.common.TorchStateLiveData

  abstract fun getZoomState(pigeon_instance: androidx.camera.core.CameraInfo): dev.hebei.camerax_android.common.ZoomStateLiveData

  abstract fun getExposureState(pigeon_instance: androidx.camera.core.CameraInfo): androidx.camera.core.ExposureState

  abstract fun getIntrinsticZoomRatio(pigeon_instance: androidx.camera.core.CameraInfo): Double

  abstract fun getLensFacing(pigeon_instance: androidx.camera.core.CameraInfo): LensFacingApi

  abstract fun getPhysicalCameraInfos(pigeon_instance: androidx.camera.core.CameraInfo): List<androidx.camera.core.CameraInfo>

  abstract fun getSensorRotationDegrees(pigeon_instance: androidx.camera.core.CameraInfo): Long

  abstract fun getSupportedFrameRateRanges(pigeon_instance: androidx.camera.core.CameraInfo): List<dev.hebei.camerax_android.common.IntRange>

  abstract fun isLogicalMultiCameraSupported(pigeon_instance: androidx.camera.core.CameraInfo): Boolean

  abstract fun isZslSupported(pigeon_instance: androidx.camera.core.CameraInfo): Boolean

  abstract fun hasFlashUnit(pigeon_instance: androidx.camera.core.CameraInfo): Boolean

  abstract fun isFocusMeteringSupported(pigeon_instance: androidx.camera.core.CameraInfo, action: androidx.camera.core.FocusMeteringAction): Boolean

  abstract fun querySupportedDynamicRanges(pigeon_instance: androidx.camera.core.CameraInfo, candidateDynamicRanges: List<androidx.camera.core.DynamicRange>): List<androidx.camera.core.DynamicRange>

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraInfoApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.mustPlayShutterSound", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.mustPlayShutterSound())
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.getCameraSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getCameraSelector(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.getCameraState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getCameraState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.getTorchState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getTorchState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.getZoomState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getZoomState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.getExposureState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getExposureState(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.getIntrinsticZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getIntrinsticZoomRatio(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.getLensFacing", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getLensFacing(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.getPhysicalCameraInfos", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getPhysicalCameraInfos(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.getSensorRotationDegrees", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getSensorRotationDegrees(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.getSupportedFrameRateRanges", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getSupportedFrameRateRanges(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.isLogicalMultiCameraSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.isLogicalMultiCameraSupported(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.isZslSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.isZslSupported(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.hasFlashUnit", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.hasFlashUnit(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.isFocusMeteringSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val actionArg = args[1] as androidx.camera.core.FocusMeteringAction
            val wrapped: List<Any?> = try {
              listOf(api.isFocusMeteringSupported(pigeon_instanceArg, actionArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraInfoApi.querySupportedDynamicRanges", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraInfo
            val candidateDynamicRangesArg = args[1] as List<androidx.camera.core.DynamicRange>
            val wrapped: List<Any?> = try {
              listOf(api.querySupportedDynamicRanges(pigeon_instanceArg, candidateDynamicRangesArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraInfoApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.CameraInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.CameraInfoApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraControlApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun enableTorch(pigeon_instance: androidx.camera.core.CameraControl, torch: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun setZoomRatio(pigeon_instance: androidx.camera.core.CameraControl, ratio: Double, callback: (Result<Unit>) -> Unit)

  abstract fun setLinearZoom(pigeon_instance: androidx.camera.core.CameraControl, linearZoom: Double, callback: (Result<Unit>) -> Unit)

  abstract fun startFocusAndMetering(pigeon_instance: androidx.camera.core.CameraControl, action: androidx.camera.core.FocusMeteringAction, callback: (Result<androidx.camera.core.FocusMeteringResult>) -> Unit)

  abstract fun cancelFocusAndMetering(pigeon_instance: androidx.camera.core.CameraControl, callback: (Result<Unit>) -> Unit)

  abstract fun setExposureCompensationIndex(pigeon_instance: androidx.camera.core.CameraControl, value: Long, callback: (Result<Long>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraControlApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControlApi.enableTorch", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            val torchArg = args[1] as Boolean
            api.enableTorch(pigeon_instanceArg, torchArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControlApi.setZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            val ratioArg = args[1] as Double
            api.setZoomRatio(pigeon_instanceArg, ratioArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControlApi.setLinearZoom", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            val linearZoomArg = args[1] as Double
            api.setLinearZoom(pigeon_instanceArg, linearZoomArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControlApi.startFocusAndMetering", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            val actionArg = args[1] as androidx.camera.core.FocusMeteringAction
            api.startFocusAndMetering(pigeon_instanceArg, actionArg) { result: Result<androidx.camera.core.FocusMeteringResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControlApi.cancelFocusAndMetering", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            api.cancelFocusAndMetering(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControlApi.setExposureCompensationIndex", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.CameraControl
            val valueArg = args[1] as Long
            api.setExposureCompensationIndex(pigeon_instanceArg, valueArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraControlApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.CameraControl, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.CameraControlApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAspectRatioStrategyApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(preferredAspectRatio: AspectRatioApi, fallbackRule: AspectRatioFallbackRuleApi): androidx.camera.core.resolutionselector.AspectRatioStrategy

  abstract fun preferredAspectRatio(pigeon_instance: androidx.camera.core.resolutionselector.AspectRatioStrategy): AspectRatioApi

  abstract fun fallbackRule(pigeon_instance: androidx.camera.core.resolutionselector.AspectRatioStrategy): AspectRatioFallbackRuleApi

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAspectRatioStrategyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AspectRatioStrategyApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val preferredAspectRatioArg = args[1] as AspectRatioApi
            val fallbackRuleArg = args[2] as AspectRatioFallbackRuleApi
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(preferredAspectRatioArg,fallbackRuleArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AspectRatioStrategyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.resolutionselector.AspectRatioStrategy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val preferredAspectRatioArg = preferredAspectRatio(pigeon_instanceArg)
      val fallbackRuleArg = fallbackRule(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.AspectRatioStrategyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, preferredAspectRatioArg, fallbackRuleArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiResolutionFilterApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.core.resolutionselector.ResolutionFilter

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiResolutionFilterApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionFilterApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ResolutionFilterApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.resolutionselector.ResolutionFilter, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              CameraXError("new-instance-error", "Attempting to create a new Dart instance of ResolutionFilterApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun filter(pigeon_instanceArg: androidx.camera.core.resolutionselector.ResolutionFilter, supportedSizesArg: List<android.util.Size>, rotationDegreesArg: Long, callback: (Result<List<android.util.Size>>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ResolutionFilterApi.filter"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, supportedSizesArg, rotationDegreesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(CameraXError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as List<android.util.Size>
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiResolutionStrategyApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(boundSize: android.util.Size?, fallbackRule: ResolutionFallbackRuleApi): androidx.camera.core.resolutionselector.ResolutionStrategy

  abstract fun boundSize(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionStrategy): android.util.Size?

  abstract fun fallbackRule(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionStrategy): ResolutionFallbackRuleApi

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiResolutionStrategyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionStrategyApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val boundSizeArg = args[1] as android.util.Size?
            val fallbackRuleArg = args[2] as ResolutionFallbackRuleApi
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(boundSizeArg,fallbackRuleArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ResolutionStrategyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.resolutionselector.ResolutionStrategy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val boundSizeArg = boundSize(pigeon_instanceArg)
      val fallbackRuleArg = fallbackRule(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.ResolutionStrategyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, boundSizeArg, fallbackRuleArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiResolutionSelectorApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(allowedResolutionMode: ResolutionModeApi, aspectRatioStrategy: androidx.camera.core.resolutionselector.AspectRatioStrategy, resolutionFilter: androidx.camera.core.resolutionselector.ResolutionFilter?, resolutionStrategy: androidx.camera.core.resolutionselector.ResolutionStrategy?): androidx.camera.core.resolutionselector.ResolutionSelector

  abstract fun allowedResolutionMode(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionSelector): ResolutionModeApi

  abstract fun aspectRatioStrategy(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionSelector): androidx.camera.core.resolutionselector.AspectRatioStrategy

  abstract fun resolutionFilter(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionSelector): androidx.camera.core.resolutionselector.ResolutionFilter?

  abstract fun resolutionStrategy(pigeon_instance: androidx.camera.core.resolutionselector.ResolutionSelector): androidx.camera.core.resolutionselector.ResolutionStrategy?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiResolutionSelectorApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ResolutionSelectorApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val allowedResolutionModeArg = args[1] as ResolutionModeApi
            val aspectRatioStrategyArg = args[2] as androidx.camera.core.resolutionselector.AspectRatioStrategy
            val resolutionFilterArg = args[3] as androidx.camera.core.resolutionselector.ResolutionFilter?
            val resolutionStrategyArg = args[4] as androidx.camera.core.resolutionselector.ResolutionStrategy?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(allowedResolutionModeArg,aspectRatioStrategyArg,resolutionFilterArg,resolutionStrategyArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ResolutionSelectorApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.resolutionselector.ResolutionSelector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val allowedResolutionModeArg = allowedResolutionMode(pigeon_instanceArg)
      val aspectRatioStrategyArg = aspectRatioStrategy(pigeon_instanceArg)
      val resolutionFilterArg = resolutionFilter(pigeon_instanceArg)
      val resolutionStrategyArg = resolutionStrategy(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.ResolutionSelectorApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, allowedResolutionModeArg, aspectRatioStrategyArg, resolutionFilterArg, resolutionStrategyArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImageInfoApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun timestamp(pigeon_instance: androidx.camera.core.ImageInfo): Long

  abstract fun rotationDegrees(pigeon_instance: androidx.camera.core.ImageInfo): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImageInfoApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val timestampArg = timestamp(pigeon_instanceArg)
      val rotationDegreesArg = rotationDegrees(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.ImageInfoApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, timestampArg, rotationDegreesArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPlaneProxyApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun value(pigeon_instance: androidx.camera.core.ImageProxy.PlaneProxy): ByteArray

  abstract fun pixelStride(pigeon_instance: androidx.camera.core.ImageProxy.PlaneProxy): Long

  abstract fun rowStride(pigeon_instance: androidx.camera.core.ImageProxy.PlaneProxy): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PlaneProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageProxy.PlaneProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val valueArg = value(pigeon_instanceArg)
      val pixelStrideArg = pixelStride(pigeon_instanceArg)
      val rowStrideArg = rowStride(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.PlaneProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, valueArg, pixelStrideArg, rowStrideArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImageProxyApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun format(pigeon_instance: androidx.camera.core.ImageProxy): ImageFormatApi

  abstract fun width(pigeon_instance: androidx.camera.core.ImageProxy): Long

  abstract fun height(pigeon_instance: androidx.camera.core.ImageProxy): Long

  abstract fun planes(pigeon_instance: androidx.camera.core.ImageProxy): List<androidx.camera.core.ImageProxy.PlaneProxy>

  abstract fun imageInfo(pigeon_instance: androidx.camera.core.ImageProxy): androidx.camera.core.ImageInfo

  abstract fun getCropRect(pigeon_instance: androidx.camera.core.ImageProxy): android.graphics.Rect

  abstract fun setCropRect(pigeon_instance: androidx.camera.core.ImageProxy, rect: android.graphics.Rect?)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImageProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxyApi.getCropRect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.ImageProxy
            val wrapped: List<Any?> = try {
              listOf(api.getCropRect(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageProxyApi.setCropRect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.core.ImageProxy
            val rectArg = args[1] as android.graphics.Rect?
            val wrapped: List<Any?> = try {
              api.setCropRect(pigeon_instanceArg, rectArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImageProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val formatArg = format(pigeon_instanceArg)
      val widthArg = width(pigeon_instanceArg)
      val heightArg = height(pigeon_instanceArg)
      val planesArg = planes(pigeon_instanceArg)
      val imageInfoArg = imageInfo(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.ImageProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, formatArg, widthArg, heightArg, planesArg, imageInfoArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAutoCloseableApi] used to access callback methods */
  fun pigeon_getPigeonApiAutoCloseableApi(): PigeonApiAutoCloseableApi
  {
    return pigeonRegistrar.getPigeonApiAutoCloseableApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMetadataApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(isReversedHorizontal: Boolean, isReversedVertical: Boolean, location: android.location.Location?): androidx.camera.core.ImageCapture.Metadata

  abstract fun isReversedHorizontal(pigeon_instance: androidx.camera.core.ImageCapture.Metadata): Boolean

  abstract fun isReversedVertical(pigeon_instance: androidx.camera.core.ImageCapture.Metadata): Boolean

  abstract fun location(pigeon_instance: androidx.camera.core.ImageCapture.Metadata): android.location.Location?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMetadataApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MetadataApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val isReversedHorizontalArg = args[1] as Boolean
            val isReversedVerticalArg = args[2] as Boolean
            val locationArg = args[3] as android.location.Location?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(isReversedHorizontalArg,isReversedVerticalArg,locationArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MetadataApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageCapture.Metadata, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val isReversedHorizontalArg = isReversedHorizontal(pigeon_instanceArg)
      val isReversedVerticalArg = isReversedVertical(pigeon_instanceArg)
      val locationArg = location(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.MetadataApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, isReversedHorizontalArg, isReversedVerticalArg, locationArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOutputFileOptionsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun build(file: String, metadata: androidx.camera.core.ImageCapture.Metadata?): androidx.camera.core.ImageCapture.OutputFileOptions

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiOutputFileOptionsApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.OutputFileOptionsApi.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val fileArg = args[1] as String
            val metadataArg = args[2] as androidx.camera.core.ImageCapture.Metadata?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(fileArg,metadataArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OutputFileOptionsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageCapture.OutputFileOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.OutputFileOptionsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOutputFileResultsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun savedUri(pigeon_instance: androidx.camera.core.ImageCapture.OutputFileResults): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OutputFileResultsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageCapture.OutputFileResults, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val savedUriArg = savedUri(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.OutputFileResultsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, savedUriArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOnImageCapturedCallbackApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.core.ImageCapture.OnImageCapturedCallback

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiOnImageCapturedCallbackApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.OnImageCapturedCallbackApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OnImageCapturedCallbackApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallbackApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  fun onCaptureStarted(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallbackApi.onCaptureStarted"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onCaptureProcessProgressed(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, progressArg: Long, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallbackApi.onCaptureProcessProgressed"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, progressArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onPostviewBitmapAvailable(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, bitmapArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallbackApi.onPostviewBitmapAvailable"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, bitmapArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onCaptureSuccess(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, imageArg: androidx.camera.core.ImageProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallbackApi.onCaptureSuccess"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, imageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onError(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageCapturedCallback, exceptionArg: List<Any?>, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageCapturedCallbackApi.onError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, exceptionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOnImageSavedCallbackApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.core.ImageCapture.OnImageSavedCallback

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiOnImageSavedCallbackApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.OnImageSavedCallbackApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OnImageSavedCallbackApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallbackApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  fun onCaptureStarted(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallbackApi.onCaptureStarted"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onCaptureProcessProgressed(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, progressArg: Long, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallbackApi.onCaptureProcessProgressed"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, progressArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onPostviewBitmapAvailable(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, bitmapArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallbackApi.onPostviewBitmapAvailable"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, bitmapArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onImageSaved(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, outputFileResultsArg: androidx.camera.core.ImageCapture.OutputFileResults, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallbackApi.onImageSaved"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, outputFileResultsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onError(pigeon_instanceArg: androidx.camera.core.ImageCapture.OnImageSavedCallback, exceptionArg: List<Any?>, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.OnImageSavedCallbackApi.onError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, exceptionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiAnalyzerApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AnalyzerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageAnalysis.Analyzer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.AnalyzerApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImageAnalyzerApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.core.ImageAnalysis.Analyzer

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImageAnalyzerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ImageAnalyzerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImageAnalyzerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageAnalysis.Analyzer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              CameraXError("new-instance-error", "Attempting to create a new Dart instance of ImageAnalyzerApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun analyze(pigeon_instanceArg: androidx.camera.core.ImageAnalysis.Analyzer, imageArg: androidx.camera.core.ImageProxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ImageAnalyzerApi.analyze"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, imageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAnalyzerApi] used to access callback methods */
  fun pigeon_getPigeonApiAnalyzerApi(): PigeonApiAnalyzerApi
  {
    return pigeonRegistrar.getPigeonApiAnalyzerApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiJpegAnalyzerApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(targetCoordinateSystem: CoordinateSystemApi): androidx.camera.core.ImageAnalysis.Analyzer

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiJpegAnalyzerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.JpegAnalyzerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val targetCoordinateSystemArg = args[1] as CoordinateSystemApi
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(targetCoordinateSystemArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of JpegAnalyzerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.core.ImageAnalysis.Analyzer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              CameraXError("new-instance-error", "Attempting to create a new Dart instance of JpegAnalyzerApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun consumer(pigeon_instanceArg: androidx.camera.core.ImageAnalysis.Analyzer, valueArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.JpegAnalyzerApi.consumer"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAnalyzerApi] used to access callback methods */
  fun pigeon_getPigeonApiAnalyzerApi(): PigeonApiAnalyzerApi
  {
    return pigeonRegistrar.getPigeonApiAnalyzerApi()
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiDetectorApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DetectorApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.ml.Detector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.DetectorApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiCloseableApi] used to access callback methods */
  fun pigeon_getPigeonApiCloseableApi(): PigeonApiCloseableApi
  {
    return pigeonRegistrar.getPigeonApiCloseableApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAddressApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun type(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Address): AddressTypeApi

  abstract fun addressLines(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Address): List<String>

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AddressApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.Address, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val typeArg = type(pigeon_instanceArg)
      val addressLinesArg = addressLines(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.AddressApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, typeArg, addressLinesArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCalendarDateTimeApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun rawValue(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): String?

  abstract fun year(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun month(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun day(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun hours(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun minutes(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun seconds(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Long

  abstract fun isUtc(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CalendarDateTimeApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val rawValueArg = rawValue(pigeon_instanceArg)
      val yearArg = year(pigeon_instanceArg)
      val monthArg = month(pigeon_instanceArg)
      val dayArg = day(pigeon_instanceArg)
      val hoursArg = hours(pigeon_instanceArg)
      val minutesArg = minutes(pigeon_instanceArg)
      val secondsArg = seconds(pigeon_instanceArg)
      val isUtcArg = isUtc(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.CalendarDateTimeApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, rawValueArg, yearArg, monthArg, dayArg, hoursArg, minutesArg, secondsArg, isUtcArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCalendarEventApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun start(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime?

  abstract fun end(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): com.google.mlkit.vision.barcode.common.Barcode.CalendarDateTime?

  abstract fun location(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): String?

  abstract fun organizer(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): String?

  abstract fun summary(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): String?

  abstract fun description(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): String?

  abstract fun status(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CalendarEventApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val startArg = start(pigeon_instanceArg)
      val endArg = end(pigeon_instanceArg)
      val locationArg = location(pigeon_instanceArg)
      val organizerArg = organizer(pigeon_instanceArg)
      val summaryArg = summary(pigeon_instanceArg)
      val descriptionArg = description(pigeon_instanceArg)
      val statusArg = status(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.CalendarEventApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, startArg, endArg, locationArg, organizerArg, summaryArg, descriptionArg, statusArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiContactInfoApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun addresses(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): List<com.google.mlkit.vision.barcode.common.Barcode.Address>

  abstract fun emails(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): List<com.google.mlkit.vision.barcode.common.Barcode.Email>

  abstract fun name(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): com.google.mlkit.vision.barcode.common.Barcode.PersonName?

  abstract fun organization(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): String?

  abstract fun phones(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): List<com.google.mlkit.vision.barcode.common.Barcode.Phone>

  abstract fun title(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): String?

  abstract fun urls(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo): List<String>

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ContactInfoApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.ContactInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val addressesArg = addresses(pigeon_instanceArg)
      val emailsArg = emails(pigeon_instanceArg)
      val nameArg = name(pigeon_instanceArg)
      val organizationArg = organization(pigeon_instanceArg)
      val phonesArg = phones(pigeon_instanceArg)
      val titleArg = title(pigeon_instanceArg)
      val urlsArg = urls(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.ContactInfoApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, addressesArg, emailsArg, nameArg, organizationArg, phonesArg, titleArg, urlsArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiDriverLicenseApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun licenseNumber(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun documentType(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun expiryDate(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun firstName(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun middleName(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun lastName(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun gender(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun birthDate(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun issueDate(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun issuingCountry(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun addressState(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun addressCity(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun addressStreet(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  abstract fun addressZip(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DriverLicenseApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.DriverLicense, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val licenseNumberArg = licenseNumber(pigeon_instanceArg)
      val documentTypeArg = documentType(pigeon_instanceArg)
      val expiryDateArg = expiryDate(pigeon_instanceArg)
      val firstNameArg = firstName(pigeon_instanceArg)
      val middleNameArg = middleName(pigeon_instanceArg)
      val lastNameArg = lastName(pigeon_instanceArg)
      val genderArg = gender(pigeon_instanceArg)
      val birthDateArg = birthDate(pigeon_instanceArg)
      val issueDateArg = issueDate(pigeon_instanceArg)
      val issuingCountryArg = issuingCountry(pigeon_instanceArg)
      val addressStateArg = addressState(pigeon_instanceArg)
      val addressCityArg = addressCity(pigeon_instanceArg)
      val addressStreetArg = addressStreet(pigeon_instanceArg)
      val addressZipArg = addressZip(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.DriverLicenseApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, licenseNumberArg, documentTypeArg, expiryDateArg, firstNameArg, middleNameArg, lastNameArg, genderArg, birthDateArg, issueDateArg, issuingCountryArg, addressStateArg, addressCityArg, addressStreetArg, addressZipArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiEmailApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun type(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Email): EmailTypeApi

  abstract fun address(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Email): String?

  abstract fun subject(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Email): String?

  abstract fun body(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Email): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of EmailApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.Email, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val typeArg = type(pigeon_instanceArg)
      val addressArg = address(pigeon_instanceArg)
      val subjectArg = subject(pigeon_instanceArg)
      val bodyArg = body(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.EmailApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, typeArg, addressArg, subjectArg, bodyArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiGeoPointApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun lat(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.GeoPoint): Double

  abstract fun lng(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.GeoPoint): Double

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of GeoPointApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.GeoPoint, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val latArg = lat(pigeon_instanceArg)
      val lngArg = lng(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.GeoPointApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, latArg, lngArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPersonNameApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun formattedName(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun pronunciation(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun prefix(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun first(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun middle(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun last(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  abstract fun suffix(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.PersonName): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PersonNameApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.PersonName, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val formattedNameArg = formattedName(pigeon_instanceArg)
      val pronunciationArg = pronunciation(pigeon_instanceArg)
      val prefixArg = prefix(pigeon_instanceArg)
      val firstArg = first(pigeon_instanceArg)
      val middleArg = middle(pigeon_instanceArg)
      val lastArg = last(pigeon_instanceArg)
      val suffixArg = suffix(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.PersonNameApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, formattedNameArg, pronunciationArg, prefixArg, firstArg, middleArg, lastArg, suffixArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPhoneApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun type(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Phone): PhoneTypeApi

  abstract fun number(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Phone): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PhoneApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.Phone, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val typeArg = type(pigeon_instanceArg)
      val numberArg = number(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.PhoneApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, typeArg, numberArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiSmsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun phoneNumber(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Sms): String?

  abstract fun message(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.Sms): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of SmsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.Sms, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val phoneNumberArg = phoneNumber(pigeon_instanceArg)
      val messageArg = message(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.SmsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, phoneNumberArg, messageArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiUrlBookmarkApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun title(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.UrlBookmark): String?

  abstract fun url(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.UrlBookmark): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of UrlBookmarkApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.UrlBookmark, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val titleArg = title(pigeon_instanceArg)
      val urlArg = url(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.UrlBookmarkApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, titleArg, urlArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiWiFiApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun encryptionType(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.WiFi): WiFiEncryptionTypeApi

  abstract fun ssid(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.WiFi): String?

  abstract fun password(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode.WiFi): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of WiFiApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode.WiFi, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val encryptionTypeArg = encryptionType(pigeon_instanceArg)
      val ssidArg = ssid(pigeon_instanceArg)
      val passwordArg = password(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.WiFiApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, encryptionTypeArg, ssidArg, passwordArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBarcodeApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun boundingBox(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): android.graphics.Rect?

  abstract fun cornerPoints(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): List<android.graphics.Point>?

  abstract fun format(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): BarcodeFormatApi

  abstract fun valueType(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): BarcodeValueTypeApi

  abstract fun rawBytes(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): ByteArray?

  abstract fun rawValue(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): String?

  abstract fun displayValue(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): String?

  abstract fun calendarEvent(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.CalendarEvent?

  abstract fun contactInfo(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.ContactInfo?

  abstract fun driverLicense(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.DriverLicense?

  abstract fun email(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.Email?

  abstract fun geoPoint(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.GeoPoint?

  abstract fun phone(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.Phone?

  abstract fun sms(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.Sms?

  abstract fun url(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.UrlBookmark?

  abstract fun wifi(pigeon_instance: com.google.mlkit.vision.barcode.common.Barcode): com.google.mlkit.vision.barcode.common.Barcode.WiFi?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BarcodeApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.common.Barcode, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val boundingBoxArg = boundingBox(pigeon_instanceArg)
      val cornerPointsArg = cornerPoints(pigeon_instanceArg)
      val formatArg = format(pigeon_instanceArg)
      val valueTypeArg = valueType(pigeon_instanceArg)
      val rawBytesArg = rawBytes(pigeon_instanceArg)
      val rawValueArg = rawValue(pigeon_instanceArg)
      val displayValueArg = displayValue(pigeon_instanceArg)
      val calendarEventArg = calendarEvent(pigeon_instanceArg)
      val contactInfoArg = contactInfo(pigeon_instanceArg)
      val driverLicenseArg = driverLicense(pigeon_instanceArg)
      val emailArg = email(pigeon_instanceArg)
      val geoPointArg = geoPoint(pigeon_instanceArg)
      val phoneArg = phone(pigeon_instanceArg)
      val smsArg = sms(pigeon_instanceArg)
      val urlArg = url(pigeon_instanceArg)
      val wifiArg = wifi(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.BarcodeApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, boundingBoxArg, cornerPointsArg, formatArg, valueTypeArg, rawBytesArg, rawValueArg, displayValueArg, calendarEventArg, contactInfoArg, driverLicenseArg, emailArg, geoPointArg, phoneArg, smsArg, urlArg, wifiArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomCallbackApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomCallbackApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomCallbackApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomCallbackApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              CameraXError("new-instance-error", "Attempting to create a new Dart instance of ZoomCallbackApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun setZoom(pigeon_instanceArg: com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback, zoomRatioArg: Double, callback: (Result<Boolean>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.ZoomCallbackApi.setZoom"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, zoomRatioArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(CameraXError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiZoomSuggestionOptionsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun build(zoomCallback: com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback, maxSupportedZoomRatio: Double?): com.google.mlkit.vision.barcode.ZoomSuggestionOptions

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiZoomSuggestionOptionsApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.ZoomSuggestionOptionsApi.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val zoomCallbackArg = args[1] as com.google.mlkit.vision.barcode.ZoomSuggestionOptions.ZoomCallback
            val maxSupportedZoomRatioArg = args[2] as Double?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(zoomCallbackArg,maxSupportedZoomRatioArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ZoomSuggestionOptionsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.ZoomSuggestionOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.ZoomSuggestionOptionsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBarcodeScannerOptionsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun build(enableAllPotentialBarcodes: Boolean?, formats: List<BarcodeFormatApi>?, zoomSuggestionOptions: com.google.mlkit.vision.barcode.ZoomSuggestionOptions?): com.google.mlkit.vision.barcode.BarcodeScannerOptions

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiBarcodeScannerOptionsApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.BarcodeScannerOptionsApi.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val enableAllPotentialBarcodesArg = args[1] as Boolean?
            val formatsArg = args[2] as List<BarcodeFormatApi>?
            val zoomSuggestionOptionsArg = args[3] as com.google.mlkit.vision.barcode.ZoomSuggestionOptions?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(enableAllPotentialBarcodesArg,formatsArg,zoomSuggestionOptionsArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BarcodeScannerOptionsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.barcode.BarcodeScannerOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.BarcodeScannerOptionsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiMlImageApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MlImageApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.android.odml.image.MlImage, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.MlImageApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiInputImageApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of InputImageApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.common.InputImage, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.InputImageApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBarcodeScannerApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(options: com.google.mlkit.vision.barcode.BarcodeScannerOptions?): dev.hebei.camerax_android.ml.barcode.BarcodeScanner

  abstract fun process0(pigeon_instance: dev.hebei.camerax_android.ml.barcode.BarcodeScanner, image: com.google.android.odml.image.MlImage, callback: (Result<List<com.google.mlkit.vision.barcode.common.Barcode>>) -> Unit)

  abstract fun process1(pigeon_instance: dev.hebei.camerax_android.ml.barcode.BarcodeScanner, image: com.google.mlkit.vision.common.InputImage, callback: (Result<List<com.google.mlkit.vision.barcode.common.Barcode>>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiBarcodeScannerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.BarcodeScannerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val optionsArg = args[1] as com.google.mlkit.vision.barcode.BarcodeScannerOptions?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(optionsArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.BarcodeScannerApi.process0", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.ml.barcode.BarcodeScanner
            val imageArg = args[1] as com.google.android.odml.image.MlImage
            api.process0(pigeon_instanceArg, imageArg) { result: Result<List<com.google.mlkit.vision.barcode.common.Barcode>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.BarcodeScannerApi.process1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.ml.barcode.BarcodeScanner
            val imageArg = args[1] as com.google.mlkit.vision.common.InputImage
            api.process1(pigeon_instanceArg, imageArg) { result: Result<List<com.google.mlkit.vision.barcode.common.Barcode>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BarcodeScannerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.ml.barcode.BarcodeScanner, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.BarcodeScannerApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiDetectorApi] used to access callback methods */
  fun pigeon_getPigeonApiDetectorApi(): PigeonApiDetectorApi
  {
    return pigeonRegistrar.getPigeonApiDetectorApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFaceDetectorOptionsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun build(enableTracking: Boolean?, classificationMode: FaceClassificationModeApi?, contourMode: FaceContourModeApi?, landmarkMode: FaceLandmarkModeApi?, minFaceSize: Double?, performanceMode: FacePerformanceModeApi?): com.google.mlkit.vision.face.FaceDetectorOptions

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFaceDetectorOptionsApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FaceDetectorOptionsApi.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val enableTrackingArg = args[1] as Boolean?
            val classificationModeArg = args[2] as FaceClassificationModeApi?
            val contourModeArg = args[3] as FaceContourModeApi?
            val landmarkModeArg = args[4] as FaceLandmarkModeApi?
            val minFaceSizeArg = args[5] as Double?
            val performanceModeArg = args[6] as FacePerformanceModeApi?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(enableTrackingArg,classificationModeArg,contourModeArg,landmarkModeArg,minFaceSizeArg,performanceModeArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FaceDetectorOptionsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.face.FaceDetectorOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.FaceDetectorOptionsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFaceContourApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun type(pigeon_instance: com.google.mlkit.vision.face.FaceContour): FaceContourTypeApi

  abstract fun points(pigeon_instance: com.google.mlkit.vision.face.FaceContour): List<android.graphics.PointF>

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FaceContourApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.face.FaceContour, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val typeArg = type(pigeon_instanceArg)
      val pointsArg = points(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.FaceContourApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, typeArg, pointsArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFaceLandmarkApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun type(pigeon_instance: com.google.mlkit.vision.face.FaceLandmark): FaceLandmarkTypeApi

  abstract fun position(pigeon_instance: com.google.mlkit.vision.face.FaceLandmark): android.graphics.PointF

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FaceLandmarkApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.face.FaceLandmark, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val typeArg = type(pigeon_instanceArg)
      val positionArg = position(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.FaceLandmarkApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, typeArg, positionArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFaceApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun boundingBox(pigeon_instance: com.google.mlkit.vision.face.Face): android.graphics.Rect

  abstract fun allContours(pigeon_instance: com.google.mlkit.vision.face.Face): List<com.google.mlkit.vision.face.FaceContour>

  abstract fun allLandmarks(pigeon_instance: com.google.mlkit.vision.face.Face): List<com.google.mlkit.vision.face.FaceLandmark>

  abstract fun headEulerAngleX(pigeon_instance: com.google.mlkit.vision.face.Face): Double

  abstract fun headEulerAngleY(pigeon_instance: com.google.mlkit.vision.face.Face): Double

  abstract fun headEulerAngleZ(pigeon_instance: com.google.mlkit.vision.face.Face): Double

  abstract fun leftEyeOpenProbability(pigeon_instance: com.google.mlkit.vision.face.Face): Double?

  abstract fun rightEyeOpenProbability(pigeon_instance: com.google.mlkit.vision.face.Face): Double?

  abstract fun smilingProbability(pigeon_instance: com.google.mlkit.vision.face.Face): Double?

  abstract fun trackingId(pigeon_instance: com.google.mlkit.vision.face.Face): Long?

  abstract fun getContour(pigeon_instance: com.google.mlkit.vision.face.Face, contourType: FaceContourTypeApi): com.google.mlkit.vision.face.FaceContour?

  abstract fun getLandmark(pigeon_instance: com.google.mlkit.vision.face.Face, landmarkType: FaceLandmarkTypeApi): com.google.mlkit.vision.face.FaceLandmark?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFaceApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FaceApi.getContour", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.mlkit.vision.face.Face
            val contourTypeArg = args[1] as FaceContourTypeApi
            val wrapped: List<Any?> = try {
              listOf(api.getContour(pigeon_instanceArg, contourTypeArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FaceApi.getLandmark", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.mlkit.vision.face.Face
            val landmarkTypeArg = args[1] as FaceLandmarkTypeApi
            val wrapped: List<Any?> = try {
              listOf(api.getLandmark(pigeon_instanceArg, landmarkTypeArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FaceApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: com.google.mlkit.vision.face.Face, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val boundingBoxArg = boundingBox(pigeon_instanceArg)
      val allContoursArg = allContours(pigeon_instanceArg)
      val allLandmarksArg = allLandmarks(pigeon_instanceArg)
      val headEulerAngleXArg = headEulerAngleX(pigeon_instanceArg)
      val headEulerAngleYArg = headEulerAngleY(pigeon_instanceArg)
      val headEulerAngleZArg = headEulerAngleZ(pigeon_instanceArg)
      val leftEyeOpenProbabilityArg = leftEyeOpenProbability(pigeon_instanceArg)
      val rightEyeOpenProbabilityArg = rightEyeOpenProbability(pigeon_instanceArg)
      val smilingProbabilityArg = smilingProbability(pigeon_instanceArg)
      val trackingIdArg = trackingId(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.FaceApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, boundingBoxArg, allContoursArg, allLandmarksArg, headEulerAngleXArg, headEulerAngleYArg, headEulerAngleZArg, leftEyeOpenProbabilityArg, rightEyeOpenProbabilityArg, smilingProbabilityArg, trackingIdArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFaceDetectorApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(options: com.google.mlkit.vision.face.FaceDetectorOptions?): dev.hebei.camerax_android.ml.face.FaceDetector

  abstract fun process0(pigeon_instance: dev.hebei.camerax_android.ml.face.FaceDetector, image: com.google.android.odml.image.MlImage, callback: (Result<List<com.google.mlkit.vision.face.Face>>) -> Unit)

  abstract fun process1(pigeon_instance: dev.hebei.camerax_android.ml.face.FaceDetector, image: com.google.mlkit.vision.common.InputImage, callback: (Result<List<com.google.mlkit.vision.face.Face>>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFaceDetectorApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FaceDetectorApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val optionsArg = args[1] as com.google.mlkit.vision.face.FaceDetectorOptions?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(optionsArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FaceDetectorApi.process0", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.ml.face.FaceDetector
            val imageArg = args[1] as com.google.android.odml.image.MlImage
            api.process0(pigeon_instanceArg, imageArg) { result: Result<List<com.google.mlkit.vision.face.Face>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FaceDetectorApi.process1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as dev.hebei.camerax_android.ml.face.FaceDetector
            val imageArg = args[1] as com.google.mlkit.vision.common.InputImage
            api.process1(pigeon_instanceArg, imageArg) { result: Result<List<com.google.mlkit.vision.face.Face>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FaceDetectorApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.ml.face.FaceDetector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.FaceDetectorApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiDetectorApi] used to access callback methods */
  fun pigeon_getPigeonApiDetectorApi(): PigeonApiDetectorApi
  {
    return pigeonRegistrar.getPigeonApiDetectorApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMlKitAnalyzerResultApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun timestamp(pigeon_instance: androidx.camera.mlkit.vision.MlKitAnalyzer.Result): Long

  abstract fun getThrowable(pigeon_instance: androidx.camera.mlkit.vision.MlKitAnalyzer.Result, detector: dev.hebei.camerax_android.ml.Detector): List<Any?>?

  abstract fun getBarcodes(pigeon_instance: androidx.camera.mlkit.vision.MlKitAnalyzer.Result, detector: dev.hebei.camerax_android.ml.barcode.BarcodeScanner): List<com.google.mlkit.vision.barcode.common.Barcode>?

  abstract fun getFaces(pigeon_instance: androidx.camera.mlkit.vision.MlKitAnalyzer.Result, detector: dev.hebei.camerax_android.ml.face.FaceDetector): List<com.google.mlkit.vision.face.Face>?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMlKitAnalyzerResultApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResultApi.getThrowable", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.mlkit.vision.MlKitAnalyzer.Result
            val detectorArg = args[1] as dev.hebei.camerax_android.ml.Detector
            val wrapped: List<Any?> = try {
              listOf(api.getThrowable(pigeon_instanceArg, detectorArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResultApi.getBarcodes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.mlkit.vision.MlKitAnalyzer.Result
            val detectorArg = args[1] as dev.hebei.camerax_android.ml.barcode.BarcodeScanner
            val wrapped: List<Any?> = try {
              listOf(api.getBarcodes(pigeon_instanceArg, detectorArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResultApi.getFaces", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.mlkit.vision.MlKitAnalyzer.Result
            val detectorArg = args[1] as dev.hebei.camerax_android.ml.face.FaceDetector
            val wrapped: List<Any?> = try {
              listOf(api.getFaces(pigeon_instanceArg, detectorArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MlKitAnalyzerResultApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.mlkit.vision.MlKitAnalyzer.Result, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val timestampArg = timestamp(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResultApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, timestampArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMlKitAnalyzerResultConsumerApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.common.MlKitAnalyzerResultConsumer

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMlKitAnalyzerResultConsumerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResultConsumerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MlKitAnalyzerResultConsumerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.MlKitAnalyzerResultConsumer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              CameraXError("new-instance-error", "Attempting to create a new Dart instance of MlKitAnalyzerResultConsumerApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun accept(pigeon_instanceArg: dev.hebei.camerax_android.common.MlKitAnalyzerResultConsumer, valueArg: androidx.camera.mlkit.vision.MlKitAnalyzer.Result, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.MlKitAnalyzerResultConsumerApi.accept"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMlKitAnalyzerApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(detectors: List<dev.hebei.camerax_android.ml.Detector>, targetCoordinateSystem: CoordinateSystemApi, consumer: dev.hebei.camerax_android.common.MlKitAnalyzerResultConsumer): androidx.camera.mlkit.vision.MlKitAnalyzer

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMlKitAnalyzerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.MlKitAnalyzerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val detectorsArg = args[1] as List<dev.hebei.camerax_android.ml.Detector>
            val targetCoordinateSystemArg = args[2] as CoordinateSystemApi
            val consumerArg = args[3] as dev.hebei.camerax_android.common.MlKitAnalyzerResultConsumer
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(detectorsArg,targetCoordinateSystemArg,consumerArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MlKitAnalyzerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.mlkit.vision.MlKitAnalyzer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.MlKitAnalyzerApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAnalyzerApi] used to access callback methods */
  fun pigeon_getPigeonApiAnalyzerApi(): PigeonApiAnalyzerApi
  {
    return pigeonRegistrar.getPigeonApiAnalyzerApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiQualityApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun fhd(): androidx.camera.video.Quality

  abstract fun hd(): androidx.camera.video.Quality

  abstract fun highest(): androidx.camera.video.Quality

  abstract fun lowest(): androidx.camera.video.Quality

  abstract fun sd(): androidx.camera.video.Quality

  abstract fun uhd(): androidx.camera.video.Quality

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiQualityApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualityApi.fhd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.fhd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualityApi.hd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.hd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualityApi.highest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.highest(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualityApi.lowest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.lowest(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualityApi.sd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.sd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualityApi.uhd", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.uhd(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of QualityApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.Quality, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.QualityApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFallbackStrategyApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun higherQualityOrLowerThan(quality: androidx.camera.video.Quality): androidx.camera.video.FallbackStrategy

  abstract fun higherQualityThan(quality: androidx.camera.video.Quality): androidx.camera.video.FallbackStrategy

  abstract fun lowerQualityOrHigherThan(quality: androidx.camera.video.Quality): androidx.camera.video.FallbackStrategy

  abstract fun lowerQualityThan(quality: androidx.camera.video.Quality): androidx.camera.video.FallbackStrategy

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFallbackStrategyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategyApi.higherQualityOrLowerThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as androidx.camera.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.higherQualityOrLowerThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategyApi.higherQualityThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as androidx.camera.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.higherQualityThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategyApi.lowerQualityOrHigherThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as androidx.camera.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.lowerQualityOrHigherThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FallbackStrategyApi.lowerQualityThan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as androidx.camera.video.Quality
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.lowerQualityThan(qualityArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FallbackStrategyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.FallbackStrategy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.FallbackStrategyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiQualitySelectorApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun from(quality: androidx.camera.video.Quality, fallbackStrategy: androidx.camera.video.FallbackStrategy?): androidx.camera.video.QualitySelector

  abstract fun fromOrderedList(qualities: List<androidx.camera.video.Quality>, fallbackStrategy: androidx.camera.video.FallbackStrategy?): androidx.camera.video.QualitySelector

  abstract fun getResolution(cameraInfo: androidx.camera.core.CameraInfo, quality: androidx.camera.video.Quality): android.util.Size?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiQualitySelectorApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelectorApi.from", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualityArg = args[1] as androidx.camera.video.Quality
            val fallbackStrategyArg = args[2] as androidx.camera.video.FallbackStrategy?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.from(qualityArg,fallbackStrategyArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelectorApi.fromOrderedList", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val qualitiesArg = args[1] as List<androidx.camera.video.Quality>
            val fallbackStrategyArg = args[2] as androidx.camera.video.FallbackStrategy?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.fromOrderedList(qualitiesArg,fallbackStrategyArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.QualitySelectorApi.getResolution", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val cameraInfoArg = args[0] as androidx.camera.core.CameraInfo
            val qualityArg = args[1] as androidx.camera.video.Quality
            val wrapped: List<Any?> = try {
              listOf(api.getResolution(cameraInfoArg, qualityArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of QualitySelectorApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.QualitySelector, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.QualitySelectorApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOutputOptionsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun getDurationLimitMillis(pigeon_instance: androidx.camera.video.OutputOptions): Long

  abstract fun getFileSizeLimit(pigeon_instance: androidx.camera.video.OutputOptions): Long

  abstract fun getLocation(pigeon_instance: androidx.camera.video.OutputOptions): android.location.Location?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiOutputOptionsApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.OutputOptionsApi.getDurationLimitMillis", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.OutputOptions
            val wrapped: List<Any?> = try {
              listOf(api.getDurationLimitMillis(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.OutputOptionsApi.getFileSizeLimit", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.OutputOptions
            val wrapped: List<Any?> = try {
              listOf(api.getFileSizeLimit(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.OutputOptionsApi.getLocation", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.OutputOptions
            val wrapped: List<Any?> = try {
              listOf(api.getLocation(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OutputOptionsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.OutputOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.OutputOptionsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFileOutputOptionsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun build(file: String, durationLimitMillis: Long?, fileSizeLimitBytes: Long?, location: android.location.Location?): androidx.camera.video.FileOutputOptions

  abstract fun getFile(pigeon_instance: androidx.camera.video.FileOutputOptions): String

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFileOutputOptionsApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FileOutputOptionsApi.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val fileArg = args[1] as String
            val durationLimitMillisArg = args[2] as Long?
            val fileSizeLimitBytesArg = args[3] as Long?
            val locationArg = args[4] as android.location.Location?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(fileArg,durationLimitMillisArg,fileSizeLimitBytesArg,locationArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.FileOutputOptionsApi.getFile", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.FileOutputOptions
            val wrapped: List<Any?> = try {
              listOf(api.getFile(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FileOutputOptionsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.FileOutputOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.FileOutputOptionsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiOutputOptionsApi] used to access callback methods */
  fun pigeon_getPigeonApiOutputOptionsApi(): PigeonApiOutputOptionsApi
  {
    return pigeonRegistrar.getPigeonApiOutputOptionsApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAudioConfigApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun create(enableAudio: Boolean): androidx.camera.view.video.AudioConfig

  abstract fun audioDisabled(): androidx.camera.view.video.AudioConfig

  abstract fun getAudioEnabled(pigeon_instance: androidx.camera.view.video.AudioConfig): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAudioConfigApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioConfigApi.create", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val enableAudioArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.create(enableAudioArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioConfigApi.audioDisabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.audioDisabled(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.AudioConfigApi.getAudioEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.video.AudioConfig
            val wrapped: List<Any?> = try {
              listOf(api.getAudioEnabled(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AudioConfigApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.view.video.AudioConfig, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.AudioConfigApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAudioStatsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun audioAmplitude(pigeon_instance: androidx.camera.video.AudioStats): Double

  abstract fun audioState(pigeon_instance: androidx.camera.video.AudioStats): AudioStateApi

  abstract fun errorCause(pigeon_instance: androidx.camera.video.AudioStats): List<Any?>?

  abstract fun hasAudio(pigeon_instance: androidx.camera.video.AudioStats): Boolean

  abstract fun hasError(pigeon_instance: androidx.camera.video.AudioStats): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AudioStatsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.AudioStats, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val audioAmplitudeArg = audioAmplitude(pigeon_instanceArg)
      val audioStateArg = audioState(pigeon_instanceArg)
      val errorCauseArg = errorCause(pigeon_instanceArg)
      val hasAudioArg = hasAudio(pigeon_instanceArg)
      val hasErrorArg = hasError(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.AudioStatsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, audioAmplitudeArg, audioStateArg, errorCauseArg, hasAudioArg, hasErrorArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiRecordingStatsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun audioStats(pigeon_instance: androidx.camera.video.RecordingStats): androidx.camera.video.AudioStats

  abstract fun numBytesRecorded(pigeon_instance: androidx.camera.video.RecordingStats): Long

  abstract fun recordedDurationNanos(pigeon_instance: androidx.camera.video.RecordingStats): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of RecordingStatsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.RecordingStats, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val audioStatsArg = audioStats(pigeon_instanceArg)
      val numBytesRecordedArg = numBytesRecorded(pigeon_instanceArg)
      val recordedDurationNanosArg = recordedDurationNanos(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.RecordingStatsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, audioStatsArg, numBytesRecordedArg, recordedDurationNanosArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiVideoRecordEventApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordEventApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordEventApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordStatusEventApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun recordingStats(pigeon_instance: androidx.camera.video.VideoRecordEvent.Status): androidx.camera.video.RecordingStats

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordStatusEventApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent.Status, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val recordingStatsArg = recordingStats(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordStatusEventApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, recordingStatsArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiVideoRecordEventApi] used to access callback methods */
  fun pigeon_getPigeonApiVideoRecordEventApi(): PigeonApiVideoRecordEventApi
  {
    return pigeonRegistrar.getPigeonApiVideoRecordEventApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordStartEventApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun recordingStats(pigeon_instance: androidx.camera.video.VideoRecordEvent.Start): androidx.camera.video.RecordingStats

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordStartEventApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent.Start, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val recordingStatsArg = recordingStats(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordStartEventApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, recordingStatsArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiVideoRecordEventApi] used to access callback methods */
  fun pigeon_getPigeonApiVideoRecordEventApi(): PigeonApiVideoRecordEventApi
  {
    return pigeonRegistrar.getPigeonApiVideoRecordEventApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordPauseEventApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun recordingStats(pigeon_instance: androidx.camera.video.VideoRecordEvent.Pause): androidx.camera.video.RecordingStats

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordPauseEventApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent.Pause, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val recordingStatsArg = recordingStats(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordPauseEventApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, recordingStatsArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiVideoRecordEventApi] used to access callback methods */
  fun pigeon_getPigeonApiVideoRecordEventApi(): PigeonApiVideoRecordEventApi
  {
    return pigeonRegistrar.getPigeonApiVideoRecordEventApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordResumeEventApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun recordingStats(pigeon_instance: androidx.camera.video.VideoRecordEvent.Resume): androidx.camera.video.RecordingStats

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordResumeEventApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent.Resume, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val recordingStatsArg = recordingStats(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordResumeEventApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, recordingStatsArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiVideoRecordEventApi] used to access callback methods */
  fun pigeon_getPigeonApiVideoRecordEventApi(): PigeonApiVideoRecordEventApi
  {
    return pigeonRegistrar.getPigeonApiVideoRecordEventApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiOutputResultsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun outputUri(pigeon_instance: androidx.camera.video.OutputResults): String?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of OutputResultsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.OutputResults, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val outputUriArg = outputUri(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.OutputResultsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, outputUriArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordFinalizeEventApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun recordingStats(pigeon_instance: androidx.camera.video.VideoRecordEvent.Finalize): androidx.camera.video.RecordingStats

  abstract fun cause(pigeon_instance: androidx.camera.video.VideoRecordEvent.Finalize): List<Any?>?

  abstract fun error(pigeon_instance: androidx.camera.video.VideoRecordEvent.Finalize): VideoRecordFinalizeEventErrorApi

  abstract fun outputResults(pigeon_instance: androidx.camera.video.VideoRecordEvent.Finalize): androidx.camera.video.OutputResults

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordFinalizeEventApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.VideoRecordEvent.Finalize, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val recordingStatsArg = recordingStats(pigeon_instanceArg)
      val causeArg = cause(pigeon_instanceArg)
      val errorArg = error(pigeon_instanceArg)
      val outputResultsArg = outputResults(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordFinalizeEventApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg, recordingStatsArg, causeArg, errorArg, outputResultsArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiVideoRecordEventApi] used to access callback methods */
  fun pigeon_getPigeonApiVideoRecordEventApi(): PigeonApiVideoRecordEventApi
  {
    return pigeonRegistrar.getPigeonApiVideoRecordEventApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoRecordEventConsumerApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): dev.hebei.camerax_android.common.VideoRecordEventConsumer

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoRecordEventConsumerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.VideoRecordEventConsumerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoRecordEventConsumerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: dev.hebei.camerax_android.common.VideoRecordEventConsumer, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              CameraXError("new-instance-error", "Attempting to create a new Dart instance of VideoRecordEventConsumerApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun accept(pigeon_instanceArg: dev.hebei.camerax_android.common.VideoRecordEventConsumer, valueArg: androidx.camera.video.VideoRecordEvent, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.camerax_android.VideoRecordEventConsumerApi.accept"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, valueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiRecordingApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun isPersistent(pigeon_instance: androidx.camera.video.Recording): Boolean

  abstract fun mute(pigeon_instance: androidx.camera.video.Recording, muted: Boolean)

  abstract fun pause(pigeon_instance: androidx.camera.video.Recording)

  abstract fun resume(pigeon_instance: androidx.camera.video.Recording)

  abstract fun stop(pigeon_instance: androidx.camera.video.Recording)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiRecordingApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.RecordingApi.isPersistent", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val wrapped: List<Any?> = try {
              listOf(api.isPersistent(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.RecordingApi.mute", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val mutedArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              api.mute(pigeon_instanceArg, mutedArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.RecordingApi.pause", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val wrapped: List<Any?> = try {
              api.pause(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.RecordingApi.resume", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val wrapped: List<Any?> = try {
              api.resume(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.RecordingApi.stop", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.video.Recording
            val wrapped: List<Any?> = try {
              api.stop(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of RecordingApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.video.Recording, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.RecordingApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiAutoCloseableApi] used to access callback methods */
  fun pigeon_getPigeonApiAutoCloseableApi(): PigeonApiAutoCloseableApi
  {
    return pigeonRegistrar.getPigeonApiAutoCloseableApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCameraControllerApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun initialize(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Unit>) -> Unit)

  abstract fun hasCamera(pigeon_instance: androidx.camera.view.CameraController, cameraSelector: androidx.camera.core.CameraSelector, callback: (Result<Boolean>) -> Unit)

  abstract fun getCameraSelector(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.CameraSelector>) -> Unit)

  abstract fun setCameraSelector(pigeon_instance: androidx.camera.view.CameraController, cameraSelector: androidx.camera.core.CameraSelector, callback: (Result<Unit>) -> Unit)

  abstract fun getCameraInfo(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.CameraInfo?>) -> Unit)

  abstract fun getCameraControl(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.CameraControl?>) -> Unit)

  abstract fun getTorchState(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<dev.hebei.camerax_android.common.TorchStateLiveData>) -> Unit)

  abstract fun enableTorch(pigeon_instance: androidx.camera.view.CameraController, torchEnabled: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun getZoomState(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<dev.hebei.camerax_android.common.ZoomStateLiveData>) -> Unit)

  abstract fun setZoomRatio(pigeon_instance: androidx.camera.view.CameraController, zoomRatio: Double, callback: (Result<Unit>) -> Unit)

  abstract fun setLinearZoom(pigeon_instance: androidx.camera.view.CameraController, linearZoom: Double, callback: (Result<Unit>) -> Unit)

  abstract fun isPinchToZoomEnabled(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun setPinchToZoomEnabled(pigeon_instance: androidx.camera.view.CameraController, enabled: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun isTapToFocusEnabled(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun setTapToFocusEnabled(pigeon_instance: androidx.camera.view.CameraController, enabled: Boolean, callback: (Result<Unit>) -> Unit)

  abstract fun isImageCaptureEnabled(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun isImageAnalysisEnabled(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun isVideoCaptureEnabled(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun setEnabledUseCases(pigeon_instance: androidx.camera.view.CameraController, enabledUseCases: List<UseCaseApi>, callback: (Result<Unit>) -> Unit)

  abstract fun getPreviewResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.resolutionselector.ResolutionSelector?>) -> Unit)

  abstract fun setPreviewResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, resolutionSelector: androidx.camera.core.resolutionselector.ResolutionSelector?, callback: (Result<Unit>) -> Unit)

  abstract fun getImageCaptureResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.resolutionselector.ResolutionSelector?>) -> Unit)

  abstract fun setImageCaptureResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, resolutionSelector: androidx.camera.core.resolutionselector.ResolutionSelector?, callback: (Result<Unit>) -> Unit)

  abstract fun getImageCaptureMode(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<CaptureModeApi>) -> Unit)

  abstract fun setImageCaptureMode(pigeon_instance: androidx.camera.view.CameraController, captureMode: CaptureModeApi, callback: (Result<Unit>) -> Unit)

  abstract fun getImageCaptureFlashMode(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<FlashModeApi>) -> Unit)

  abstract fun setImageCaptureFlashMode(pigeon_instance: androidx.camera.view.CameraController, flashMode: FlashModeApi, callback: (Result<Unit>) -> Unit)

  abstract fun takePictureToMemory(pigeon_instance: androidx.camera.view.CameraController, capturedCallback: androidx.camera.core.ImageCapture.OnImageCapturedCallback, callback: (Result<Unit>) -> Unit)

  abstract fun takePictureToFile(pigeon_instance: androidx.camera.view.CameraController, outputFileOptions: androidx.camera.core.ImageCapture.OutputFileOptions, savedCallback: androidx.camera.core.ImageCapture.OnImageSavedCallback, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.resolutionselector.ResolutionSelector?>) -> Unit)

  abstract fun setImageAnalysisResolutionSelector(pigeon_instance: androidx.camera.view.CameraController, resolutionSelector: androidx.camera.core.resolutionselector.ResolutionSelector?, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisBackpressureStrategy(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<BackpressureStrategyApi>) -> Unit)

  abstract fun setImageAnalysisBackpressureStrategy(pigeon_instance: androidx.camera.view.CameraController, strategy: BackpressureStrategyApi, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisImageQueueDepth(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Long>) -> Unit)

  abstract fun setImageAnalysisImageQueueDepth(pigeon_instance: androidx.camera.view.CameraController, depth: Long, callback: (Result<Unit>) -> Unit)

  abstract fun getImageAnalysisOutputImageFormat(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<ImageFormatApi>) -> Unit)

  abstract fun setImageAnalysisOutputImageFormat(pigeon_instance: androidx.camera.view.CameraController, imageAnalysisOutputImageFormat: ImageFormatApi, callback: (Result<Unit>) -> Unit)

  abstract fun setImageAnalysisAnalyzer(pigeon_instance: androidx.camera.view.CameraController, analyzer: androidx.camera.core.ImageAnalysis.Analyzer, callback: (Result<Unit>) -> Unit)

  abstract fun clearImageAnalysisAnalyzer(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureDynamicRange(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.core.DynamicRange>) -> Unit)

  abstract fun setVideoCaptureDynamicRange(pigeon_instance: androidx.camera.view.CameraController, dynamicRange: androidx.camera.core.DynamicRange, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureMirrorMode(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<MirrorModeApi>) -> Unit)

  abstract fun setVideoCaptureMirrorMode(pigeon_instance: androidx.camera.view.CameraController, mirrorMode: MirrorModeApi, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureQualitySelector(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<androidx.camera.video.QualitySelector>) -> Unit)

  abstract fun setVideoCaptureQualitySelector(pigeon_instance: androidx.camera.view.CameraController, qualitySelector: androidx.camera.video.QualitySelector, callback: (Result<Unit>) -> Unit)

  abstract fun getVideoCaptureTargetFrameRate(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<dev.hebei.camerax_android.common.IntRange>) -> Unit)

  abstract fun setVideoCaptureTargetFrameRate(pigeon_instance: androidx.camera.view.CameraController, targetFrameRate: dev.hebei.camerax_android.common.IntRange, callback: (Result<Unit>) -> Unit)

  abstract fun isRecording(pigeon_instance: androidx.camera.view.CameraController, callback: (Result<Boolean>) -> Unit)

  abstract fun startRecording(pigeon_instance: androidx.camera.view.CameraController, outputOptions: androidx.camera.video.FileOutputOptions, audioConfig: androidx.camera.view.video.AudioConfig, listener: dev.hebei.camerax_android.common.VideoRecordEventConsumer, callback: (Result<androidx.camera.video.Recording>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCameraControllerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.initialize(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.hasCamera", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val cameraSelectorArg = args[1] as androidx.camera.core.CameraSelector
            api.hasCamera(pigeon_instanceArg, cameraSelectorArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getCameraSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getCameraSelector(pigeon_instanceArg) { result: Result<androidx.camera.core.CameraSelector> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setCameraSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val cameraSelectorArg = args[1] as androidx.camera.core.CameraSelector
            api.setCameraSelector(pigeon_instanceArg, cameraSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getCameraInfo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getCameraInfo(pigeon_instanceArg) { result: Result<androidx.camera.core.CameraInfo?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getCameraControl", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getCameraControl(pigeon_instanceArg) { result: Result<androidx.camera.core.CameraControl?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getTorchState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getTorchState(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.common.TorchStateLiveData> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.enableTorch", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val torchEnabledArg = args[1] as Boolean
            api.enableTorch(pigeon_instanceArg, torchEnabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getZoomState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getZoomState(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.common.ZoomStateLiveData> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setZoomRatio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val zoomRatioArg = args[1] as Double
            api.setZoomRatio(pigeon_instanceArg, zoomRatioArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setLinearZoom", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val linearZoomArg = args[1] as Double
            api.setLinearZoom(pigeon_instanceArg, linearZoomArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.isPinchToZoomEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isPinchToZoomEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setPinchToZoomEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val enabledArg = args[1] as Boolean
            api.setPinchToZoomEnabled(pigeon_instanceArg, enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.isTapToFocusEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isTapToFocusEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setTapToFocusEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val enabledArg = args[1] as Boolean
            api.setTapToFocusEnabled(pigeon_instanceArg, enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.isImageCaptureEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isImageCaptureEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.isImageAnalysisEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isImageAnalysisEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.isVideoCaptureEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isVideoCaptureEnabled(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setEnabledUseCases", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val enabledUseCasesArg = args[1] as List<UseCaseApi>
            api.setEnabledUseCases(pigeon_instanceArg, enabledUseCasesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getPreviewResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getPreviewResolutionSelector(pigeon_instanceArg) { result: Result<androidx.camera.core.resolutionselector.ResolutionSelector?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setPreviewResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val resolutionSelectorArg = args[1] as androidx.camera.core.resolutionselector.ResolutionSelector?
            api.setPreviewResolutionSelector(pigeon_instanceArg, resolutionSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getImageCaptureResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageCaptureResolutionSelector(pigeon_instanceArg) { result: Result<androidx.camera.core.resolutionselector.ResolutionSelector?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setImageCaptureResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val resolutionSelectorArg = args[1] as androidx.camera.core.resolutionselector.ResolutionSelector?
            api.setImageCaptureResolutionSelector(pigeon_instanceArg, resolutionSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getImageCaptureMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageCaptureMode(pigeon_instanceArg) { result: Result<CaptureModeApi> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setImageCaptureMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val captureModeArg = args[1] as CaptureModeApi
            api.setImageCaptureMode(pigeon_instanceArg, captureModeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getImageCaptureFlashMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageCaptureFlashMode(pigeon_instanceArg) { result: Result<FlashModeApi> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setImageCaptureFlashMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val flashModeArg = args[1] as FlashModeApi
            api.setImageCaptureFlashMode(pigeon_instanceArg, flashModeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.takePictureToMemory", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val capturedCallbackArg = args[1] as androidx.camera.core.ImageCapture.OnImageCapturedCallback
            api.takePictureToMemory(pigeon_instanceArg, capturedCallbackArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.takePictureToFile", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val outputFileOptionsArg = args[1] as androidx.camera.core.ImageCapture.OutputFileOptions
            val savedCallbackArg = args[2] as androidx.camera.core.ImageCapture.OnImageSavedCallback
            api.takePictureToFile(pigeon_instanceArg, outputFileOptionsArg, savedCallbackArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getImageAnalysisResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageAnalysisResolutionSelector(pigeon_instanceArg) { result: Result<androidx.camera.core.resolutionselector.ResolutionSelector?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setImageAnalysisResolutionSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val resolutionSelectorArg = args[1] as androidx.camera.core.resolutionselector.ResolutionSelector?
            api.setImageAnalysisResolutionSelector(pigeon_instanceArg, resolutionSelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getImageAnalysisBackpressureStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageAnalysisBackpressureStrategy(pigeon_instanceArg) { result: Result<BackpressureStrategyApi> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setImageAnalysisBackpressureStrategy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val strategyArg = args[1] as BackpressureStrategyApi
            api.setImageAnalysisBackpressureStrategy(pigeon_instanceArg, strategyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getImageAnalysisImageQueueDepth", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageAnalysisImageQueueDepth(pigeon_instanceArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setImageAnalysisImageQueueDepth", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val depthArg = args[1] as Long
            api.setImageAnalysisImageQueueDepth(pigeon_instanceArg, depthArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getImageAnalysisOutputImageFormat", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getImageAnalysisOutputImageFormat(pigeon_instanceArg) { result: Result<ImageFormatApi> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setImageAnalysisOutputImageFormat", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val imageAnalysisOutputImageFormatArg = args[1] as ImageFormatApi
            api.setImageAnalysisOutputImageFormat(pigeon_instanceArg, imageAnalysisOutputImageFormatArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setImageAnalysisAnalyzer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val analyzerArg = args[1] as androidx.camera.core.ImageAnalysis.Analyzer
            api.setImageAnalysisAnalyzer(pigeon_instanceArg, analyzerArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.clearImageAnalysisAnalyzer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.clearImageAnalysisAnalyzer(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getVideoCaptureDynamicRange", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getVideoCaptureDynamicRange(pigeon_instanceArg) { result: Result<androidx.camera.core.DynamicRange> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setVideoCaptureDynamicRange", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val dynamicRangeArg = args[1] as androidx.camera.core.DynamicRange
            api.setVideoCaptureDynamicRange(pigeon_instanceArg, dynamicRangeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getVideoCaptureMirrorMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getVideoCaptureMirrorMode(pigeon_instanceArg) { result: Result<MirrorModeApi> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setVideoCaptureMirrorMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val mirrorModeArg = args[1] as MirrorModeApi
            api.setVideoCaptureMirrorMode(pigeon_instanceArg, mirrorModeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getVideoCaptureQualitySelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getVideoCaptureQualitySelector(pigeon_instanceArg) { result: Result<androidx.camera.video.QualitySelector> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setVideoCaptureQualitySelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val qualitySelectorArg = args[1] as androidx.camera.video.QualitySelector
            api.setVideoCaptureQualitySelector(pigeon_instanceArg, qualitySelectorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.getVideoCaptureTargetFrameRate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.getVideoCaptureTargetFrameRate(pigeon_instanceArg) { result: Result<dev.hebei.camerax_android.common.IntRange> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.setVideoCaptureTargetFrameRate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val targetFrameRateArg = args[1] as dev.hebei.camerax_android.common.IntRange
            api.setVideoCaptureTargetFrameRate(pigeon_instanceArg, targetFrameRateArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.isRecording", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            api.isRecording(pigeon_instanceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CameraControllerApi.startRecording", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.CameraController
            val outputOptionsArg = args[1] as androidx.camera.video.FileOutputOptions
            val audioConfigArg = args[2] as androidx.camera.view.video.AudioConfig
            val listenerArg = args[3] as dev.hebei.camerax_android.common.VideoRecordEventConsumer
            api.startRecording(pigeon_instanceArg, outputOptionsArg, audioConfigArg, listenerArg) { result: Result<androidx.camera.video.Recording> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CameraControllerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.view.CameraController, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.CameraControllerApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiLifecycleCameraControllerApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.view.LifecycleCameraController

  abstract fun bindToLifecycle(pigeon_instance: androidx.camera.view.LifecycleCameraController, callback: (Result<Unit>) -> Unit)

  abstract fun unbind(pigeon_instance: androidx.camera.view.LifecycleCameraController, callback: (Result<Unit>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiLifecycleCameraControllerApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LifecycleCameraControllerApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LifecycleCameraControllerApi.bindToLifecycle", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.LifecycleCameraController
            api.bindToLifecycle(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.LifecycleCameraControllerApi.unbind", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.LifecycleCameraController
            api.unbind(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of LifecycleCameraControllerApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.view.LifecycleCameraController, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.LifecycleCameraControllerApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiCameraControllerApi] used to access callback methods */
  fun pigeon_getPigeonApiCameraControllerApi(): PigeonApiCameraControllerApi
  {
    return pigeonRegistrar.getPigeonApiCameraControllerApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiPreviewViewApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): androidx.camera.view.PreviewView

  abstract fun getController(pigeon_instance: androidx.camera.view.PreviewView, callback: (Result<androidx.camera.view.CameraController?>) -> Unit)

  abstract fun setController(pigeon_instance: androidx.camera.view.PreviewView, controller: androidx.camera.view.CameraController?, callback: (Result<Unit>) -> Unit)

  abstract fun getScaleType(pigeon_instance: androidx.camera.view.PreviewView, callback: (Result<ScaleTypeApi>) -> Unit)

  abstract fun setScaleType(pigeon_instance: androidx.camera.view.PreviewView, scaleType: ScaleTypeApi, callback: (Result<Unit>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiPreviewViewApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewViewApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewViewApi.getController", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.PreviewView
            api.getController(pigeon_instanceArg) { result: Result<androidx.camera.view.CameraController?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewViewApi.setController", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.PreviewView
            val controllerArg = args[1] as androidx.camera.view.CameraController?
            api.setController(pigeon_instanceArg, controllerArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewViewApi.getScaleType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.PreviewView
            api.getScaleType(pigeon_instanceArg) { result: Result<ScaleTypeApi> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(CameraXApiPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.PreviewViewApi.setScaleType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.view.PreviewView
            val scaleTypeArg = args[1] as ScaleTypeApi
            api.setScaleType(pigeon_instanceArg, scaleTypeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of PreviewViewApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.view.PreviewView, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.PreviewViewApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCamera2CameraControlApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun from(cameraControl: androidx.camera.core.CameraControl): androidx.camera.camera2.interop.Camera2CameraControl

  abstract fun addCaptureRequestOptions(pigeon_instance: androidx.camera.camera2.interop.Camera2CameraControl, bundle: androidx.camera.camera2.interop.CaptureRequestOptions, callback: (Result<Unit>) -> Unit)

  abstract fun clearCaptureRequestOptions(pigeon_instance: androidx.camera.camera2.interop.Camera2CameraControl, callback: (Result<Unit>) -> Unit)

  abstract fun getCaptureRequestOptions(pigeon_instance: androidx.camera.camera2.interop.Camera2CameraControl): androidx.camera.camera2.interop.CaptureRequestOptions

  abstract fun setCaptureRequestOptions(pigeon_instance: androidx.camera.camera2.interop.Camera2CameraControl, bundle: androidx.camera.camera2.interop.CaptureRequestOptions, callback: (Result<Unit>) -> Unit)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCamera2CameraControlApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Camera2CameraControlApi.from", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val cameraControlArg = args[1] as androidx.camera.core.CameraControl
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.from(cameraControlArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Camera2CameraControlApi.addCaptureRequestOptions", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.camera2.interop.Camera2CameraControl
            val bundleArg = args[1] as androidx.camera.camera2.interop.CaptureRequestOptions
            api.addCaptureRequestOptions(pigeon_instanceArg, bundleArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Camera2CameraControlApi.clearCaptureRequestOptions", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.camera2.interop.Camera2CameraControl
            api.clearCaptureRequestOptions(pigeon_instanceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Camera2CameraControlApi.getCaptureRequestOptions", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.camera2.interop.Camera2CameraControl
            val wrapped: List<Any?> = try {
              listOf(api.getCaptureRequestOptions(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Camera2CameraControlApi.setCaptureRequestOptions", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.camera2.interop.Camera2CameraControl
            val bundleArg = args[1] as androidx.camera.camera2.interop.CaptureRequestOptions
            api.setCaptureRequestOptions(pigeon_instanceArg, bundleArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(CameraXApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(CameraXApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Camera2CameraControlApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.camera2.interop.Camera2CameraControl, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.Camera2CameraControlApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCamera2CameraInfoApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun from(cameraInfo: androidx.camera.core.CameraInfo): androidx.camera.camera2.interop.Camera2CameraInfo

  abstract fun getSensorInfoExposureTimeRange(pigeon_instance: androidx.camera.camera2.interop.Camera2CameraInfo): dev.hebei.camerax_android.common.LongRange?

  abstract fun getCameraId(pigeon_instance: androidx.camera.camera2.interop.Camera2CameraInfo): String

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCamera2CameraInfoApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Camera2CameraInfoApi.from", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val cameraInfoArg = args[1] as androidx.camera.core.CameraInfo
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.from(cameraInfoArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Camera2CameraInfoApi.getSensorInfoExposureTimeRange", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.camera2.interop.Camera2CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getSensorInfoExposureTimeRange(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.Camera2CameraInfoApi.getCameraId", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as androidx.camera.camera2.interop.Camera2CameraInfo
            val wrapped: List<Any?> = try {
              listOf(api.getCameraId(pigeon_instanceArg))
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Camera2CameraInfoApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.camera2.interop.Camera2CameraInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.Camera2CameraInfoApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCaptureRequestOptionsApi(open val pigeonRegistrar: CameraXApiPigeonProxyApiRegistrar) {
  abstract fun build(mode: ControlModeApi?, aeMode: ControlAeModeApi?, afMode: ControlAfModeApi?, awbMode: ControlAwbModeApi?, sensorExposureTime: Long?): androidx.camera.camera2.interop.CaptureRequestOptions

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCaptureRequestOptionsApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: CameraXApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.camerax_android.CaptureRequestOptionsApi.build", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val modeArg = args[1] as ControlModeApi?
            val aeModeArg = args[2] as ControlAeModeApi?
            val afModeArg = args[3] as ControlAfModeApi?
            val awbModeArg = args[4] as ControlAwbModeApi?
            val sensorExposureTimeArg = args[5] as Long?
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.build(modeArg,aeModeArg,afModeArg,awbModeArg,sensorExposureTimeArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              CameraXApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CaptureRequestOptionsApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: androidx.camera.camera2.interop.CaptureRequestOptions, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              CameraXError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.camerax_android.CaptureRequestOptionsApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(CameraXError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(CameraXApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
